<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" media="screen" href="/styles/xslt/rss.xslt"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:c9="http://channel9.msdn.com">
<channel>
	<title>CppCon 2017 Sessions (HD)</title>
    <atom:link rel="self" type="application/rss+xml" href="https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high"></atom:link>
    <generator>Rev9</generator>
    <description>Sessions for CppCon 2017</description>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017</link>
    <language>en</language>
		<media:thumbnail url="https://f.ch9.ms/thumbnail/59667fbe-9a65-4bef-8b91-e26fe4441711.png" height="165" width="220"></media:thumbnail>
  <item>
    <title>C++17 Features (part 1 of 2)</title>
    <description><![CDATA[The feature set for the C&#43;&#43;17 release is set, and the release of the standard is just around the corner. In this session, we'll discuss all the new C&#43;&#43; features in C&#43;&#43;17 and how they'll change the way we write C&#43;&#43; software. We'll explore the new standard in breath, not width, covering a cornucopia of core language and library features and fixes: Language Changes (part 1): Structured bindings Selection statements with initializers Compile-time conditional statments Fold expressions Class template deduction auto non-type template parameters inline variables constexpr lambdas Unary static_assert Guaranteed copy elision Nested namespace definitions Preprocessor predicate for header testing Library Changes (part 2): string_view optional variant any Parallel algorithms Filesystem support Polymorphic allocators and memory resources Aligned new Improved insertion and splicing for associative containers Math special functions Variable templates for metafunctions Boolean logic metafunctions  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6151f985c3f94798bfc4a86000019469">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/136</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/136</link>
    <itunes:summary>The feature set for the C&amp;#43;&amp;#43;17 release is set, and the release of the standard is just around the corner. In this session, we&#39;ll discuss all the new C&amp;#43;&amp;#43; features in C&amp;#43;&amp;#43;17 and how they&#39;ll change the way we write C&amp;#43;&amp;#43; software. We&#39;ll explore the new standard in breath, not width, covering a cornucopia of core language and library features and fixes: Language Changes (part 1): Structured bindings Selection statements with initializers Compile-time conditional statments Fold expressions Class template deduction auto non-type template parameters inline variables constexpr lambdas Unary static_assert Guaranteed copy elision Nested namespace definitions Preprocessor predicate for header testing Library Changes (part 2): string_view optional variant any Parallel algorithms Filesystem support Polymorphic allocators and memory resources Aligned new Improved insertion and splicing for associative containers Math special functions Variable templates for metafunctions Boolean logic metafunctions </itunes:summary>
    <itunes:duration>2939</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:27:56 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/136</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136_high.mp4" length="608279302" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136.mp3" expression="full" duration="2939" fileSize="47027517" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136.mp4" expression="full" duration="2939" fileSize="60425190" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136_high.mp4" expression="full" duration="2939" fileSize="608279302" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b87/c8aede5b-d3fb-4a2b-8272-b1d113952b87/136_mid.mp4" expression="full" duration="2939" fileSize="160662397" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-Lelbach.mp4" expression="full" duration="2939" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++17 Features (part 2 of 2)</title>
    <description><![CDATA[The feature set for the C&#43;&#43;17 release is set, and the release of the standard is just around the corner. In this session, we'll discuss all the new C&#43;&#43; features in C&#43;&#43;17 and how they'll change the way we write C&#43;&#43; software. We'll explore the new standard in breath, not width, covering a cornucopia of core language and library features and fixes: Language Changes (part 1): Structured bindings Selection statements with initializers Compile-time conditional statments Fold expressions Class template deduction auto non-type template parameters inline variables constexpr lambdas Unary static_assert Guaranteed copy elision Nested namespace definitions Preprocessor predicate for header testing Library Changes (part 2): string_view optional variant any Parallel algorithms Filesystem support Polymorphic allocators and memory resources Aligned new Improved insertion and splicing for associative containers Math special functions Variable templates for metafunctions Boolean logic metafunctions  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6b74b68beb5d4de3b99ba86000019545">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/137</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/137</link>
    <itunes:summary>The feature set for the C&amp;#43;&amp;#43;17 release is set, and the release of the standard is just around the corner. In this session, we&#39;ll discuss all the new C&amp;#43;&amp;#43; features in C&amp;#43;&amp;#43;17 and how they&#39;ll change the way we write C&amp;#43;&amp;#43; software. We&#39;ll explore the new standard in breath, not width, covering a cornucopia of core language and library features and fixes: Language Changes (part 1): Structured bindings Selection statements with initializers Compile-time conditional statments Fold expressions Class template deduction auto non-type template parameters inline variables constexpr lambdas Unary static_assert Guaranteed copy elision Nested namespace definitions Preprocessor predicate for header testing Library Changes (part 2): string_view optional variant any Parallel algorithms Filesystem support Polymorphic allocators and memory resources Aligned new Improved insertion and splicing for associative containers Math special functions Variable templates for metafunctions Boolean logic metafunctions </itunes:summary>
    <itunes:duration>3265</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:27:20 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/137</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137_high.mp4" length="738991796" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137.mp3" expression="full" duration="3265" fileSize="52255693" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137.mp4" expression="full" duration="3265" fileSize="64854376" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137_high.mp4" expression="full" duration="3265" fileSize="738991796" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e5d4/5bbb8afc-34c5-4a16-a5fc-7fc61652e5d4/137_mid.mp4" expression="full" duration="3265" fileSize="173321545" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-Lelbach.mp4" expression="full" duration="3265" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Runtime Polymorphism: Back to the Basics</title>
    <description><![CDATA[C&#43;&#43; solves the problem of runtime polymorphism in a very specific way. It does so through inheritance, by having all classes that will be used polymorphically inherit from the same base class, and then using a table of function pointers (the virtual table) to perform dynamic dispatch when a method is called. Polymorphic objects are then accessed through pointers to their base class, which encourages storing objects on the heap and accessing them via pointers. This is both inconvenient and inefficient when compared to traditional value semantics. As Sean Parent said: Inheritance is the base class of evil. It turns out that this is only one of many possible designs, each of which has different tradeoffs and characteristics. This talk will explore the design space for runtime polymorphism in C&#43;&#43;, and in particular will introduce a policy-based approach to solving the problem. We will see how this approach enables runtime polymorphism with stack-allocated storage, heap-allocated storage, shared storage, no storage at all (reference semantics), and more. We will also see how we can get fine-grained control over the dispatch mechanism to beat the performance of classic virtual tables in some cases. The examples will be based on a real implementation in the Dyno library [1], but the principles are independent from the library. At the end of the talk, the audience will walk out with a clear understanding of the different ways of implementing runtime polymorphism, their tradeoffs, and with guidelines on when to use one implementation or another. [1]: https://github.com/ldionne/dyno  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9b2df4e2498c4eaeade2a860000193bc">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/135</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/135</link>
    <itunes:summary>C&amp;#43;&amp;#43; solves the problem of runtime polymorphism in a very specific way. It does so through inheritance, by having all classes that will be used polymorphically inherit from the same base class, and then using a table of function pointers (the virtual table) to perform dynamic dispatch when a method is called. Polymorphic objects are then accessed through pointers to their base class, which encourages storing objects on the heap and accessing them via pointers. This is both inconvenient and inefficient when compared to traditional value semantics. As Sean Parent said: Inheritance is the base class of evil. It turns out that this is only one of many possible designs, each of which has different tradeoffs and characteristics. This talk will explore the design space for runtime polymorphism in C&amp;#43;&amp;#43;, and in particular will introduce a policy-based approach to solving the problem. We will see how this approach enables runtime polymorphism with stack-allocated storage, heap-allocated storage, shared storage, no storage at all (reference semantics), and more. We will also see how we can get fine-grained control over the dispatch mechanism to beat the performance of classic virtual tables in some cases. The examples will be based on a real implementation in the Dyno library [1], but the principles are independent from the library. At the end of the talk, the audience will walk out with a clear understanding of the different ways of implementing runtime polymorphism, their tradeoffs, and with guidelines on when to use one implementation or another. [1]: https://github.com/ldionne/dyno </itunes:summary>
    <itunes:duration>4083</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:25:44 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/135</guid>
    <dc:creator>Louis Dionne</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135_high.mp4" length="1153507387" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135.mp3" expression="full" duration="4083" fileSize="65344325" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135.mp4" expression="full" duration="4083" fileSize="101838150" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135_high.mp4" expression="full" duration="4083" fileSize="1153507387" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe96/d1145c96-4e9d-42ff-a6be-9341e710fe96/135_mid.mp4" expression="full" duration="4083" fileSize="312780011" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Dionne_v4.mp4" expression="full" duration="4083" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Multidimensional Index Sets for Data Locality in HPC Applications</title>
    <description><![CDATA[The proposed range concepts for the standard library are a significant improvement but are designed for the mental model of iterating and mapping values, not hierarchical domain decomposition. Even for a seemingly trivial array there are countless ways to partition and store its elements in distributed memory, and algorithms are required to behave and scale identically for all of them. It also does not help that most applications operate on multidimensional data structures where efficient access to neighborhood regions is crucial. Among HPC developers, it is therefore widely accepted that canonical iteration space and physical memory layout must be specified as separate concepts. For this, we use views based on multidimensional index sets, inspired by the proposed range concepts. In this session, we will explain the challenges when distributing container elements for thousands of cores and how modern C&#43;&#43; allows to achieve portable efficiency. As an HPC afficionado, you know you want this: copy( matrix_a | local() | block({ 2,3 }), matrix_b | block({ 4,5 }) ) If this does not look familiar to you: we give a gentle introduction to High Performance Computing along the way.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:892aca34415242f0b4e3a8620157a8b1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/126</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/126</link>
    <itunes:summary>The proposed range concepts for the standard library are a significant improvement but are designed for the mental model of iterating and mapping values, not hierarchical domain decomposition. Even for a seemingly trivial array there are countless ways to partition and store its elements in distributed memory, and algorithms are required to behave and scale identically for all of them. It also does not help that most applications operate on multidimensional data structures where efficient access to neighborhood regions is crucial. Among HPC developers, it is therefore widely accepted that canonical iteration space and physical memory layout must be specified as separate concepts. For this, we use views based on multidimensional index sets, inspired by the proposed range concepts. In this session, we will explain the challenges when distributing container elements for thousands of cores and how modern C&amp;#43;&amp;#43; allows to achieve portable efficiency. As an HPC afficionado, you know you want this: copy( matrix_a | local() | block({ 2,3 }), matrix_b | block({ 4,5 }) ) If this does not look familiar to you: we give a gentle introduction to High Performance Computing along the way. </itunes:summary>
    <itunes:duration>3465</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:20:59 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/126</guid>
    <dc:creator>Tobias Fuchs</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126_high.mp4" length="1196816481" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126.mp3" expression="full" duration="3465" fileSize="55447547" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126.mp4" expression="full" duration="3465" fileSize="84853973" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126_high.mp4" expression="full" duration="3465" fileSize="1196816481" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1f71/62e6bb3b-d1b0-481b-9053-7bb14c641f71/126_mid.mp4" expression="full" duration="3465" fileSize="285301134" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Fuchs.mp4" expression="full" duration="3465" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Undefined Behaviour is awesome!</title>
    <description><![CDATA[Undefined behavior (UB) is one of the features of C&#43;&#43; that is both loved and hated. Every C&#43;&#43; developer cares about performance, which is why it is very important to understand what the compiler can optimize and what are the language guarantees. Many times programmers are too optimistic about what the compiler can optimize, or they waste time optimizing code by hand. In this talk you will learn: - what is the “as-if” rule - why compilers know less than the programmer — the main problem with Translation Units - why compilers optimize based on UB, but don't warn about it - why Undefined Behavior can transcend time, removing your whole code without running 88mph - why having a more constrained language is better — optimizations that you can’t do in C  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5bf04c8bade14d3b932ea8620157a96d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/134</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/134</link>
    <itunes:summary>Undefined behavior (UB) is one of the features of C&amp;#43;&amp;#43; that is both loved and hated. Every C&amp;#43;&amp;#43; developer cares about performance, which is why it is very important to understand what the compiler can optimize and what are the language guarantees. Many times programmers are too optimistic about what the compiler can optimize, or they waste time optimizing code by hand. In this talk you will learn: - what is the “as-if” rule - why compilers know less than the programmer — the main problem with Translation Units - why compilers optimize based on UB, but don&#39;t warn about it - why Undefined Behavior can transcend time, removing your whole code without running 88mph - why having a more constrained language is better — optimizations that you can’t do in C </itunes:summary>
    <itunes:duration>3238</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:20:19 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/134</guid>
    <dc:creator>Piotr Padlewski</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>compiler</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134_high.mp4" length="1073644622" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134.mp3" expression="full" duration="3238" fileSize="51824449" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134.mp4" expression="full" duration="3238" fileSize="102537642" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134_high.mp4" expression="full" duration="3238" fileSize="1073644622" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f9e7/581fa864-b8ae-454b-99cb-4bc1d472f9e7/134_mid.mp4" expression="full" duration="3238" fileSize="333138081" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Padlewski_v2.mp4" expression="full" duration="3238" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How to break an ABI and keep your users happy</title>
    <description><![CDATA[Technical debt is the bane of most established libraries, whether it is standard library or boost or local library developed in house. Paying this debt is expensive and in many cases seems infeasible. As a result of several (justified at the time) decisions Google accumulated serious technical debt in how we use std::string. This became a blocking issue in our effort to open source Google’s common libraries. To fix this we needed to break libstdc&#43;&#43; std::string ABI. This is the story of how we survived it kept Google still running.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:16ac9239d5c44450a716a86000019342">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/133</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/133</link>
    <itunes:summary>Technical debt is the bane of most established libraries, whether it is standard library or boost or local library developed in house. Paying this debt is expensive and in many cases seems infeasible. As a result of several (justified at the time) decisions Google accumulated serious technical debt in how we use std::string. This became a blocking issue in our effort to open source Google’s common libraries. To fix this we needed to break libstdc&amp;#43;&amp;#43; std::string ABI. This is the story of how we survived it kept Google still running. </itunes:summary>
    <itunes:duration>2982</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:15:29 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/133</guid>
    <dc:creator>Gennadiy Rozental</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133_high.mp4" length="1064329596" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133.mp3" expression="full" duration="2982" fileSize="47719515" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133.mp4" expression="full" duration="2982" fileSize="70554963" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133_high.mp4" expression="full" duration="2982" fileSize="1064329596" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/84a4/1e8c0bdb-0270-4e2e-acea-5c49656284a4/133_mid.mp4" expression="full" duration="2982" fileSize="244477455" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Rozental_v2.mp4" expression="full" duration="2982" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++17 ParallelSTL: A Standardization Experience Report for CPU and GPU on SYCL</title>
    <description><![CDATA[The most significant improvement in C&#43;&#43;17 will be Parallel Algorithms in the STL. But it is meant only for CPUs, as C&#43;&#43; does not define heterogeneous devices yet (though SG14 is working on that). How would you like to learn how to run Parallel STL algorithms on both CPU and GPU? Parallel STL is an implementation of the Technical Specification for C&#43;&#43; Extensions for Parallelism for both CPU and GPU with SYCL Heterogeneous C&#43;&#43; language. This technical specification describes a set of requirements for implementations of an interface that C&#43;&#43; programs may use to invoke algorithms with parallel execution. In practice, this specification allows users to specify execution policies to traditional STL algorithms which will enable the execution of those algorithms in parallel. The various policies can specify different kinds of parallel execution. For example, std::vector＜int＞ v = ... // Traditional sequential sort: std::sort(vec.begin(), vec.end()); // Explicit sequential sort: std::sort(seq, vec.begin(), vec.end()); // Explicit parallel sort if possible: std::sort(par, vec.begin(), vec.end()); // Explicit parallel and vectorized sort if possible: std::sort(par_unseq, vec.begin(), vec.end()); So how does a Technical Specification become a Standard? As it turns out, in this case, not without harrowing twists and turns worthy of an Agatha Christie novel. This talk will also be the story behind the C&#43;&#43;17 standardization process of the Parallelism TS and why we made so many changes. While it started life as a Technical Specification (TS), did you know all the changes we made to it before we added it to C&#43;&#43;17 and why? For example, we changed the names of the execution policies, removed exception handling support, disabled dynamic execution, unified some of the numeric algorithm names, allowed copying arguments to function objects given to parallel algorithms, and addressed complexity and iterator concerns as we lived through it as a member of SG1 and the editor of several TSes. The implementation is available here: https://github.com/KhronosGroup/SyclParallelSTL/blob/master/README.md <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5a110028cf22414fb4bba8600001925c">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/132</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/132</link>
    <itunes:summary>The most significant improvement in C&amp;#43;&amp;#43;17 will be Parallel Algorithms in the STL. But it is meant only for CPUs, as C&amp;#43;&amp;#43; does not define heterogeneous devices yet (though SG14 is working on that). How would you like to learn how to run Parallel STL algorithms on both CPU and GPU? Parallel STL is an implementation of the Technical Specification for C&amp;#43;&amp;#43; Extensions for Parallelism for both CPU and GPU with SYCL Heterogeneous C&amp;#43;&amp;#43; language. This technical specification describes a set of requirements for implementations of an interface that C&amp;#43;&amp;#43; programs may use to invoke algorithms with parallel execution. In practice, this specification allows users to specify execution policies to traditional STL algorithms which will enable the execution of those algorithms in parallel. The various policies can specify different kinds of parallel execution. For example, std::vector＜int＞ v = ... // Traditional sequential sort: std::sort(vec.begin(), vec.end()); // Explicit sequential sort: std::sort(seq, vec.begin(), vec.end()); // Explicit parallel sort if possible: std::sort(par, vec.begin(), vec.end()); // Explicit parallel and vectorized sort if possible: std::sort(par_unseq, vec.begin(), vec.end()); So how does a Technical Specification become a Standard? As it turns out, in this case, not without harrowing twists and turns worthy of an Agatha Christie novel. This talk will also be the story behind the C&amp;#43;&amp;#43;17 standardization process of the Parallelism TS and why we made so many changes. While it started life as a Technical Specification (TS), did you know all the changes we made to it before we added it to C&amp;#43;&amp;#43;17 and why? For example, we changed the names of the execution policies, removed exception handling support, disabled dynamic execution, unified some of the numeric algorithm names, allowed copying arguments to function objects given to parallel algorithms, and addressed complexity and iterator concerns as we lived through</itunes:summary>
    <itunes:duration>4214</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:14:52 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/132</guid>
    <dc:creator>Michael Wong, Gordon Brown, Ruyman Reyes</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>concurrency</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132_high.mp4" length="1644531889" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132.mp3" expression="full" duration="4214" fileSize="67436869" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132.mp4" expression="full" duration="4214" fileSize="125355362" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132_high.mp4" expression="full" duration="4214" fileSize="1644531889" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92e2/74730349-c1d0-4372-a2ac-8fe747aa92e2/132_mid.mp4" expression="full" duration="4214" fileSize="453597271" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-BrownReyesWong.mp4" expression="full" duration="4214" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Meta</title>
    <description><![CDATA[For the past several years, I have been researching new languages to support safe and efficient network protocol processing, specifically for software-defined networking applications. The unfortunate outcome of that research is this conclusion: any language for that domain must also be a general purpose programming language. This is not an easy thing to do. Many of the language features I worked with simply generated expressions to compute packet and header lengths, read and write packet fields, and encode and decode entire packets. If we could do this in C&#43;&#43;, I might not need an entirely new language. Over the past year, Herb Sutter and I have collaborated to work on language support for compile-time programming, static reflection, metaclasses, and code generation in the C&#43;&#43; programming language. These facilities completely eliminate the need for the external tools, metacompilers, and domain-specific languages on which we frequently rely to generate high-performance encoders and decoders in C&#43;&#43;. In this talk, I will discuss how to use these evolving proposals to create facilities for encoding and decoding packets. In particular, I will discuss the background requirements of my work, the overall design of a network protocol library, and the reflection and generation facilities that implement the library.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ca6258f5495040718eb1a86000019151">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/131</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/131</link>
    <itunes:summary>For the past several years, I have been researching new languages to support safe and efficient network protocol processing, specifically for software-defined networking applications. The unfortunate outcome of that research is this conclusion: any language for that domain must also be a general purpose programming language. This is not an easy thing to do. Many of the language features I worked with simply generated expressions to compute packet and header lengths, read and write packet fields, and encode and decode entire packets. If we could do this in C&amp;#43;&amp;#43;, I might not need an entirely new language. Over the past year, Herb Sutter and I have collaborated to work on language support for compile-time programming, static reflection, metaclasses, and code generation in the C&amp;#43;&amp;#43; programming language. These facilities completely eliminate the need for the external tools, metacompilers, and domain-specific languages on which we frequently rely to generate high-performance encoders and decoders in C&amp;#43;&amp;#43;. In this talk, I will discuss how to use these evolving proposals to create facilities for encoding and decoding packets. In particular, I will discuss the background requirements of my work, the overall design of a network protocol library, and the reflection and generation facilities that implement the library. </itunes:summary>
    <itunes:duration>3644</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:14:19 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/131</guid>
    <dc:creator>Andrew Sutton</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>metaprogramming</category>
    <enclosure url="http://video.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131_high.mp4" length="1487235719" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131.mp3" expression="full" duration="3644" fileSize="58319363" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131.mp4" expression="full" duration="3644" fileSize="112077330" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131_high.mp4" expression="full" duration="3644" fileSize="1487235719" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f33/599f3081-3f7b-4c74-883f-e53c76a00f33/131_mid.mp4" expression="full" duration="3644" fileSize="402381680" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Sutton_v2.mp4" expression="full" duration="3644" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>My Little Object File: How Linkers Implement C++</title>
    <description><![CDATA[Ever wonder how the linker turns your compiled C&#43;&#43; code into an executable file? Why the One Definition Rule exists? Or why your debug builds are so large? In this talk we'll take a deep dive and follow the story of our three adventurers, ELF, MachO, and COFF as they make their way out of Objectville carrying C&#43;&#43; translation units on their backs as they venture to become executables. We'll see as they make their way through the tangled forests of name mangling, climb the cliffs of thread local storage, and wade through the bogs of debug info. We'll see how they mostly follow the same path, but each approach the journey in their own way. We'll also see that becoming an executable is not quite the end of their journey, as the dynamic linker awaits to bring them to yet a higher plane of existence as complete C&#43;&#43; programs running on a machine.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3c3c8506ea07416b81a2a860000190b1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/130</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/130</link>
    <itunes:summary>Ever wonder how the linker turns your compiled C&amp;#43;&amp;#43; code into an executable file? Why the One Definition Rule exists? Or why your debug builds are so large? In this talk we&#39;ll take a deep dive and follow the story of our three adventurers, ELF, MachO, and COFF as they make their way out of Objectville carrying C&amp;#43;&amp;#43; translation units on their backs as they venture to become executables. We&#39;ll see as they make their way through the tangled forests of name mangling, climb the cliffs of thread local storage, and wade through the bogs of debug info. We&#39;ll see how they mostly follow the same path, but each approach the journey in their own way. We&#39;ll also see that becoming an executable is not quite the end of their journey, as the dynamic linker awaits to bring them to yet a higher plane of existence as complete C&amp;#43;&amp;#43; programs running on a machine. </itunes:summary>
    <itunes:duration>2870</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:13:41 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/130</guid>
    <dc:creator>Michael Spencer</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <enclosure url="http://video.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130_high.mp4" length="1361077598" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130.mp3" expression="full" duration="2870" fileSize="45927756" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130.mp4" expression="full" duration="2870" fileSize="85704325" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130_high.mp4" expression="full" duration="2870" fileSize="1361077598" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e043/e5ef640c-6920-40ce-a861-a48db759e043/130_mid.mp4" expression="full" duration="2870" fileSize="318708745" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1645-Spencer.mp4" expression="full" duration="2870" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Adding C++ modules-ts to the GNU Compiler</title>
    <description><![CDATA[C&#43;&#43; modules-ts[1] proposes a module system, with defined interfaces, implementations and importing. I shall outline the new semantics, their impact on the ABI and build systems, and discuss the, in-progress, implementation in the GNU C&#43;&#43; Compiler. [1] JTC1/SC22/WG21/n4681, 'Working Draft, Extensions to C&#43;&#43; for Modules', 2017-07-14, Gabriel Dos Reis http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4681.pdf <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:524f1071e72d48d1aa85a86000019041">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/129</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/129</link>
    <itunes:summary>C&amp;#43;&amp;#43; modules-ts[1] proposes a module system, with defined interfaces, implementations and importing. I shall outline the new semantics, their impact on the ABI and build systems, and discuss the, in-progress, implementation in the GNU C&amp;#43;&amp;#43; Compiler. [1] JTC1/SC22/WG21/n4681, &#39;Working Draft, Extensions to C&amp;#43;&amp;#43; for Modules&#39;, 2017-07-14, Gabriel Dos Reis http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4681.pdf</itunes:summary>
    <itunes:duration>3585</itunes:duration>
    <pubDate>Tue, 09 Jan 2018 00:13:06 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/129</guid>
    <dc:creator>Nathan Sidwell</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>compiler</category>
    <enclosure url="http://video.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129_high.mp4" length="1847285501" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129.mp3" expression="full" duration="3585" fileSize="57374407" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129.mp4" expression="full" duration="3585" fileSize="130843496" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129_high.mp4" expression="full" duration="3585" fileSize="1847285501" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2486/c8ae95f1-16cc-4bef-8f75-ecb797132486/129_mid.mp4" expression="full" duration="3585" fileSize="518245642" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1645-Sidwell.mp4" expression="full" duration="3585" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++/WinRT and the Future of C++ on Windows</title>
    <description><![CDATA[This talk highlights efforts by Kenny Kerr, Herb Sutter, Gabriel Dos Reis, and others to make Windows a great place for C&#43;&#43; developers, replacing proprietary extensions and tools with standard C&#43;&#43; code. The talk begins with a quick introduction on what C&#43;&#43;/WinRT is, how it helps make it super simple to create projects targeting Windows that use just ordinary C&#43;&#43; code, how the project uses advanced C&#43;&#43;17 and TS features today, the roadmap for the next few months, and then how we’re looking ahead at things like modules and metaclasses to dramatically improve the way we think of and use C&#43;&#43; on Windows.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:75f630a68e5a4b97a4e4a86000018f9d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/128</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/128</link>
    <itunes:summary>This talk highlights efforts by Kenny Kerr, Herb Sutter, Gabriel Dos Reis, and others to make Windows a great place for C&amp;#43;&amp;#43; developers, replacing proprietary extensions and tools with standard C&amp;#43;&amp;#43; code. The talk begins with a quick introduction on what C&amp;#43;&amp;#43;/WinRT is, how it helps make it super simple to create projects targeting Windows that use just ordinary C&amp;#43;&amp;#43; code, how the project uses advanced C&amp;#43;&amp;#43;17 and TS features today, the roadmap for the next few months, and then how we’re looking ahead at things like modules and metaclasses to dramatically improve the way we think of and use C&amp;#43;&amp;#43; on Windows. </itunes:summary>
    <itunes:duration>3886</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:52:17 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/128</guid>
    <dc:creator>Kenny Kerr, Scott Jones</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>windows</category>
    <enclosure url="http://video.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128_high.mp4" length="1163130721" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128.mp3" expression="full" duration="3886" fileSize="62188625" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128.mp4" expression="full" duration="3886" fileSize="105657699" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128_high.mp4" expression="full" duration="3886" fileSize="1163130721" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96b9/29d27282-d10d-4015-8676-34d97b3196b9/128_mid.mp4" expression="full" duration="3886" fileSize="327858119" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1645-JonesKerr.mp4" expression="full" duration="3886" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Future of Texture Compression</title>
    <description><![CDATA[Textures and images are everywhere in today's world. Compressing those images well improves streaming performance, video, dramatically reduces the size and download times of apps. It can give you more realistic virtual reality experiences, more apps that can run on a small mobile device, a better digital map of our world, it can reduce our impact on climate change through storage savings, and so much more. In the past few years, because of the rapid development in GPUs and innovations in algorithms, the way we approach texture compression has changed. Binomial is developing Basis, a supercompressed texture solution that will also provide an open file format standard in the graphics industry through The Khronos Group that's free for anyone to target. Basis is also written entirely in C&#43;&#43;. Binomial co-founders Rich Geldreich and Stephanie Hurlburt will present their latest work in Basis and give insights into how texture compression will continue to evolve.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9bd41159a62942dd9784a86000018ed3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/127</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/127</link>
    <itunes:summary>Textures and images are everywhere in today&#39;s world. Compressing those images well improves streaming performance, video, dramatically reduces the size and download times of apps. It can give you more realistic virtual reality experiences, more apps that can run on a small mobile device, a better digital map of our world, it can reduce our impact on climate change through storage savings, and so much more. In the past few years, because of the rapid development in GPUs and innovations in algorithms, the way we approach texture compression has changed. Binomial is developing Basis, a supercompressed texture solution that will also provide an open file format standard in the graphics industry through The Khronos Group that&#39;s free for anyone to target. Basis is also written entirely in C&amp;#43;&amp;#43;. Binomial co-founders Rich Geldreich and Stephanie Hurlburt will present their latest work in Basis and give insights into how texture compression will continue to evolve. </itunes:summary>
    <itunes:duration>2304</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:51:17 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/127</guid>
    <dc:creator>Rich Geldreich, Stephanie Hurlburt</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>graphics</category>
    <enclosure url="http://video.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127_high.mp4" length="1021254654" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127.mp3" expression="full" duration="2304" fileSize="36869953" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127.mp4" expression="full" duration="2304" fileSize="75520073" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127_high.mp4" expression="full" duration="2304" fileSize="1021254654" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c82a/b3d542dc-91e5-445f-9c20-54609c95c82a/127_mid.mp4" expression="full" duration="2304" fileSize="277376884" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1645-GeldreichHurlburt.mp4" expression="full" duration="2304" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Customizing the Standard Containers</title>
    <description><![CDATA[Almost all of the the standard containers have “customization points”, ways that users can modify their behaviors. Three of the common ones are: Allocators Comparison predicates Hash functors In this talk, we’ll explore these customization methods, and then survey the standard containers and container adaptors, and show how you can adapt them to your needs.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cb125069104c40a8b934a86000018dd1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/125</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/125</link>
    <itunes:summary>Almost all of the the standard containers have “customization points”, ways that users can modify their behaviors. Three of the common ones are: Allocators Comparison predicates Hash functors In this talk, we’ll explore these customization methods, and then survey the standard containers and container adaptors, and show how you can adapt them to your needs. </itunes:summary>
    <itunes:duration>3601</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:39:30 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/125</guid>
    <dc:creator>Marshall Clow</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125_high.mp4" length="909688124" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125.mp3" expression="full" duration="3601" fileSize="57633600" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125.mp4" expression="full" duration="3601" fileSize="98718773" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125_high.mp4" expression="full" duration="3601" fileSize="909688124" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6959/f4d77496-b4cc-4867-bb7e-8fae0ad86959/125_mid.mp4" expression="full" duration="3601" fileSize="276650642" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Clow.mp4" expression="full" duration="3601" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Going Nowhere Faster</title>
    <description><![CDATA[You care about the performance of your C&#43;&#43; code. You have followed basic patterns to make your C&#43;&#43; code efficient. You profiled your application or server and used the appropriate algorithms to minimize how much work is done and the appropriate data structures to make it fast. You even have reliable benchmarks to cover the most critical and important parts of the system for performance. But you're profiling the benchmark and need to squeeze even more performance out of it... What next? This talk dives into the performance and optimization concerns of the important, performance critical loops in your program. How do modern CPUs execute these loops, and what influences their performance? What can you do to make them faster? How can you leverage the C&#43;&#43; compiler to do this while keeping the code maintainable and clean? What optimization techniques do modern compilers make available to you? We'll cover all of this and more, with piles of code, examples, and even live demo. While the talk will focus somewhat on x86 processors and the LLVM compiler, but everything will be broadly applicable and basic mappings for other processors and toolchains will be discussed throughout. However, be prepared for a lot of C&#43;&#43; code and assembly.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e9fdaa38eab349cbb015a86000018d45">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/124</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/124</link>
    <itunes:summary>You care about the performance of your C&amp;#43;&amp;#43; code. You have followed basic patterns to make your C&amp;#43;&amp;#43; code efficient. You profiled your application or server and used the appropriate algorithms to minimize how much work is done and the appropriate data structures to make it fast. You even have reliable benchmarks to cover the most critical and important parts of the system for performance. But you&#39;re profiling the benchmark and need to squeeze even more performance out of it... What next? This talk dives into the performance and optimization concerns of the important, performance critical loops in your program. How do modern CPUs execute these loops, and what influences their performance? What can you do to make them faster? How can you leverage the C&amp;#43;&amp;#43; compiler to do this while keeping the code maintainable and clean? What optimization techniques do modern compilers make available to you? We&#39;ll cover all of this and more, with piles of code, examples, and even live demo. While the talk will focus somewhat on x86 processors and the LLVM compiler, but everything will be broadly applicable and basic mappings for other processors and toolchains will be discussed throughout. However, be prepared for a lot of C&amp;#43;&amp;#43; code and assembly. </itunes:summary>
    <itunes:duration>3657</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:32:27 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/124</guid>
    <dc:creator>Chandler Carruth</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124_high.mp4" length="1386194781" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124.mp3" expression="full" duration="3657" fileSize="58518296" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124.mp4" expression="full" duration="3657" fileSize="108238534" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124_high.mp4" expression="full" duration="3657" fileSize="1386194781" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/688c/d0a2a92c-2730-4a7c-bade-629bd095688c/124_mid.mp4" expression="full" duration="3657" fileSize="380107326" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Carruth.mp4" expression="full" duration="3657" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Curiously Recurring C++ Bugs at Facebook</title>
    <description><![CDATA[I've spent the last few years watching Facebook's C&#43;&#43; codebase grow by several orders of magnitude. Despite constantly improving abstractions, constantly improving tooling, frequent internal courses, and ongoing internal discussion, there are bug-patterns we simply cannot stop from being reintroduced into our code. My hope is to show some of the most common (and infamous) bugs in our history, and the surprising complexity that arises in some apparently simple situations. This talk serves the dual purpose of educating the intermediate (and perhaps the occasional advanced) C&#43;&#43; programmer about some really nasty common pitfalls, as well as serves as a plea to experts to help further improve the language, libraries, and best practices to help educate and eradicate some of these problematic patterns.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:78446669c2c64e16b0e6a86000018cd9">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/123</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/123</link>
    <itunes:summary>I&#39;ve spent the last few years watching Facebook&#39;s C&amp;#43;&amp;#43; codebase grow by several orders of magnitude. Despite constantly improving abstractions, constantly improving tooling, frequent internal courses, and ongoing internal discussion, there are bug-patterns we simply cannot stop from being reintroduced into our code. My hope is to show some of the most common (and infamous) bugs in our history, and the surprising complexity that arises in some apparently simple situations. This talk serves the dual purpose of educating the intermediate (and perhaps the occasional advanced) C&amp;#43;&amp;#43; programmer about some really nasty common pitfalls, as well as serves as a plea to experts to help further improve the language, libraries, and best practices to help educate and eradicate some of these problematic patterns. </itunes:summary>
    <itunes:duration>3120</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:31:50 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/123</guid>
    <dc:creator>Louis Brandy</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <category>debugging</category>
    <enclosure url="http://video.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123_high.mp4" length="1063317299" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123.mp3" expression="full" duration="3120" fileSize="49935943" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123.mp4" expression="full" duration="3120" fileSize="86049513" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123_high.mp4" expression="full" duration="3120" fileSize="1063317299" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ea0/7297035f-f3ee-461f-ad14-ece2fc566ea0/123_mid.mp4" expression="full" duration="3120" fileSize="293895245" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Brandy.mp4" expression="full" duration="3120" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Free Your Functions!</title>
    <description><![CDATA[You are devoted to minimize coupling and duplication? You are taking care to maximize cohesion, flexibility, extensibility, encapsulation, testability, and even performance in order to achieve the high goals of (object-oriented) programming? Awesome! But wait: You still favor member functions? Seriously? You have been deceived! You have been praying at the altar of false promises! Shed the shackles of Java philosophy! Free your functions! In this talk I will demonstrate why in C&#43;&#43; free functions should generally be preferred to member functions, and why free functions — not member functions! — provide you with all the aforementioned advantages you expect from object-oriented programming. Note, though, that this talk might fundamentally change your perception of C&#43;&#43; and object-oriented programming in general!  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:77954056d81e41a1a698a86000018c30">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/122</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/122</link>
    <itunes:summary>You are devoted to minimize coupling and duplication? You are taking care to maximize cohesion, flexibility, extensibility, encapsulation, testability, and even performance in order to achieve the high goals of (object-oriented) programming? Awesome! But wait: You still favor member functions? Seriously? You have been deceived! You have been praying at the altar of false promises! Shed the shackles of Java philosophy! Free your functions! In this talk I will demonstrate why in C&amp;#43;&amp;#43; free functions should generally be preferred to member functions, and why free functions — not member functions! — provide you with all the aforementioned advantages you expect from object-oriented programming. Note, though, that this talk might fundamentally change your perception of C&amp;#43;&amp;#43; and object-oriented programming in general! </itunes:summary>
    <itunes:duration>3701</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:31:13 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/122</guid>
    <dc:creator>Klaus Iglberger</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122_high.mp4" length="1625027527" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122.mp3" expression="full" duration="3701" fileSize="59229460" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122.mp4" expression="full" duration="3701" fileSize="105903815" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122_high.mp4" expression="full" duration="3701" fileSize="1625027527" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fba/868299d0-c738-498c-8378-9509f2219fba/122_mid.mp4" expression="full" duration="3701" fileSize="492453144" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Iglberger.mp4" expression="full" duration="3701" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Designing a Unified Interface for Execution</title>
    <description><![CDATA[If you were to ask a C&#43;&#43; developer the question &quot;what is execution?&quot; you may get a different answer depending on who you asked. This is because execution means something different to the various users of C&#43;&#43;; in areas such as multi-core parallelism, heterogeneity, distributed systems and networking. There are many commonalities that can be drawn between these different use cases, however, each too has their own distinct requirements. Now imagine if C&#43;&#43; could bring together all of these and form a single unified interface for execution, one which would allow a distinct separation of computations from their method of execution. This is the challenge which a C&#43;&#43; committee subgroup has undertaken. A recent joint effort by a group of interested parties within the C&#43;&#43; committee has been working on a solution which will bring together the requirements of all of these use cases into a single unified interface for execution. This unified interface will provide a generalised way of describing execution that will serve as an abstraction underneath common C&#43;&#43; control structures such as async, task blocks and parallel STL, and above a wide range of resources capable of execution. This talk takes a subjective look at the story so far; the original papers that paved the way to where we are now, the underlying design philosophy that will come to represent execution in C&#43;&#43;, and the current state of the proposal in progress. It will also present the various use cases that influenced the proposal, how their requirements helped shape the design and what challenges are still to be overcome.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a3b38f2ff64b4fc89001a86000018ba4">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/121</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/121</link>
    <itunes:summary>If you were to ask a C&amp;#43;&amp;#43; developer the question &amp;quot;what is execution?&amp;quot; you may get a different answer depending on who you asked. This is because execution means something different to the various users of C&amp;#43;&amp;#43;; in areas such as multi-core parallelism, heterogeneity, distributed systems and networking. There are many commonalities that can be drawn between these different use cases, however, each too has their own distinct requirements. Now imagine if C&amp;#43;&amp;#43; could bring together all of these and form a single unified interface for execution, one which would allow a distinct separation of computations from their method of execution. This is the challenge which a C&amp;#43;&amp;#43; committee subgroup has undertaken. A recent joint effort by a group of interested parties within the C&amp;#43;&amp;#43; committee has been working on a solution which will bring together the requirements of all of these use cases into a single unified interface for execution. This unified interface will provide a generalised way of describing execution that will serve as an abstraction underneath common C&amp;#43;&amp;#43; control structures such as async, task blocks and parallel STL, and above a wide range of resources capable of execution. This talk takes a subjective look at the story so far; the original papers that paved the way to where we are now, the underlying design philosophy that will come to represent execution in C&amp;#43;&amp;#43;, and the current state of the proposal in progress. It will also present the various use cases that influenced the proposal, how their requirements helped shape the design and what challenges are still to be overcome. </itunes:summary>
    <itunes:duration>3771</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:30:39 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/121</guid>
    <dc:creator>Gordon Brown</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121_high.mp4" length="1590270014" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121.mp3" expression="full" duration="3771" fileSize="60348095" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121.mp4" expression="full" duration="3771" fileSize="109093981" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121_high.mp4" expression="full" duration="3771" fileSize="1590270014" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c680/b1a0d15d-a677-4922-903e-39d5fa75c680/121_mid.mp4" expression="full" duration="3771" fileSize="419496863" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-BrownWong.mp4" expression="full" duration="3771" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Exceptions and Stack Unwinding</title>
    <description><![CDATA[Exceptions are often described as 'slow', and the standard advice is to use them only in exceptional circumstances. In this talk, we'll find out how slow exceptions really are by exploring the Itanium exception handling model. We'll dive into several implementations (libunwind, gcc, llvm-libunwind), and learn about everything that happens between throw() and catch(). We will discover the answers to questions such as why throwing an exception takes a global lock (and how to avoid it), how caching can speed up the performance of exceptions, and how to get better stack traces.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:456d63357ec147abbbc6a86000018b3c">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/120</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/120</link>
    <itunes:summary>Exceptions are often described as &#39;slow&#39;, and the standard advice is to use them only in exceptional circumstances. In this talk, we&#39;ll find out how slow exceptions really are by exploring the Itanium exception handling model. We&#39;ll dive into several implementations (libunwind, gcc, llvm-libunwind), and learn about everything that happens between throw() and catch(). We will discover the answers to questions such as why throwing an exception takes a global lock (and how to avoid it), how caching can speed up the performance of exceptions, and how to get better stack traces. </itunes:summary>
    <itunes:duration>3071</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:30:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/120</guid>
    <dc:creator>Dave Watson</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120_high.mp4" length="1181738497" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120.mp3" expression="full" duration="3071" fileSize="49151022" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120.mp4" expression="full" duration="3071" fileSize="92122181" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120_high.mp4" expression="full" duration="3071" fileSize="1181738497" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1aa5/7d3cf66e-1c15-426d-bb33-8b600b3e1aa5/120_mid.mp4" expression="full" duration="3071" fileSize="320625077" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Watson.mp4" expression="full" duration="3071" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Allocators: The Good Parts</title>
    <description><![CDATA[Memory allocators have a bad rap. Sure, they give us control, sometimes vital control, over how and where memory is allocated, but they seem so hard to use correctly. The allocator model that was first standardized in C&#43;&#43;98 was put in place to solve a different problem; despite being called &quot;allocators,&quot; control over memory allocation was, at best, a secondary consideration. Changes in C&#43;&#43;11 and C&#43;&#43;17 corrected many of the flaws, at the cost of complexity in the specification. If only there were a user manual and tutorial for allocators, much of that complexity would fall away and could be ignored. This talk strives to be that user manual and tutorial, intended to focus your attention on the important parts of modern allocators, and leaving most of the legacy stuff from 1998 behind. We will look at the easiest way to design a class that uses allocators, and walk through the creation of a real, useful allocator. In the process, I will introduce features in C&#43;&#43;17 that can easily be adapted for use with today's C&#43;&#43;11 and C&#43;&#43;14 standard libraries. My goal is to make allocators approachable, so that you can use them appropriately in your own work.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:be6ff2ffb8c14f29ab7aa86000018a86">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/119</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/119</link>
    <itunes:summary>Memory allocators have a bad rap. Sure, they give us control, sometimes vital control, over how and where memory is allocated, but they seem so hard to use correctly. The allocator model that was first standardized in C&amp;#43;&amp;#43;98 was put in place to solve a different problem; despite being called &amp;quot;allocators,&amp;quot; control over memory allocation was, at best, a secondary consideration. Changes in C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;17 corrected many of the flaws, at the cost of complexity in the specification. If only there were a user manual and tutorial for allocators, much of that complexity would fall away and could be ignored. This talk strives to be that user manual and tutorial, intended to focus your attention on the important parts of modern allocators, and leaving most of the legacy stuff from 1998 behind. We will look at the easiest way to design a class that uses allocators, and walk through the creation of a real, useful allocator. In the process, I will introduce features in C&amp;#43;&amp;#43;17 that can easily be adapted for use with today&#39;s C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 standard libraries. My goal is to make allocators approachable, so that you can use them appropriately in your own work. </itunes:summary>
    <itunes:duration>3648</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:29:34 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/119</guid>
    <dc:creator>Pablo Halpern</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119_high.mp4" length="1585333823" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119.mp3" expression="full" duration="3648" fileSize="58375472" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119.mp4" expression="full" duration="3648" fileSize="98797373" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119_high.mp4" expression="full" duration="3648" fileSize="1585333823" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dd47/c7044959-ba69-4fa4-89dd-ac8763a4dd47/119_mid.mp4" expression="full" duration="3648" fileSize="382447270" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Halpern.mp4" expression="full" duration="3648" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Performance Benchmarking with Celero</title>
    <description><![CDATA[Developing consistent and meaningful benchmark results for code is a complex task. Measurement tools exist (Intel® VTune™ Amplifier, SmartBear AQTime, Valgrind, etc.) external to applications, but they are sometimes expensive for small teams or cumbersome to utilize. Celero is a small library which can be added to a C&#43;&#43; project and perform benchmarks on code in a way which is easy to reproduce, share, and compare among individual runs, developers, or projects. This talk will start with an overview of baseline benchmarking, how proper measurements are made, and offer guidelines for performance optimization. It will then walk developers through the process of developing benchmark code in a way similar to many unit testing libraries. Through practical examples, methods for benchmark design and debugging will be explored. We will then use the library to plot and understand the results. In the end, attendees should feel comfortable exploring the use of Celero in their own projects and adding baseline benchmarking to their testing and delivery processes.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e94409032b4649aa9fbca860000189dd">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/118</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/118</link>
    <itunes:summary>Developing consistent and meaningful benchmark results for code is a complex task. Measurement tools exist (Intel&#174; VTune™ Amplifier, SmartBear AQTime, Valgrind, etc.) external to applications, but they are sometimes expensive for small teams or cumbersome to utilize. Celero is a small library which can be added to a C&amp;#43;&amp;#43; project and perform benchmarks on code in a way which is easy to reproduce, share, and compare among individual runs, developers, or projects. This talk will start with an overview of baseline benchmarking, how proper measurements are made, and offer guidelines for performance optimization. It will then walk developers through the process of developing benchmark code in a way similar to many unit testing libraries. Through practical examples, methods for benchmark design and debugging will be explored. We will then use the library to plot and understand the results. In the end, attendees should feel comfortable exploring the use of Celero in their own projects and adding baseline benchmarking to their testing and delivery processes. </itunes:summary>
    <itunes:duration>2682</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:29:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/118</guid>
    <dc:creator>John Farrier</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118_high.mp4" length="1015609348" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118.mp3" expression="full" duration="2682" fileSize="42926004" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118.mp4" expression="full" duration="2682" fileSize="90440766" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118_high.mp4" expression="full" duration="2682" fileSize="1015609348" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0ab/4d67f9c9-02e2-4b25-8b8c-145b0e08c0ab/118_mid.mp4" expression="full" duration="2682" fileSize="289809112" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Farrier.mp4" expression="full" duration="2682" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>There Will Be Build Systems: I Configure Your Milkshake</title>
    <description><![CDATA[C&#43;&#43; (and C) have always had unique challenges when it comes to build systems. In addition to discussing the common problems that C&#43;&#43; build systems face, this talk will discuss the (abbreviated) history of build systems, where the current build system ecosystem is, where it is heading, and where it might be in the near future. Expect a lively presentation, that is both light on code and heavy on information.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bb7097d209d34389b917a86000018947">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/117</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/117</link>
    <itunes:summary>C&amp;#43;&amp;#43; (and C) have always had unique challenges when it comes to build systems. In addition to discussing the common problems that C&amp;#43;&amp;#43; build systems face, this talk will discuss the (abbreviated) history of build systems, where the current build system ecosystem is, where it is heading, and where it might be in the near future. Expect a lively presentation, that is both light on code and heavy on information. </itunes:summary>
    <itunes:duration>3481</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:28:28 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/117</guid>
    <dc:creator>Isabella Muerte</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <category>buildsystem</category>
    <enclosure url="http://video.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117_high.mp4" length="846250994" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117.mp3" expression="full" duration="3481" fileSize="55713639" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117.mp4" expression="full" duration="3481" fileSize="76319627" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117_high.mp4" expression="full" duration="3481" fileSize="846250994" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c2b8/5d00e962-732c-4f0c-96fa-f5a6c5b3c2b8/117_mid.mp4" expression="full" duration="3481" fileSize="212919861" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-Muerte_v2.mp4" expression="full" duration="3481" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++17 Parallel Algorithms</title>
    <description><![CDATA[This presentation describes the C&#43;&#43;17 standard library parallel algorithms and how they are used. The algorithms are intended for the general software development community rather than addressing a few specialists. Different kinds of parallelism are exposed using corresponding execution policies. Each execution policy implies specific constraints for the use of algorithms to enable the respective parallel approaches. The interface for execution policies is described together with the constraints of the defined execution policies. This presentation discusses the model behind the parallel algorithms and the associated constraints. Some example uses are shown together with results to motivate the importance of enabling parallelism in programs.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:03b82264de2343f3ad47a860000188a3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/116</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/116</link>
    <itunes:summary>This presentation describes the C&amp;#43;&amp;#43;17 standard library parallel algorithms and how they are used. The algorithms are intended for the general software development community rather than addressing a few specialists. Different kinds of parallelism are exposed using corresponding execution policies. Each execution policy implies specific constraints for the use of algorithms to enable the respective parallel approaches. The interface for execution policies is described together with the constraints of the defined execution policies. This presentation discusses the model behind the parallel algorithms and the associated constraints. Some example uses are shown together with results to motivate the importance of enabling parallelism in programs. </itunes:summary>
    <itunes:duration>3426</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:27:53 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/116</guid>
    <dc:creator>Dietmar K&#252;hl</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <category>algorithms</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116_high.mp4" length="806119261" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116.mp3" expression="full" duration="3426" fileSize="54831154" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116.mp4" expression="full" duration="3426" fileSize="72421145" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116_high.mp4" expression="full" duration="3426" fileSize="806119261" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78ae/a64d75d0-874a-4a0d-887e-9f19315778ae/116_mid.mp4" expression="full" duration="3426" fileSize="202898353" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Kuhl.mp4" expression="full" duration="3426" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>I Wish I Could Use C++ 1x/y/z</title>
    <description><![CDATA[C&#43;&#43;11, C&#43;&#43;14 and C&#43;&#43;17 provided a sensible amount of new libraries and language features. However, for some reasons ranging from inertia or even resistance to change, up to complicated customer demands or lack of good compiler support, using those new shiny tools can be out of the question. This tutorial will cover a selection of highly useful C&#43;&#43;14/17 idioms and see how you can rebuild them in C&#43;&#43;11/14 so you can use them in constrained contexts, or when the language support is there but the library support is not. We will also cover the actual state of popular compilers (GCC, Clang, Visual Studio) to see if they support what they claim to do, so the transition can be smoothed out. A short list of points to be covered are: generic lambdas, if constexpr, tuple and typelist manipulation with integer_sequence, void_t, template-alias tricks, and fold operator emulation. For each of those, we'll introduce the feature, explain what kind of use cases they solve and how to reproduce them with an old compiler or a limited version of the language or standard library. The question will then be, how far back in time can we go for all of these.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aa277ab70f7146ea9bc3a860000187d5">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/115</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/115</link>
    <itunes:summary>C&amp;#43;&amp;#43;11, C&amp;#43;&amp;#43;14 and C&amp;#43;&amp;#43;17 provided a sensible amount of new libraries and language features. However, for some reasons ranging from inertia or even resistance to change, up to complicated customer demands or lack of good compiler support, using those new shiny tools can be out of the question. This tutorial will cover a selection of highly useful C&amp;#43;&amp;#43;14/17 idioms and see how you can rebuild them in C&amp;#43;&amp;#43;11/14 so you can use them in constrained contexts, or when the language support is there but the library support is not. We will also cover the actual state of popular compilers (GCC, Clang, Visual Studio) to see if they support what they claim to do, so the transition can be smoothed out. A short list of points to be covered are: generic lambdas, if constexpr, tuple and typelist manipulation with integer_sequence, void_t, template-alias tricks, and fold operator emulation. For each of those, we&#39;ll introduce the feature, explain what kind of use cases they solve and how to reproduce them with an old compiler or a limited version of the language or standard library. The question will then be, how far back in time can we go for all of these. </itunes:summary>
    <itunes:duration>3318</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:27:14 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/115</guid>
    <dc:creator>Joel Falcou</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>compiler</category>
    <category>c++17</category>
    <category>c++11</category>
    <category>c++14</category>
    <enclosure url="http://video.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115_high.mp4" length="1276002278" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115.mp3" expression="full" duration="3318" fileSize="53094337" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115.mp4" expression="full" duration="3318" fileSize="95935064" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115_high.mp4" expression="full" duration="3318" fileSize="1276002278" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/154d/b24623f8-a702-461b-a2dc-9f79f328154d/115_mid.mp4" expression="full" duration="3318" fileSize="339424916" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1515-Falcou.mp4" expression="full" duration="3318" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Objects, Lifetimes, and References, oh my: the C++ Object Model, and Why it Matters to You </title>
    <description><![CDATA[How does the C&#43;&#43; abstract machine really work at the lowest levels? Why does the committee design its rules the way they do? Gain insight into the object model of C&#43;&#43;, from references to passing semantics to copy elision. C&#43;&#43; is a complicated language full of arcane rules and complicated tangents - learn how it's all tied together in this basic model of locations, objects, and values.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:08b41ed941bf4a9eb9aaa86000018719">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/114</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/114</link>
    <itunes:summary>How does the C&amp;#43;&amp;#43; abstract machine really work at the lowest levels? Why does the committee design its rules the way they do? Gain insight into the object model of C&amp;#43;&amp;#43;, from references to passing semantics to copy elision. C&amp;#43;&amp;#43; is a complicated language full of arcane rules and complicated tangents - learn how it&#39;s all tied together in this basic model of locations, objects, and values. </itunes:summary>
    <itunes:duration>3112</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:23:46 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/114</guid>
    <dc:creator>Nicole Mazzuca</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114_high.mp4" length="729243088" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114.mp3" expression="full" duration="3112" fileSize="49805089" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114.mp4" expression="full" duration="3112" fileSize="76968034" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114_high.mp4" expression="full" duration="3112" fileSize="729243088" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3839/bac12471-6bce-4b0c-b3d0-64408b353839/114_mid.mp4" expression="full" duration="3112" fileSize="204532525" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Mazzuca.mp4" expression="full" duration="3112" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Tools and Techniques To Stay Up-to-date With Modern C++</title>
    <description><![CDATA[Since 2011, C&#43;&#43; has been on a massive roll. New C&#43;&#43; standards in 2011, 2014 and 2017. A growing number of new TSes and proposals for new features to be standardized. Following even just a few C&#43;&#43; luminaries on Twitter feels like drinking from a firehose: blog posts galore, radical new ideas, new techniques, new libraries, new conference videos, new open source projects... Does anyone else feel overwhelmed? In this talk I will show you some techniques and tools to stay on top of modern C&#43;&#43; development and still keep your sanity. I'll show you how to use various simple forms of testing to get acquainted with new and unfamilar C&#43;&#43; techniques, how to write your own Clang-based tools to explore new libraries and code bases, how to use simple Python scripts that make it easier to reason about some of the more opaque corners of C&#43;&#43; (e.g. the preprocessor and error messages), and more.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b4b0bb2405f44ebc869ba86000018688">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/113</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/113</link>
    <itunes:summary>Since 2011, C&amp;#43;&amp;#43; has been on a massive roll. New C&amp;#43;&amp;#43; standards in 2011, 2014 and 2017. A growing number of new TSes and proposals for new features to be standardized. Following even just a few C&amp;#43;&amp;#43; luminaries on Twitter feels like drinking from a firehose: blog posts galore, radical new ideas, new techniques, new libraries, new conference videos, new open source projects... Does anyone else feel overwhelmed? In this talk I will show you some techniques and tools to stay on top of modern C&amp;#43;&amp;#43; development and still keep your sanity. I&#39;ll show you how to use various simple forms of testing to get acquainted with new and unfamilar C&amp;#43;&amp;#43; techniques, how to write your own Clang-based tools to explore new libraries and code bases, how to use simple Python scripts that make it easier to reason about some of the more opaque corners of C&amp;#43;&amp;#43; (e.g. the preprocessor and error messages), and more. </itunes:summary>
    <itunes:duration>2453</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:23:10 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/113</guid>
    <dc:creator>Ingve Vormestrand</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <category>language</category>
    <category>debugging</category>
    <category>testing</category>
    <enclosure url="http://video.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113_high.mp4" length="539374167" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113.mp3" expression="full" duration="2453" fileSize="39252349" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113.mp4" expression="full" duration="2453" fileSize="55165284" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113_high.mp4" expression="full" duration="2453" fileSize="539374167" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d28/4a9bce21-5aaa-4aa0-a605-4a3e83917d28/113_mid.mp4" expression="full" duration="2453" fileSize="149706598" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-Vormestrand.mp4" expression="full" duration="2453" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>An Interesting Lock-free Queue - Part 2 of N</title>
    <description><![CDATA[This is the long awaited continuation of a previous CppCon talk (&quot;Lock-free by Example&quot;) on an &quot;interesting&quot; lock-free queue. (&quot;interesting&quot;? Well, &quot;multi-producer, multi-consumer, growing, shrinking, mostly contiguous, lock-free circular queue&quot; is a bit long. Maybe &quot;complicated&quot; is a better word.) Attendance at the previous talk is completely NOT required. This time we will not just review where we left off, but attempt to &quot;prove&quot; that what we did is actually correct, and thus discuss how to prove correctness of lock-free algorithms, and discuss provability vs testing. And then, with the first steps proven (or disproven! - and hopefully corrected!), we can continue to expand the features of the queue, and tackle the new challenges that arise. Also, this is secretly a talk to convince you not to do lock-free programming. Shhh...  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0e6252af0f7248289a9ea86000018594">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/112</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/112</link>
    <itunes:summary>This is the long awaited continuation of a previous CppCon talk (&amp;quot;Lock-free by Example&amp;quot;) on an &amp;quot;interesting&amp;quot; lock-free queue. (&amp;quot;interesting&amp;quot;? Well, &amp;quot;multi-producer, multi-consumer, growing, shrinking, mostly contiguous, lock-free circular queue&amp;quot; is a bit long. Maybe &amp;quot;complicated&amp;quot; is a better word.) Attendance at the previous talk is completely NOT required. This time we will not just review where we left off, but attempt to &amp;quot;prove&amp;quot; that what we did is actually correct, and thus discuss how to prove correctness of lock-free algorithms, and discuss provability vs testing. And then, with the first steps proven (or disproven! - and hopefully corrected!), we can continue to expand the features of the queue, and tackle the new challenges that arise. Also, this is secretly a talk to convince you not to do lock-free programming. Shhh... </itunes:summary>
    <itunes:duration>3905</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:22:33 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/112</guid>
    <dc:creator>Tony Van Eerd</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112_high.mp4" length="970777267" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112.mp3" expression="full" duration="3905" fileSize="62485457" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112.mp4" expression="full" duration="3905" fileSize="101393598" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112_high.mp4" expression="full" duration="3905" fileSize="970777267" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cac/0a91716d-daa9-4ad3-89be-413545060cac/112_mid.mp4" expression="full" duration="3905" fileSize="303188231" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-VanEerd.mp4" expression="full" duration="3905" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Soup&#231;on of SFINAE</title>
    <description><![CDATA[Following on Arthur's &quot;Template Normal Programming&quot; from CppCon 2016, this will be a concise cookbook of SFINAE recipes — ways of getting the compiler to do one thing in one circumstance and another thing in another circumstance. The recipes presented will include: - Partial specialization of struct templates - std::bool_constant - std::conditional_t - Expression SFINAE on return types (using decltype) - Expression SFINAE in a defaulted template type parameter - std::enable_if_t as a defaulted template type parameter - Tag dispatch on std::true_type and std::false_type - &quot;Meta-tag-dispatch&quot; on true and false as template non-type parameters - priority_tag＜N＞ for tag dispatch with &quot;fallback&quot; cases - bool_if_t as a template non-type parameter In each case, we'll show a real code example where the recipe is the clearest and best way to get the job done. This will draw on Arthur's recent &quot;STL From Scratch&quot;.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:be0d4abf500f40628a0aa8600001851a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/111</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/111</link>
    <itunes:summary>Following on Arthur&#39;s &amp;quot;Template Normal Programming&amp;quot; from CppCon 2016, this will be a concise cookbook of SFINAE recipes — ways of getting the compiler to do one thing in one circumstance and another thing in another circumstance. The recipes presented will include: - Partial specialization of struct templates - std::bool_constant - std::conditional_t - Expression SFINAE on return types (using decltype) - Expression SFINAE in a defaulted template type parameter - std::enable_if_t as a defaulted template type parameter - Tag dispatch on std::true_type and std::false_type - &amp;quot;Meta-tag-dispatch&amp;quot; on true and false as template non-type parameters - priority_tag＜N＞ for tag dispatch with &amp;quot;fallback&amp;quot; cases - bool_if_t as a template non-type parameter In each case, we&#39;ll show a real code example where the recipe is the clearest and best way to get the job done. This will draw on Arthur&#39;s recent &amp;quot;STL From Scratch&amp;quot;. </itunes:summary>
    <itunes:duration>3676</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:21:48 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/111</guid>
    <dc:creator>arthur o&#39;dwyer</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111_high.mp4" length="848624538" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111.mp3" expression="full" duration="3676" fileSize="58829732" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111.mp4" expression="full" duration="3676" fileSize="89872435" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111_high.mp4" expression="full" duration="3676" fileSize="848624538" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d45/e5f1b61b-9a21-4f1e-96da-2c1f2e7c5d45/111_mid.mp4" expression="full" duration="3676" fileSize="243970106" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-O'Dwyer.mp4" expression="full" duration="3676" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Type, by Any Other Name</title>
    <description><![CDATA[No offense to Shakespeare, but in C&#43;&#43; there is a lot in a type name. A name represents a set of data and behaviors, and changing names is an often difficult and painful process. This could be to reconcile some repeated logic into common functionality, upgrade a hand-rolled type to a standard type (or vice-versa), or just upgrade your interfaces to be easier to use. When these types are widely used throughout a large codebase, conventional wisdom dictates that this refactoring is difficult or impossible -- changing every instance of a widesperead type would cause widespread merge conflicts, if all instances can even be found. In C&#43;&#43;, however, it’s possible to refactor types non-atomically, in small steps which preserve invariants, without breaking any users of your code. Library teams at Google have refactored millions of lines of code this way -- this talk will outline common strategies for non-atomic renaming and refactorings, and antipatterns such as ADL use and forward declarations which complicate the process. That is: 'Tis but thy name that’s not my namespace; Thou art thyself, though not a standard class. What's montague::? It is not base, nor parent, Nor member, typedef, nor any other part Belonging to a class. O, be some other name! What's in a name? that which we call a ::rose By any other name would std::move as swift; std::romeo would, were he not ADL call'd, Retain that dear perfection which he owes Without that title. ::Romeo, doff thy name, And for that name which is no part of thee Take all myself.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5cf8f0841c804089a765a8600001848e">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/110</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/110</link>
    <itunes:summary>No offense to Shakespeare, but in C&amp;#43;&amp;#43; there is a lot in a type name. A name represents a set of data and behaviors, and changing names is an often difficult and painful process. This could be to reconcile some repeated logic into common functionality, upgrade a hand-rolled type to a standard type (or vice-versa), or just upgrade your interfaces to be easier to use. When these types are widely used throughout a large codebase, conventional wisdom dictates that this refactoring is difficult or impossible -- changing every instance of a widesperead type would cause widespread merge conflicts, if all instances can even be found. In C&amp;#43;&amp;#43;, however, it’s possible to refactor types non-atomically, in small steps which preserve invariants, without breaking any users of your code. Library teams at Google have refactored millions of lines of code this way -- this talk will outline common strategies for non-atomic renaming and refactorings, and antipatterns such as ADL use and forward declarations which complicate the process. That is: &#39;Tis but thy name that’s not my namespace; Thou art thyself, though not a standard class. What&#39;s montague::? It is not base, nor parent, Nor member, typedef, nor any other part Belonging to a class. O, be some other name! What&#39;s in a name? that which we call a ::rose By any other name would std::move as swift; std::romeo would, were he not ADL call&#39;d, Retain that dear perfection which he owes Without that title. ::Romeo, doff thy name, And for that name which is no part of thee Take all myself. </itunes:summary>
    <itunes:duration>2738</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:21:08 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/110</guid>
    <dc:creator>Jon Cohen</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110_high.mp4" length="864020305" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110.mp3" expression="full" duration="2738" fileSize="43811493" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110.mp4" expression="full" duration="2738" fileSize="73118746" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110_high.mp4" expression="full" duration="2738" fileSize="864020305" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f8c/dd219370-b9e8-44d1-af66-93c283093f8c/110_mid.mp4" expression="full" duration="2738" fileSize="233207307" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-Cohen.mp4" expression="full" duration="2738" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>End-to-end Deadlock Debugging Tools at Facebook</title>
    <description><![CDATA[Facebook has developed tooling to help quickly find and debug several classes of concurrency bugs in Facebook's large C&#43;&#43; codebase. In this talk, we will focus specifically on deadlocks and the tools we use to detect and prevent them. We will explore the various tools we use — some open source tools we have deployed and some we have developed — and how they work by walking through several examples of real-world bugs found by these tools in Facebook's large production systems. Topics include: * How we deploy and utilize ThreadSanitizer on Facebook's large codebase * Linux eBPF tools to detect potential deadlocks on running binaries * gdb extensions to examine mutex internals to detect deadlocks * folly::Synchronized and other libraries that make it more difficult to introduce concurrency bugs  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f0a448ded9de403b8464a860000183b6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/109</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/109</link>
    <itunes:summary>Facebook has developed tooling to help quickly find and debug several classes of concurrency bugs in Facebook&#39;s large C&amp;#43;&amp;#43; codebase. In this talk, we will focus specifically on deadlocks and the tools we use to detect and prevent them. We will explore the various tools we use — some open source tools we have deployed and some we have developed — and how they work by walking through several examples of real-world bugs found by these tools in Facebook&#39;s large production systems. Topics include: * How we deploy and utilize ThreadSanitizer on Facebook&#39;s large codebase * Linux eBPF tools to detect potential deadlocks on running binaries * gdb extensions to examine mutex internals to detect deadlocks * folly::Synchronized and other libraries that make it more difficult to introduce concurrency bugs </itunes:summary>
    <itunes:duration>1674</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:20:31 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/109</guid>
    <dc:creator>Kenny Yu</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>debugging</category>
    <enclosure url="http://video.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109_high.mp4" length="464163274" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109.mp3" expression="full" duration="1674" fileSize="26800708" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109.mp4" expression="full" duration="1674" fileSize="40226260" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109_high.mp4" expression="full" duration="1674" fileSize="464163274" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0778/644a462e-33c1-44b5-89ef-eaa152a90778/109_mid.mp4" expression="full" duration="1674" fileSize="120347424" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1105-Yu.mp4" expression="full" duration="1674" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What C++ developers should know about globals (and the linker)</title>
    <description><![CDATA[Most C&#43;&#43; developers know that using globals (or singletons) excessively in code is usually a poor decision. But it is also hard to deny their usefulness in more than one situation: for loggers, factories, intrusive performance benchmarking, and other very useful applications, globals can be very helpful. Unfortunately, usage of globals in C&#43;&#43; ends up exposing details of the language not seen so often otherwise. Instead of dealing with our tried-and-true, well specified compiler, we often need to look more at the behavior of the linker, which can vary more between platforms and between different options such as static vs dynamic linking. This talk will look at some surprising pitfalls that can occur with globals: valid programs only a dozen lines long that can trigger segfaults when using the gcc linker. It will explore some of these issues using command line tools like nm and objdump. The talk will enumerate several pitfalls to be avoided. It will look at some of the different axes of the problem space such as: globals that are private versus public, eager versus lazy, global inter-dependencies, and quality of emitted assembly. Finally, solutions and idioms will be presented that address the major use cases, and make it easy for developers to use globals (only where necessary!) in a safe way.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:45ebbdb2bc784bfd8b47a86000018316">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/108</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/108</link>
    <itunes:summary>Most C&amp;#43;&amp;#43; developers know that using globals (or singletons) excessively in code is usually a poor decision. But it is also hard to deny their usefulness in more than one situation: for loggers, factories, intrusive performance benchmarking, and other very useful applications, globals can be very helpful. Unfortunately, usage of globals in C&amp;#43;&amp;#43; ends up exposing details of the language not seen so often otherwise. Instead of dealing with our tried-and-true, well specified compiler, we often need to look more at the behavior of the linker, which can vary more between platforms and between different options such as static vs dynamic linking. This talk will look at some surprising pitfalls that can occur with globals: valid programs only a dozen lines long that can trigger segfaults when using the gcc linker. It will explore some of these issues using command line tools like nm and objdump. The talk will enumerate several pitfalls to be avoided. It will look at some of the different axes of the problem space such as: globals that are private versus public, eager versus lazy, global inter-dependencies, and quality of emitted assembly. Finally, solutions and idioms will be presented that address the major use cases, and make it easy for developers to use globals (only where necessary!) in a safe way. </itunes:summary>
    <itunes:duration>2102</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:19:54 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/108</guid>
    <dc:creator>Nir Friedman</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108_high.mp4" length="781509686" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108.mp3" expression="full" duration="2102" fileSize="33647461" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108.mp4" expression="full" duration="2102" fileSize="51916732" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108_high.mp4" expression="full" duration="2102" fileSize="781509686" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7554/49950a6c-fea8-4e10-8e07-9c16a9877554/108_mid.mp4" expression="full" duration="2102" fileSize="187250557" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-Friedman.mp4" expression="full" duration="2102" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Higher-order Functions in C++: Techniques and Applications</title>
    <description><![CDATA[Higher-order functions are functions that take other functions as arguments. This is very frequently used in functional languages, somewhat less so in C&#43;&#43;, although this is slowly changing since C&#43;&#43;11 gave us lambdas and `std::function`... and frequently people don't realize that `std::function` is not a tool that fills all use cases. This talk will first attempt to convince you that higher-order functions are useful; by both showing functionalities that you know that work with them already, and by showcasing some more interesting problems that can be solved easily by function composition. Next, it'll work through different approaches to implementing higher-order functions in C&#43;&#43; and their pros and cons, performance- and code-size-wise.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3474966b3ec04f6bbd9fa86000018277">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/107</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/107</link>
    <itunes:summary>Higher-order functions are functions that take other functions as arguments. This is very frequently used in functional languages, somewhat less so in C&amp;#43;&amp;#43;, although this is slowly changing since C&amp;#43;&amp;#43;11 gave us lambdas and `std::function`... and frequently people don&#39;t realize that `std::function` is not a tool that fills all use cases. This talk will first attempt to convince you that higher-order functions are useful; by both showing functionalities that you know that work with them already, and by showcasing some more interesting problems that can be solved easily by function composition. Next, it&#39;ll work through different approaches to implementing higher-order functions in C&amp;#43;&amp;#43; and their pros and cons, performance- and code-size-wise. </itunes:summary>
    <itunes:duration>3739</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:19:16 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/107</guid>
    <dc:creator>Michał Dominiak</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107_high.mp4" length="1049504234" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107.mp3" expression="full" duration="3739" fileSize="59828977" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107.mp4" expression="full" duration="3739" fileSize="98289461" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107_high.mp4" expression="full" duration="3739" fileSize="1049504234" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5470/111f77cf-9715-4ab1-9a15-23c34d675470/107_mid.mp4" expression="full" duration="3739" fileSize="306397191" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-Dominiak.mp4" expression="full" duration="3739" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Traveling the Solar System with C++: Programming Rocket Science</title>
    <description><![CDATA[Spacecraft travel our solar system with exquisite accuracy. It is almost commonplace to learn that a spacecraft hit bullseye to within a few seconds after over a decade of space travel. How do we do that? What does it entail to design and operate the trajectory of a spacecraft? Newton, Kepler, Einstein, Tsiolkovsky, Battin and many others gave us beautiful mathematical models of the universe. Beautiful, yes, but also perversely complex. Without hope for analytical solutions, we must rely on numerical methods. Initially, numerical methods were executed by hand (people known as &quot;The Computers&quot;). Eventually we adopted electronic computers, and entered a multi-decade period of Fortran domination. Over the last decade, we have been experiencing increased adoption of C&#43;&#43;. Organizations feel attracted to C&#43;&#43;'s uncompromising performance, and its ability to abstract away the overwhelming complexity of spacecraft trajectory calculations. But it has not been an easy move! For example: luminaries of the field are stuck in Fortran, and current Engineering schools seldom offer any C&#43;&#43; education. As advanced scientific concepts require increasingly complex spacecraft trajectories, we see a bright future for C&#43;&#43; in this field. But we must be proactive in attracting, accommodating, and educating the current generation of engineers and scientists.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:06190797ed924fb6903da860000181dc">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/106</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/106</link>
    <itunes:summary>Spacecraft travel our solar system with exquisite accuracy. It is almost commonplace to learn that a spacecraft hit bullseye to within a few seconds after over a decade of space travel. How do we do that? What does it entail to design and operate the trajectory of a spacecraft? Newton, Kepler, Einstein, Tsiolkovsky, Battin and many others gave us beautiful mathematical models of the universe. Beautiful, yes, but also perversely complex. Without hope for analytical solutions, we must rely on numerical methods. Initially, numerical methods were executed by hand (people known as &amp;quot;The Computers&amp;quot;). Eventually we adopted electronic computers, and entered a multi-decade period of Fortran domination. Over the last decade, we have been experiencing increased adoption of C&amp;#43;&amp;#43;. Organizations feel attracted to C&amp;#43;&amp;#43;&#39;s uncompromising performance, and its ability to abstract away the overwhelming complexity of spacecraft trajectory calculations. But it has not been an easy move! For example: luminaries of the field are stuck in Fortran, and current Engineering schools seldom offer any C&amp;#43;&amp;#43; education. As advanced scientific concepts require increasingly complex spacecraft trajectories, we see a bright future for C&amp;#43;&amp;#43; in this field. But we must be proactive in attracting, accommodating, and educating the current generation of engineers and scientists. </itunes:summary>
    <itunes:duration>3259</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:18:36 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/106</guid>
    <dc:creator>Juan Arrieta</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106_high.mp4" length="1338986988" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106.mp3" expression="full" duration="3259" fileSize="52157801" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106.mp4" expression="full" duration="3259" fileSize="102038600" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106_high.mp4" expression="full" duration="3259" fileSize="1338986988" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/707e/f6252afd-78c0-4b16-aa6c-568cfa16707e/106_mid.mp4" expression="full" duration="3259" fileSize="377014280" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-Arrieta.mp4" expression="full" duration="3259" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Postmodern immutable data structures</title>
    <description><![CDATA[The C&#43;&#43; elites have been talking for years about value semantics, immutability, and sharing by communicating. A better world without mutexes, races, observers, command patterns and so more lies ahead! When it comes to doing it in practice, it is not so easy. One of the main problem lies in our data structures... Immutable data structures don't change their values. They are manipulated by producing new values. The old values remain there, and can be read safely from multiple threads without locks. They provide structural sharing, because new and old values can share common data — they are fast to compare and can keep a compact undo-history. As such, they are great for concurrent and interactive systems: they simplify the architecture of desktop software and allow servers to scale better. They are the secret sauce behind the success of Clojure and Scala, and even the JavaScript crowd is loving it via Facebook's Immutable.js. We are presenting Immer, a C&#43;&#43; library implementing modern and efficient data immutable data structures. In this session, we will talk about the architectural benefits of immutability and show how a very efficient yet powerful persistent vector type can be built using state of the art structures (Relaxed Radix Balanced Trees). We will also show an example application (a text-editor) built using the architectural style here proposed. Not only is its code extremely simple, it outperforms most similar programs. Don't believe it? Come and see! Immer: immutable data structures | https://sinusoid.es/immer Ewig: a text editor with an immutable data model | https://github.com/arximboldi/ewig  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:406a8ee4da2048d08a3ba860000180cd">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/105</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/105</link>
    <itunes:summary>The C&amp;#43;&amp;#43; elites have been talking for years about value semantics, immutability, and sharing by communicating. A better world without mutexes, races, observers, command patterns and so more lies ahead! When it comes to doing it in practice, it is not so easy. One of the main problem lies in our data structures... Immutable data structures don&#39;t change their values. They are manipulated by producing new values. The old values remain there, and can be read safely from multiple threads without locks. They provide structural sharing, because new and old values can share common data — they are fast to compare and can keep a compact undo-history. As such, they are great for concurrent and interactive systems: they simplify the architecture of desktop software and allow servers to scale better. They are the secret sauce behind the success of Clojure and Scala, and even the JavaScript crowd is loving it via Facebook&#39;s Immutable.js. We are presenting Immer, a C&amp;#43;&amp;#43; library implementing modern and efficient data immutable data structures. In this session, we will talk about the architectural benefits of immutability and show how a very efficient yet powerful persistent vector type can be built using state of the art structures (Relaxed Radix Balanced Trees). We will also show an example application (a text-editor) built using the architectural style here proposed. Not only is its code extremely simple, it outperforms most similar programs. Don&#39;t believe it? Come and see! Immer: immutable data structures | https://sinusoid.es/immer Ewig: a text editor with an immutable data model | https://github.com/arximboldi/ewig </itunes:summary>
    <itunes:duration>3959</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:18:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/105</guid>
    <dc:creator>Juan Pedro Bolivar Puente</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105_high.mp4" length="1694191814" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105.mp3" expression="full" duration="3959" fileSize="63348672" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105.mp4" expression="full" duration="3959" fileSize="120563320" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105_high.mp4" expression="full" duration="3959" fileSize="1694191814" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9e2c/28640773-d69c-4c60-9a91-3ba90b9e9e2c/105_mid.mp4" expression="full" duration="3959" fileSize="466851995" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Puente.mp4" expression="full" duration="3959" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Fantastic Algorithms and Where To Find Them</title>
    <description><![CDATA[Come dive into some exciting algorithms — tools rare enough to be novel, but useful enough to be found in practice. Want to learn about &quot;heavy hitters&quot; to prevent DOS attacks? Come to this talk. Want to avoid smashing your stack during tree destruction? Come to this talk. Want to hear war stories about how a new algorithm saved the day? Come to this talk! We'll dive into the finest of algorithms and see them in use — Fantastic Algorithms, and Where To Find Them.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e04e1d42fa6b420a8256a86000018045">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/104</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/104</link>
    <itunes:summary>Come dive into some exciting algorithms — tools rare enough to be novel, but useful enough to be found in practice. Want to learn about &amp;quot;heavy hitters&amp;quot; to prevent DOS attacks? Come to this talk. Want to avoid smashing your stack during tree destruction? Come to this talk. Want to hear war stories about how a new algorithm saved the day? Come to this talk! We&#39;ll dive into the finest of algorithms and see them in use — Fantastic Algorithms, and Where To Find Them. </itunes:summary>
    <itunes:duration>2817</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:17:22 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/104</guid>
    <dc:creator>Nicholas Ormrod</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104_high.mp4" length="616594901" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104.mp3" expression="full" duration="2817" fileSize="45084100" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104.mp4" expression="full" duration="2817" fileSize="67429101" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104_high.mp4" expression="full" duration="2817" fileSize="616594901" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb0b/90244f89-1d2d-4a37-9864-4247c8d2fb0b/104_mid.mp4" expression="full" duration="2817" fileSize="181444863" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Ormrod.mp4" expression="full" duration="2817" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Microcontrollers in Micro-increments : A Test-driven C++ Workflow for Embedded Systems </title>
    <description><![CDATA[Baby steps are safe steps. Making small moves in code, driven by tests, and continuously refactoring helps to keep embedded development on the right track. With test-driven development we can move more quickly, cleanly, and safely. With increased device capability comes increased expectations, and to meet these expectations we find that real-time operating systems, vendor-supplied drivers and third-party libraries are becoming the new normal for embedded projects. Debugging this complex embedded firmware directly on the target hardware, though, is a slow and painful process, and often with an uncertain outcome. In this talk I’ll demonstrate on a realistic hardware design how different test-driven idioms for C&#43;&#43; on embedded can help us to both build the code right, and build the right code. I’ll show how continuous integration builds, sanitizers and other tools can leverage this investment in tests, give us a high level of confidence in our code changes, and reduce the amount of time spent on debug-on-hardware activity. We’ll look at patterns of implementation in C&#43;&#43; that help to build testable embedded systems, as well as the trade-offs and compromises to a “pure” design ideal that we often have to make on these highly constrained devices.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:740e34797a7c4a78bc3ca86000017fd9">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/103</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/103</link>
    <itunes:summary>Baby steps are safe steps. Making small moves in code, driven by tests, and continuously refactoring helps to keep embedded development on the right track. With test-driven development we can move more quickly, cleanly, and safely. With increased device capability comes increased expectations, and to meet these expectations we find that real-time operating systems, vendor-supplied drivers and third-party libraries are becoming the new normal for embedded projects. Debugging this complex embedded firmware directly on the target hardware, though, is a slow and painful process, and often with an uncertain outcome. In this talk I’ll demonstrate on a realistic hardware design how different test-driven idioms for C&amp;#43;&amp;#43; on embedded can help us to both build the code right, and build the right code. I’ll show how continuous integration builds, sanitizers and other tools can leverage this investment in tests, give us a high level of confidence in our code changes, and reduce the amount of time spent on debug-on-hardware activity. We’ll look at patterns of implementation in C&amp;#43;&amp;#43; that help to build testable embedded systems, as well as the trade-offs and compromises to a “pure” design ideal that we often have to make on these highly constrained devices. </itunes:summary>
    <itunes:duration>3677</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:16:43 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/103</guid>
    <dc:creator>Mike Ritchie</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>architecture</category>
    <category>testing</category>
    <category>embedded</category>
    <enclosure url="http://video.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103_high.mp4" length="1019825757" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103.mp3" expression="full" duration="3677" fileSize="58841390" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103.mp4" expression="full" duration="3677" fileSize="90243837" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103_high.mp4" expression="full" duration="3677" fileSize="1019825757" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3abb/22f1b364-ca0e-49f5-aeee-c8270cc03abb/103_mid.mp4" expression="full" duration="3677" fileSize="275006125" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1515-Ritchie.mp4" expression="full" duration="3677" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Designing a Fast, Efficient, Cache-friendly Hash Table, Step by Step</title>
    <description><![CDATA[Hash tables consume a large volume of both compute resources and memory across Google's production system. The design for hash tables in C&#43;&#43; traces its origins to the SGI STL implementation from 20 years ago. Over these years, computer architecture and performance has changed dramatically and we need to evolve this fundamental data structure to follow those changes. This talk describes the process of design and optimization that starts with std::unordered_map and ends with a new design we call &quot;SwissTable&quot;, a 2-level N-way associative hash table. Our implementation of this new design gets 2-3x better performance with significant memory reductions (compared to unordered_map) and is being broadly deployed across Google.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:77a42be59f3d4d00b5f9a86000017f47">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/102</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/102</link>
    <itunes:summary>Hash tables consume a large volume of both compute resources and memory across Google&#39;s production system. The design for hash tables in C&amp;#43;&amp;#43; traces its origins to the SGI STL implementation from 20 years ago. Over these years, computer architecture and performance has changed dramatically and we need to evolve this fundamental data structure to follow those changes. This talk describes the process of design and optimization that starts with std::unordered_map and ends with a new design we call &amp;quot;SwissTable&amp;quot;, a 2-level N-way associative hash table. Our implementation of this new design gets 2-3x better performance with significant memory reductions (compared to unordered_map) and is being broadly deployed across Google. </itunes:summary>
    <itunes:duration>3573</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:16:08 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/102</guid>
    <dc:creator>Matt Kulukundis</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102_high.mp4" length="1453235619" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102.mp3" expression="full" duration="3573" fileSize="57172470" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102.mp4" expression="full" duration="3573" fileSize="108966381" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102_high.mp4" expression="full" duration="3573" fileSize="1453235619" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f72a/257e65ba-eb9a-4aae-a590-ac8004acf72a/102_mid.mp4" expression="full" duration="3573" fileSize="403425052" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-Kulukundis.mp4" expression="full" duration="3573" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Howling at the Moon: Lua for C++ Programmers</title>
    <description><![CDATA[C&#43;&#43; is a great tool for solving complex problems in a thorough way. But every once in a while, the desire for a simpler language emerges. For those parts of our code where performance is of secondary concern, but the ability to perform rapid iterations over the code is paramount, a scripting language might be a tempting choice. But integrating a second language besides C&#43;&#43; and managing the interaction between the two is also scary. Lua is a lightweight, dynamic language that was designed to be used as an embedded language within existing applications. It is easy to learn, has very reasonable runtime performance, and a memory footprint small enough that it is usable even on embedded systems. Furthermore, it is almost trivial to integrate with C&#43;&#43;. This talk will give a brief introduction to the Lua scripting language, highlighting specifically how it can complement C&#43;&#43;'s language features to enrich a developer's toolbox. In the second part of the talk, we will look at Lua's C API and give suggestions how to integrate it with a modern C&#43;&#43;17 codebase. In particular we will focus on how to interface with the dynamic language Lua without compromising the benefits of C&#43;&#43;'s strong type system.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2024f08e94b646279ef2a86000017eb1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/101</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/101</link>
    <itunes:summary>C&amp;#43;&amp;#43; is a great tool for solving complex problems in a thorough way. But every once in a while, the desire for a simpler language emerges. For those parts of our code where performance is of secondary concern, but the ability to perform rapid iterations over the code is paramount, a scripting language might be a tempting choice. But integrating a second language besides C&amp;#43;&amp;#43; and managing the interaction between the two is also scary. Lua is a lightweight, dynamic language that was designed to be used as an embedded language within existing applications. It is easy to learn, has very reasonable runtime performance, and a memory footprint small enough that it is usable even on embedded systems. Furthermore, it is almost trivial to integrate with C&amp;#43;&amp;#43;. This talk will give a brief introduction to the Lua scripting language, highlighting specifically how it can complement C&amp;#43;&amp;#43;&#39;s language features to enrich a developer&#39;s toolbox. In the second part of the talk, we will look at Lua&#39;s C API and give suggestions how to integrate it with a modern C&amp;#43;&amp;#43;17 codebase. In particular we will focus on how to interface with the dynamic language Lua without compromising the benefits of C&amp;#43;&amp;#43;&#39;s strong type system. </itunes:summary>
    <itunes:duration>1952</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:15:30 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/101</guid>
    <dc:creator>Andreas Weis</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101_high.mp4" length="716369054" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101.mp3" expression="full" duration="1952" fileSize="31239745" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101.mp4" expression="full" duration="1952" fileSize="49093666" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101_high.mp4" expression="full" duration="1952" fileSize="716369054" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfe6/5ef8b686-579f-4c3f-afc9-6f00abfecfe6/101_mid.mp4" expression="full" duration="1952" fileSize="171617775" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1105-Weis.mp4" expression="full" duration="1952" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Inside the Qt Object Model</title>
    <description><![CDATA[Programming your application with Qt means that you will sooner or later encounter the central QObject class, signal &amp; slot connections, or generic properties. The object model makes it safe and easy to develop with components. In this session we will take a look at the implementation of these features. For example, how emitting a signal with one line of code results in calling the right slot elsewhere. This is even possible when the sender lives in a different thread than the receiver. In addition, we will learn how reading and writing properties works behind the scenes.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2d7d62afa36c42d899d9a86000017de3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/100</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/100</link>
    <itunes:summary>Programming your application with Qt means that you will sooner or later encounter the central QObject class, signal &amp;amp; slot connections, or generic properties. The object model makes it safe and easy to develop with components. In this session we will take a look at the implementation of these features. For example, how emitting a signal with one line of code results in calling the right slot elsewhere. This is even possible when the sender lives in a different thread than the receiver. In addition, we will learn how reading and writing properties works behind the scenes. </itunes:summary>
    <itunes:duration>1786</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:14:46 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/100</guid>
    <dc:creator>Simon Hausmann</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>qt</category>
    <enclosure url="http://video.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100_high.mp4" length="518087175" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100.mp3" expression="full" duration="1786" fileSize="28587033" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100.mp4" expression="full" duration="1786" fileSize="52056017" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100_high.mp4" expression="full" duration="1786" fileSize="518087175" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1baf/e5095e42-bf05-473a-8287-9b3a9d591baf/100_mid.mp4" expression="full" duration="1786" fileSize="150728574" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1105-Hausmann.mp4" expression="full" duration="1786" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Understanding the runtime behaviors of C++ programs using uftrace tool</title>
    <description><![CDATA[This talk will present the uftrace function graph tracing tool, which was first introduced at CppCon last year. The uftrace tool utilizes function instrumentation techniques from compilers to provide deeper understanding of execution behaviors in C/C&#43;&#43; programs. uftrace provides multiple ways to analyze the runtime behavior of C/C&#43;&#43; programs and measures the execution time of each function without source code modification. In addition, uftrace is highly configurable and allows the user to apply numerous filters to any function in the program. The recorded trace data can be displayed in the console or in a graphical output such as chrome trace viewer or flamegraph. In this talk, Honggyu will present the uftrace internals, recent changes and how it can be practically used on production quality C&#43;&#43; projects. For more information, please visit https://github.com/namhyung/uftrace.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:13ac70d8f8944bb69263a86000017d57">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/099</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/099</link>
    <itunes:summary>This talk will present the uftrace function graph tracing tool, which was first introduced at CppCon last year. The uftrace tool utilizes function instrumentation techniques from compilers to provide deeper understanding of execution behaviors in C/C&amp;#43;&amp;#43; programs. uftrace provides multiple ways to analyze the runtime behavior of C/C&amp;#43;&amp;#43; programs and measures the execution time of each function without source code modification. In addition, uftrace is highly configurable and allows the user to apply numerous filters to any function in the program. The recorded trace data can be displayed in the console or in a graphical output such as chrome trace viewer or flamegraph. In this talk, Honggyu will present the uftrace internals, recent changes and how it can be practically used on production quality C&amp;#43;&amp;#43; projects. For more information, please visit https://github.com/namhyung/uftrace. </itunes:summary>
    <itunes:duration>1806</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:10:57 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/099</guid>
    <dc:creator>Honggyu Kim</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>debugging</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099_high.mp4" length="660469549" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099.mp3" expression="full" duration="1806" fileSize="28910850" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099.mp4" expression="full" duration="1806" fileSize="46066523" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099_high.mp4" expression="full" duration="1806" fileSize="660469549" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c32e/9ffb935a-8bf2-41ef-9938-6f6cb1bec32e/099_mid.mp4" expression="full" duration="1806" fileSize="150679613" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-Kim.mp4" expression="full" duration="1806" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Optimizing compilation times with Templates</title>
    <description><![CDATA[At Facebook, the main bottlenecks in build times are caused by auto-generated code from our core RPC Framework. Through the use of templates we were able to obtain up to 50% build speedup in our slowest compiling files. Generic programming is usually avoided because it slows down compile times. Why is it that, in this case, the use of templates actually improved it? This talk will take a deep-dive into the entire compilation process, from parsing and linking to template instantiation and code optimizations. It will teach you how to gather concrete data on these build steps and the techniques used to move code to templates while reducing build times.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8fd63c8bff40402fad8ea86000017cae">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/098</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/098</link>
    <itunes:summary>At Facebook, the main bottlenecks in build times are caused by auto-generated code from our core RPC Framework. Through the use of templates we were able to obtain up to 50% build speedup in our slowest compiling files. Generic programming is usually avoided because it slows down compile times. Why is it that, in this case, the use of templates actually improved it? This talk will take a deep-dive into the entire compilation process, from parsing and linking to template instantiation and code optimizations. It will teach you how to gather concrete data on these build steps and the techniques used to move code to templates while reducing build times. </itunes:summary>
    <itunes:duration>1725</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:10:21 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/098</guid>
    <dc:creator>Eddie Elizondo</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098_high.mp4" length="776805076" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098.mp3" expression="full" duration="1725" fileSize="27608270" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098.mp4" expression="full" duration="1725" fileSize="54351942" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098_high.mp4" expression="full" duration="1725" fileSize="776805076" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc9/185a05f7-24ed-4fce-9aa6-f7cee4ab9fc9/098_mid.mp4" expression="full" duration="1725" fileSize="210399102" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1030-Elizondo.mp4" expression="full" duration="1725" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Holy Grail! A Hash Array Mapped Trie for C++</title>
    <description><![CDATA[C&#43;&#43; has a handful of associative containers. We started with set and map, both based on node-based red-black trees. These are fine but are not the most efficient and, in particular, suffer from more cache misses than we’d like. If we want to build persistent versions of them it’s achievable but aggravates the problems even more and adds considerable extra complexity. (I know — I’ve done it!) C&#43;&#43;11 brought the hash-map based unordered_set and unordered_map, which are generally much faster, with better cache locality — but can be less memory-efficient and also don’t translate so easily into persistent versions. But there exists another general-purpose data structure that combines many of the characteristics of trees and hash tables into something that in many important ways is superior to both, and with minimal downside (they are close but not quite as fast as pure hash tables). Hash Array Mapped Tries are more memory-efficient than hash tables and, as a bonus, are trivially made persistent — with big implications for concurrency, functional programming, and other applications that benefit from being able to treat them immutably (as well as share large amounts of common state in memory at once). This talk will describe how this data structure works from the ground up and look at a reference implementation I am writing with the intention of proposing as a Boost library — and possibly later for standardisation. We’ll also look at how it can be used in practice, and at some of the performance characteristics.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:350dabfbde4e4f86bed7a86000017c0a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/097</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/097</link>
    <itunes:summary>C&amp;#43;&amp;#43; has a handful of associative containers. We started with set and map, both based on node-based red-black trees. These are fine but are not the most efficient and, in particular, suffer from more cache misses than we’d like. If we want to build persistent versions of them it’s achievable but aggravates the problems even more and adds considerable extra complexity. (I know — I’ve done it!) C&amp;#43;&amp;#43;11 brought the hash-map based unordered_set and unordered_map, which are generally much faster, with better cache locality — but can be less memory-efficient and also don’t translate so easily into persistent versions. But there exists another general-purpose data structure that combines many of the characteristics of trees and hash tables into something that in many important ways is superior to both, and with minimal downside (they are close but not quite as fast as pure hash tables). Hash Array Mapped Tries are more memory-efficient than hash tables and, as a bonus, are trivially made persistent — with big implications for concurrency, functional programming, and other applications that benefit from being able to treat them immutably (as well as share large amounts of common state in memory at once). This talk will describe how this data structure works from the ground up and look at a reference implementation I am writing with the intention of proposing as a Boost library — and possibly later for standardisation. We’ll also look at how it can be used in practice, and at some of the performance characteristics. </itunes:summary>
    <itunes:duration>3083</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:09:46 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/097</guid>
    <dc:creator>Phil Nash</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097_high.mp4" length="1462534691" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097.mp3" expression="full" duration="3083" fileSize="49331142" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097.mp4" expression="full" duration="3083" fileSize="131657831" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097_high.mp4" expression="full" duration="3083" fileSize="1462534691" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ab49/fd2c86af-d134-435f-bc83-867eb7b5ab49/097_mid.mp4" expression="full" duration="3083" fileSize="479884904" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Nash.mp4" expression="full" duration="3083" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Eight Ways to Handle Non-blocking Returns in Message-passing Programs: from C++98 via C++11 to C++20 </title>
    <description><![CDATA[Shared-Nothing approach of &quot;sharing memory by communicating&quot; (instead of &quot;communicating by sharing memory&quot;) gets more and more traction in the development world; this is not to mention that message-passing Shared-Nothing architectures have always been a cornerstone of both game development and UI development. These days, more and more projects realize the inherent dangers of combining business logic and thread sync within the same piece of code - which leads to cognitive overload (pushing developers well over 7&#43;-2 boundary) and results in poor developer productivity, poor program reliability, and very often - subpar performance. In addition, message-passing programs allow to achieve determinism easily, which in turn provides very significant benefits, including such beauties as production post-mortem analysis, replay-based regression testing, and low-latency fault tolerance. Within the realm of message-passing programs, the problem of processing non-void returns from non-blocking calls is a particularly ugly one. Over time, approaches to solving it have progressed from simple message-sending to OO-based callbacks, and further to the lambda pyramids and futures. Still, programming non-blocking calls is a Big Headache(tm). In this talk, we'll discuss _eight_ different ways of handling returns from non-blocking calls in the context of message-passing architectures (using event-driven architectures as an all-popular example of message-passing). We'll start with a simplistic message exchange, and will progress to void RPCs, OO-style callbacks, lambda pyramids, single-threaded futures, lambda-based &quot;code builder&quot;, coroutines/fibers, and co_await. Last but not least, we'll try to compare these different ways-to-handle-non-blocking-returns from the practical point of view, as well as the ways these eight ways are related to current C&#43;&#43; standard proposals; in addition - I'll argue for two important things-to-keep-in-mind for standard writers and implementors.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2fbf3367023f4beca768a86000017b74">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/096</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/096</link>
    <itunes:summary>Shared-Nothing approach of &amp;quot;sharing memory by communicating&amp;quot; (instead of &amp;quot;communicating by sharing memory&amp;quot;) gets more and more traction in the development world; this is not to mention that message-passing Shared-Nothing architectures have always been a cornerstone of both game development and UI development. These days, more and more projects realize the inherent dangers of combining business logic and thread sync within the same piece of code - which leads to cognitive overload (pushing developers well over 7&amp;#43;-2 boundary) and results in poor developer productivity, poor program reliability, and very often - subpar performance. In addition, message-passing programs allow to achieve determinism easily, which in turn provides very significant benefits, including such beauties as production post-mortem analysis, replay-based regression testing, and low-latency fault tolerance. Within the realm of message-passing programs, the problem of processing non-void returns from non-blocking calls is a particularly ugly one. Over time, approaches to solving it have progressed from simple message-sending to OO-based callbacks, and further to the lambda pyramids and futures. Still, programming non-blocking calls is a Big Headache(tm). In this talk, we&#39;ll discuss _eight_ different ways of handling returns from non-blocking calls in the context of message-passing architectures (using event-driven architectures as an all-popular example of message-passing). We&#39;ll start with a simplistic message exchange, and will progress to void RPCs, OO-style callbacks, lambda pyramids, single-threaded futures, lambda-based &amp;quot;code builder&amp;quot;, coroutines/fibers, and co_await. Last but not least, we&#39;ll try to compare these different ways-to-handle-non-blocking-returns from the practical point of view, as well as the ways these eight ways are related to current C&amp;#43;&amp;#43; standard proposals; in addition - I&#39;ll argue for two important things-to-keep-in-mind for standard</itunes:summary>
    <itunes:duration>3510</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:09:10 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/096</guid>
    <dc:creator>Sergey Ignatchenko</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096_high.mp4" length="958971068" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096.mp3" expression="full" duration="3510" fileSize="56169913" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096.mp4" expression="full" duration="3510" fileSize="95426952" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096_high.mp4" expression="full" duration="3510" fileSize="958971068" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a232/488fd827-9805-44bd-b997-0438f139a232/096_mid.mp4" expression="full" duration="3510" fileSize="277930439" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_0900-Ignatchenko.mp4" expression="full" duration="3510" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>So, you inherited a large code base...</title>
    <description><![CDATA[This is a talk about solving the most difficult problem a software engineer ever faces, converting a large codebase with antiquated designs and spotty quality into a state-of-the-art, modern system. We'll be covering clang-based refactoring, mnemonic reasoning methods, safe rewrites, coding standards, and, oh yes, migration paths. If you've ever been tasked with making a legacy codebase the best-in-class, or think you might, then this talk is for you.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b82fccad15204b5a902da86000017acb">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/095</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/095</link>
    <itunes:summary>This is a talk about solving the most difficult problem a software engineer ever faces, converting a large codebase with antiquated designs and spotty quality into a state-of-the-art, modern system. We&#39;ll be covering clang-based refactoring, mnemonic reasoning methods, safe rewrites, coding standards, and, oh yes, migration paths. If you&#39;ve ever been tasked with making a legacy codebase the best-in-class, or think you might, then this talk is for you. </itunes:summary>
    <itunes:duration>3274</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:08:34 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/095</guid>
    <dc:creator>David Sankel</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <enclosure url="http://video.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095_high.mp4" length="1054108766" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095.mp3" expression="full" duration="3274" fileSize="52392760" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095.mp4" expression="full" duration="3274" fileSize="83949516" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095_high.mp4" expression="full" duration="3274" fileSize="1054108766" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4332/3177638b-9024-4393-b6bb-9a8b0e1e4332/095_mid.mp4" expression="full" duration="3274" fileSize="275327623" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Sankel.mp4" expression="full" duration="3274" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>LauncherOne rocket with C++ engine</title>
    <description><![CDATA[Abstract: The most important aspects of rocket safety software development, from an idea, design, implementation to testing. Safe design patterns and critical error handling in fault tolerant systems. - Open source libraries can take you to space: How to choose open source libraries to be used for Federal Aviation Administration (FAA) certification, and correct use of them depending on the required safety level. Also will discuss how to handle FAA hard requirements throughout software development cycle. - Safe design patterns: Will discuss multiple design patterns to be used in safety critical systems, a compile time observer pattern using template metaprogramming will be discussed. Also guidelines to use a pattern depending on safety level, timing requirements, memory layout and testing. - Error handling: Rocket errors are gold, precious and don’t want to lose them: When having an error is more important to get as much telemetry as possible before losing the rocket. Since testing a real rocket means a real mission, telemetry can make a difference for future flights and error handling is critical to achieve this. Will present error handling techniques in startup and run time including throwing policies, interfaces pre/post conditions and class interface design techniques to implement the error handling along with testing, also guidelines to use them depending on safety level and application, and deciding what is a fatal error.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:87fa2fe6e86c482f858aa86000017a69">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/094</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/094</link>
    <itunes:summary>Abstract: The most important aspects of rocket safety software development, from an idea, design, implementation to testing. Safe design patterns and critical error handling in fault tolerant systems. - Open source libraries can take you to space: How to choose open source libraries to be used for Federal Aviation Administration (FAA) certification, and correct use of them depending on the required safety level. Also will discuss how to handle FAA hard requirements throughout software development cycle. - Safe design patterns: Will discuss multiple design patterns to be used in safety critical systems, a compile time observer pattern using template metaprogramming will be discussed. Also guidelines to use a pattern depending on safety level, timing requirements, memory layout and testing. - Error handling: Rocket errors are gold, precious and don’t want to lose them: When having an error is more important to get as much telemetry as possible before losing the rocket. Since testing a real rocket means a real mission, telemetry can make a difference for future flights and error handling is critical to achieve this. Will present error handling techniques in startup and run time including throwing policies, interfaces pre/post conditions and class interface design techniques to implement the error handling along with testing, also guidelines to use them depending on safety level and application, and deciding what is a fatal error. </itunes:summary>
    <itunes:duration>3703</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:07:56 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/094</guid>
    <dc:creator>Diego Franco</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094_high.mp4" length="1047854719" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094.mp3" expression="full" duration="3703" fileSize="59251768" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094.mp4" expression="full" duration="3703" fileSize="112490985" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094_high.mp4" expression="full" duration="3703" fileSize="1047854719" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f190/9a6f6995-9ad0-4921-b688-e61eb1cff190/094_mid.mp4" expression="full" duration="3703" fileSize="338292248" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1645-Franco.mp4" expression="full" duration="3703" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Naked coroutines live (with networking)</title>
    <description><![CDATA[C&#43;&#43; Coroutines come naked. Just the language feature, no library support apart from a few traits that allow developing coroutine adaptors. In this session we will start with just a compiler that implements a coroutine TS and a reference networking TS implementation and through (mostly) live coding together we will develop a cool, efficient and beautiful async networking app.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b1ed9f808ed348ee968fa86000017988">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/093</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/093</link>
    <itunes:summary>C&amp;#43;&amp;#43; Coroutines come naked. Just the language feature, no library support apart from a few traits that allow developing coroutine adaptors. In this session we will start with just a compiler that implements a coroutine TS and a reference networking TS implementation and through (mostly) live coding together we will develop a cool, efficient and beautiful async networking app. </itunes:summary>
    <itunes:duration>3840</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:07:16 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/093</guid>
    <dc:creator>Gor Nishanov</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093_high.mp4" length="1079205817" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093.mp3" expression="full" duration="3840" fileSize="61446722" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093.mp4" expression="full" duration="3840" fileSize="4072424" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093_high.mp4" expression="full" duration="3840" fileSize="1079205817" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f1c/435f71ce-3b1c-49ca-8b1e-24c3c3e69f1c/093_mid.mp4" expression="full" duration="3840" fileSize="13195487" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1515-Nishanov.mp4" expression="full" duration="3840" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ and Persistent Memory Technologies, Like Intel&#39;s 3D-XPoint</title>
    <description><![CDATA[With the advent of a new, persistent-memory-enabled world, the current software industry must prepare for changes. Looking forward to meet the new requirements set by this new type of hardware, a new standard API should be introduced to ease the adoption of this new and exciting technology. During the development of the NVM (Non Volatile Memory) Library, it became apparent that the C API is complex and hard to use. To remove some of the pain points, a proposal of a new C&#43;&#43; API was made. This lecture will introduce the API and explain some of the intricacies behind it. This entails both the basic concepts of persistent memory programming, like pointers and transactions, and a prototype integration with the standard library's containers. Hopefully this will spark a discussion and will help validate the proposed changes. Deciding on an API this early on will help developers in the early adoption of this potentially game-changing technology.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7a67c8a854a747efa63fa860000178f6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/092</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/092</link>
    <itunes:summary>With the advent of a new, persistent-memory-enabled world, the current software industry must prepare for changes. Looking forward to meet the new requirements set by this new type of hardware, a new standard API should be introduced to ease the adoption of this new and exciting technology. During the development of the NVM (Non Volatile Memory) Library, it became apparent that the C API is complex and hard to use. To remove some of the pain points, a proposal of a new C&amp;#43;&amp;#43; API was made. This lecture will introduce the API and explain some of the intricacies behind it. This entails both the basic concepts of persistent memory programming, like pointers and transactions, and a prototype integration with the standard library&#39;s containers. Hopefully this will spark a discussion and will help validate the proposed changes. Deciding on an API this early on will help developers in the early adoption of this potentially game-changing technology. </itunes:summary>
    <itunes:duration>4106</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:06:28 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/092</guid>
    <dc:creator>Tomasz Kapela</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092_high.mp4" length="1718276821" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092.mp3" expression="full" duration="4106" fileSize="2510825" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092.mp4" expression="full" duration="4106" fileSize="116471424" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092_high.mp4" expression="full" duration="4106" fileSize="1718276821" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d502/9a3fe461-7ee8-4a3a-b5d1-d233c537d502/092_mid.mp4" expression="full" duration="4106" fileSize="12470546" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1515-Kapela.mp4" expression="full" duration="4106" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Tour of Deep Learning With C++</title>
    <description><![CDATA[Deep Learning is a subfield of artificial intelligence that employs deep neural network architectures and novel learning algorithms to achieve state of the art results in image classification, speech recognition, motion planning and other domains. While all machine learning algorithms are initially formulated in mathematical equations (the only programming language where single letter variable names are encouraged), they must eventually be translated into a computer program. Moreover, because deep neural networks can often be composed of many hundreds of millions of trainable parameters and operate on gigabytes of data, these computer programs have to be fast, lean, often distributed and squeeze every last ounce of performance out of modern CPUs, GPUs and even specialized hardware. This is synonymous with saying machine learning algorithms are usually implemented in C or C&#43;&#43; under the hood, even though libraries like TensorFlow, Torch or Caffe expose APIs in Python or Lua to ease the process of research and speed up iteration. This talk aims to break the single responsibility principle and do three things at once: 1. Give a sweeping introduction to the state of the art in deep learning, 2. Give examples of what it means to implement neural networks in C&#43;&#43;, from an implementer's perspective, 3. Give examples of building deep learning models in C&#43;&#43;, from a researcher's perspective. Here, the distinction between building and implementing is that the former means stacking together high level modules to achieve some machine learning task, while the latter means actually writing the CPU or GPU kernels that make the magic happen. The goal of the talk is for every attendee to walk away with a general understanding of the state and challenges of the field and hopefully be in a position to implement and build their own deep learning models.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:62a53667fde64bfa99b5a8600001785c">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/091</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/091</link>
    <itunes:summary>Deep Learning is a subfield of artificial intelligence that employs deep neural network architectures and novel learning algorithms to achieve state of the art results in image classification, speech recognition, motion planning and other domains. While all machine learning algorithms are initially formulated in mathematical equations (the only programming language where single letter variable names are encouraged), they must eventually be translated into a computer program. Moreover, because deep neural networks can often be composed of many hundreds of millions of trainable parameters and operate on gigabytes of data, these computer programs have to be fast, lean, often distributed and squeeze every last ounce of performance out of modern CPUs, GPUs and even specialized hardware. This is synonymous with saying machine learning algorithms are usually implemented in C or C&amp;#43;&amp;#43; under the hood, even though libraries like TensorFlow, Torch or Caffe expose APIs in Python or Lua to ease the process of research and speed up iteration. This talk aims to break the single responsibility principle and do three things at once: 1. Give a sweeping introduction to the state of the art in deep learning, 2. Give examples of what it means to implement neural networks in C&amp;#43;&amp;#43;, from an implementer&#39;s perspective, 3. Give examples of building deep learning models in C&amp;#43;&amp;#43;, from a researcher&#39;s perspective. Here, the distinction between building and implementing is that the former means stacking together high level modules to achieve some machine learning task, while the latter means actually writing the CPU or GPU kernels that make the magic happen. The goal of the talk is for every attendee to walk away with a general understanding of the state and challenges of the field and hopefully be in a position to implement and build their own deep learning models. </itunes:summary>
    <itunes:duration>3300</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:05:50 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/091</guid>
    <dc:creator>Peter Goldsborough</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>ai</category>
    <enclosure url="http://video.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091_high.mp4" length="18281956" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091.mp3" expression="full" duration="3300" fileSize="52809769" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091.mp4" expression="full" duration="3300" fileSize="87392442" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091_high.mp4" expression="full" duration="3300" fileSize="18281956" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6e56/de878485-5bb1-486e-9d94-53012f746e56/091_mid.mp4" expression="full" duration="3300" fileSize="283572794" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1515-Goldsborough.mp4" expression="full" duration="3300" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How to Write a Custom Allocator</title>
    <description><![CDATA[You'd like to improve the performance of your application with regard to memory management, and you believe this can be accomplished by writing a custom allocator. But where do you start? Modern C&#43;&#43; brings many improvements to the standard allocator model, but with those improvements come several issues that must be addressed when designing a new allocator. This talk will provide guidance on how to write custom allocators for the C&#43;&#43;14/C&#43;&#43;17 standard containers. It will cover the requirements specified by the standard, and will describe the facilities provided by the standard to support the new allocator model and allocator-aware containers. We'll look at the issues of allocator identity and propagation, and examine their implications for standard library users, standard library implementers, and custom allocator implementers. We'll see how a container uses its allocator, including when and how a container's allocator instance propagates. This will give us the necessary background to describe allocators that implement unusual semantics, such as a stateful allocator type whose instances compare non-equal. Finally, the talk will provide some guidelines for how to specify a custom allocator's public interface based on the semantics it provides.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ee414116d58349aabd8ca860000177a5">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/090</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/090</link>
    <itunes:summary>You&#39;d like to improve the performance of your application with regard to memory management, and you believe this can be accomplished by writing a custom allocator. But where do you start? Modern C&amp;#43;&amp;#43; brings many improvements to the standard allocator model, but with those improvements come several issues that must be addressed when designing a new allocator. This talk will provide guidance on how to write custom allocators for the C&amp;#43;&amp;#43;14/C&amp;#43;&amp;#43;17 standard containers. It will cover the requirements specified by the standard, and will describe the facilities provided by the standard to support the new allocator model and allocator-aware containers. We&#39;ll look at the issues of allocator identity and propagation, and examine their implications for standard library users, standard library implementers, and custom allocator implementers. We&#39;ll see how a container uses its allocator, including when and how a container&#39;s allocator instance propagates. This will give us the necessary background to describe allocators that implement unusual semantics, such as a stateful allocator type whose instances compare non-equal. Finally, the talk will provide some guidelines for how to specify a custom allocator&#39;s public interface based on the semantics it provides. </itunes:summary>
    <itunes:duration>3819</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:05:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/090</guid>
    <dc:creator>Bob Steagall</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090_high.mp4" length="1005667955" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090.mp3" expression="full" duration="3819" fileSize="61114922" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090.mp4" expression="full" duration="3819" fileSize="98996447" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090_high.mp4" expression="full" duration="3819" fileSize="1005667955" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f6e3/8e253977-e8bb-4751-af84-e6481b6df6e3/090_mid.mp4" expression="full" duration="3819" fileSize="313573494" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Steagall.mp4" expression="full" duration="3819" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical Techniques for Improving C++ Build Times</title>
    <description><![CDATA[Slow builds block all C&#43;&#43; developers from the work being done. At Facebook we have a huge codebase, where the time spent compiling C&#43;&#43; sources grows significantly faster than the size of the repository. In this talk we will share our practical experience optimizing build times, in some cases from several hours to just a few minutes. The majority of the techniques are open sourced or generic and can be immediately applied to your codebase. Facebook strives to squeeze build speed out of everything: starting from a distributed build system, through the compiler toolchain and ending with code itself. We will dive into different strategies of calculating cache keys, potential caching traps and approaches to improve cache efficiency. We tune the compiler, specifically with compilation flags, profile data and link time options. We will talk about the benchmarks we use to track improvements and detect regressions and what challenges we face there. Finally, you will learn about our unsuccessful approaches with an explanation of why they didn't work out for us.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6f63e6a7392a4333a4afa86000017742">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/089</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/089</link>
    <itunes:summary>Slow builds block all C&amp;#43;&amp;#43; developers from the work being done. At Facebook we have a huge codebase, where the time spent compiling C&amp;#43;&amp;#43; sources grows significantly faster than the size of the repository. In this talk we will share our practical experience optimizing build times, in some cases from several hours to just a few minutes. The majority of the techniques are open sourced or generic and can be immediately applied to your codebase. Facebook strives to squeeze build speed out of everything: starting from a distributed build system, through the compiler toolchain and ending with code itself. We will dive into different strategies of calculating cache keys, potential caching traps and approaches to improve cache efficiency. We tune the compiler, specifically with compilation flags, profile data and link time options. We will talk about the benchmarks we use to track improvements and detect regressions and what challenges we face there. Finally, you will learn about our unsuccessful approaches with an explanation of why they didn&#39;t work out for us. </itunes:summary>
    <itunes:duration>3351</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:04:24 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/089</guid>
    <dc:creator>Dmitry Panin</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <enclosure url="http://video.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089_high.mp4" length="1438958197" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089.mp3" expression="full" duration="3351" fileSize="53623117" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089.mp4" expression="full" duration="3351" fileSize="87585296" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089_high.mp4" expression="full" duration="3351" fileSize="1438958197" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca36/71e32092-1394-4f64-a7ed-bedaaf53ca36/089_mid.mp4" expression="full" duration="3351" fileSize="370998707" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Panin.mp4" expression="full" duration="3351" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Mix Tests and Production Code With Doctest - Implementing and Using the Fastest Modern C++ Testing Framework </title>
    <description><![CDATA[Not a typical talk about testing. Here are some quotes from the Program Committee about it: &quot;Seeing a talk proposal about a new unit test framework made me quite skeptical. But then I looked at slides from one of the previous talks, and this looks very cool.&quot; &quot;I think others will be just as interested; this is just the kind of talk we want at the conference.&quot; &quot;Doing interesting and meaningful things in header-only libraries can be a fascinating topic, and this presentation appears to address some very interesting learnings from such an experience.&quot; &quot;The presentation is clearly well-prepared, having been given previously and iterated upon.&quot; doctest is new to the C&#43;&#43; testing framework scene but is by far the fastest both in compile times (by orders of magnitude) and runtime compared to other such feature-rich alternatives. It brings the ability of compiled languages such as D / Rust / Nim to have tests written directly in the production code by providing a fast, transparent and flexible test runner with a clean interface which can be removed entirely from the binary along with all tests for release builds of the software that are shipped to customers. The framework can be used like any other even if you don't want/need to mix production code and tests - the list of features doesn't stop growing. By attending this talk you will get familiar with the framework and see how it's different from all the rest. To make things more interesting the presentation will not just focus on using the framework, but will delve into useful and generally applicable C&#43;&#43; techniques from its implementation for more than half the session length which can be applied in different areas of your work - like how to: register code automatically before the program enters main() decompose expressions with templates translate exceptions - type-erased user-registerable translators write a header-only library which compiles very very fast not at the cost of runtime performance implement assert macros that don't result in code bloat deal with warnings outside of the framework header - generated by code expanded from macros loop a void owl once with while((void)0,0)  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:06da35c82c834af1ac71a860000176a8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/088</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/088</link>
    <itunes:summary>Not a typical talk about testing. Here are some quotes from the Program Committee about it: &amp;quot;Seeing a talk proposal about a new unit test framework made me quite skeptical. But then I looked at slides from one of the previous talks, and this looks very cool.&amp;quot; &amp;quot;I think others will be just as interested; this is just the kind of talk we want at the conference.&amp;quot; &amp;quot;Doing interesting and meaningful things in header-only libraries can be a fascinating topic, and this presentation appears to address some very interesting learnings from such an experience.&amp;quot; &amp;quot;The presentation is clearly well-prepared, having been given previously and iterated upon.&amp;quot; doctest is new to the C&amp;#43;&amp;#43; testing framework scene but is by far the fastest both in compile times (by orders of magnitude) and runtime compared to other such feature-rich alternatives. It brings the ability of compiled languages such as D / Rust / Nim to have tests written directly in the production code by providing a fast, transparent and flexible test runner with a clean interface which can be removed entirely from the binary along with all tests for release builds of the software that are shipped to customers. The framework can be used like any other even if you don&#39;t want/need to mix production code and tests - the list of features doesn&#39;t stop growing. By attending this talk you will get familiar with the framework and see how it&#39;s different from all the rest. To make things more interesting the presentation will not just focus on using the framework, but will delve into useful and generally applicable C&amp;#43;&amp;#43; techniques from its implementation for more than half the session length which can be applied in different areas of your work - like how to: register code automatically before the program enters main() decompose expressions with templates translate exceptions - type-erased user-registerable translators write a header-only library which compiles very very fast not at t</itunes:summary>
    <itunes:duration>3080</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:03:49 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/088</guid>
    <dc:creator>Viktor Kirilov</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>testing</category>
    <enclosure url="http://video.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088_high.mp4" length="761468737" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088.mp3" expression="full" duration="3080" fileSize="49285188" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088.mp4" expression="full" duration="3080" fileSize="69878077" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088_high.mp4" expression="full" duration="3080" fileSize="761468737" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b8a/97f192fb-f204-4d54-882d-6655a79e8b8a/088_mid.mp4" expression="full" duration="3080" fileSize="191458594" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Kirilov.mp4" expression="full" duration="3080" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Asynchronous C++ Parallel Programming Model</title>
    <description><![CDATA[With the advent of modern computer architectures characterized by — amongst other things —many-core nodes, deep and complex memory hierarchies, heterogeneous subsystems, and power-aware components, it is becoming increasingly difficult to achieve best possible application scalability and satisfactory parallel efficiency. The community is experimenting with new programming models which are based on finer-grain parallelism, and flexible and lightweight synchronization, combined with work-queue-based, message-driven computation. Implementations of such a model are often based on a framework managing lightweight tasks which allows to flexibly coordinate highly hierarchical parallel execution flows. The recently growing interest in the C&#43;&#43; programming language in industry and in the wider community increases the demand for libraries implementing those programming models for the language. Developers of applications targeting high-performance computing resources would like to see libraries which provide higher-level programming interfaces shielding them from the lower-level details and complexities of modern computer architectures. At the same time, those APIs have to expose all necessary customization points such that power users can still fine-tune their applications enabling them to control data placement and execution, if necessary. In this talk we present a new asynchronous C&#43;&#43; parallel programming model which is built around lightweight tasks and mechanisms to orchestrate massively parallel (and distributed) execution. This model uses the concept of (std) futures to make data dependencies explicit, employs explicit and implicit asynchrony to hide latencies and to improve utilization, and manages finer-grain parallelism with a work-stealing scheduling system enabling automatic load-balancing of tasks. As a result of combining those capabilities the programming model exposes auto-parallelization capabilities as emergent properties. We have implemented the this model as a C&#43;&#43; library exposing a higher-level parallelism API which is fully conforming to the existing C&#43;&#43;11/14/17 standards and is aligned with the ongoing standardization work. This API and programming model has shown to enable writing parallel and distributed applications for heterogeneous resources with excellent performance and scaling characteristics.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:dd25614ff9f24e7180dba860000175d9">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/087</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/087</link>
    <itunes:summary>With the advent of modern computer architectures characterized by — amongst other things —many-core nodes, deep and complex memory hierarchies, heterogeneous subsystems, and power-aware components, it is becoming increasingly difficult to achieve best possible application scalability and satisfactory parallel efficiency. The community is experimenting with new programming models which are based on finer-grain parallelism, and flexible and lightweight synchronization, combined with work-queue-based, message-driven computation. Implementations of such a model are often based on a framework managing lightweight tasks which allows to flexibly coordinate highly hierarchical parallel execution flows. The recently growing interest in the C&amp;#43;&amp;#43; programming language in industry and in the wider community increases the demand for libraries implementing those programming models for the language. Developers of applications targeting high-performance computing resources would like to see libraries which provide higher-level programming interfaces shielding them from the lower-level details and complexities of modern computer architectures. At the same time, those APIs have to expose all necessary customization points such that power users can still fine-tune their applications enabling them to control data placement and execution, if necessary. In this talk we present a new asynchronous C&amp;#43;&amp;#43; parallel programming model which is built around lightweight tasks and mechanisms to orchestrate massively parallel (and distributed) execution. This model uses the concept of (std) futures to make data dependencies explicit, employs explicit and implicit asynchrony to hide latencies and to improve utilization, and manages finer-grain parallelism with a work-stealing scheduling system enabling automatic load-balancing of tasks. As a result of combining those capabilities the programming model exposes auto-parallelization capabilities as emergent properties. We have implemented t</itunes:summary>
    <itunes:duration>4005</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:03:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/087</guid>
    <dc:creator>Hartmut Kaiser</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087_high.mp4" length="1145960636" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087.mp3" expression="full" duration="4005" fileSize="64082903" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087.mp4" expression="full" duration="4005" fileSize="108196227" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087_high.mp4" expression="full" duration="4005" fileSize="1145960636" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b58d/d9174a3d-dad9-465f-b190-b9d97b64b58d/087_mid.mp4" expression="full" duration="4005" fileSize="332869554" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Kaiser.mp4" expression="full" duration="4005" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Reader-Writer Lock versus Mutex - Understanding a Lost Bet</title>
    <description><![CDATA[Mutexes have frequently been observed to outperform reader-writer locks in domains where, logically, reader-writer locks should dominate. I was recently given an opportunity to address this inconsistency and, to demonstrate my certainty of success, accepted a bet regarding outperforming a mutex for a high read, low write work task with short — but not extremely short — lock hold times. I lost the bet. I resolved to understand how I lost this bet and, in my mind at least, convert this &quot;loss&quot; to a &quot;win&quot;. The bet focused on a Linux platform (the evaluations presented are multi-platform). This presentation will discuss design criteria for a reader-writer lock, the &quot;losing&quot; implementation, the performance results for the &quot;losing&quot; implementation, a possible explanation for the loss, the novel &quot;winning&quot; implementation, and the results supporting the value of the &quot;winning&quot; implementation. A basic understanding of mutexes, reader-writer locks, and atomic operations is recommended for attendees.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bb6d633e55604209a97ca8600001755b">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/086</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/086</link>
    <itunes:summary>Mutexes have frequently been observed to outperform reader-writer locks in domains where, logically, reader-writer locks should dominate. I was recently given an opportunity to address this inconsistency and, to demonstrate my certainty of success, accepted a bet regarding outperforming a mutex for a high read, low write work task with short — but not extremely short — lock hold times. I lost the bet. I resolved to understand how I lost this bet and, in my mind at least, convert this &amp;quot;loss&amp;quot; to a &amp;quot;win&amp;quot;. The bet focused on a Linux platform (the evaluations presented are multi-platform). This presentation will discuss design criteria for a reader-writer lock, the &amp;quot;losing&amp;quot; implementation, the performance results for the &amp;quot;losing&amp;quot; implementation, a possible explanation for the loss, the novel &amp;quot;winning&amp;quot; implementation, and the results supporting the value of the &amp;quot;winning&amp;quot; implementation. A basic understanding of mutexes, reader-writer locks, and atomic operations is recommended for attendees. </itunes:summary>
    <itunes:duration>2520</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:02:25 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/086</guid>
    <dc:creator>Jeffrey Mendelsohn</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086_high.mp4" length="509126448" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086.mp3" expression="full" duration="2520" fileSize="40327139" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086.mp4" expression="full" duration="2520" fileSize="57126669" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086_high.mp4" expression="full" duration="2520" fileSize="509126448" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3f09/2c5deb72-17fa-49d6-a4fa-4f313f543f09/086_mid.mp4" expression="full" duration="2520" fileSize="149860668" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-Mendelsohn.mp4" expression="full" duration="2520" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Make Classes Great Again! (Using Concepts for Customization Points)</title>
    <description><![CDATA[Learn new ways to think about class design, that you can apply to your own projects! In this talk we'll start with a simple class that models an HTTP message. We’ll go over the limitations of the simple declaration, then walk through a series of guided improvements. We will explore ways to think about class models, create a concept as a customization point, perform type checking, and document a concept. The example class we will explore is based on the message container found in the Boost.Beast library. You do not need to know anything (or care) about network protocols. This is about building better classes.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:88c44df044ae4c7b9539a860000174d3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/085</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/085</link>
    <itunes:summary>Learn new ways to think about class design, that you can apply to your own projects! In this talk we&#39;ll start with a simple class that models an HTTP message. We’ll go over the limitations of the simple declaration, then walk through a series of guided improvements. We will explore ways to think about class models, create a concept as a customization point, perform type checking, and document a concept. The example class we will explore is based on the message container found in the Boost.Beast library. You do not need to know anything (or care) about network protocols. This is about building better classes. </itunes:summary>
    <itunes:duration>2638</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:01:52 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/085</guid>
    <dc:creator>Vinnie Falco</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085_high.mp4" length="885433603" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085.mp3" expression="full" duration="2638" fileSize="42220656" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085.mp4" expression="full" duration="2638" fileSize="83099892" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085_high.mp4" expression="full" duration="2638" fileSize="885433603" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/55cc/fca01237-611f-4aa5-a835-e4d3637755cc/085_mid.mp4" expression="full" duration="2638" fileSize="268250171" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-Falco.mp4" expression="full" duration="2638" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Effective Qt (2017 edition)</title>
    <description><![CDATA[The title of this talk pays tribute to the &quot;Effective Qt&quot; columns, a series of blog posts started by Marc Mutz many years ago, whose title was in turn inspired by Scott Meyer's book series. The purpose of the columns was to provide in-depth explanations about Qt data structures and design patterns to C&#43;&#43; developers, who wanted to know more about how to use Qt core classes, and how to use them &quot;effectively&quot;. This talk aims to be an up-to-date version of (some of) the advices in the columns, in the light of the major changes introduced to core classes in Qt 5's lifetime (including changes that will come with Qt 5.10, scheduled to be released at the end of 2017). Moreover, we will see how the language and Standard Library features added to latest C&#43;&#43; standards interact with long-established practices when developing Qt code. The talk is structured as a series of best practices, guidelines and tips&amp;tricks, learned from many years of experience developing Qt-based projects, as well as the significant effort spent developing Qt itself and steering its evolution. For each advice, a technical discussion of the rationale behind it will be provided, and possibly some indication about future developments and what to expect in upcoming Qt versions. The topics mentioned in this talk cover many areas in Qt, and should contain something new or interesting for Qt developers using C&#43;&#43;, hopefully helping them to build quality libraries and applications. The main focus areas will be around Qt containers (and their algorithms) as well as Qt string classes. Attendees are expected to have some working knowledge of Qt C&#43;&#43; APIs (and especially C&#43;&#43; APIs in QtCore).  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0c49b3072e4046569226a86000017442">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/084</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/084</link>
    <itunes:summary>The title of this talk pays tribute to the &amp;quot;Effective Qt&amp;quot; columns, a series of blog posts started by Marc Mutz many years ago, whose title was in turn inspired by Scott Meyer&#39;s book series. The purpose of the columns was to provide in-depth explanations about Qt data structures and design patterns to C&amp;#43;&amp;#43; developers, who wanted to know more about how to use Qt core classes, and how to use them &amp;quot;effectively&amp;quot;. This talk aims to be an up-to-date version of (some of) the advices in the columns, in the light of the major changes introduced to core classes in Qt 5&#39;s lifetime (including changes that will come with Qt 5.10, scheduled to be released at the end of 2017). Moreover, we will see how the language and Standard Library features added to latest C&amp;#43;&amp;#43; standards interact with long-established practices when developing Qt code. The talk is structured as a series of best practices, guidelines and tips&amp;amp;tricks, learned from many years of experience developing Qt-based projects, as well as the significant effort spent developing Qt itself and steering its evolution. For each advice, a technical discussion of the rationale behind it will be provided, and possibly some indication about future developments and what to expect in upcoming Qt versions. The topics mentioned in this talk cover many areas in Qt, and should contain something new or interesting for Qt developers using C&amp;#43;&amp;#43;, hopefully helping them to build quality libraries and applications. The main focus areas will be around Qt containers (and their algorithms) as well as Qt string classes. Attendees are expected to have some working knowledge of Qt C&amp;#43;&amp;#43; APIs (and especially C&amp;#43;&amp;#43; APIs in QtCore). </itunes:summary>
    <itunes:duration>3667</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:01:18 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/084</guid>
    <dc:creator>Giuseppe D&#39;Angelo</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>qt</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084_high.mp4" length="997284560" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084.mp3" expression="full" duration="3667" fileSize="58685354" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084.mp4" expression="full" duration="3667" fileSize="82522349" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084_high.mp4" expression="full" duration="3667" fileSize="997284560" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e2f/912d5bd7-61fa-4a7f-abe1-354f24061e2f/084_mid.mp4" expression="full" duration="3667" fileSize="248295877" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-D'Angelo.mp4" expression="full" duration="3667" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical Patterns with the Networking TS</title>
    <description><![CDATA[Networking is coming to a standard near you — but how do you use it? Based on similar concepts found in Boost.Asio, the Networking TS provides a rich API for synchronous and asynchronous network communications. The library boasts an impressive TTHW indicator (Time To Hello World); however, implementing robust client and server solutions often baffles newcomers and seasoned practitioners alike. Inspiration for this talk comes from the questions we have received on IRC, Slack, reddit, private emails, and classes we teach. In this tutorial, Michael will provide a quick crash-course on using the Networking TS for asynchronous communication and then present patterns and idioms used at Ciere to address subjects including: * Lifetime issues * Clean startup and shutdown * Timeouts, errors, and exceptions * Taming events * Decoupling and layering This session will be of interest to individuals wanting to get started with the Networking TS or who need some inspiration in building robust systems. Many of the techniques presented will also be applicable with Boost.Asio and the standalone Asio libraries.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0df953d6e96048ae9b08a860000173a2">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/083</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/083</link>
    <itunes:summary>Networking is coming to a standard near you — but how do you use it? Based on similar concepts found in Boost.Asio, the Networking TS provides a rich API for synchronous and asynchronous network communications. The library boasts an impressive TTHW indicator (Time To Hello World); however, implementing robust client and server solutions often baffles newcomers and seasoned practitioners alike. Inspiration for this talk comes from the questions we have received on IRC, Slack, reddit, private emails, and classes we teach. In this tutorial, Michael will provide a quick crash-course on using the Networking TS for asynchronous communication and then present patterns and idioms used at Ciere to address subjects including: * Lifetime issues * Clean startup and shutdown * Timeouts, errors, and exceptions * Taming events * Decoupling and layering This session will be of interest to individuals wanting to get started with the Networking TS or who need some inspiration in building robust systems. Many of the techniques presented will also be applicable with Boost.Asio and the standalone Asio libraries. </itunes:summary>
    <itunes:duration>3664</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 23:00:37 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/083</guid>
    <dc:creator>Michael Caisse</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <category>networking</category>
    <enclosure url="http://video.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083_high.mp4" length="1077954770" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083.mp3" expression="full" duration="3664" fileSize="58639306" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083.mp4" expression="full" duration="3664" fileSize="93700332" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083_high.mp4" expression="full" duration="3664" fileSize="1077954770" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/298f/199697d2-fbe4-4518-aa57-df109e61298f/083_mid.mp4" expression="full" duration="3664" fileSize="307214187" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-Caisse.mp4" expression="full" duration="3664" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Reflection</title>
    <description><![CDATA[For the past year or so, I have worked with Herb Sutter on language support for compile-time programming, reflection, metaclasses, and code injection for the C&#43;&#43; programming language. This talk will focus on the related language features of static reflection and projection. These features aim to help programmers work with source code as data, and in some limited ways, use that data to write software. I plan to trace the evolution of this work from its original proposal to its current implementation in the Clang C&#43;&#43; compiler (two implementations, actually). In particular, I will discuss design criteria, decisions, and issues related to reflection and projection as we implemented and experimented with them. I will also discuss how our current approach is shaped by alternative proposals, community and committee feedback, and restrictions imposed by the C&#43;&#43; programming language itself (i.e., what can you do and what can't you do).  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f87ad4b905d14c6ebe68a86000017324">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/082</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/082</link>
    <itunes:summary>For the past year or so, I have worked with Herb Sutter on language support for compile-time programming, reflection, metaclasses, and code injection for the C&amp;#43;&amp;#43; programming language. This talk will focus on the related language features of static reflection and projection. These features aim to help programmers work with source code as data, and in some limited ways, use that data to write software. I plan to trace the evolution of this work from its original proposal to its current implementation in the Clang C&amp;#43;&amp;#43; compiler (two implementations, actually). In particular, I will discuss design criteria, decisions, and issues related to reflection and projection as we implemented and experimented with them. I will also discuss how our current approach is shaped by alternative proposals, community and committee feedback, and restrictions imposed by the C&amp;#43;&amp;#43; programming language itself (i.e., what can you do and what can&#39;t you do). </itunes:summary>
    <itunes:duration>3653</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:59:56 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/082</guid>
    <dc:creator>Andrew Sutton</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082_high.mp4" length="1286616260" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082.mp3" expression="full" duration="3653" fileSize="58451070" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082.mp4" expression="full" duration="3653" fileSize="109662727" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082_high.mp4" expression="full" duration="3653" fileSize="1286616260" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/53e5/b851dcab-d243-4074-b377-2e7e130553e5/082_mid.mp4" expression="full" duration="3653" fileSize="358331940" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Sutton.mp4" expression="full" duration="3653" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Building for the Best of Us: Design and Development with Kids in Mind</title>
    <description><![CDATA[Building an API easy enough for kids to understand (in C&#43;&#43;) is a challenge. Every design decision, from the circuit board to the plastic can effect the results. We'll talk about product design, manufacturing, firmware, software, and the Arduino API as we cover the Jewelbots timeline from Kickstarter to shipping to distribution. Additionally, hear from the two girls who are the top Jewelbots from the Bellevue area! You'll learn what they have built and how they view the future of C&#43;&#43;.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:126a2c39992548f1a08fa86000017284">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/081</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/081</link>
    <itunes:summary>Building an API easy enough for kids to understand (in C&amp;#43;&amp;#43;) is a challenge. Every design decision, from the circuit board to the plastic can effect the results. We&#39;ll talk about product design, manufacturing, firmware, software, and the Arduino API as we cover the Jewelbots timeline from Kickstarter to shipping to distribution. Additionally, hear from the two girls who are the top Jewelbots from the Bellevue area! You&#39;ll learn what they have built and how they view the future of C&amp;#43;&amp;#43;. </itunes:summary>
    <itunes:duration>3497</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:59:17 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/081</guid>
    <dc:creator>Sara Chipps</dc:creator>
    <category>cppcon2017</category>
    <category>teaching</category>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081_high.mp4" length="1467297116" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081.mp3" expression="full" duration="3497" fileSize="55968626" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081.mp4" expression="full" duration="3497" fileSize="107027488" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081_high.mp4" expression="full" duration="3497" fileSize="1467297116" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a29/60d1fa74-983e-4791-86c2-28e9dd3f8a29/081_mid.mp4" expression="full" duration="3497" fileSize="392851758" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1645-Chipps.mp4" expression="full" duration="3497" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Compile-time reflection, Serialization and ORM</title>
    <description><![CDATA[We will discuss what reflection is and how it can be implemented in Modern C&#43;&#43;. The techniques used will include a mix of C&#43;&#43;11/14 features (void_t, tuple, index_sequence, variadic templates, auto functions, decltype(auto), constexpr, type_traits, etc), classic C&#43;&#43; features, and macros. We’ll use a couple of example libraries to show the essence and power of compile-time reflection and show how to simplify and improve their implementation with C&#43;&#43;17 features such as inline variables, constexpr if, structure binding, fold expressions, and string_view. The first example is a library that can serialize a struct into any of a variety of data formats, such as JSON, XML, MessagePack, or a custom format. We’ll then apply the same techniques to implement an Object-Relational Mapping (ORM) library to serialize structs into the tables of any of a variety of databases, such as SQLite, MySQL, Postgres, etc. We’ll discuss some of the challenges and limitations of these techniques and what features could be added to C&#43;&#43; to improve support for compile-time reflection.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:98211abbd2f24fabbfb7a860000171f8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/080</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/080</link>
    <itunes:summary>We will discuss what reflection is and how it can be implemented in Modern C&amp;#43;&amp;#43;. The techniques used will include a mix of C&amp;#43;&amp;#43;11/14 features (void_t, tuple, index_sequence, variadic templates, auto functions, decltype(auto), constexpr, type_traits, etc), classic C&amp;#43;&amp;#43; features, and macros. We’ll use a couple of example libraries to show the essence and power of compile-time reflection and show how to simplify and improve their implementation with C&amp;#43;&amp;#43;17 features such as inline variables, constexpr if, structure binding, fold expressions, and string_view. The first example is a library that can serialize a struct into any of a variety of data formats, such as JSON, XML, MessagePack, or a custom format. We’ll then apply the same techniques to implement an Object-Relational Mapping (ORM) library to serialize structs into the tables of any of a variety of databases, such as SQLite, MySQL, Postgres, etc. We’ll discuss some of the challenges and limitations of these techniques and what features could be added to C&amp;#43;&amp;#43; to improve support for compile-time reflection. </itunes:summary>
    <itunes:duration>2173</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:58:36 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/080</guid>
    <dc:creator>Yu Qi</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080_high.mp4" length="776608758" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080.mp3" expression="full" duration="2173" fileSize="34775253" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080.mp4" expression="full" duration="2173" fileSize="66126968" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080_high.mp4" expression="full" duration="2173" fileSize="776608758" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2cbd/1817dcde-2d7a-4daa-ad61-b023b4c52cbd/080_mid.mp4" expression="full" duration="2173" fileSize="230426995" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1330-Qi.mp4" expression="full" duration="2173" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Game Audio Programming in C++</title>
    <description><![CDATA[Game audio programming is a sort of dark art practiced and understood by its few practitioners, but audio is an important and vibrant part of any game. There is a huge body of knowledge and history here, but the C&#43;&#43; standard, unfortunately, has yet to acknowledge the existence of audio output devices. In this talk we'll discuss the current state of the art in game audio programming, and what steps we can take toward bringing real-time audio to the C&#43;&#43; standard. We will begin with first principles: representing waveforms and playback of sounds. With a few basic mathematical principles out of the way, we'll discuss how a low-level mixer works, and the sorts of tools that game audio builds on top of it. Finally, we will present a set of abstractions that are useful for real-time audio, and how they can be brought into the C&#43;&#43; standard.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:50e6170181534e1ba5a4a86000017120">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/079</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/079</link>
    <itunes:summary>Game audio programming is a sort of dark art practiced and understood by its few practitioners, but audio is an important and vibrant part of any game. There is a huge body of knowledge and history here, but the C&amp;#43;&amp;#43; standard, unfortunately, has yet to acknowledge the existence of audio output devices. In this talk we&#39;ll discuss the current state of the art in game audio programming, and what steps we can take toward bringing real-time audio to the C&amp;#43;&amp;#43; standard. We will begin with first principles: representing waveforms and playback of sounds. With a few basic mathematical principles out of the way, we&#39;ll discuss how a low-level mixer works, and the sorts of tools that game audio builds on top of it. Finally, we will present a set of abstractions that are useful for real-time audio, and how they can be brought into the C&amp;#43;&amp;#43; standard. </itunes:summary>
    <itunes:duration>3072</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:42:40 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/079</guid>
    <dc:creator>Guy Somberg</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>audio</category>
    <enclosure url="http://video.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079_high.mp4" length="1192669420" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079.mp3" expression="full" duration="3072" fileSize="49163679" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079.mp4" expression="full" duration="3072" fileSize="72031363" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079_high.mp4" expression="full" duration="3072" fileSize="1192669420" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b0c/ec1508e0-5f10-4cfe-b44e-f3eedf8d5b0c/079_mid.mp4" expression="full" duration="3072" fileSize="278461150" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Somberg.mp4" expression="full" duration="3072" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Type Punning in C++17: Avoiding Pun-defined Behavior</title>
    <description><![CDATA[Type punning, treating a type as though it is a different type, has a long and sordid history in C and C&#43;&#43;. But, as much as we'd like to deny its existence, it plays an important role in efficient low-level code. If you've ever written a program that examines the individual bits of a pointer or of a floating point number, then you've done type punning. Given its long legacy, some of the techniques for type punning that were appropriate, even encouraged, earlier in history now live in the realm of undefined behavior. We'll identify which techniques are now proscribed and postulate why. We'll also explore ways to do type punning in C&#43;&#43;17 that sidestep undefined behavior and are hopefully as efficient as the older techniques. In this session we will look at: o Common (and some uncommon) motivations for type punning. o Techniques for type punning, both good and bad, all ugly. o Related topics (like type conversions and std::launder()) with an eye toward unspecified and undefined behavior.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:35262939975e4c1c8892a8600001709d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/078</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/078</link>
    <itunes:summary>Type punning, treating a type as though it is a different type, has a long and sordid history in C and C&amp;#43;&amp;#43;. But, as much as we&#39;d like to deny its existence, it plays an important role in efficient low-level code. If you&#39;ve ever written a program that examines the individual bits of a pointer or of a floating point number, then you&#39;ve done type punning. Given its long legacy, some of the techniques for type punning that were appropriate, even encouraged, earlier in history now live in the realm of undefined behavior. We&#39;ll identify which techniques are now proscribed and postulate why. We&#39;ll also explore ways to do type punning in C&amp;#43;&amp;#43;17 that sidestep undefined behavior and are hopefully as efficient as the older techniques. In this session we will look at: o Common (and some uncommon) motivations for type punning. o Techniques for type punning, both good and bad, all ugly. o Related topics (like type conversions and std::launder()) with an eye toward unspecified and undefined behavior. </itunes:summary>
    <itunes:duration>3907</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:41:53 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/078</guid>
    <dc:creator>Scott Schurr</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078_high.mp4" length="955993766" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078.mp3" expression="full" duration="3907" fileSize="62525416" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078.mp4" expression="full" duration="3907" fileSize="105223877" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078_high.mp4" expression="full" duration="3907" fileSize="955993766" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eafa/6404680b-2c87-41b5-be8c-edfa93d1eafa/078_mid.mp4" expression="full" duration="3907" fileSize="296831480" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Schurr.mp4" expression="full" duration="3907" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Test a Day Keeps Your Manager Away!</title>
    <description><![CDATA[This session will present how to leverage C&#43;&#43;'s diverse set of analysis tools with existing Continuous Integration services to increase a project's quality continuously over time. In additional, we will discuss the advantages and disadvantages of using these tools using real world open source examples. Those interested in Continuous Integration or learning new ways to increase the quality of their code will enjoy this presentation. Continuous Integration (CI) is the act of continuously integrating small changes to a code base. The goal is to identify integration issues prior to making a change, ensuring a project's quality over time. Thanks to virtualization, today we have many services that provide automated continuous integration that support C&#43;&#43; including Travis CI and AppVeyor on Windows, Linux and MacOS. Typically CI is used to compile and sometimes execute automated tests to ensure a change to a project doesn't result in a compilation issue, or regression. C&#43;&#43; is however is a diverse, rich environment with numerous analysis tools available to C&#43;&#43; developers. These tools can be integrated into these CI services to provide automated analysis of any change being made to a project prior to it's acceptance to ensure the highest possible quality of the project. During this session we will step through an open source project designed to demonstrate how to integrate different C&#43;&#43; analysis tools into your CI services. These tools include static analysis (Clang Tidy, Coverity Scan, Codeacy and CppCheck), dynamic analysis (Valgrind and Google's Sanitizers), source formatting (Astyle and Clang Format), documentation (Doxygen), code coverage (Codecov, Coveralls, and LLVM's Software-based Code Coverage), cross platform tests (Windows, Cygwin, Linux, and macOS), compiler tests (GCC, Clang, and Visual Studio) and finally C&#43;&#43; libraries designed to assist in reliability and automated testing (Catch, Hippomocks and the Guideline Support Library). In addition we will openly discuss the advantages and disadvantages of using various analysis tools, how to integrate these tools into existing projects (both large and small) as well as common problems encountered while using these tools autonomously in a CI environment.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6af5306181df403bb237a86000016f9b">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/077</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/077</link>
    <itunes:summary>This session will present how to leverage C&amp;#43;&amp;#43;&#39;s diverse set of analysis tools with existing Continuous Integration services to increase a project&#39;s quality continuously over time. In additional, we will discuss the advantages and disadvantages of using these tools using real world open source examples. Those interested in Continuous Integration or learning new ways to increase the quality of their code will enjoy this presentation. Continuous Integration (CI) is the act of continuously integrating small changes to a code base. The goal is to identify integration issues prior to making a change, ensuring a project&#39;s quality over time. Thanks to virtualization, today we have many services that provide automated continuous integration that support C&amp;#43;&amp;#43; including Travis CI and AppVeyor on Windows, Linux and MacOS. Typically CI is used to compile and sometimes execute automated tests to ensure a change to a project doesn&#39;t result in a compilation issue, or regression. C&amp;#43;&amp;#43; is however is a diverse, rich environment with numerous analysis tools available to C&amp;#43;&amp;#43; developers. These tools can be integrated into these CI services to provide automated analysis of any change being made to a project prior to it&#39;s acceptance to ensure the highest possible quality of the project. During this session we will step through an open source project designed to demonstrate how to integrate different C&amp;#43;&amp;#43; analysis tools into your CI services. These tools include static analysis (Clang Tidy, Coverity Scan, Codeacy and CppCheck), dynamic analysis (Valgrind and Google&#39;s Sanitizers), source formatting (Astyle and Clang Format), documentation (Doxygen), code coverage (Codecov, Coveralls, and LLVM&#39;s Software-based Code Coverage), cross platform tests (Windows, Cygwin, Linux, and macOS), compiler tests (GCC, Clang, and Visual Studio) and finally C&amp;#43;&amp;#43; libraries designed to assist in reliability and automated testing (Catch, Hippomocks and the Guideline Su</itunes:summary>
    <itunes:duration>3635</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:41:02 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/077</guid>
    <dc:creator>Rian Quinn</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>continuousintegration</category>
    <enclosure url="http://video.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077_high.mp4" length="1243298459" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077.mp3" expression="full" duration="3635" fileSize="58171966" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077.mp4" expression="full" duration="3635" fileSize="94268811" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077_high.mp4" expression="full" duration="3635" fileSize="1243298459" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4ff8/c1a71824-94d1-4115-a33d-30f35b4e4ff8/077_mid.mp4" expression="full" duration="3635" fileSize="315506162" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Quinn.mp4" expression="full" duration="3635" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Building C++ Modules</title>
    <description><![CDATA[C&#43;&#43; Modules TS is now implemented (to various degrees) by GCC, Clang, and MSVC. The aim of this talk is to provide practical information on the mechanics of creating and consuming modules with these compilers. It is based on our experience adding modules support to the build2 toolchain and then modularizing some of its components. We start with a brief introduction to C&#43;&#43; modules, why we need them, and how they relate to other physical design mechanisms, namely headers, namespaces, and libraries. Next we explore the kind of integration modules will require from a C&#43;&#43; build system. Specifically, when and where a module binary interface is built? How can a build system discover which modules are needed? What are the implications for parallel and distributed builds? Can we finally get rid of the preprocessor? And what happens to header-only libraries in this brave new modularized world? With a firm understanding of the implications C&#43;&#43; modules have on the build process, we can try to answer some of the module design questions: What is an appropriate module granularity? Should we have separate module interface and implementation units? Can we have a dual header/module interface for legacy support? Are module-only libraries to become all the rage?  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4fcbfbba597d41258a7aa86000016f2a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/076</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/076</link>
    <itunes:summary>C&amp;#43;&amp;#43; Modules TS is now implemented (to various degrees) by GCC, Clang, and MSVC. The aim of this talk is to provide practical information on the mechanics of creating and consuming modules with these compilers. It is based on our experience adding modules support to the build2 toolchain and then modularizing some of its components. We start with a brief introduction to C&amp;#43;&amp;#43; modules, why we need them, and how they relate to other physical design mechanisms, namely headers, namespaces, and libraries. Next we explore the kind of integration modules will require from a C&amp;#43;&amp;#43; build system. Specifically, when and where a module binary interface is built? How can a build system discover which modules are needed? What are the implications for parallel and distributed builds? Can we finally get rid of the preprocessor? And what happens to header-only libraries in this brave new modularized world? With a firm understanding of the implications C&amp;#43;&amp;#43; modules have on the build process, we can try to answer some of the module design questions: What is an appropriate module granularity? Should we have separate module interface and implementation units? Can we have a dual header/module interface for legacy support? Are module-only libraries to become all the rage? </itunes:summary>
    <itunes:duration>4005</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:40:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/076</guid>
    <dc:creator>Boris Kolpackov</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076_high.mp4" length="1054528885" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076.mp3" expression="full" duration="4005" fileSize="64088586" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076.mp4" expression="full" duration="4005" fileSize="96262669" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076_high.mp4" expression="full" duration="4005" fileSize="1054528885" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9bf4/528bc1da-97ce-4833-a66c-5000bc219bf4/076_mid.mp4" expression="full" duration="4005" fileSize="277793943" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_0900-Kolpackov.mp4" expression="full" duration="4005" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Undefined Behavior in 2017 (part 2 of 2)</title>
    <description><![CDATA[Undefined behavior is a clear and present danger for all application code written in C&#43;&#43;. The most pressing relevance is to security, but really the issue is one of general software correctness. The fundamental problem lies in the refusal of C&#43;&#43; implementations (in general) to trap or otherwise detect undefined behaviors. Since undefined behaviors are silent errors, many developers have historically misunderstood the issues in play. Since the late 1990s undefined behavior has emerged as a major source of exploitable vulnerabilities in C&#43;&#43; code. This talk will focus on trends in the last few years including (1) increased willingness of compilers to exploit undefined behaviors to break programs in hard-to-understand ways and (2) vastly more sophisticated tooling that we have developed to detect and mitigate undefined behaviors. The current situation is still tenuous: only through rigorous testing and hardening and patching can C&#43;&#43; code be exposed to untrusted inputs, even when this code is created by strong development teams. This talk will focus on what developers can and should do to prevent and mitigate undefined behaviors in code they create or maintain.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1d3e61c82f7042d0b8b6a86000016ed6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/075</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/075</link>
    <itunes:summary>Undefined behavior is a clear and present danger for all application code written in C&amp;#43;&amp;#43;. The most pressing relevance is to security, but really the issue is one of general software correctness. The fundamental problem lies in the refusal of C&amp;#43;&amp;#43; implementations (in general) to trap or otherwise detect undefined behaviors. Since undefined behaviors are silent errors, many developers have historically misunderstood the issues in play. Since the late 1990s undefined behavior has emerged as a major source of exploitable vulnerabilities in C&amp;#43;&amp;#43; code. This talk will focus on trends in the last few years including (1) increased willingness of compilers to exploit undefined behaviors to break programs in hard-to-understand ways and (2) vastly more sophisticated tooling that we have developed to detect and mitigate undefined behaviors. The current situation is still tenuous: only through rigorous testing and hardening and patching can C&amp;#43;&amp;#43; code be exposed to untrusted inputs, even when this code is created by strong development teams. This talk will focus on what developers can and should do to prevent and mitigate undefined behaviors in code they create or maintain. </itunes:summary>
    <itunes:duration>1560</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:39:18 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/075</guid>
    <dc:creator>John Regehr</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075_high.mp4" length="487814426" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075.mp3" expression="full" duration="1560" fileSize="24972856" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075.mp4" expression="full" duration="1560" fileSize="46606161" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075_high.mp4" expression="full" duration="1560" fileSize="487814426" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf63/bad7d09f-217a-4448-9087-6a084c75cf63/075_mid.mp4" expression="full" duration="1560" fileSize="144669004" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1515-Regehr.mp4" expression="full" duration="1560" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Undefined Behavior in 2017 (part 1 of 2)</title>
    <description><![CDATA[Undefined behavior is a clear and present danger for all application code written in C&#43;&#43;. The most pressing relevance is to security, but really the issue is one of general software correctness. The fundamental problem lies in the refusal of C&#43;&#43; implementations (in general) to trap or otherwise detect undefined behaviors. Since undefined behaviors are silent errors, many developers have historically misunderstood the issues in play. Since the late 1990s undefined behavior has emerged as a major source of exploitable vulnerabilities in C&#43;&#43; code. This talk will focus on trends in the last few years including (1) increased willingness of compilers to exploit undefined behaviors to break programs in hard-to-understand ways and (2) vastly more sophisticated tooling that we have developed to detect and mitigate undefined behaviors. The current situation is still tenuous: only through rigorous testing and hardening and patching can C&#43;&#43; code be exposed to untrusted inputs, even when this code is created by strong development teams. This talk will focus on what developers can and should do to prevent and mitigate undefined behaviors in code they create or maintain.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:61841cdd62de4de58c31a86000016e40">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/074</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/074</link>
    <itunes:summary>Undefined behavior is a clear and present danger for all application code written in C&amp;#43;&amp;#43;. The most pressing relevance is to security, but really the issue is one of general software correctness. The fundamental problem lies in the refusal of C&amp;#43;&amp;#43; implementations (in general) to trap or otherwise detect undefined behaviors. Since undefined behaviors are silent errors, many developers have historically misunderstood the issues in play. Since the late 1990s undefined behavior has emerged as a major source of exploitable vulnerabilities in C&amp;#43;&amp;#43; code. This talk will focus on trends in the last few years including (1) increased willingness of compilers to exploit undefined behaviors to break programs in hard-to-understand ways and (2) vastly more sophisticated tooling that we have developed to detect and mitigate undefined behaviors. The current situation is still tenuous: only through rigorous testing and hardening and patching can C&amp;#43;&amp;#43; code be exposed to untrusted inputs, even when this code is created by strong development teams. This talk will focus on what developers can and should do to prevent and mitigate undefined behaviors in code they create or maintain. </itunes:summary>
    <itunes:duration>2962</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:36:33 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/074</guid>
    <dc:creator>John Regehr</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074_high.mp4" length="745366868" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074.mp3" expression="full" duration="2962" fileSize="47404600" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074.mp4" expression="full" duration="2962" fileSize="80957739" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074_high.mp4" expression="full" duration="2962" fileSize="745366868" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/40dc/c5f8d946-3bd6-44f9-a68c-bf24522640dc/074_mid.mp4" expression="full" duration="2962" fileSize="225562846" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Regehr.mp4" expression="full" duration="2962" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Read, Copy, Update, then what? RCU for non-kernel programmers</title>
    <description><![CDATA[RCU (Read, Copy, Update) is often the highest-performing way to implement concurrent data structures. The differences in performance between an RCU implementation and the next best alternative can be striking. And yet, RCU algorithms have received little attention outside of the world of kernel programming. Largely, this is because the most common drawback of RCU solution is complicated, and often wasteful, memory management. Kernel code has some advantages here, whereas a generic solution is much harder to design. There are, however, cases when RCU is simple to use, offers very high performance, and the memory issues are easy to manage. In fact, you may already be using the RCU approach in your program without realizing it! Wouldn't that be cool? But careful now: you may be already using the RCU approach in your program in a subtly wrong way. I'm talking about the kind of way that makes your program pass every test you can throw at it and then crash in front of your most important customer (but only when they run their most critical job, not when you try to reproduce the problem). In the more general case, we have to confront the problems of RCU memory management, but the reward of much higher performance can make it well worth the effort. This talk will give you understanding of how RCU works, what makes it so efficient, and what are the conditions and restrictions for a valid application of an RCU algorithm. We focus on using RCU outside of kernel space, so we will have to deal with the problems of memory management... and yes, there will be garbage collection.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:18b51c0c7e01400392eaa86000016db3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/073</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/073</link>
    <itunes:summary>RCU (Read, Copy, Update) is often the highest-performing way to implement concurrent data structures. The differences in performance between an RCU implementation and the next best alternative can be striking. And yet, RCU algorithms have received little attention outside of the world of kernel programming. Largely, this is because the most common drawback of RCU solution is complicated, and often wasteful, memory management. Kernel code has some advantages here, whereas a generic solution is much harder to design. There are, however, cases when RCU is simple to use, offers very high performance, and the memory issues are easy to manage. In fact, you may already be using the RCU approach in your program without realizing it! Wouldn&#39;t that be cool? But careful now: you may be already using the RCU approach in your program in a subtly wrong way. I&#39;m talking about the kind of way that makes your program pass every test you can throw at it and then crash in front of your most important customer (but only when they run their most critical job, not when you try to reproduce the problem). In the more general case, we have to confront the problems of RCU memory management, but the reward of much higher performance can make it well worth the effort. This talk will give you understanding of how RCU works, what makes it so efficient, and what are the conditions and restrictions for a valid application of an RCU algorithm. We focus on using RCU outside of kernel space, so we will have to deal with the problems of memory management... and yes, there will be garbage collection. </itunes:summary>
    <itunes:duration>4081</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:35:48 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/073</guid>
    <dc:creator>Fedor Pikus</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073_high.mp4" length="1019242791" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073.mp3" expression="full" duration="4081" fileSize="65311346" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073.mp4" expression="full" duration="4081" fileSize="98307128" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073_high.mp4" expression="full" duration="4081" fileSize="1019242791" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8d8/b59a6767-a18b-4373-87bb-8ffad85fe8d8/073_mid.mp4" expression="full" duration="4081" fileSize="290270755" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Pikus.mp4" expression="full" duration="4081" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Local (&#39;Arena&#39;) Memory Allocators (part 1 of 2)</title>
    <description><![CDATA[Are allocators worth the trouble? What situations merit their use? How are they applied effectually? What’s the performance impact? This practical talk by large scale C&#43;&#43; expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. The runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions – fragmentability, allocation density, variation, locality, utilization, and contention – will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:87d47fc5227e46f8a4a4a86000016cf8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/072</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/072</link>
    <itunes:summary>Are allocators worth the trouble? What situations merit their use? How are they applied effectually? What’s the performance impact? This practical talk by large scale C&amp;#43;&amp;#43; expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. The runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions – fragmentability, allocation density, variation, locality, utilization, and contention – will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator. </itunes:summary>
    <itunes:duration>3604</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:35:02 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/072</guid>
    <dc:creator>John Lakos</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072_high.mp4" length="1414056991" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072.mp3" expression="full" duration="3604" fileSize="57677785" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072.mp4" expression="full" duration="3604" fileSize="101393424" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072_high.mp4" expression="full" duration="3604" fileSize="1414056991" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/703a/738ea7d1-b39c-4ef5-87a4-0d013db6703a/072_mid.mp4" expression="full" duration="3604" fileSize="372717939" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-Lakos.mp4" expression="full" duration="3604" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Templates Revised</title>
    <description><![CDATA[In 2003 we published &quot;C&#43;&#43; Templates - The Complete Guide&quot;. Now, 14 years and 3 major C&#43;&#43; versions later, we are publishing the second edition. The content grew and changed dramatically. And I, the representative application programmer among the authors, learned a lot while at the same time shaking my head again and again. This talk is a personal overview of the changes Modern C&#43;&#43; brought to generic C&#43;&#43; programming and what that means for ordinary application programmers. It's not only about new features, it's also about the discussions we had regarding style and usability (for example, about our recommendations of how to declare parameters in function templates).  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:57ed772dfd4b44a0b397a86000016c70">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/071</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/071</link>
    <itunes:summary>In 2003 we published &amp;quot;C&amp;#43;&amp;#43; Templates - The Complete Guide&amp;quot;. Now, 14 years and 3 major C&amp;#43;&amp;#43; versions later, we are publishing the second edition. The content grew and changed dramatically. And I, the representative application programmer among the authors, learned a lot while at the same time shaking my head again and again. This talk is a personal overview of the changes Modern C&amp;#43;&amp;#43; brought to generic C&amp;#43;&amp;#43; programming and what that means for ordinary application programmers. It&#39;s not only about new features, it&#39;s also about the discussions we had regarding style and usability (for example, about our recommendations of how to declare parameters in function templates). </itunes:summary>
    <itunes:duration>3640</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:34:23 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/071</guid>
    <dc:creator>Nicolai Josuttis</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>metaprogramming</category>
    <enclosure url="http://video.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071_high.mp4" length="911691407" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071.mp3" expression="full" duration="3640" fileSize="58256040" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071.mp4" expression="full" duration="3640" fileSize="97248771" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071_high.mp4" expression="full" duration="3640" fileSize="911691407" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e42/b0d07268-a717-4885-9c1a-a649d0992e42/071_mid.mp4" expression="full" duration="3640" fileSize="277266049" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Josuttis.mp4" expression="full" duration="3640" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Naivety of Creating Cross-Platform, Modern C++ Libraries: A Tour Of Our Challenges and Successes </title>
    <description><![CDATA[The AWS SDK for C&#43;&#43; was designed with a few important tenets. Modern C&#43;&#43; (versions 11 and later), Cross-Platform, User Customization with sane defaults, and no dependencies. A year after launching for general availability, we've been thinking about how these tenets have served us well, and the challenges we've encountered when applying them. In this talk, we will discuss the difficulties we encountered in design and implementation, and then we will cover the aspects of our design that have worked out well. The topics we will cover are: Build System choices, the C&#43;&#43; standard library, Dependency choices, Threading models, Memory models, IO-based programming, ABI compatibility, and packaging.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8b46cef25bae4e0aba61a86000016bda">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/070</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/070</link>
    <itunes:summary>The AWS SDK for C&amp;#43;&amp;#43; was designed with a few important tenets. Modern C&amp;#43;&amp;#43; (versions 11 and later), Cross-Platform, User Customization with sane defaults, and no dependencies. A year after launching for general availability, we&#39;ve been thinking about how these tenets have served us well, and the challenges we&#39;ve encountered when applying them. In this talk, we will discuss the difficulties we encountered in design and implementation, and then we will cover the aspects of our design that have worked out well. The topics we will cover are: Build System choices, the C&amp;#43;&amp;#43; standard library, Dependency choices, Threading models, Memory models, IO-based programming, ABI compatibility, and packaging. </itunes:summary>
    <itunes:duration>3465</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:33:27 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/070</guid>
    <dc:creator>Jonathan Henson</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070_high.mp4" length="1250460258" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070.mp3" expression="full" duration="3465" fileSize="55450686" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070.mp4" expression="full" duration="3465" fileSize="116085149" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070_high.mp4" expression="full" duration="3465" fileSize="1250460258" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e9e/52419fda-b789-4d5a-9812-a29563731e9e/070_mid.mp4" expression="full" duration="3465" fileSize="386035222" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Henson.mp4" expression="full" duration="3465" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Driving Into the Future With Modern C++: A Look at Adaptive Autosar</title>
    <description><![CDATA[Software development of automotive control units has long been in the hands of hardcore C developers. With the increasing need for high-performing, multi-core processors and for applications that can be updated over the Internet, this has changed. The recently released Adaptive AUTOSAR standard fully embraces C&#43;&#43;11/14 as its language of choice. This leverages new opportunities for AUTOSAR applications, but also poses new challenges to ensure functional safety and to train developers. Let’s have a look at some Adaptive AUTOSAR APIs and at the AUTOSAR “Guidelines for the use of the C&#43;&#43;14 language in critical and safety-related systems” and see how they fit into the bigger picture.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a81cbb2bf2b847af9a15a86000016b28">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/069</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/069</link>
    <itunes:summary>Software development of automotive control units has long been in the hands of hardcore C developers. With the increasing need for high-performing, multi-core processors and for applications that can be updated over the Internet, this has changed. The recently released Adaptive AUTOSAR standard fully embraces C&amp;#43;&amp;#43;11/14 as its language of choice. This leverages new opportunities for AUTOSAR applications, but also poses new challenges to ensure functional safety and to train developers. Let’s have a look at some Adaptive AUTOSAR APIs and at the AUTOSAR “Guidelines for the use of the C&amp;#43;&amp;#43;14 language in critical and safety-related systems” and see how they fit into the bigger picture. </itunes:summary>
    <itunes:duration>3410</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:32:06 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/069</guid>
    <dc:creator>Jan Babst</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069_high.mp4" length="908076291" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069.mp3" expression="full" duration="3410" fileSize="54562796" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069.mp4" expression="full" duration="3410" fileSize="74130841" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069_high.mp4" expression="full" duration="3410" fileSize="908076291" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90ae/cd037efe-b353-44a6-ba2c-58bd8e7390ae/069_mid.mp4" expression="full" duration="3410" fileSize="219674310" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1400-Babst.mp4" expression="full" duration="3410" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boost Your Program’s Health by Adding Fibers to your Coroutine</title>
    <description><![CDATA[This session is intended to help the advanced programmer to understand what coroutines and fibers are, what problems they solve and how they should be applied in practice. The session begins with an overview of these concepts, comparing them with threads, and demonstrating how they are exposed by the Boost libraries. Apart from being clean and succinct as Boost libraries typically are, the authors of these libraries have gone to great lengths to ensure that fibers and coroutines expose a programming model consistent with that of threads. This will make them seem very familiar. During the session I will demonstrate how fibers and coroutines can be used together with the powerful Boost.Asio library to solve some commonly occurring problems. To conclude, I will provide some practical tips and guidelines for those who are adding fibers and coroutines to their programming diet.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:830d41ffea7c41338834a86000016a9b">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/068</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/068</link>
    <itunes:summary>This session is intended to help the advanced programmer to understand what coroutines and fibers are, what problems they solve and how they should be applied in practice. The session begins with an overview of these concepts, comparing them with threads, and demonstrating how they are exposed by the Boost libraries. Apart from being clean and succinct as Boost libraries typically are, the authors of these libraries have gone to great lengths to ensure that fibers and coroutines expose a programming model consistent with that of threads. This will make them seem very familiar. During the session I will demonstrate how fibers and coroutines can be used together with the powerful Boost.Asio library to solve some commonly occurring problems. To conclude, I will provide some practical tips and guidelines for those who are adding fibers and coroutines to their programming diet. </itunes:summary>
    <itunes:duration>3837</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:31:25 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/068</guid>
    <dc:creator>David Sackstein</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068_high.mp4" length="953984765" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068.mp3" expression="full" duration="3837" fileSize="61401073" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068.mp4" expression="full" duration="3837" fileSize="118972402" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068_high.mp4" expression="full" duration="3837" fileSize="953984765" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14d8/30aff231-26fe-4ffe-9d55-3286284714d8/068_mid.mp4" expression="full" duration="3837" fileSize="327305669" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Sackstein.mp4" expression="full" duration="3837" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>10 Core Guidelines You Need to Start Using Now</title>
    <description><![CDATA[The C&#43;&#43; Core Guidelines were announced at CppCon 2015, yet some developers have still never heard of them. It's time to see what they have to offer for you, no matter how much C&#43;&#43; experience you have. You don't need to read and learn the whole thing: in this talk I am pulling out some highlights of the Guidelines to show you why you should be using these selected guidelines. For each one I'll show some examples, and discuss the benefit of adopting them for new code or going back into old code to make a change. Beginners who find the sheer size of the language and library daunting should be able to rely on the Guidelines to help make sane choices when there are many ways to do things. Experienced C&#43;&#43; developers may need to leave some of their habits behind. Developers along this spectrum could benefit from seeing what the Guidelines have to offer, yet the guidelines themselves are just too big to absorb all at once. My examples will be chosen to be beginner-friendly and the focus will be on what's in it for you: faster code, less bugs, and other tangible benefits.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c6692c0e4bd2479e87eba86000016990">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/067</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/067</link>
    <itunes:summary>The C&amp;#43;&amp;#43; Core Guidelines were announced at CppCon 2015, yet some developers have still never heard of them. It&#39;s time to see what they have to offer for you, no matter how much C&amp;#43;&amp;#43; experience you have. You don&#39;t need to read and learn the whole thing: in this talk I am pulling out some highlights of the Guidelines to show you why you should be using these selected guidelines. For each one I&#39;ll show some examples, and discuss the benefit of adopting them for new code or going back into old code to make a change. Beginners who find the sheer size of the language and library daunting should be able to rely on the Guidelines to help make sane choices when there are many ways to do things. Experienced C&amp;#43;&amp;#43; developers may need to leave some of their habits behind. Developers along this spectrum could benefit from seeing what the Guidelines have to offer, yet the guidelines themselves are just too big to absorb all at once. My examples will be chosen to be beginner-friendly and the focus will be on what&#39;s in it for you: faster code, less bugs, and other tangible benefits. </itunes:summary>
    <itunes:duration>3752</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:30:42 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/067</guid>
    <dc:creator>Kate Gregory</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>cppcoreguidelines</category>
    <enclosure url="http://video.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067_high.mp4" length="964303929" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067.mp3" expression="full" duration="3752" fileSize="60042456" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067.mp4" expression="full" duration="3752" fileSize="95099110" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067_high.mp4" expression="full" duration="3752" fileSize="964303929" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc56/11e70458-075c-443e-b355-bed939b1dc56/067_mid.mp4" expression="full" duration="3752" fileSize="280113150" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Gregory.mp4" expression="full" duration="3752" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>API &amp; ABI Versioning: How to Handle Compatibility With Your C++ Libraries </title>
    <description><![CDATA[Software keeps changing, but not always as fast as its clients. A key to maintaining a library in the long run is to ensure a proper versioning of the API and ABI. Not only does this gives a clear picture of both source and binary compatibility between the versions, but it also helps design by making breaking changes explicit to the developer. In this talk I will define API and ABI in terms of impacts on compatibility, explain the difference between breaking and non-breaking changes and present a few techniques to handle them. We will quickly explain what APIs are, with an emphasis on the notion of contracts. Then the usually lesser known notion of ABI will be explained, going over the concepts of call syntax, mangling and most importantly sizes, alignment and offsets in data structures. We will see how to use semantic versioning (semver) in C&#43;&#43; by considering not only changes to the API but also to the ABI and offer some advice on how to change API and ABI over time and how to minimize the impacts.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3a9c881077fa41de8f32a86000016908">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/066</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/066</link>
    <itunes:summary>Software keeps changing, but not always as fast as its clients. A key to maintaining a library in the long run is to ensure a proper versioning of the API and ABI. Not only does this gives a clear picture of both source and binary compatibility between the versions, but it also helps design by making breaking changes explicit to the developer. In this talk I will define API and ABI in terms of impacts on compatibility, explain the difference between breaking and non-breaking changes and present a few techniques to handle them. We will quickly explain what APIs are, with an emphasis on the notion of contracts. Then the usually lesser known notion of ABI will be explained, going over the concepts of call syntax, mangling and most importantly sizes, alignment and offsets in data structures. We will see how to use semantic versioning (semver) in C&amp;#43;&amp;#43; by considering not only changes to the API but also to the ABI and offer some advice on how to change API and ABI over time and how to minimize the impacts. </itunes:summary>
    <itunes:duration>3615</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:29:59 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/066</guid>
    <dc:creator>Mathieu Ropert</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066_high.mp4" length="1174642504" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066.mp3" expression="full" duration="3615" fileSize="57856384" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066.mp4" expression="full" duration="3615" fileSize="105665110" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066_high.mp4" expression="full" duration="3615" fileSize="1174642504" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2805/66b2897b-69c8-4801-bc31-9ac7ce952805/066_mid.mp4" expression="full" duration="3615" fileSize="344752377" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Ropert.mp4" expression="full" duration="3615" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Bringing Clang-tidy Magic to Visual Studio C++ Developers</title>
    <description><![CDATA[“A 14 year old code base under active development, 2.5 million lines of C&#43;&#43; code, a few brave nerds, two powerful tools and one hot summer…”, or “How we managed to clang-tidy our whole code base, while maintaining our monthly release cycle”. Did I mention that we’re a Windows-only dev team using Visual C&#43;&#43; ? That’s right, we’re going to continue using both Visual Studio (2017) and Clang tools on the side, to modernize and improve our code quality. I’ve just come back from an interesting journey … and I want to share with you some of the most exciting experiences my team and I had along the way and a few things we’ve learned that you may take with you on your next “travels”. It all started a year ago, at CppCon, with a simple but life changing decision: we would stop worrying about whitespace and started our addiction on smart C&#43;&#43; tools with clang-format. We didn’t realize this at that time, but this was just the first leg of our great journey; next we decided to hop on the clang-tidy train and set out to modernize our aging code base and find hidden bugs along the way with clang-tidy static analyzer. The hard part was getting all our code to compile with clang, using the correct project settings (synced with Visual Studio) and Windows SDK dependencies (our code has a fairly wide Windows API surface area). After that, clang-tidy was a breeze to use and we immediately integrated it in our workflow. I still cannot believe the code transformations we were able to do with its ‘modernize’ modules and some of the subtle latent bugs we found and fixed with its static analyzer and ‘cppcoreguidelines’. Luckily, we took a lot of pictures and kept a detailed travel log, to share this fruitful journey with you, now. We’ll also share some tools we developed, to help you with this workflow: automation tips &amp; configs (Jenkins, MSBuild), open-source PowerShell scripts (clang-tidy on Visual Studio projects), free Visual Studio extension and more.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bd348419df3e421b911da86000016872">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/065</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/065</link>
    <itunes:summary>“A 14 year old code base under active development, 2.5 million lines of C&amp;#43;&amp;#43; code, a few brave nerds, two powerful tools and one hot summer…”, or “How we managed to clang-tidy our whole code base, while maintaining our monthly release cycle”. Did I mention that we’re a Windows-only dev team using Visual C&amp;#43;&amp;#43; ? That’s right, we’re going to continue using both Visual Studio (2017) and Clang tools on the side, to modernize and improve our code quality. I’ve just come back from an interesting journey … and I want to share with you some of the most exciting experiences my team and I had along the way and a few things we’ve learned that you may take with you on your next “travels”. It all started a year ago, at CppCon, with a simple but life changing decision: we would stop worrying about whitespace and started our addiction on smart C&amp;#43;&amp;#43; tools with clang-format. We didn’t realize this at that time, but this was just the first leg of our great journey; next we decided to hop on the clang-tidy train and set out to modernize our aging code base and find hidden bugs along the way with clang-tidy static analyzer. The hard part was getting all our code to compile with clang, using the correct project settings (synced with Visual Studio) and Windows SDK dependencies (our code has a fairly wide Windows API surface area). After that, clang-tidy was a breeze to use and we immediately integrated it in our workflow. I still cannot believe the code transformations we were able to do with its ‘modernize’ modules and some of the subtle latent bugs we found and fixed with its static analyzer and ‘cppcoreguidelines’. Luckily, we took a lot of pictures and kept a detailed travel log, to share this fruitful journey with you, now. We’ll also share some tools we developed, to help you with this workflow: automation tips &amp;amp; configs (Jenkins, MSBuild), open-source PowerShell scripts (clang-tidy on Visual Studio projects), free Visual Studio extension and more. </itunes:summary>
    <itunes:duration>3634</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:29:12 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/065</guid>
    <dc:creator>Victor Ciura</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>visualstudio</category>
    <category>clang</category>
    <enclosure url="http://video.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065_high.mp4" length="2217149854" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065.mp3" expression="full" duration="3634" fileSize="58147430" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065.mp4" expression="full" duration="3634" fileSize="95447436" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065_high.mp4" expression="full" duration="3634" fileSize="2217149854" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9a1/d0df30a5-9e31-44f5-a2e3-1ba22113e9a1/065_mid.mp4" expression="full" duration="3634" fileSize="505309840" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Ciura.mp4" expression="full" duration="3634" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Seventeenification: Porting sqlpp11 to C++17</title>
    <description><![CDATA[The ink on C&#43;&#43;17 has merely dried, but the major compilers support most features already. It's high time for a reality check! This talk is a report about the ongoing effort of porting sqlpp11 to C&#43;&#43;17. I'll show real-world usage of the following features: Core: inline variables auto non-type template parameters [[nodiscard]] class template deduction constexpr if fold expressions Library: string_view optional This talk also comes with a realization about C&#43;&#43;11.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4a60a9dc23ab4833a272a860000167ce">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/064</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/064</link>
    <itunes:summary>The ink on C&amp;#43;&amp;#43;17 has merely dried, but the major compilers support most features already. It&#39;s high time for a reality check! This talk is a report about the ongoing effort of porting sqlpp11 to C&amp;#43;&amp;#43;17. I&#39;ll show real-world usage of the following features: Core: inline variables auto non-type template parameters [[nodiscard]] class template deduction constexpr if fold expressions Library: string_view optional This talk also comes with a realization about C&amp;#43;&amp;#43;11. </itunes:summary>
    <itunes:duration>3059</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:28:28 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/064</guid>
    <dc:creator>Roland Bock</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064_high.mp4" length="1036274156" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064.mp3" expression="full" duration="3059" fileSize="48956359" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064.mp4" expression="full" duration="3059" fileSize="97898115" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064_high.mp4" expression="full" duration="3059" fileSize="1036274156" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0a4/27f6b683-cfdc-452e-ae2b-24d67dbcd0a4/064_mid.mp4" expression="full" duration="3059" fileSize="307002363" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Bock.mp4" expression="full" duration="3059" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Web | C++</title>
    <description><![CDATA[Have you ever tried writing a web application with C&#43;&#43;? Can opening a file and serving it via HTTP be as simple as writing 20 lines of python? With the undeniable importance of web development, C&#43;&#43; can not allow itself to ignore such an important field, especially with the rising competition in the field of system programming languages, coming from Rust, D and Go. Join us as we explore modern approaches to asynchronous IO, socket communication the advantages and disadvantages of using a unikernel and their respective performance implications. We'll also take a look at how future iterations of the C&#43;&#43; standard library, could solve some of those problems.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7535d8781f784ad1b8c2a86000016754">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/063</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/063</link>
    <itunes:summary>Have you ever tried writing a web application with C&amp;#43;&amp;#43;? Can opening a file and serving it via HTTP be as simple as writing 20 lines of python? With the undeniable importance of web development, C&amp;#43;&amp;#43; can not allow itself to ignore such an important field, especially with the rising competition in the field of system programming languages, coming from Rust, D and Go. Join us as we explore modern approaches to asynchronous IO, socket communication the advantages and disadvantages of using a unikernel and their respective performance implications. We&#39;ll also take a look at how future iterations of the C&amp;#43;&amp;#43; standard library, could solve some of those problems. </itunes:summary>
    <itunes:duration>2480</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:27:41 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/063</guid>
    <dc:creator>Lukas Bergdoll</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063_high.mp4" length="531550271" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063.mp3" expression="full" duration="2480" fileSize="39692685" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063.mp4" expression="full" duration="2480" fileSize="57368924" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063_high.mp4" expression="full" duration="2480" fileSize="531550271" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9d96/fbef2938-aecd-476d-899c-d156cd209d96/063_mid.mp4" expression="full" duration="2480" fileSize="154909797" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_0900-Bergdoll_v2.mp4" expression="full" duration="2480" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>ThinLTO: Scalable and Incremental Link-Time Optimization</title>
    <description><![CDATA[Whole program optimization enables higher performance in C&#43;&#43; applications, because of the expanded scope for analysis and optimization. However, the memory and time required to optimize the entire program together as a single unit traditionally has made whole program optimization infeasible for complex and large C&#43;&#43; applications, such as those being built at Google. Additionally, traditional whole program optimization frameworks have not supported fast incremental builds. ThinLTO (Thin Link Time Optimization) is a new compilation model that was recently deployed in the LLVM compiler toolchain to enable scalable whole program optimization for these huge C&#43;&#43; applications, and additionally enables the fast incremental builds required for use in day-to-day development. In this talk we’ll describe why whole program optimization is beneficial for C&#43;&#43; applications, how the ThinLTO compilation model enables scalable and incremental builds, and how ThinLTO can be integrated with distributed build systems for even faster whole program builds. Additionally, we’ll describe implications for C&#43;&#43; developers.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9fe7ca0a434e4de28517a86000016660">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/062</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/062</link>
    <itunes:summary>Whole program optimization enables higher performance in C&amp;#43;&amp;#43; applications, because of the expanded scope for analysis and optimization. However, the memory and time required to optimize the entire program together as a single unit traditionally has made whole program optimization infeasible for complex and large C&amp;#43;&amp;#43; applications, such as those being built at Google. Additionally, traditional whole program optimization frameworks have not supported fast incremental builds. ThinLTO (Thin Link Time Optimization) is a new compilation model that was recently deployed in the LLVM compiler toolchain to enable scalable whole program optimization for these huge C&amp;#43;&amp;#43; applications, and additionally enables the fast incremental builds required for use in day-to-day development. In this talk we’ll describe why whole program optimization is beneficial for C&amp;#43;&amp;#43; applications, how the ThinLTO compilation model enables scalable and incremental builds, and how ThinLTO can be integrated with distributed build systems for even faster whole program builds. Additionally, we’ll describe implications for C&amp;#43;&amp;#43; developers. </itunes:summary>
    <itunes:duration>3719</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:26:54 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/062</guid>
    <dc:creator>Teresa Johnson</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062_high.mp4" length="1535346509" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062.mp3" expression="full" duration="3719" fileSize="59509086" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062.mp4" expression="full" duration="3719" fileSize="113975245" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062_high.mp4" expression="full" duration="3719" fileSize="1535346509" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ebfa/ad9920d3-a79c-4e78-ba31-a735eef9ebfa/062_mid.mp4" expression="full" duration="3719" fileSize="415665674" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Johnson.mp4" expression="full" duration="3719" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Delegate this! Designing with delegates in modern C++</title>
    <description><![CDATA[Designing a fast IP stack from scratch is hard. Using delegates made it all easier for IncludeOS, the open source library operating system written from scratch in modern C&#43;&#43;. Our header-only delegates are just as fast as C-style function pointers, compatible with std::function, and allows any object to delegate work to stateful member functions without knowing anything about the class they belong to. We use delegates for everything from routing packets to creating REST endpoints, and most importantly to tie the whole IP stack together. In this talk we’ll show you how we use delegates in IncludeOS, discuss pitfalls and alternatives, and give you all you need to get started.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fe612ca105a94fb8ab1ca860000165d4">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/061</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/061</link>
    <itunes:summary>Designing a fast IP stack from scratch is hard. Using delegates made it all easier for IncludeOS, the open source library operating system written from scratch in modern C&amp;#43;&amp;#43;. Our header-only delegates are just as fast as C-style function pointers, compatible with std::function, and allows any object to delegate work to stateful member functions without knowing anything about the class they belong to. We use delegates for everything from routing packets to creating REST endpoints, and most importantly to tie the whole IP stack together. In this talk we’ll show you how we use delegates in IncludeOS, discuss pitfalls and alternatives, and give you all you need to get started. </itunes:summary>
    <itunes:duration>3490</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:26:11 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/061</guid>
    <dc:creator>Alfred Bratterud</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061_high.mp4" length="1470794100" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061.mp3" expression="full" duration="3490" fileSize="55849176" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061.mp4" expression="full" duration="3490" fileSize="108948836" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061_high.mp4" expression="full" duration="3490" fileSize="1470794100" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d5a/e0f757f3-8b23-44ea-8b7e-99367d9b7d5a/061_mid.mp4" expression="full" duration="3490" fileSize="405714588" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Bratterud.mp4" expression="full" duration="3490" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Class Template Argument Deduction: A New Abstraction</title>
    <description><![CDATA[C&#43;&#43;17 is often quoted as “just a better C&#43;&#43;14”, suggesting that nothing is new, nothing is changing the way we program. This talk presents class template argument deduction as a counterexample, a hidden gem in the new standard. Saves typing? A replacement for the `make` functions? If that’s your frame, then you should come to this talk. The true power of class template argument deduction is underestimated. It’s a new point of abstraction but requiring creativity, insights, and understanding about the language details to manage. This talk will start by introducing all matters about this feature to build up sufficient background knowledge, followed by teaching how to write deduction guides by examples, and finally explain how to build abstractions using the whole feature in a top-down approach, with patterns categorized.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a598eff3efd44d40a478a8600001656d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/060</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/060</link>
    <itunes:summary>C&amp;#43;&amp;#43;17 is often quoted as “just a better C&amp;#43;&amp;#43;14”, suggesting that nothing is new, nothing is changing the way we program. This talk presents class template argument deduction as a counterexample, a hidden gem in the new standard. Saves typing? A replacement for the `make` functions? If that’s your frame, then you should come to this talk. The true power of class template argument deduction is underestimated. It’s a new point of abstraction but requiring creativity, insights, and understanding about the language details to manage. This talk will start by introducing all matters about this feature to build up sufficient background knowledge, followed by teaching how to write deduction guides by examples, and finally explain how to build abstractions using the whole feature in a top-down approach, with patterns categorized. </itunes:summary>
    <itunes:duration>2885</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:25:21 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/060</guid>
    <dc:creator>Zhihao Yuan</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060_high.mp4" length="662054182" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060.mp3" expression="full" duration="2885" fileSize="46166231" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060.mp4" expression="full" duration="2885" fileSize="67029759" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060_high.mp4" expression="full" duration="2885" fileSize="662054182" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8005/0b0f202f-d00b-4b3d-a6ae-10c27b4b8005/060_mid.mp4" expression="full" duration="2885" fileSize="179876595" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-Yuan.mp4" expression="full" duration="2885" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Tools from the C++ eco-system to save a leg</title>
    <description><![CDATA[C&#43;&#43; gives you enough rope to shoot your leg off. Readable (and thus easy to maintain, easy to support) and error-free code in C&#43;&#43; is often hard to achieve. And while modern C&#43;&#43; standards bring lots of fantastic opportunities and improvements to the language, sometimes they make the task of writing high quality code even harder. Or can’t we just cook them right? Can the tools help? In this talk I’ll highlight the main trickiness of C&#43;&#43;, including readability problems, some real-world issues, problems that grow out of C&#43;&#43; context-dependent parsing. I’ll then try to guide you in how to eliminate them using tools from the C&#43;&#43; eco-system. This will cover code styles and supportive tools, code generation snippets, code analysis (including CLion’s inspections and Data Flow Analysis, C&#43;&#43; Code Guidelines and clang-tidy checks), refactorings. I will also pay some attention to unit testing frameworks and dependency managers as tools that are essential for the high quality code development.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:46dae39ac57248c2a279a860000164cd">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/059</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/059</link>
    <itunes:summary>C&amp;#43;&amp;#43; gives you enough rope to shoot your leg off. Readable (and thus easy to maintain, easy to support) and error-free code in C&amp;#43;&amp;#43; is often hard to achieve. And while modern C&amp;#43;&amp;#43; standards bring lots of fantastic opportunities and improvements to the language, sometimes they make the task of writing high quality code even harder. Or can’t we just cook them right? Can the tools help? In this talk I’ll highlight the main trickiness of C&amp;#43;&amp;#43;, including readability problems, some real-world issues, problems that grow out of C&amp;#43;&amp;#43; context-dependent parsing. I’ll then try to guide you in how to eliminate them using tools from the C&amp;#43;&amp;#43; eco-system. This will cover code styles and supportive tools, code generation snippets, code analysis (including CLion’s inspections and Data Flow Analysis, C&amp;#43;&amp;#43; Code Guidelines and clang-tidy checks), refactorings. I will also pay some attention to unit testing frameworks and dependency managers as tools that are essential for the high quality code development. </itunes:summary>
    <itunes:duration>3123</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:24:29 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/059</guid>
    <dc:creator>Anastasia Kazakova</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>cppcoreguidelines</category>
    <enclosure url="http://video.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059_high.mp4" length="912500297" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059.mp3" expression="full" duration="3123" fileSize="49976280" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059.mp4" expression="full" duration="3123" fileSize="90178786" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059_high.mp4" expression="full" duration="3123" fileSize="912500297" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5485/cf8792e4-96de-48e7-a5ee-647c79875485/059_mid.mp4" expression="full" duration="3123" fileSize="270134179" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-Kazakova.mp4" expression="full" duration="3123" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Hands-On With Abseil</title>
    <description><![CDATA[An introduction to the design and compatibility goals for Abseil - Google's new common C&#43;&#43; libraries project. I'll summarize some style points and policies that affect Abseil and its users, and demo hands-on many of the debugging features of the library.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0be3e96d8c5d47f39a8da86000016437">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/058</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/058</link>
    <itunes:summary>An introduction to the design and compatibility goals for Abseil - Google&#39;s new common C&amp;#43;&amp;#43; libraries project. I&#39;ll summarize some style points and policies that affect Abseil and its users, and demo hands-on many of the debugging features of the library. </itunes:summary>
    <itunes:duration>3533</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:23:45 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/058</guid>
    <dc:creator>Titus Winters</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058_high.mp4" length="1442304759" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058.mp3" expression="full" duration="3533" fileSize="56536851" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058.mp4" expression="full" duration="3533" fileSize="107416031" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058_high.mp4" expression="full" duration="3533" fileSize="1442304759" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c90/a83a8c8a-9ce6-41f5-89ff-d92c3dee1c90/058_mid.mp4" expression="full" duration="3533" fileSize="403162186" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Winters.mp4" expression="full" duration="3533" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical C++17</title>
    <description><![CDATA[C&#43;&#43;17 adds many new features: structured bindings, deduction guides, if-init expressions, fold expressions, if constexpr, and enhanced constexpr support in the standard library. Each of these features are interesting, but what will be their cumulative effect on real code? We'll explore how each feature may (or may not) help in real code for enhanced readability, compile time performance and runtime performance.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:46d61d5e5d4d40f99c6fa8600001639d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/057</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/057</link>
    <itunes:summary>C&amp;#43;&amp;#43;17 adds many new features: structured bindings, deduction guides, if-init expressions, fold expressions, if constexpr, and enhanced constexpr support in the standard library. Each of these features are interesting, but what will be their cumulative effect on real code? We&#39;ll explore how each feature may (or may not) help in real code for enhanced readability, compile time performance and runtime performance. </itunes:summary>
    <itunes:duration>3648</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:23:02 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/057</guid>
    <dc:creator>Jason Turner</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057_high.mp4" length="970974411" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057.mp3" expression="full" duration="3648" fileSize="58377358" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057.mp4" expression="full" duration="3648" fileSize="95176662" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057_high.mp4" expression="full" duration="3648" fileSize="970974411" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/77c2/879bece1-39a1-43b0-844e-b0ac823c77c2/057_mid.mp4" expression="full" duration="3648" fileSize="283786627" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-Turner.mp4" expression="full" duration="3648" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Postmodern C++</title>
    <description><![CDATA[The term &quot;Modern C&#43;&#43;&quot; can be traced back to Andrei Alexandrescu's &quot;Modern C&#43;&#43; Design&quot;, published in February 2001. Much has changed since then. Alexandrescu is off Dabbling in various things, Scott Meyers has retired; C&#43;&#43;11 changed the landscape, then C&#43;&#43;14, and now we are at C&#43;&#43;17, with more on the way. Clearly, we are now in the Postmodern C&#43;&#43; era. So let's apply postmodernism to programming. YOU WON'T BELIEVE WHAT HAPPENS NEXT: - How to concentrate on one section of a programme at a time, and test in isolation. QA HATES HIM. - post-modern introspection?. IT WILL SHOCK YOU. - you'll NEVER BELIEVE what a postmodern smart ptr LOOKS LIKE! Although this is a lighthearted talk, it also aims to be insightful. In fact, the goal is nothing less than to change the way you think about programming.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:33699829e1fe480ab40aa86000016327">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/056</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/056</link>
    <itunes:summary>The term &amp;quot;Modern C&amp;#43;&amp;#43;&amp;quot; can be traced back to Andrei Alexandrescu&#39;s &amp;quot;Modern C&amp;#43;&amp;#43; Design&amp;quot;, published in February 2001. Much has changed since then. Alexandrescu is off Dabbling in various things, Scott Meyers has retired; C&amp;#43;&amp;#43;11 changed the landscape, then C&amp;#43;&amp;#43;14, and now we are at C&amp;#43;&amp;#43;17, with more on the way. Clearly, we are now in the Postmodern C&amp;#43;&amp;#43; era. So let&#39;s apply postmodernism to programming. YOU WON&#39;T BELIEVE WHAT HAPPENS NEXT: - How to concentrate on one section of a programme at a time, and test in isolation. QA HATES HIM. - post-modern introspection?. IT WILL SHOCK YOU. - you&#39;ll NEVER BELIEVE what a postmodern smart ptr LOOKS LIKE! Although this is a lighthearted talk, it also aims to be insightful. In fact, the goal is nothing less than to change the way you think about programming. </itunes:summary>
    <itunes:duration>3077</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:22:21 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/056</guid>
    <dc:creator>Tony Van Eerd</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056_high.mp4" length="928459339" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056.mp3" expression="full" duration="3077" fileSize="49245446" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056.mp4" expression="full" duration="3077" fileSize="84815815" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056_high.mp4" expression="full" duration="3077" fileSize="928459339" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9219/41297db8-50ef-43af-a679-4a1a0d249219/056_mid.mp4" expression="full" duration="3077" fileSize="265542621" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-VanEerd.mp4" expression="full" duration="3077" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Local (&#39;Arena&#39;) Memory Allocators (part 2 of 2)</title>
    <description><![CDATA[Are allocators worth the trouble? What situations merit their use? How are they applied effectually? What’s the performance impact? This practical talk by large scale C&#43;&#43; expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. The runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions – fragmentability, allocation density, variation, locality, utilization, and contention – will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f0745f555bea4f018636a860000162bc">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/055</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/055</link>
    <itunes:summary>Are allocators worth the trouble? What situations merit their use? How are they applied effectually? What’s the performance impact? This practical talk by large scale C&amp;#43;&amp;#43; expert Dr. John Lakos demonstrates that having allocators in your tool box may lead to orders of magnitude speed improvements. The runtime implications of the physical location of allocated memory is often overlooked, even in the most performance critical code. In this talk, we will examine how the performance of systems can degrade when using `new`/`delete` and `std::allocator` . We will contrast these global allocators, which allocate memory globally for a system, with local allocators that each allocate memory for a proper subset of objects in the system. We will also demonstrate how local allocators can reduce or entirely prevent the degradation seen in systems that rely on the global allocator. Six dimensions – fragmentability, allocation density, variation, locality, utilization, and contention – will be introduced to depict the potential for performance penalties and aid the listener in determining which local allocator will offer the best performance in their subsystems. Evidence will be presented that identifying these dimensions, and selecting a local allocator based upon them, can lead to *order-of-magnitude* reductions in run time compared to systems using a global allocator. </itunes:summary>
    <itunes:duration>3713</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:21:35 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/055</guid>
    <dc:creator>John Lakos</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055_high.mp4" length="1193590693" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055.mp3" expression="full" duration="3713" fileSize="59415385" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055.mp4" expression="full" duration="3713" fileSize="96718901" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055_high.mp4" expression="full" duration="3713" fileSize="1193590693" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7499/18a039ff-e2ec-427c-924c-3a9723387499/055_mid.mp4" expression="full" duration="3713" fileSize="305096469" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-Lakos.mp4" expression="full" duration="3713" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Designing A Feature That Doesn&#39;t Fit</title>
    <description><![CDATA[C&#43;&#43; is a wonderful and expressive language, that gives programmers a lot of freedom even though it actively seeks to let programmers obtain the maximal performance from their hardware. It so happens that sometimes, operating systems can make it easy to do things that are absolutely not natural for a C&#43;&#43; program, but that some C&#43;&#43; programmers consider essential to their practice. This talk will explore the problem of adding functionality to the language, more specifically to the standard threading library, where said functionality is not a natural fit for the C&#43;&#43; language specification. Expressed otherwise: how can we find ways to meet the needs of users without corrupting the language we all love? This talk will be more interesting to you if you have met situations where you wanted to do something in &quot;pure C&#43;&#43;&quot; but found you had to resort to operating system-specific features to meet your objectives. We will discuss the design space that has been explored for the problem under study, and will try to make emerge the strengths and weaknesses of the various alternatives.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9d33c00bf3874d57a00aa8600001622f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/054</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/054</link>
    <itunes:summary>C&amp;#43;&amp;#43; is a wonderful and expressive language, that gives programmers a lot of freedom even though it actively seeks to let programmers obtain the maximal performance from their hardware. It so happens that sometimes, operating systems can make it easy to do things that are absolutely not natural for a C&amp;#43;&amp;#43; program, but that some C&amp;#43;&amp;#43; programmers consider essential to their practice. This talk will explore the problem of adding functionality to the language, more specifically to the standard threading library, where said functionality is not a natural fit for the C&amp;#43;&amp;#43; language specification. Expressed otherwise: how can we find ways to meet the needs of users without corrupting the language we all love? This talk will be more interesting to you if you have met situations where you wanted to do something in &amp;quot;pure C&amp;#43;&amp;#43;&amp;quot; but found you had to resort to operating system-specific features to meet your objectives. We will discuss the design space that has been explored for the problem under study, and will try to make emerge the strengths and weaknesses of the various alternatives. </itunes:summary>
    <itunes:duration>3083</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:20:45 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/054</guid>
    <dc:creator>Patrice Roy</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054_high.mp4" length="1191907068" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054.mp3" expression="full" duration="3083" fileSize="49340354" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054.mp4" expression="full" duration="3083" fileSize="89946233" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054_high.mp4" expression="full" duration="3083" fileSize="1191907068" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/34b6/b267d6fa-f046-48d3-a02f-41e5a17c34b6/054_mid.mp4" expression="full" duration="3083" fileSize="313410881" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-Roy.mp4" expression="full" duration="3083" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Using Functional Programming Patterns to build a clean and simple HTTP routing API</title>
    <description><![CDATA[Web services are flourishing, and C&#43;&#43; has some great libraries (such as Boost/Asio &#43; Beast or CppRestSdk) which we can use as the basis to build such services. Yet it is still relatively inconvenient to define HTTP routes in C&#43;&#43;. Most approaches available in online tutorials are based on manual manipulation of regex or HTTP concepts. In this talk, we will present the result of our work toward creating a clean HTTP routing library, usable on top of any HTTP transport layer library, which offers a terse and declarative syntax, composable routes, type-safety and a rich set of additional features such as generating sample routes or documentation. We will discuss our initial investigations, and explain why we chose a functional-programming-based approach over reflection-based designs such as are common in the object-oriented world. You will learn about some design choices which allowed us to come closer to the “Don't Repeat Yourself” ideal: maximizing the services offered for the information provided by the client of the API.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3dc97bb5196b41afaf7ca8600001619e">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/053</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/053</link>
    <itunes:summary>Web services are flourishing, and C&amp;#43;&amp;#43; has some great libraries (such as Boost/Asio &amp;#43; Beast or CppRestSdk) which we can use as the basis to build such services. Yet it is still relatively inconvenient to define HTTP routes in C&amp;#43;&amp;#43;. Most approaches available in online tutorials are based on manual manipulation of regex or HTTP concepts. In this talk, we will present the result of our work toward creating a clean HTTP routing library, usable on top of any HTTP transport layer library, which offers a terse and declarative syntax, composable routes, type-safety and a rich set of additional features such as generating sample routes or documentation. We will discuss our initial investigations, and explain why we chose a functional-programming-based approach over reflection-based designs such as are common in the object-oriented world. You will learn about some design choices which allowed us to come closer to the “Don&#39;t Repeat Yourself” ideal: maximizing the services offered for the information provided by the client of the API. </itunes:summary>
    <itunes:duration>3328</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:19:57 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/053</guid>
    <dc:creator>Jeremy Demeule, Quentin Duval</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053_high.mp4" length="1311856755" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053.mp3" expression="full" duration="3328" fileSize="53260319" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053.mp4" expression="full" duration="3328" fileSize="93112551" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053_high.mp4" expression="full" duration="3328" fileSize="1311856755" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e970/b1d5d065-af0d-411c-9452-5523f001e970/053_mid.mp4" expression="full" duration="3328" fileSize="325255192" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-DemeuleDuval.mp4" expression="full" duration="3328" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Multithreading is the answer. What is the question? (part 2 of 2)</title>
    <description><![CDATA[The main focus of this talk will be about the importance of lockless containers and RCU technology. The value of this approach will be explained and why it was added to libGuarded. I will also cover recent changes made to the RCU containers. I will explain the importance of libGuarded and how it was used in the CsSignal library to prevent deadlocks. Either basic familiarity with multithreading or attendance in Part I of this talk is suggested.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4c432689a4024f80ab91a860000160a5">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/052</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/052</link>
    <itunes:summary>The main focus of this talk will be about the importance of lockless containers and RCU technology. The value of this approach will be explained and why it was added to libGuarded. I will also cover recent changes made to the RCU containers. I will explain the importance of libGuarded and how it was used in the CsSignal library to prevent deadlocks. Either basic familiarity with multithreading or attendance in Part I of this talk is suggested. </itunes:summary>
    <itunes:duration>2969</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:19:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/052</guid>
    <dc:creator>Ansel Sermersheim</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052_high.mp4" length="1016957970" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052.mp3" expression="full" duration="2969" fileSize="47507955" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052.mp4" expression="full" duration="2969" fileSize="76192203" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052_high.mp4" expression="full" duration="2969" fileSize="1016957970" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/859d/10db7783-bc28-4e83-8170-01c4b96f859d/052_mid.mp4" expression="full" duration="2969" fileSize="258233966" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1515-Sermersheim.mp4" expression="full" duration="2969" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Agent based class design</title>
    <description><![CDATA[<p>Abstracting a set of functionalities into a class which provides a higher level interface often requires tough design decisions. Users who do not have the exact requirements for which the abstraction is optimized will suffer a syntactic or run time overhead as a result. Alexandrescu's famous &quot;policy-based design&quot; provides a mechanism to allow the user to extend and customize an existing abstraction in order to fine-tune its functionality for many different use cases. This is however limited to use cases where each policy more or less represents a compile time strategy pattern. Alas, not everything is a strategy pattern. In this talk I will explore the viability of a more agent-pattern-like paradigm where each policy knows its requirements and publishes its capabilities. In this paradigm, glue code connecting any valid set of policies is automatically generated using template metaprogramming. This allows much more powerful customizations while maintaining static linkage.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d4a56164a2ad47c0af6da8600001600f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/051</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/051</link>
    <itunes:summary>Abstracting a set of functionalities into a class which provides a higher level interface often requires tough design decisions. Users who do not have the exact requirements for which the abstraction is optimized will suffer a syntactic or run time overhead as a result. Alexandrescu&#39;s famous &amp;quot;policy-based design&amp;quot; provides a mechanism to allow the user to extend and customize an existing abstraction in order to fine-tune its functionality for many different use cases. This is however limited to use cases where each policy more or less represents a compile time strategy pattern. Alas, not everything is a strategy pattern. In this talk I will explore the viability of a more agent-pattern-like paradigm where each policy knows its requirements and publishes its capabilities. In this paradigm, glue code connecting any valid set of policies is automatically generated using template metaprogramming. This allows much more powerful customizations while maintaining static linkage. </itunes:summary>
    <itunes:duration>3516</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:18:25 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/051</guid>
    <dc:creator>Odin Holmes</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051_high.mp4" length="1022828076" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051.mp3" expression="full" duration="3516" fileSize="56267672" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051.mp4" expression="full" duration="3516" fileSize="96741848" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051_high.mp4" expression="full" duration="3516" fileSize="1022828076" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9d5/24826cb3-1fd4-4230-9e87-461ea3b5b9d5/051_mid.mp4" expression="full" duration="3516" fileSize="297530578" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Holmes.mp4" expression="full" duration="3516" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CNL: A Compositional Numeric Library</title>
    <description><![CDATA[CNL is a numerics library born out of efforts to standardize fixed-point arithmetic. It provides number types which increase precision, enforce correctness and maintain efficiency. And by designing these types with composability in mind, the library aims to do for integers what the STL does for pointers. This introductory talk will show potential users how they can benefit from using CNL in a wide variety of applications. Firstly, the individual components will be illustrated using straightforward examples. Then we'll see how these components slot together to produce powerful new types. Finally I'll detail the steps necessary to adapt existing types to work within the CNL framework. Along the way, I hope to share some of the insights I've gained while learning about literal types including: why you shouldn't mess with `int` if you want zero-cost abstractions; how C&#43;&#43; is getting better at supporting new number types and my hopes for the forthcoming Numeric TS.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:47ec4541ac044b35912ca86000015f74">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/050</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/050</link>
    <itunes:summary>CNL is a numerics library born out of efforts to standardize fixed-point arithmetic. It provides number types which increase precision, enforce correctness and maintain efficiency. And by designing these types with composability in mind, the library aims to do for integers what the STL does for pointers. This introductory talk will show potential users how they can benefit from using CNL in a wide variety of applications. Firstly, the individual components will be illustrated using straightforward examples. Then we&#39;ll see how these components slot together to produce powerful new types. Finally I&#39;ll detail the steps necessary to adapt existing types to work within the CNL framework. Along the way, I hope to share some of the insights I&#39;ve gained while learning about literal types including: why you shouldn&#39;t mess with `int` if you want zero-cost abstractions; how C&amp;#43;&amp;#43; is getting better at supporting new number types and my hopes for the forthcoming Numeric TS. </itunes:summary>
    <itunes:duration>3625</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:17:40 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/050</guid>
    <dc:creator>John McFarlane</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050_high.mp4" length="839592379" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050.mp3" expression="full" duration="3625" fileSize="58014516" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050.mp4" expression="full" duration="3625" fileSize="77757676" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050_high.mp4" expression="full" duration="3625" fileSize="839592379" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17e8/1ee3672c-923d-4397-85ac-3b43fa1b17e8/050_mid.mp4" expression="full" duration="3625" fileSize="218681061" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-McFarlane.mp4" expression="full" duration="3625" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Recreational C++</title>
    <description><![CDATA[C&#43;&#43; is a language full of curiosities, and entices the curious. This session will will walk through half a dozen little code explorations of ideas that might have been solved in 5 minutes, but piqued my curiosity to keep digging and see just how completely or thoroughly they might be solved, and what we can learn about the language and the way it holds together along the way. Fundamentally, it is about the joy of exploring code long after the problem has been solved, to find those satisfying solutions to problems that don't need solving! There will not be much deep learning; instead, there will be numerous insights into corners of the language that are often (for good reason!) unexplored, that might help with the big picture when debugging some obscure bugs. In particular, constexpr and templates will be exercised, and some compiler limits may be tested. We will demonstrating code that will the the gamut of C&#43;&#43;98 though to C&#43;&#43;17, and even poke into experimental pending features such as concepts.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9c8ad8cff9d948a8b481a86000015f0d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/049</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/049</link>
    <itunes:summary>C&amp;#43;&amp;#43; is a language full of curiosities, and entices the curious. This session will will walk through half a dozen little code explorations of ideas that might have been solved in 5 minutes, but piqued my curiosity to keep digging and see just how completely or thoroughly they might be solved, and what we can learn about the language and the way it holds together along the way. Fundamentally, it is about the joy of exploring code long after the problem has been solved, to find those satisfying solutions to problems that don&#39;t need solving! There will not be much deep learning; instead, there will be numerous insights into corners of the language that are often (for good reason!) unexplored, that might help with the big picture when debugging some obscure bugs. In particular, constexpr and templates will be exercised, and some compiler limits may be tested. We will demonstrating code that will the the gamut of C&amp;#43;&amp;#43;98 though to C&amp;#43;&amp;#43;17, and even poke into experimental pending features such as concepts. </itunes:summary>
    <itunes:duration>3770</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:03:50 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/049</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049_high.mp4" length="1067768784" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049.mp3" expression="full" duration="3770" fileSize="60334990" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049.mp4" expression="full" duration="3770" fileSize="120327767" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049_high.mp4" expression="full" duration="3770" fileSize="1067768784" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19e5/97e8f34c-fc6f-4357-9b01-356d23ff19e5/049_mid.mp4" expression="full" duration="3770" fileSize="352159248" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Meredith.mp4" expression="full" duration="3770" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Concurrency, Parallelism and Coroutines</title>
    <description><![CDATA[C&#43;&#43;17 is adding parallel overloads of most of the Standard Library algorithms. There is a TS for Concurrency in C&#43;&#43; already published, and a TS for Coroutines in C&#43;&#43; and a second TS for Concurrency in C&#43;&#43; in the works. What does all this mean for programmers? How are they all related? How do coroutines help with parallelism? This session will attempt to answer these questions and more. We will look at the implementation of parallel algorithms, and how continuations, coroutines and work-stealing fit together. We will also look at how this meshes with the Grand Unified Executors Proposal, and how you will be able to take advantage of all this as an application developer.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e7826b09ce8140eaab26a86000015e98">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/048</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/048</link>
    <itunes:summary>C&amp;#43;&amp;#43;17 is adding parallel overloads of most of the Standard Library algorithms. There is a TS for Concurrency in C&amp;#43;&amp;#43; already published, and a TS for Coroutines in C&amp;#43;&amp;#43; and a second TS for Concurrency in C&amp;#43;&amp;#43; in the works. What does all this mean for programmers? How are they all related? How do coroutines help with parallelism? This session will attempt to answer these questions and more. We will look at the implementation of parallel algorithms, and how continuations, coroutines and work-stealing fit together. We will also look at how this meshes with the Grand Unified Executors Proposal, and how you will be able to take advantage of all this as an application developer. </itunes:summary>
    <itunes:duration>3923</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:02:56 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/048</guid>
    <dc:creator>Anthony Williams</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048_high.mp4" length="1340638545" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048.mp3" expression="full" duration="3923" fileSize="62775752" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048.mp4" expression="full" duration="3923" fileSize="118632498" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048_high.mp4" expression="full" duration="3923" fileSize="1340638545" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dadb/2507cad5-90a6-4664-9549-633614a9dadb/048_mid.mp4" expression="full" duration="3923" fileSize="396433056" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1645-Williams.mp4" expression="full" duration="3923" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Multithreading is the answer. What is the question? (part 1 of 2)</title>
    <description><![CDATA[The main focus of this talk will be about the importance of lockless containers and RCU technology. The value of this approach will be explained and why it was added to libGuarded. I will also cover recent changes made to the RCU containers. I will explain the importance of libGuarded and how it was used in the CsSignal library to prevent deadlocks. Either basic familiarity with multithreading or attendance in Part I of this talk is suggested.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8696d08e39094ee0a17ea86000015dca">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/047</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/047</link>
    <itunes:summary>The main focus of this talk will be about the importance of lockless containers and RCU technology. The value of this approach will be explained and why it was added to libGuarded. I will also cover recent changes made to the RCU containers. I will explain the importance of libGuarded and how it was used in the CsSignal library to prevent deadlocks. Either basic familiarity with multithreading or attendance in Part I of this talk is suggested. </itunes:summary>
    <itunes:duration>2811</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:02:12 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/047</guid>
    <dc:creator>Ansel Sermersheim</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047_high.mp4" length="877614870" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047.mp3" expression="full" duration="2811" fileSize="44982003" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047.mp4" expression="full" duration="2811" fileSize="71823995" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047_high.mp4" expression="full" duration="2811" fileSize="877614870" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71c0/afe05732-189f-4c76-a8d3-f30522cc71c0/047_mid.mp4" expression="full" duration="2811" fileSize="225384333" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-Sermersheim.mp4" expression="full" duration="2811" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Using Modern CMake Patterns to Enforce a Good Modular Design</title>
    <description><![CDATA[CMake is the build system chosen by most open-source C&#43;&#43; projects. While it is fully capable of helping you enforce a good modular design, those features are usually not well known or understood. In this talk I will present modern CMake practices that will simplify your project build and help you design better C&#43;&#43; components with clear dependencies and build interfaces (the sum of compile flags required to use a given library). We will first do a quick recap of the theory behind modular design, most of it coming from John Lakos' work on Large Scale C&#43;&#43; Software Development. Then we will see a few of the legacy CMake patterns that can be found in a lot of open source projects and explain their shortcomings. We will learn how to create a clean C&#43;&#43; library using modern CMake practices and depend on it in others modules. Finally, we will explore the options available to export the build interfaces for use by external projects. In this last part a few external tools will be discussed such as pkg-config and Conan.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f5c670f8916f446eba27a86000015d47">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/046</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/046</link>
    <itunes:summary>CMake is the build system chosen by most open-source C&amp;#43;&amp;#43; projects. While it is fully capable of helping you enforce a good modular design, those features are usually not well known or understood. In this talk I will present modern CMake practices that will simplify your project build and help you design better C&amp;#43;&amp;#43; components with clear dependencies and build interfaces (the sum of compile flags required to use a given library). We will first do a quick recap of the theory behind modular design, most of it coming from John Lakos&#39; work on Large Scale C&amp;#43;&amp;#43; Software Development. Then we will see a few of the legacy CMake patterns that can be found in a lot of open source projects and explain their shortcomings. We will learn how to create a clean C&amp;#43;&amp;#43; library using modern CMake practices and depend on it in others modules. Finally, we will explore the options available to export the build interfaces for use by external projects. In this last part a few external tools will be discussed such as pkg-config and Conan. </itunes:summary>
    <itunes:duration>3459</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:01:06 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/046</guid>
    <dc:creator>Mathieu Ropert</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>cmake</category>
    <enclosure url="http://video.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046_high.mp4" length="1567177881" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046.mp3" expression="full" duration="3459" fileSize="55361504" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046.mp4" expression="full" duration="3459" fileSize="115418378" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046_high.mp4" expression="full" duration="3459" fileSize="1567177881" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c64d/3ea54699-6502-471e-a144-6f17fca5c64d/046_mid.mp4" expression="full" duration="3459" fileSize="448761429" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-Ropert.mp4" expression="full" duration="3459" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>MPark.Patterns: Pattern Matching in C++</title>
    <description><![CDATA[Pattern matching brings a declarative approach to destructuring and inspecting complex data types. It’s a very powerful abstraction provided by many programming languages such as Haskell and OCaml, and more recently, Rust, Scala, and Swift. We’ll see a glimpse of pattern matching in C&#43;&#43;17 and their current limitations through features such as structured bindings, `apply`, and `visit`. We’ll then jump into MPark.Patterns, an experimental pattern matching library for C&#43;&#43;. The following is an example of `fizzbuzz` written with the library: void fizzbuzz() { for (int i = 1; i ＜= 100; &#43;&#43;i) { using namespace mpark::patterns; match(i % 3, i % 5)( pattern(0, 0) = [] { std::cout ＜＜ &quot;fizzbuzz\n&quot;; }, pattern(0, _) = [] { std::cout ＜＜ &quot;fizz\n&quot;; }, pattern(_, 0) = [] { std::cout ＜＜ &quot;buzz\n&quot;; }, pattern(_, _) = [i] { std::cout ＜＜ i ＜＜ '\n'; }); } } We’ll see many more examples like this that lead to simpler, declarative code that focuses on the desired shape/state of the data, rather than a sequence of imperative code that tries to inspect the data in piecemeal. The goal of the library, and the talk is to gain experience and exposure to pattern matching in order to potentially help guide the design of a language-based pattern matching mechanism.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ad752a7558684650a9eea86000015cba">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/045</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/045</link>
    <itunes:summary>Pattern matching brings a declarative approach to destructuring and inspecting complex data types. It’s a very powerful abstraction provided by many programming languages such as Haskell and OCaml, and more recently, Rust, Scala, and Swift. We’ll see a glimpse of pattern matching in C&amp;#43;&amp;#43;17 and their current limitations through features such as structured bindings, `apply`, and `visit`. We’ll then jump into MPark.Patterns, an experimental pattern matching library for C&amp;#43;&amp;#43;. The following is an example of `fizzbuzz` written with the library: void fizzbuzz() { for (int i = 1; i ＜= 100; &amp;#43;&amp;#43;i) { using namespace mpark::patterns; match(i % 3, i % 5)( pattern(0, 0) = [] { std::cout ＜＜ &amp;quot;fizzbuzz\n&amp;quot;; }, pattern(0, _) = [] { std::cout ＜＜ &amp;quot;fizz\n&amp;quot;; }, pattern(_, 0) = [] { std::cout ＜＜ &amp;quot;buzz\n&amp;quot;; }, pattern(_, _) = [i] { std::cout ＜＜ i ＜＜ &#39;\n&#39;; }); } } We’ll see many more examples like this that lead to simpler, declarative code that focuses on the desired shape/state of the data, rather than a sequence of imperative code that tries to inspect the data in piecemeal. The goal of the library, and the talk is to gain experience and exposure to pattern matching in order to potentially help guide the design of a language-based pattern matching mechanism. </itunes:summary>
    <itunes:duration>3612</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 22:00:18 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/045</guid>
    <dc:creator>Michael Park</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045_high.mp4" length="1163443337" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045.mp3" expression="full" duration="3612" fileSize="57808322" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045.mp4" expression="full" duration="3612" fileSize="83831576" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045_high.mp4" expression="full" duration="3612" fileSize="1163443337" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1e38/754b0a66-3256-40e4-83bd-358344971e38/045_mid.mp4" expression="full" duration="3612" fileSize="269838568" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-Park.mp4" expression="full" duration="3612" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>dynamic_cast From Scratch</title>
    <description><![CDATA[This session will introduce you to the C&#43;&#43; object model: the rules by which C&#43;&#43; class objects are translated into memory layouts. We'll quickly cover polymorphic class types and multiple and virtual inheritance. We'll discuss the anatomy of a virtual method call, the difference between `static_cast` and `reinterpret_cast`, and what's contained in a vtable besides function pointers. We'll see that the way `dynamic_cast` thinks about the class hierarchy is slightly different from the way we're used to drawing it; and that `dynamic_cast` is expensive enough that sometimes we can find cheaper ways to ask an object for its type! The climax will be a complete, bug-free, and fast implementation of C&#43;&#43;'s built-in `dynamic_cast`, using our own hand-crafted artisanal run-time type information (RTTI). Attendees will incidentally be exposed to several features of the modern C&#43;&#43; language, including type traits and the `final` qualifier. This session will mostly be talking about the Itanium C&#43;&#43; ABI, which is the standard on Linux and OS X systems. Mapping these concepts to the MSVC ABI will be left as an exercise for the reader of the project's GitHub repo: https://github.com/Quuxplusone/from-scratch/tree/master/dynamic-cast#dynamic_cast-from-scratch <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ba67ecbb73454ed6a6ada86000015c1f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/044</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/044</link>
    <itunes:summary>This session will introduce you to the C&amp;#43;&amp;#43; object model: the rules by which C&amp;#43;&amp;#43; class objects are translated into memory layouts. We&#39;ll quickly cover polymorphic class types and multiple and virtual inheritance. We&#39;ll discuss the anatomy of a virtual method call, the difference between `static_cast` and `reinterpret_cast`, and what&#39;s contained in a vtable besides function pointers. We&#39;ll see that the way `dynamic_cast` thinks about the class hierarchy is slightly different from the way we&#39;re used to drawing it; and that `dynamic_cast` is expensive enough that sometimes we can find cheaper ways to ask an object for its type! The climax will be a complete, bug-free, and fast implementation of C&amp;#43;&amp;#43;&#39;s built-in `dynamic_cast`, using our own hand-crafted artisanal run-time type information (RTTI). Attendees will incidentally be exposed to several features of the modern C&amp;#43;&amp;#43; language, including type traits and the `final` qualifier. This session will mostly be talking about the Itanium C&amp;#43;&amp;#43; ABI, which is the standard on Linux and OS X systems. Mapping these concepts to the MSVC ABI will be left as an exercise for the reader of the project&#39;s GitHub repo: https://github.com/Quuxplusone/from-scratch/tree/master/dynamic-cast#dynamic_cast-from-scratch</itunes:summary>
    <itunes:duration>3528</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:58:56 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/044</guid>
    <dc:creator>arthur o&#39;dwyer</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044_high.mp4" length="1199428083" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044.mp3" expression="full" duration="3528" fileSize="56452766" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044.mp4" expression="full" duration="3528" fileSize="82835752" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044_high.mp4" expression="full" duration="3528" fileSize="1199428083" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d55f/d5cfc3e2-93fd-4312-8109-bc1243b3d55f/044_mid.mp4" expression="full" duration="3528" fileSize="307886952" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1400-O'Dwyer.mp4" expression="full" duration="3528" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Cross-Platform Apps with Dropbox’s Djinni: In-Production Architecture Examples</title>
    <description><![CDATA[Djinni is a tool developed by Dropbox for cross-platform C&#43;&#43; development. This session will give an overview of mobile cross-platform C&#43;&#43; development, an explanation of what Djinni does and why it is useful, and details on several Djinni-based app architectures I have used.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f96d935f10d346ae9eeba86000015bb8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/043</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/043</link>
    <itunes:summary>Djinni is a tool developed by Dropbox for cross-platform C&amp;#43;&amp;#43; development. This session will give an overview of mobile cross-platform C&amp;#43;&amp;#43; development, an explanation of what Djinni does and why it is useful, and details on several Djinni-based app architectures I have used. </itunes:summary>
    <itunes:duration>2929</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:57:35 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/043</guid>
    <dc:creator>Stephen Spann</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>mobile</category>
    <enclosure url="http://video.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043_high.mp4" length="871074111" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043.mp3" expression="full" duration="2929" fileSize="46879362" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043.mp4" expression="full" duration="2929" fileSize="85216878" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043_high.mp4" expression="full" duration="2929" fileSize="871074111" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6157/72a4a6d6-2920-49e8-a13a-3f2d7c7b6157/043_mid.mp4" expression="full" duration="2929" fileSize="258010316" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-Spann.mp4" expression="full" duration="2929" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Mocking Frameworks considered harmful</title>
    <description><![CDATA[However, you might have existing code bases or want to rely on external libraries that may make writing effective and fast unit tests hard or even near to impossible. A typical work-around for these situations is to introduce test stubs for such external dependencies to make your code testable. Some propose to use mocking frameworks, such as GoogleMock, together with unit testing frameworks to ease the specification of the replacement objects. These mocking frameworks often come with their own domain-specific language (DSL) to describe the behavior and expected usage of the mock object. In addition to a learning curve, the DSLs often do not help much, when things do not work. The current lack of standardized reflection in addition requires macro trickery making fixing problems even harder. A second issue, is that existing code often must be prepared to suite the mocking frameworks interception mechanism to allow to inject the mock objects. Last but not least test-driven-development (TDD) together with the use of a mocking framework can lead to high coupling, that TDD usually strives to reduce. This talk demonstrates &quot;classical&quot; mocking frameworks, shows the problems and demonstrates how Cevelop's Mockator approach can help refactoring existing code to get it under test and how a very simple plain C&#43;&#43; solution can be used instead of complicated mocking framework for unit tests with dependent code replaced by test stubs or mocks.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b8aaf866f2124349806aa86000015af8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/042</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/042</link>
    <itunes:summary>However, you might have existing code bases or want to rely on external libraries that may make writing effective and fast unit tests hard or even near to impossible. A typical work-around for these situations is to introduce test stubs for such external dependencies to make your code testable. Some propose to use mocking frameworks, such as GoogleMock, together with unit testing frameworks to ease the specification of the replacement objects. These mocking frameworks often come with their own domain-specific language (DSL) to describe the behavior and expected usage of the mock object. In addition to a learning curve, the DSLs often do not help much, when things do not work. The current lack of standardized reflection in addition requires macro trickery making fixing problems even harder. A second issue, is that existing code often must be prepared to suite the mocking frameworks interception mechanism to allow to inject the mock objects. Last but not least test-driven-development (TDD) together with the use of a mocking framework can lead to high coupling, that TDD usually strives to reduce. This talk demonstrates &amp;quot;classical&amp;quot; mocking frameworks, shows the problems and demonstrates how Cevelop&#39;s Mockator approach can help refactoring existing code to get it under test and how a very simple plain C&amp;#43;&amp;#43; solution can be used instead of complicated mocking framework for unit tests with dependent code replaced by test stubs or mocks. </itunes:summary>
    <itunes:duration>3678</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:56:21 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/042</guid>
    <dc:creator>Peter Sommerlad</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>testing</category>
    <enclosure url="http://video.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042_high.mp4" length="1421435330" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042.mp3" expression="full" duration="3678" fileSize="58852405" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042.mp4" expression="full" duration="3678" fileSize="100975644" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042_high.mp4" expression="full" duration="3678" fileSize="1421435330" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/96ef/66f7a97f-4e71-48b8-a639-4200c61996ef/042_mid.mp4" expression="full" duration="3678" fileSize="367063662" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-Sommerlad.mp4" expression="full" duration="3678" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Function default arguments: Slingshot or Shotgun?</title>
    <description><![CDATA[On the surface, function parameter default arguments seem like a very simple feature of the C&#43;&#43; language. This session explores how (not) true that is. If you like the dark corners of C&#43;&#43;, you will come away with a new appreciation for this innocent looking syntactic sugar. Otherwise, you will have at least informed yourself on how not to blow your foot off with what looks like a slingshot.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:13ff237adfe44d3c82c3a86000015a96">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/041</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/041</link>
    <itunes:summary>On the surface, function parameter default arguments seem like a very simple feature of the C&amp;#43;&amp;#43; language. This session explores how (not) true that is. If you like the dark corners of C&amp;#43;&amp;#43;, you will come away with a new appreciation for this innocent looking syntactic sugar. Otherwise, you will have at least informed yourself on how not to blow your foot off with what looks like a slingshot. </itunes:summary>
    <itunes:duration>3629</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:55:25 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/041</guid>
    <dc:creator>Michael Price</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041_high.mp4" length="1043639225" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041.mp3" expression="full" duration="3629" fileSize="58070604" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041.mp4" expression="full" duration="3629" fileSize="94364336" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041_high.mp4" expression="full" duration="3629" fileSize="1043639225" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c687/75bd3714-6e5d-425f-beaf-ac632ebac687/041_mid.mp4" expression="full" duration="3629" fileSize="278804288" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-Price.mp4" expression="full" duration="3629" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Everything You Ever Wanted to Know about DLLs</title>
    <description><![CDATA[If you build software for Windows, you use DLLs, and it’s likely that you may build DLLs of your own. DLLs are the primary mechanism for packaging and encapsulating code on the Windows platform. But have you ever stopped to think about how DLLs work? What goes into a DLL when you build it, what happens when you link your program with a DLL, or how do DLLs get located and loaded at runtime? Many of us build and use DLLs without fully understanding them. In this session, we’ll give an in-depth introduction to DLLs and how they work. We’ll begin by looking at what’s in a DLL—the kinds of things a DLL can contain and the basic data structures that are used—and the benefits and drawbacks of packaging code in a DLL. We’ll look at how DLLs are loaded, including the details of how the loader locates DLLs and maps them into the process; how dependencies are resolved among DLLs; and DLL lifetime and how DLLs get unloaded. We’ll also look at how DLLs get built, including what makes DLLs “special,” what goes into an import library, and how the linker uses import libraries. Finally, we’ll look at several other miscellaneous topics, including how DLLs interact with threads and thread-local storage, and mechanisms for solving or mitigating the dreaded “DLL hell.”  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3b8a0c7e5da0493bac50a86000015a12">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/040</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/040</link>
    <itunes:summary>If you build software for Windows, you use DLLs, and it’s likely that you may build DLLs of your own. DLLs are the primary mechanism for packaging and encapsulating code on the Windows platform. But have you ever stopped to think about how DLLs work? What goes into a DLL when you build it, what happens when you link your program with a DLL, or how do DLLs get located and loaded at runtime? Many of us build and use DLLs without fully understanding them. In this session, we’ll give an in-depth introduction to DLLs and how they work. We’ll begin by looking at what’s in a DLL—the kinds of things a DLL can contain and the basic data structures that are used—and the benefits and drawbacks of packaging code in a DLL. We’ll look at how DLLs are loaded, including the details of how the loader locates DLLs and maps them into the process; how dependencies are resolved among DLLs; and DLL lifetime and how DLLs get unloaded. We’ll also look at how DLLs get built, including what makes DLLs “special,” what goes into an import library, and how the linker uses import libraries. Finally, we’ll look at several other miscellaneous topics, including how DLLs interact with threads and thread-local storage, and mechanisms for solving or mitigating the dreaded “DLL hell.” </itunes:summary>
    <itunes:duration>3747</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:54:31 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/040</guid>
    <dc:creator>James McNellis</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040_high.mp4" length="1405797456" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040.mp3" expression="full" duration="3747" fileSize="59957563" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040.mp4" expression="full" duration="3747" fileSize="90667669" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040_high.mp4" expression="full" duration="3747" fileSize="1405797456" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eec2/5f378fd1-ed14-483d-9950-edfb5184eec2/040_mid.mp4" expression="full" duration="3747" fileSize="345283553" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-McNellis.mp4" expression="full" duration="3747" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Nightmare of Move Semantics for Trivial Classes</title>
    <description><![CDATA[Assume, we implement a very simple class having just multiple string members. Even ordinary application programmer prefer to make it simple and fast. You think you know how to do it? Well beware! It can become a lot harder than you initially might assume. So, let’s look at a trivial class with multiple string members and use live coding to see the effect using different implementation approaches (using constructors passing by value, by reference, by perfect forwarding, or doing more sophisticated tricks). Sooner than later we will fall into the deep darkness of universal/forwarding references, enable_if, type traits, and concepts.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a025ea80ec7d4cefbacfa860000159be">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/039</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/039</link>
    <itunes:summary>Assume, we implement a very simple class having just multiple string members. Even ordinary application programmer prefer to make it simple and fast. You think you know how to do it? Well beware! It can become a lot harder than you initially might assume. So, let’s look at a trivial class with multiple string members and use live coding to see the effect using different implementation approaches (using constructors passing by value, by reference, by perfect forwarding, or doing more sophisticated tricks). Sooner than later we will fall into the deep darkness of universal/forwarding references, enable_if, type traits, and concepts. </itunes:summary>
    <itunes:duration>3435</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:53:14 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/039</guid>
    <dc:creator>Nicolai Josuttis</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039_high.mp4" length="1100512637" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039.mp3" expression="full" duration="3435" fileSize="54971363" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039.mp4" expression="full" duration="3435" fileSize="97534152" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039_high.mp4" expression="full" duration="3435" fileSize="1100512637" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2faf/3eb2910d-ad97-4c75-9c10-25dbe0bd2faf/039_mid.mp4" expression="full" duration="3435" fileSize="333790305" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-Josuttis.mp4" expression="full" duration="3435" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Design Patterns for Low-Level Real-Time Rendering</title>
    <description><![CDATA[In recent years, the GPU graphics community has seen the introduction of many new GPU programming APIs like Khronos' Vulkan, Microsoft's Direct3D 12, and Apple's Metal. These APIs present much more control of GPU hardware, but bring with them a great increase in complexity. We need to rethink the way we do graphics programming to take advantage of new features, while also keeping complexity under control. This talk presents solutions to recurring programming problems with these new GPU graphics APIs. These solutions are intended to simplify the complexity of the API by an order of magnitude, while simultaneously improving overall performance. This talk aims to discuss some key techniques for other developers to create their own GPU rendering engine. Topics covered include using a ring buffer to stream data and descriptors from CPU to GPU, scheduling GPU memory and work from the CPU, designing a multi-pass real-time GPU renderer, and using fork/join parallelism to increase the performance of the CPU code that submits GPU work.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4a5e0e7399174fcd8ed5a8600001591a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/038</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/038</link>
    <itunes:summary>In recent years, the GPU graphics community has seen the introduction of many new GPU programming APIs like Khronos&#39; Vulkan, Microsoft&#39;s Direct3D 12, and Apple&#39;s Metal. These APIs present much more control of GPU hardware, but bring with them a great increase in complexity. We need to rethink the way we do graphics programming to take advantage of new features, while also keeping complexity under control. This talk presents solutions to recurring programming problems with these new GPU graphics APIs. These solutions are intended to simplify the complexity of the API by an order of magnitude, while simultaneously improving overall performance. This talk aims to discuss some key techniques for other developers to create their own GPU rendering engine. Topics covered include using a ring buffer to stream data and descriptors from CPU to GPU, scheduling GPU memory and work from the CPU, designing a multi-pass real-time GPU renderer, and using fork/join parallelism to increase the performance of the CPU code that submits GPU work. </itunes:summary>
    <itunes:duration>3272</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:52:10 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/038</guid>
    <dc:creator>Nicolas Guillemot</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>performance</category>
    <category>graphics</category>
    <enclosure url="http://video.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038_high.mp4" length="1002364191" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038.mp3" expression="full" duration="3272" fileSize="52354781" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038.mp4" expression="full" duration="3272" fileSize="90353890" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038_high.mp4" expression="full" duration="3272" fileSize="1002364191" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b89e/276d4dce-fa06-45aa-9487-17de0301b89e/038_mid.mp4" expression="full" duration="3272" fileSize="295988138" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_0900-Guillemot.mp4" expression="full" duration="3272" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How to Write Effective Documentation for C++ Libraries with Minimal Effort </title>
    <description><![CDATA[With the success of GitHub, everybody and his brother is a library developer. Programmers love to create code, upload it to GitHub and hope for immortality. Most projects get only the most cursory examination before being passed over by users. Why is that? GitHub considered the problem. GitHub just published its 2017 Open Source Survey. The popular social coding service surveyed over 5,500 members of its community, from over 3,800 projects on github.com. It also spoke to 500 coders working on projects from outside the GitHub ecosystem. The Open Source Survey asked a broad array of questions. One that caught my eye was about problems people encounter when working with, or contributing to, open source projects. An incredible 93 percent of people reported being frustrated with “incomplete or confusing documentation”. see https://thenextweb.com/dd/2017/06/02/free-software-is-suffering-because-coders-dont-know-how-to-write-documentation/#.tnw_SYGx5ozW Even the most experienced and dedicated software developers can't do it. This can be confirmed by looking over recent reviews of Boost libraries. The most common complaint is that the documentation isn't useable. Programmers love their stuff and hope to get people to use it, why don't they fix their documentation? The reason is simple: They don't know how. Problems a) It's tedious and boring to write b) Developers don't know what to include and what to exclude c) Tools make things harder d) Regardless of the amount of effort invested, the end result is usually of little or no value. This presentation will present a &quot;Cookbook&quot; and demonstration for creating documentation. Using this method will a) Much diminish the tedium of the task. b) Help improve to the quality of library design and implementation c) Create something that is useful to the library user. We will touch upon tools like Doxygen, etc. But this is only a small portion of the presentation. We use them so they deserve mention. But they don't cause the problem, and they don't solve it either.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6ccad7d089da4734a9f0a8600001586c">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/037</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/037</link>
    <itunes:summary>With the success of GitHub, everybody and his brother is a library developer. Programmers love to create code, upload it to GitHub and hope for immortality. Most projects get only the most cursory examination before being passed over by users. Why is that? GitHub considered the problem. GitHub just published its 2017 Open Source Survey. The popular social coding service surveyed over 5,500 members of its community, from over 3,800 projects on github.com. It also spoke to 500 coders working on projects from outside the GitHub ecosystem. The Open Source Survey asked a broad array of questions. One that caught my eye was about problems people encounter when working with, or contributing to, open source projects. An incredible 93 percent of people reported being frustrated with “incomplete or confusing documentation”. see https://thenextweb.com/dd/2017/06/02/free-software-is-suffering-because-coders-dont-know-how-to-write-documentation/#.tnw_SYGx5ozW Even the most experienced and dedicated software developers can&#39;t do it. This can be confirmed by looking over recent reviews of Boost libraries. The most common complaint is that the documentation isn&#39;t useable. Programmers love their stuff and hope to get people to use it, why don&#39;t they fix their documentation? The reason is simple: They don&#39;t know how. Problems a) It&#39;s tedious and boring to write b) Developers don&#39;t know what to include and what to exclude c) Tools make things harder d) Regardless of the amount of effort invested, the end result is usually of little or no value. This presentation will present a &amp;quot;Cookbook&amp;quot; and demonstration for creating documentation. Using this method will a) Much diminish the tedium of the task. b) Help improve to the quality of library design and implementation c) Create something that is useful to the library user. We will touch upon tools like Doxygen, etc. But this is only a small portion of the presentation. We use them so they deserve mention. But they don&#39;t cause the p</itunes:summary>
    <itunes:duration>3738</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:51:12 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/037</guid>
    <dc:creator>Robert Ramey</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037_high.mp4" length="1415387610" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037.mp3" expression="full" duration="3738" fileSize="59810176" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037.mp4" expression="full" duration="3738" fileSize="98756379" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037_high.mp4" expression="full" duration="3738" fileSize="1415387610" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/604c/d1756e0c-1bec-4afa-b76e-586a5aed604c/037_mid.mp4" expression="full" duration="3738" fileSize="382736919" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1400-Ramey.mp4" expression="full" duration="3738" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Grill the Committee</title>
    <description><![CDATA[What would you like to know about the C&#43;&#43; standard? Join us for a panel discussion with the leaders of the C&#43;&#43; standards committee where the audience asks the questions. This we've got the the chairs of the Core Evolution and Language Evolution working groups, joined by the primary authors of such major upcoming features as concepts, metaclasses, ranges, modules, coroutines, compile time programming, and the spaceship operator.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:755be67cc5e2427a8226a8600001580f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/036</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/036</link>
    <itunes:summary>What would you like to know about the C&amp;#43;&amp;#43; standard? Join us for a panel discussion with the leaders of the C&amp;#43;&amp;#43; standards committee where the audience asks the questions. This we&#39;ve got the the chairs of the Core Evolution and Language Evolution working groups, joined by the primary authors of such major upcoming features as concepts, metaclasses, ranges, modules, coroutines, compile time programming, and the spaceship operator. </itunes:summary>
    <itunes:duration>5298</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:50:12 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/036</guid>
    <dc:creator>Herb Sutter, Bjarne Stroustrup, Andrew Sutton, Jon Kalb, Titus Winters, Louis Dionne, Gor Nishanov, Eric Niebler, Gabriel Dos Reis, Ville Voutilainen</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/7986/4eb6a7ee-ed58-4f57-ae66-ace806767986/036.mp4" length="412619638" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/7986/4eb6a7ee-ed58-4f57-ae66-ace806767986/036_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7986/4eb6a7ee-ed58-4f57-ae66-ace806767986/036.mp4" expression="full" duration="5298" fileSize="412619638" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_2030-KalbPANEL.mp4" expression="full" duration="5298" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Fuzz or lose: why and how to make fuzzing a standard practice for C++ </title>
    <description><![CDATA[Fuzzing is a family of testing techniques in which test inputs are generated semi-randomly. The memory unsafety of C&#43;&#43; has made fuzzing a popular tool among security researchers. Fuzzing also helps with stability, performance, and equivalence testing; and it’s a great addition to everyone’s CI. Our team has launched OSS-Fuzz, the Google's continuous fuzzing service for open source software, and a similar service for our internal C&#43;&#43; developers. Over 1000 C&#43;&#43; APIs are being fuzzed automatically 24/7, and thousands of bugs have been found and fixed. Now we want to share this experience with the wider C&#43;&#43; community and make fuzzing a part of everyone’s toolbox, alongside unit tests. We will demonstrate how you can fuzz your C&#43;&#43; library with minimal effort, discuss fuzzing of highly structured inputs, and speculate on potential fuzzing-related improvements to C&#43;&#43;.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7cf3b880a480481193e5a860000156b8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/035</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/035</link>
    <itunes:summary>Fuzzing is a family of testing techniques in which test inputs are generated semi-randomly. The memory unsafety of C&amp;#43;&amp;#43; has made fuzzing a popular tool among security researchers. Fuzzing also helps with stability, performance, and equivalence testing; and it’s a great addition to everyone’s CI. Our team has launched OSS-Fuzz, the Google&#39;s continuous fuzzing service for open source software, and a similar service for our internal C&amp;#43;&amp;#43; developers. Over 1000 C&amp;#43;&amp;#43; APIs are being fuzzed automatically 24/7, and thousands of bugs have been found and fixed. Now we want to share this experience with the wider C&amp;#43;&amp;#43; community and make fuzzing a part of everyone’s toolbox, alongside unit tests. We will demonstrate how you can fuzz your C&amp;#43;&amp;#43; library with minimal effort, discuss fuzzing of highly structured inputs, and speculate on potential fuzzing-related improvements to C&amp;#43;&amp;#43;. </itunes:summary>
    <itunes:duration>1836</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:49:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/035</guid>
    <dc:creator>Kostya Serebryany</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035_high.mp4" length="661536296" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035.mp3" expression="full" duration="1836" fileSize="29383931" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035.mp4" expression="full" duration="1836" fileSize="46003071" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035_high.mp4" expression="full" duration="1836" fileSize="661536296" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/82b8/5c0ad8cc-485c-4284-a269-93d4f93d82b8/035_mid.mp4" expression="full" duration="1836" fileSize="176639714" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1720-Serebryany.mp4" expression="full" duration="1836" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>folly::Function: A Non-copyable Alternative to std::function</title>
    <description><![CDATA[We have often found it limiting that std::function cannot store callable objects if they are not copyable, so we developed and open-sourced folly::Function, a function wrapper that can store move-only callable objects. This presentation outlines the design decisions behind folly::Function and illustrates their consequences and our experiences after 18 months of wide production use at Facebook. We find folly::Function is more appropriate than std::function for typical use cases, such as storing callback functions and submitting tasks for asynchronous execution. Other features of folly::Function include that it is noexcept-movable, and it avoids some known issues regarding const-correctness in std::function, which allows to invoke non-const operations on a const reference. Instead, folly::Function lets you declare whether a callable may or may not mutate its state (e.g. folly::Function＜void() const＞).  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2c8a1f35cc104150b16ca86000015656">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/034</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/034</link>
    <itunes:summary>We have often found it limiting that std::function cannot store callable objects if they are not copyable, so we developed and open-sourced folly::Function, a function wrapper that can store move-only callable objects. This presentation outlines the design decisions behind folly::Function and illustrates their consequences and our experiences after 18 months of wide production use at Facebook. We find folly::Function is more appropriate than std::function for typical use cases, such as storing callback functions and submitting tasks for asynchronous execution. Other features of folly::Function include that it is noexcept-movable, and it avoids some known issues regarding const-correctness in std::function, which allows to invoke non-const operations on a const reference. Instead, folly::Function lets you declare whether a callable may or may not mutate its state (e.g. folly::Function＜void() const＞). </itunes:summary>
    <itunes:duration>1877</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:47:36 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/034</guid>
    <dc:creator>Sven Over</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034_high.mp4" length="747020918" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034.mp3" expression="full" duration="1877" fileSize="30045924" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034.mp4" expression="full" duration="1877" fileSize="53430958" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034_high.mp4" expression="full" duration="1877" fileSize="747020918" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cfae/1be0c4d0-9251-4f22-9dc0-a643fe1fcfae/034_mid.mp4" expression="full" duration="1877" fileSize="199936430" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1720-Oven.mp4" expression="full" duration="1877" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Enough x86 Assembly to Be Dangerous</title>
    <description><![CDATA[This tutorial is an introduction to x86 assembly language aimed at C&#43;&#43; programmers of all levels who are interested in what the compiler does with their source code. C&#43;&#43; is a programming language that cares about performance. As with any technology, a deep understanding of C&#43;&#43; is helped by knowledge of the layer below, and this means knowledge of assembly language. Knowing what the compiler does with your source code and the limitations under which it operates can inform how you design and write your C&#43;&#43;. We learn how to generate, inspect and interpret the assembly language for your C&#43;&#43; functions and programs. We take a short tour of common assembly instructions and constructs, and discover why extreme caution should be exercised if we are trying to infer performance characteristics from a simple inspection of assembly code. Starting with a simple `operator&#43;` for a user-defined class, we take a look at how interface and implementation choices affect the generated assembly code and observe the effect of copy elisions and related optimizations that compilers commonly perform.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:dede5bcdb93141d78832a860000155a9">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/033</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/033</link>
    <itunes:summary>This tutorial is an introduction to x86 assembly language aimed at C&amp;#43;&amp;#43; programmers of all levels who are interested in what the compiler does with their source code. C&amp;#43;&amp;#43; is a programming language that cares about performance. As with any technology, a deep understanding of C&amp;#43;&amp;#43; is helped by knowledge of the layer below, and this means knowledge of assembly language. Knowing what the compiler does with your source code and the limitations under which it operates can inform how you design and write your C&amp;#43;&amp;#43;. We learn how to generate, inspect and interpret the assembly language for your C&amp;#43;&amp;#43; functions and programs. We take a short tour of common assembly instructions and constructs, and discover why extreme caution should be exercised if we are trying to infer performance characteristics from a simple inspection of assembly code. Starting with a simple `operator&amp;#43;` for a user-defined class, we take a look at how interface and implementation choices affect the generated assembly code and observe the effect of copy elisions and related optimizations that compilers commonly perform. </itunes:summary>
    <itunes:duration>1858</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:46:07 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/033</guid>
    <dc:creator>Charles Bailey</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <category>assembly</category>
    <enclosure url="http://video.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033_high.mp4" length="532001375" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033.mp3" expression="full" duration="1858" fileSize="29737915" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033.mp4" expression="full" duration="1858" fileSize="48918205" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033_high.mp4" expression="full" duration="1858" fileSize="532001375" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e3e3/e0821fcf-568a-4e16-b776-d92926b4e3e3/033_mid.mp4" expression="full" duration="1858" fileSize="150651095" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1720-Bailey.mp4" expression="full" duration="1858" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>From security to performance to GPU programming: exploring modern allocators </title>
    <description><![CDATA[Want to make fast linked lists? Want to store sensitive data in memory? Want to place std::unordered_map in thread-local memory? Shared memory? How about GPU memory? You can do that in today’s C&#43;&#43; with allocators, the secret components of every STL container. Allocators went through a quiet revolution in C&#43;&#43;11 and a major expansion in C&#43;&#43;17. What did that give us? We'll look at the allocators available today in C&#43;&#43;17, boost, TBB, and other popular libraries, and demonstrate some of the amazing things that can be achieved by taking the step beyond the stack and the heap. This talk is not about allocator implementation, but is a showcase of the things that can be done with off-the-shelf allocators available now and with C&#43;&#43;17.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cbb3ff62f7654835be56a860000154f2">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/032</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/032</link>
    <itunes:summary>Want to make fast linked lists? Want to store sensitive data in memory? Want to place std::unordered_map in thread-local memory? Shared memory? How about GPU memory? You can do that in today’s C&amp;#43;&amp;#43; with allocators, the secret components of every STL container. Allocators went through a quiet revolution in C&amp;#43;&amp;#43;11 and a major expansion in C&amp;#43;&amp;#43;17. What did that give us? We&#39;ll look at the allocators available today in C&amp;#43;&amp;#43;17, boost, TBB, and other popular libraries, and demonstrate some of the amazing things that can be achieved by taking the step beyond the stack and the heap. This talk is not about allocator implementation, but is a showcase of the things that can be done with off-the-shelf allocators available now and with C&amp;#43;&amp;#43;17. </itunes:summary>
    <itunes:duration>1641</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:45:06 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/032</guid>
    <dc:creator>Sergey Zubkov</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <category>c++17</category>
    <enclosure url="http://video.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032_high.mp4" length="464432523" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032.mp3" expression="full" duration="1641" fileSize="26272795" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032.mp4" expression="full" duration="1641" fileSize="42464220" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032_high.mp4" expression="full" duration="1641" fileSize="464432523" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3217/5c708f6d-c042-469b-b719-88bc38c73217/032_mid.mp4" expression="full" duration="1641" fileSize="131457606" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Zubkov.mp4" expression="full" duration="1641" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Migrating a C++03 library to C++11 case study: Wt 4</title>
    <description><![CDATA[In this talk, we will describe the effort of migrating the API of a reasonably large open source library to C&#43;&#43;11. During the migration we wanted to benefit from as many new C&#43;&#43; features as possible, while preserving the semantics and features of the library. We will present various trade-offs in choosing a smart pointer strategy that was compatible with the existing object ownership model. The signal/slot mechanism, formerly based on boost.signals, was simplified and replaced by an implementation relying on lambdas, std::function and std::bind. Many smaller helper classes such as Boost.Any, Boost.Date_Time, and others were replaced by their standard counterparts. The minimum requirements of Wt 4 are C&#43;&#43;11, but we will describe how C&#43;&#43;14/17 are used if the compiler supports them. The main benefit of this transition is that the Wt API became more self-explaining, compilation times have been reduced, run-time performance improved, and the library's user requires less knowledge of boost. We will also discuss secondary consequences of the transition, such as simpler stack traces and the impact on compiler errors. Wt is an open source widget-based web GUI library, first released in 2006. Before C&#43;&#43;11 came around, Wt could be considered to be written in a modern style C&#43;&#43;, relying as much as possible on the standard library and using boost libraries for missing C&#43;&#43; features. Wt 4 is the next major release of the library, fully embracing C&#43;&#43;11. Visit https://www.webtoolkit.eu for more information.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1f47428199394430904ea86000015457">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/031</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/031</link>
    <itunes:summary>In this talk, we will describe the effort of migrating the API of a reasonably large open source library to C&amp;#43;&amp;#43;11. During the migration we wanted to benefit from as many new C&amp;#43;&amp;#43; features as possible, while preserving the semantics and features of the library. We will present various trade-offs in choosing a smart pointer strategy that was compatible with the existing object ownership model. The signal/slot mechanism, formerly based on boost.signals, was simplified and replaced by an implementation relying on lambdas, std::function and std::bind. Many smaller helper classes such as Boost.Any, Boost.Date_Time, and others were replaced by their standard counterparts. The minimum requirements of Wt 4 are C&amp;#43;&amp;#43;11, but we will describe how C&amp;#43;&amp;#43;14/17 are used if the compiler supports them. The main benefit of this transition is that the Wt API became more self-explaining, compilation times have been reduced, run-time performance improved, and the library&#39;s user requires less knowledge of boost. We will also discuss secondary consequences of the transition, such as simpler stack traces and the impact on compiler errors. Wt is an open source widget-based web GUI library, first released in 2006. Before C&amp;#43;&amp;#43;11 came around, Wt could be considered to be written in a modern style C&amp;#43;&amp;#43;, relying as much as possible on the standard library and using boost libraries for missing C&amp;#43;&amp;#43; features. Wt 4 is the next major release of the library, fully embracing C&amp;#43;&amp;#43;11. Visit https://www.webtoolkit.eu for more information. </itunes:summary>
    <itunes:duration>1443</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:43:46 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/031</guid>
    <dc:creator>Roel Standaert</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031_high.mp4" length="368411628" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031.mp3" expression="full" duration="1443" fileSize="23093596" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031.mp4" expression="full" duration="1443" fileSize="31904167" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031_high.mp4" expression="full" duration="1443" fileSize="368411628" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f082/a5fd9662-030b-4ce5-bb19-34d6c427f082/031_mid.mp4" expression="full" duration="1443" fileSize="93217374" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Standaert.mp4" expression="full" duration="1443" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ atomics, from basic to advanced. What do they really do?</title>
    <description><![CDATA[C&#43;&#43;11 introduced atomic operations. They allowed C&#43;&#43; programmers to express a lot of control over how memory is used in concurrent programs and made portable lock-free concurrency possible. They also allowed programmers to ask a lot of questions about how memory is used in concurrent programs and made a lot of subtle bugs possible. This talk analyzes C&#43;&#43; atomic features from two distinct points of view: what do they allow the programmer to express? what do they really do? The programmer always has two audiences: the people who will read the code, and the compilers and machines which will execute it. This distinction is, unfortunately, often missed. For lock-free programming, the difference between the two viewpoints is of particular importance: every time an explicit atomic operation is present, the programmer is saying to the reader of the program &quot;pay attention, something very unusual is going on here.&quot; Do we have the tools in the language to precisely describe what is going on and in what way it is unusual? At the same time, the programmer is saying to the compiler and the hardware &quot;this needs to be done exactly as I say, and with maximum efficiency since I went to all this trouble.&quot; This talk starts from the basics, inasmuch as this term can be applied to lock-free programming. We then explore how the C&#43;&#43; lock-free constructs are used to express programmer's intent clearly (and when they get in the way of clarity). Of course, there will be code to look at and to be confused by. At the same time, we never lose track of the fact that the atomics are one of the last resorts of efficiency, and the question of what happens in hardware and how fast does it happen is of paramount importance. Of course, the first rule of performance — &quot;never guess about performance!&quot; — applies, and any claim about speed must be supported by benchmarks. If you never used C&#43;&#43; atomics but want to learn, this is the talk for you. If you think you know C&#43;&#43; atomics but are unclear on few details, come to fill these few gaps in your knowledge. If you really do know C&#43;&#43; atomics, come to feel good (or to be surprised, and then feel even better).  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0f64bde66cb34985a6c0a860000153b8">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/030</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/030</link>
    <itunes:summary>C&amp;#43;&amp;#43;11 introduced atomic operations. They allowed C&amp;#43;&amp;#43; programmers to express a lot of control over how memory is used in concurrent programs and made portable lock-free concurrency possible. They also allowed programmers to ask a lot of questions about how memory is used in concurrent programs and made a lot of subtle bugs possible. This talk analyzes C&amp;#43;&amp;#43; atomic features from two distinct points of view: what do they allow the programmer to express? what do they really do? The programmer always has two audiences: the people who will read the code, and the compilers and machines which will execute it. This distinction is, unfortunately, often missed. For lock-free programming, the difference between the two viewpoints is of particular importance: every time an explicit atomic operation is present, the programmer is saying to the reader of the program &amp;quot;pay attention, something very unusual is going on here.&amp;quot; Do we have the tools in the language to precisely describe what is going on and in what way it is unusual? At the same time, the programmer is saying to the compiler and the hardware &amp;quot;this needs to be done exactly as I say, and with maximum efficiency since I went to all this trouble.&amp;quot; This talk starts from the basics, inasmuch as this term can be applied to lock-free programming. We then explore how the C&amp;#43;&amp;#43; lock-free constructs are used to express programmer&#39;s intent clearly (and when they get in the way of clarity). Of course, there will be code to look at and to be confused by. At the same time, we never lose track of the fact that the atomics are one of the last resorts of efficiency, and the question of what happens in hardware and how fast does it happen is of paramount importance. Of course, the first rule of performance — &amp;quot;never guess about performance!&amp;quot; — applies, and any claim about speed must be supported by benchmarks. If you never used C&amp;#43;&amp;#43; atomics but want to learn, this is the talk </itunes:summary>
    <itunes:duration>4461</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:42:49 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/030</guid>
    <dc:creator>Fedor Pikus</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030_high.mp4" length="1617110879" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030.mp3" expression="full" duration="4461" fileSize="71390064" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030.mp4" expression="full" duration="4461" fileSize="124037385" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030_high.mp4" expression="full" duration="4461" fileSize="1617110879" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/79ea/14e4dae5-2c32-4ee9-9ebe-547a471879ea/030_mid.mp4" expression="full" duration="4461" fileSize="441364572" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Pikus.mp4" expression="full" duration="4461" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Enhanced Support for Value Semantics in C++17</title>
    <description><![CDATA[Value semantics has been promoted in the C&#43;&#43; community for a long time, for reasons such as referential transparency, avoidance of memory management issues, and even efficiency in some cases. Move semantics in C&#43;&#43;11 was a big step in language-level support for value semantics. In this talk, we’ll cover steps taken in C&#43;&#43;17 for enhanced library-support for value semantics. Specifically, we’ll focus on `std::optional`, `std::variant`, and `std::any`. We’ll discuss what they are, their motivating use cases, and most importantly, identify existing patterns that can be improved by replacing it with one of these utilities. We’ll also cover some of the details such as: `std::monostate`, `std::variant`’s `valueless_by_exception` state, subtle difference in behavior between `std::optional＜T＞` and `std::variant＜std::monostate, T＞`, etc. The goal of the talk is to inform you of new library features in C&#43;&#43;17, and to convince you of their usefulness and ultimately to add them to your toolbox.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d6eb0478532e4ce6ba54a86000015301">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/029</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/029</link>
    <itunes:summary>Value semantics has been promoted in the C&amp;#43;&amp;#43; community for a long time, for reasons such as referential transparency, avoidance of memory management issues, and even efficiency in some cases. Move semantics in C&amp;#43;&amp;#43;11 was a big step in language-level support for value semantics. In this talk, we’ll cover steps taken in C&amp;#43;&amp;#43;17 for enhanced library-support for value semantics. Specifically, we’ll focus on `std::optional`, `std::variant`, and `std::any`. We’ll discuss what they are, their motivating use cases, and most importantly, identify existing patterns that can be improved by replacing it with one of these utilities. We’ll also cover some of the details such as: `std::monostate`, `std::variant`’s `valueless_by_exception` state, subtle difference in behavior between `std::optional＜T＞` and `std::variant＜std::monostate, T＞`, etc. The goal of the talk is to inform you of new library features in C&amp;#43;&amp;#43;17, and to convince you of their usefulness and ultimately to add them to your toolbox. </itunes:summary>
    <itunes:duration>3606</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:16:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/029</guid>
    <dc:creator>Michael Park</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029_high.mp4" length="1242158075" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029.mp3" expression="full" duration="3606" fileSize="57710035" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029.mp4" expression="full" duration="3606" fileSize="92630807" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029_high.mp4" expression="full" duration="3606" fileSize="1242158075" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b829/7b8ae272-6e8e-4ce5-a89a-e57a8e1eb829/029_mid.mp4" expression="full" duration="3606" fileSize="314298687" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Park.mp4" expression="full" duration="3606" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Esoteric Data Structures and Where to Find Them</title>
    <description><![CDATA[We already have array, vector, and unordered_map, what other data structures could we possibly need? As it turns out, there are a lot of them and they come from all areas of software! Curious to learn the latest method of representing a pathfinding search space in detailed 3D environments? Does efficiently detecting if a website could be malicious sound like an interesting problem to you? Perhaps understanding how AAA games store and track their entities so efficiently is more your speed? All these things and more can be yours in exchange for just one hour of your time! Using that hour we will delve into some of the unique challenges faced by C&#43;&#43; developers in a variety of domains, and learn the inner workings of the creative solutions devised to solve them.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2a990daa0e5440a8a68ea8600001524a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/028</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/028</link>
    <itunes:summary>We already have array, vector, and unordered_map, what other data structures could we possibly need? As it turns out, there are a lot of them and they come from all areas of software! Curious to learn the latest method of representing a pathfinding search space in detailed 3D environments? Does efficiently detecting if a website could be malicious sound like an interesting problem to you? Perhaps understanding how AAA games store and track their entities so efficiently is more your speed? All these things and more can be yours in exchange for just one hour of your time! Using that hour we will delve into some of the unique challenges faced by C&amp;#43;&amp;#43; developers in a variety of domains, and learn the inner workings of the creative solutions devised to solve them. </itunes:summary>
    <itunes:duration>1804</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:16:04 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/028</guid>
    <dc:creator>Allan Deutsch</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <category>algorithms</category>
    <enclosure url="http://video.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028_high.mp4" length="642495228" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028.mp3" expression="full" duration="1804" fileSize="28867428" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028.mp4" expression="full" duration="1804" fileSize="45473949" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028_high.mp4" expression="full" duration="1804" fileSize="642495228" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f41/3078a4bf-f725-4b6a-813f-81c4a4322f41/028_mid.mp4" expression="full" duration="1804" fileSize="153176065" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Deutsch.mp4" expression="full" duration="1804" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Building Better Worlds: Developing a Procedural City Tool for Alien: Covenant </title>
    <description><![CDATA[When MPC was asked to create a massive CG city for the film Alien: Covenant, they looked to leverage procedural generation as a means for iterating on the overall shape and structure of the city, in place of a prohibitively large team of environment artists. After evaluating all the practical third party options, it was ultimately decided that the best option was to build a custom tool to procedurally assist artists' city-building skills. This allowed for rapid iteration on the overall look of the city by striking a balance between manual and procedural techniques. The core algorithms were written in C&#43;&#43; for speed. The user interface was written in Python to accommodate quick feature changes, and a dash of Fabric Engine's KL helped with model import and rendering. This multi-language approach allowed the consistent application of the &quot;best tool for the job&quot; rule, which is a common pattern at MPC, allowing flexible teams with experts in a variety of skillsets. This talk will detail the history and development of MPC's city building tool, &quot;Machi&quot;. Alan Bucior, Lead Developer of Machi, reviews the algorithms for city layout and building placement, discusses how to implement algorithms in an artist-driven manner, and shares various insights gleaned through the development process and discussion with stakeholders.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c098a558fa204f5e8246a86000015148">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/027</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/027</link>
    <itunes:summary>When MPC was asked to create a massive CG city for the film Alien: Covenant, they looked to leverage procedural generation as a means for iterating on the overall shape and structure of the city, in place of a prohibitively large team of environment artists. After evaluating all the practical third party options, it was ultimately decided that the best option was to build a custom tool to procedurally assist artists&#39; city-building skills. This allowed for rapid iteration on the overall look of the city by striking a balance between manual and procedural techniques. The core algorithms were written in C&amp;#43;&amp;#43; for speed. The user interface was written in Python to accommodate quick feature changes, and a dash of Fabric Engine&#39;s KL helped with model import and rendering. This multi-language approach allowed the consistent application of the &amp;quot;best tool for the job&amp;quot; rule, which is a common pattern at MPC, allowing flexible teams with experts in a variety of skillsets. This talk will detail the history and development of MPC&#39;s city building tool, &amp;quot;Machi&amp;quot;. Alan Bucior, Lead Developer of Machi, reviews the algorithms for city layout and building placement, discusses how to implement algorithms in an artist-driven manner, and shares various insights gleaned through the development process and discussion with stakeholders. </itunes:summary>
    <itunes:duration>1778</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:13:39 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/027</guid>
    <dc:creator>Alan Bucior</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>gaming</category>
    <enclosure url="http://video.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027_high.mp4" length="709505279" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027.mp3" expression="full" duration="1778" fileSize="28454274" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027.mp4" expression="full" duration="1778" fileSize="51042098" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027_high.mp4" expression="full" duration="1778" fileSize="709505279" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6888/1e9e6304-6bc9-4fde-8c3b-26c63d396888/027_mid.mp4" expression="full" duration="1778" fileSize="186096012" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-Bucior.mp4" expression="full" duration="1778" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Faster Delivery of Large C/C++ Projects with Conan Package Manager and Efficient Continuous Integration </title>
    <description><![CDATA[Dependency information together with the smart management of binaries and binary compatibility of Conan package manager can be used to implement a modularized, fast and efficient Continuous Integration (CI) process for large C and C&#43;&#43; projects. This CI system knows what needs to be rebuilt, what can be built in parallel, and how to transparently manage build dependencies as testing frameworks or toolchains (such as cross-compilation to Android). This talk will present a CI system, implemented for Jenkins (but which could be implemented in other CI systems too), that using the dependency graph provided by the package manager, is able to trigger dependent packages' build jobs, and only those transitively affected by the change, in the correct build order. Furthermore, the build jobs are arranged in concurrency levels, by the degree/ordering in the graph, but also for different configurations, so optimal build parallelism can be achieved. Also such dependent packages can define custom rules to decide to build themselves or not, depending on configuration or versioning criteria. Everything will be fully demonstrated in practical examples. We will also present advanced CI techniques, such as how to create packages for tools, like testing frameworks, to lately inject them as build-requirements to other libraries. Moreover, the process can also automate the installation and transparent usage of complete toolchains, like cross compiling C/C&#43;&#43; to Android with the Android NDK toolchain, to achieve a process that is convenient for developers and highly repeatable.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:12046086d2c547ad9803a860000150ca">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/026</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/026</link>
    <itunes:summary>Dependency information together with the smart management of binaries and binary compatibility of Conan package manager can be used to implement a modularized, fast and efficient Continuous Integration (CI) process for large C and C&amp;#43;&amp;#43; projects. This CI system knows what needs to be rebuilt, what can be built in parallel, and how to transparently manage build dependencies as testing frameworks or toolchains (such as cross-compilation to Android). This talk will present a CI system, implemented for Jenkins (but which could be implemented in other CI systems too), that using the dependency graph provided by the package manager, is able to trigger dependent packages&#39; build jobs, and only those transitively affected by the change, in the correct build order. Furthermore, the build jobs are arranged in concurrency levels, by the degree/ordering in the graph, but also for different configurations, so optimal build parallelism can be achieved. Also such dependent packages can define custom rules to decide to build themselves or not, depending on configuration or versioning criteria. Everything will be fully demonstrated in practical examples. We will also present advanced CI techniques, such as how to create packages for tools, like testing frameworks, to lately inject them as build-requirements to other libraries. Moreover, the process can also automate the installation and transparent usage of complete toolchains, like cross compiling C/C&amp;#43;&amp;#43; to Android with the Android NDK toolchain, to achieve a process that is convenient for developers and highly repeatable. </itunes:summary>
    <itunes:duration>4107</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:12:44 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/026</guid>
    <dc:creator>Diego Rodriguez-Losada Gonzalez</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>conan</category>
    <category>continuousintegration</category>
    <category>packagemanagement</category>
    <enclosure url="http://video.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026_high.mp4" length="1766560937" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026.mp3" expression="full" duration="4107" fileSize="65718899" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026.mp4" expression="full" duration="4107" fileSize="93751921" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026_high.mp4" expression="full" duration="4107" fileSize="1766560937" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1419/7b6bae7d-b0c3-4041-b14b-37377c031419/026_mid.mp4" expression="full" duration="4107" fileSize="425699720" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1645-BartolomeGonzalez.mp4" expression="full" duration="4107" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A modern formatting library for C++</title>
    <description><![CDATA[Come learn about the intricacies of C&#43;&#43; formatting, from stdio to iostream to the new standard proposal P0645R0: Text Formatting. The new proposal combines variadic templates with a Python-like format string syntax and is designed for performance, extensibility, and safety. It is based on the popular fmt library that has been successfully used in numerous projects in such diverse areas as gaming, mathematical optimization, autonomous vehicles, databases, logging libraries and more.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:519e741596f94f529685a86000015018">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/025</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/025</link>
    <itunes:summary>Come learn about the intricacies of C&amp;#43;&amp;#43; formatting, from stdio to iostream to the new standard proposal P0645R0: Text Formatting. The new proposal combines variadic templates with a Python-like format string syntax and is designed for performance, extensibility, and safety. It is based on the popular fmt library that has been successfully used in numerous projects in such diverse areas as gaming, mathematical optimization, autonomous vehicles, databases, logging libraries and more. </itunes:summary>
    <itunes:duration>3654</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:11:54 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/025</guid>
    <dc:creator>Victor Zverovich</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>libraries</category>
    <category>formatting</category>
    <enclosure url="http://video.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025_high.mp4" length="1422006251" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025.mp3" expression="full" duration="3654" fileSize="58468800" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025.mp4" expression="full" duration="3654" fileSize="146296730" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025_high.mp4" expression="full" duration="3654" fileSize="1422006251" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5f21/a2881a55-dec3-4b7c-852a-310d7bea5f21/025_mid.mp4" expression="full" duration="3654" fileSize="478470476" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-Zverovich.mp4" expression="full" duration="3654" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>An allocator model for std2</title>
    <description><![CDATA[C&#43;&#43;17 reserves the namespace std2 (and others) for future iterations of the standard library that may not be 100% compatible in design with the current namespace std. This session will suggest a much simpler allocator model that might be useful for that new library. What is an allocator model, and why should we care? There are a variety of experiments and benchmarks around now demonstrating the benefits that a well-chosen allocator can bring to performance-sensitive code. We would like to bring those benefits to any new standard library, but without the complexity that plagues the specification of allocators in the current standard library. An allocator model is a set of rules for writing and supplying allocators to typed and objects, and the set of rules those types should follow when using a custom allocator. Following the principle that you should not pay for what you do not use, we will look into creating a model with minimal impact on code and complexity on users — in fact we will demonstrate (in theory) a model that will typically involve writing no code for users to support custom allocators in their type, and a runtime cost that can be entirely eliminated in programs that never choose a custom allocator! This presentation is a thought experiment in a possible future direction, and still a year or so away from becoming a proposal for standardization — in particular it will rely on creating a new language feature that we should demonstrate in a practical compiler. It offers a vision of a possible future for the language, and some of the problems that we would like to solve.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7a9ecc880c134cfea54da86000014f86">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/024</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/024</link>
    <itunes:summary>C&amp;#43;&amp;#43;17 reserves the namespace std2 (and others) for future iterations of the standard library that may not be 100% compatible in design with the current namespace std. This session will suggest a much simpler allocator model that might be useful for that new library. What is an allocator model, and why should we care? There are a variety of experiments and benchmarks around now demonstrating the benefits that a well-chosen allocator can bring to performance-sensitive code. We would like to bring those benefits to any new standard library, but without the complexity that plagues the specification of allocators in the current standard library. An allocator model is a set of rules for writing and supplying allocators to typed and objects, and the set of rules those types should follow when using a custom allocator. Following the principle that you should not pay for what you do not use, we will look into creating a model with minimal impact on code and complexity on users — in fact we will demonstrate (in theory) a model that will typically involve writing no code for users to support custom allocators in their type, and a runtime cost that can be entirely eliminated in programs that never choose a custom allocator! This presentation is a thought experiment in a possible future direction, and still a year or so away from becoming a proposal for standardization — in particular it will rely on creating a new language feature that we should demonstrate in a practical compiler. It offers a vision of a possible future for the language, and some of the problems that we would like to solve. </itunes:summary>
    <itunes:duration>3435</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:11:11 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/024</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <category>libraries</category>
    <category>stl</category>
    <enclosure url="http://video.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024_high.mp4" length="794263298" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024.mp3" expression="full" duration="3435" fileSize="54969406" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024.mp4" expression="full" duration="3435" fileSize="94867016" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024_high.mp4" expression="full" duration="3435" fileSize="794263298" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f3c8/f7f70f14-b053-49a3-9a05-2d940709f3c8/024_mid.mp4" expression="full" duration="3435" fileSize="254329877" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-Meredith.mp4" expression="full" duration="3435" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Deconstructing the OS: The devil’s In the side effects</title>
    <description><![CDATA[IncludeOS is a library operating system, where your C&#43;&#43; application pulls in exactly what it needs and turns it into a bootable binary. But once you have your standalone program with standard libraries, what do you really need from an operating system? In this talk we’ll show you some exciting developments in unikernel OS- and hypervisor design, ranging from a single-function do-it-all hardware interface for everything needed to run a web server, to a full on object-oriented ecosystem giving your C&#43;&#43; application total control over everything from devices, drivers and plugins, to every protocol in an internet enabled host. We’re running a full IP stack on platforms ranging from full blown server hardware to inside a single unit test in userspace and we still want more. We’ll discuss how minimal can be combined with maximal - giving you lots of modern abstractions while keeping the final binary as lean and mean as possible.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a841a13fec72472792f2a86000014ec1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/023</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/023</link>
    <itunes:summary>IncludeOS is a library operating system, where your C&amp;#43;&amp;#43; application pulls in exactly what it needs and turns it into a bootable binary. But once you have your standalone program with standard libraries, what do you really need from an operating system? In this talk we’ll show you some exciting developments in unikernel OS- and hypervisor design, ranging from a single-function do-it-all hardware interface for everything needed to run a web server, to a full on object-oriented ecosystem giving your C&amp;#43;&amp;#43; application total control over everything from devices, drivers and plugins, to every protocol in an internet enabled host. We’re running a full IP stack on platforms ranging from full blown server hardware to inside a single unit test in userspace and we still want more. We’ll discuss how minimal can be combined with maximal - giving you lots of modern abstractions while keeping the final binary as lean and mean as possible. </itunes:summary>
    <itunes:duration>3497</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:10:22 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/023</guid>
    <dc:creator>Alfred Bratterud</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>operatingsystem</category>
    <enclosure url="http://video.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023_high.mp4" length="1354472380" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023.mp3" expression="full" duration="3497" fileSize="55968606" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023.mp4" expression="full" duration="3497" fileSize="92307142" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023_high.mp4" expression="full" duration="3497" fileSize="1354472380" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2fdc/c4d13a73-aff0-44ea-92f3-c7f1a1a32fdc/023_mid.mp4" expression="full" duration="3497" fileSize="337211740" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-Bratterud.mp4" expression="full" duration="3497" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Is Parallel Programming still hard? PART 2 of 2</title>
    <description><![CDATA[Most embedded devices are multicore, and we see concurrency becoming ubiquitous for machine learning, machine vision, and self-driving cars. Thus the age of concurrency is upon us, so whether you like it or not, concurrency is now just part of the job. It is therefore time to stop being concurrency cowards and start on the path towards producing high-quality high-performance highly scalable concurrent software artifacts. After all, there was a time when sequential programming was considered mind-crushingly hard: In fact, in the late 1970s, Paul attended a talk where none other than Edsger Dijkstra argued, and not without reason, that programmers could not be trusted to correctly code simple sequential loops. However, these long-past perilous programming pitfalls are now easily avoided with improved programming models, heuristics, and tools. We firmly believe that concurrent and parallel programming will make this same transition. This talk will help you do just that. Besides, after more than a decade since the end of the hardware &quot;free lunch&quot;, why should parallel programming still be hard?  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:26b8d99b646f4c8bb78ca86000014e5a">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/022</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/022</link>
    <itunes:summary>Most embedded devices are multicore, and we see concurrency becoming ubiquitous for machine learning, machine vision, and self-driving cars. Thus the age of concurrency is upon us, so whether you like it or not, concurrency is now just part of the job. It is therefore time to stop being concurrency cowards and start on the path towards producing high-quality high-performance highly scalable concurrent software artifacts. After all, there was a time when sequential programming was considered mind-crushingly hard: In fact, in the late 1970s, Paul attended a talk where none other than Edsger Dijkstra argued, and not without reason, that programmers could not be trusted to correctly code simple sequential loops. However, these long-past perilous programming pitfalls are now easily avoided with improved programming models, heuristics, and tools. We firmly believe that concurrent and parallel programming will make this same transition. This talk will help you do just that. Besides, after more than a decade since the end of the hardware &amp;quot;free lunch&amp;quot;, why should parallel programming still be hard? </itunes:summary>
    <itunes:duration>2876</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:07:16 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/022</guid>
    <dc:creator>Michael Wong, Paul E. McKenney, Maged Michael</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022_high.mp4" length="912632403" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022.mp3" expression="full" duration="2876" fileSize="46033003" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022.mp4" expression="full" duration="2876" fileSize="71815255" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022_high.mp4" expression="full" duration="2876" fileSize="912632403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5015/d59fc0b2-2474-4405-8af9-4f7275115015/022_mid.mp4" expression="full" duration="2876" fileSize="238900563" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-McKenneyMichaelWong.mp4" expression="full" duration="2876" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Is Parallel Programming still hard? PART 1 of 2</title>
    <description><![CDATA[Most embedded devices are multicore, and we see concurrency becoming ubiquitous for machine learning, machine vision, and self-driving cars. Thus the age of concurrency is upon us, so whether you like it or not, concurrency is now just part of the job. It is therefore time to stop being concurrency cowards and start on the path towards producing high-quality high-performance highly scalable concurrent software artifacts. After all, there was a time when sequential programming was considered mind-crushingly hard: In fact, in the late 1970s, Paul attended a talk where none other than Edsger Dijkstra argued, and not without reason, that programmers could not be trusted to correctly code simple sequential loops. However, these long-past perilous programming pitfalls are now easily avoided with improved programming models, heuristics, and tools. We firmly believe that concurrent and parallel programming will make this same transition. This talk will help you do just that. Besides, after more than a decade since the end of the hardware &quot;free lunch&quot;, why should parallel programming still be hard?  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6adcf645527b4d718c26a86000014dce">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/021</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/021</link>
    <itunes:summary>Most embedded devices are multicore, and we see concurrency becoming ubiquitous for machine learning, machine vision, and self-driving cars. Thus the age of concurrency is upon us, so whether you like it or not, concurrency is now just part of the job. It is therefore time to stop being concurrency cowards and start on the path towards producing high-quality high-performance highly scalable concurrent software artifacts. After all, there was a time when sequential programming was considered mind-crushingly hard: In fact, in the late 1970s, Paul attended a talk where none other than Edsger Dijkstra argued, and not without reason, that programmers could not be trusted to correctly code simple sequential loops. However, these long-past perilous programming pitfalls are now easily avoided with improved programming models, heuristics, and tools. We firmly believe that concurrent and parallel programming will make this same transition. This talk will help you do just that. Besides, after more than a decade since the end of the hardware &amp;quot;free lunch&amp;quot;, why should parallel programming still be hard? </itunes:summary>
    <itunes:duration>3567</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:05:33 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/021</guid>
    <dc:creator>Michael Wong, Paul E. McKenney, Maged Michael</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>concurrency</category>
    <enclosure url="http://video.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021_high.mp4" length="971393436" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021.mp3" expression="full" duration="3567" fileSize="57076843" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021.mp4" expression="full" duration="3567" fileSize="91883897" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021_high.mp4" expression="full" duration="3567" fileSize="971393436" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c741/3f16a035-714e-4cf4-94a0-a63feb92c741/021_mid.mp4" expression="full" duration="3567" fileSize="271217662" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-McKenneyMichaelWong.mp4" expression="full" duration="3567" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Unicode Strings: Why the Implementation Matters</title>
    <description><![CDATA[We will provide a brief overview including an explanation of what Unicode is, string terminology, and how Unicode supports non US languages. We will cover the pros and cons of various String formats and encodings including UTF-8, UTF-16, UCS-4, etc. A time line of Unicode development will be shown and how other languages have handled string processing over the last twenty years. We will provide a brief overview of where strings are used, what can go wrong with strings, why string encoding is important, and how the CsString library solves a major problem with string handling. We will explain how the CsString library has changed our CopperSpice Gui libraries and improved string processing in DoxyPress. No prior knowledge of Unicode, CopperSpice, or DoxyPress is required.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:30a4c6c5c53c4d89ac39a86000014d54">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/020</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/020</link>
    <itunes:summary>We will provide a brief overview including an explanation of what Unicode is, string terminology, and how Unicode supports non US languages. We will cover the pros and cons of various String formats and encodings including UTF-8, UTF-16, UCS-4, etc. A time line of Unicode development will be shown and how other languages have handled string processing over the last twenty years. We will provide a brief overview of where strings are used, what can go wrong with strings, why string encoding is important, and how the CsString library solves a major problem with string handling. We will explain how the CsString library has changed our CopperSpice Gui libraries and improved string processing in DoxyPress. No prior knowledge of Unicode, CopperSpice, or DoxyPress is required. </itunes:summary>
    <itunes:duration>3529</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:04:45 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/020</guid>
    <dc:creator>Ansel Sermersheim, Barbara Geller</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>strings</category>
    <category>unicode</category>
    <enclosure url="http://video.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020_high.mp4" length="1040034674" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020.mp3" expression="full" duration="3529" fileSize="56480100" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020.mp4" expression="full" duration="3529" fileSize="89317919" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020_high.mp4" expression="full" duration="3529" fileSize="1040034674" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c39f/b06e08ed-ec68-4d17-93d3-8bf90e66c39f/020_mid.mp4" expression="full" duration="3529" fileSize="290567861" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-GellerSermersheim.mp4" expression="full" duration="3529" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>When a Microsecond Is an Eternity: High Performance Trading Systems in C++</title>
    <description><![CDATA[Automated trading involves submitting electronic orders rapidly when opportunities arise. But it’s harder than it seems: either your system is the fastest and you make the trade, or you get nothing. This is a considerable challenge for any C&#43;&#43; developer - the critical path is only a fraction of the total codebase, it is invoked infrequently and unpredictably, yet must execute quickly and without delay. Unfortunately we can’t rely on the help of compilers, operating systems and standard hardware, as they typically aim for maximum throughput and fairness across all processes. This talk describes how successful low latency trading systems can be developed in C&#43;&#43;, demonstrating common coding techniques used to reduce execution times. While automated trading is used as the motivation for this talk, the topics discussed are equally valid to other domains such as game development and soft real-time processing.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bb2063f963d84867aab8a86000014c69">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/019</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/019</link>
    <itunes:summary>Automated trading involves submitting electronic orders rapidly when opportunities arise. But it’s harder than it seems: either your system is the fastest and you make the trade, or you get nothing. This is a considerable challenge for any C&amp;#43;&amp;#43; developer - the critical path is only a fraction of the total codebase, it is invoked infrequently and unpredictably, yet must execute quickly and without delay. Unfortunately we can’t rely on the help of compilers, operating systems and standard hardware, as they typically aim for maximum throughput and fairness across all processes. This talk describes how successful low latency trading systems can be developed in C&amp;#43;&amp;#43;, demonstrating common coding techniques used to reduce execution times. While automated trading is used as the motivation for this talk, the topics discussed are equally valid to other domains such as game development and soft real-time processing. </itunes:summary>
    <itunes:duration>3606</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:03:51 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/019</guid>
    <dc:creator>Carl Cook</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>trading</category>
    <category>performance</category>
    <enclosure url="http://video.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019_high.mp4" length="1059305024" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019.mp3" expression="full" duration="3606" fileSize="57710086" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019.mp4" expression="full" duration="3606" fileSize="99905595" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019_high.mp4" expression="full" duration="3606" fileSize="1059305024" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62bd/31148a20-511b-4de4-9657-60ffd93562bd/019_mid.mp4" expression="full" duration="3606" fileSize="297240557" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-Cook.mp4" expression="full" duration="3606" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Almost Unlimited Modern C++ in Kernel-Mode Applications</title>
    <description><![CDATA[Rian Quinn's &quot;Making C&#43;&#43; and the STL Work in the Linux/Windows Kernels&quot; from CppCon 2016 showed the difficulty of making C&#43;&#43; code work correctly in kernel mode. For some real-time systems, though, developing C&#43;&#43; applications that run in kernel mode &quot;just works&quot; as most of the necessary runtime support for Modern C&#43;&#43; is already available. Platform limitations, though, can offset the development gains that come with easy access to hardware. This talk will present a variety of issues — such as limited filesystem functionality, missing memory protection, limited debugging and performance monitoring tools, and constrained resources — that impact usage of standard C&#43;&#43; functionality and require additional due diligence on the part of the developer. Topics will include testing in user mode; kernel-mode exceptions; and programming the Intel performance monitoring hardware.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:861843c1b4624850b6b3a86000014bd3">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/018</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/018</link>
    <itunes:summary>Rian Quinn&#39;s &amp;quot;Making C&amp;#43;&amp;#43; and the STL Work in the Linux/Windows Kernels&amp;quot; from CppCon 2016 showed the difficulty of making C&amp;#43;&amp;#43; code work correctly in kernel mode. For some real-time systems, though, developing C&amp;#43;&amp;#43; applications that run in kernel mode &amp;quot;just works&amp;quot; as most of the necessary runtime support for Modern C&amp;#43;&amp;#43; is already available. Platform limitations, though, can offset the development gains that come with easy access to hardware. This talk will present a variety of issues — such as limited filesystem functionality, missing memory protection, limited debugging and performance monitoring tools, and constrained resources — that impact usage of standard C&amp;#43;&amp;#43; functionality and require additional due diligence on the part of the developer. Topics will include testing in user mode; kernel-mode exceptions; and programming the Intel performance monitoring hardware. </itunes:summary>
    <itunes:duration>3067</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:02:48 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/018</guid>
    <dc:creator>Billy Baker</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>kernel</category>
    <enclosure url="http://video.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018_high.mp4" length="1340001279" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018.mp3" expression="full" duration="3067" fileSize="49085022" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018.mp4" expression="full" duration="3067" fileSize="79100525" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018_high.mp4" expression="full" duration="3067" fileSize="1340001279" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/47d6/a8751f14-e3b5-4599-ab33-e7c5020447d6/018_mid.mp4" expression="full" duration="3067" fileSize="303651747" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-Baker.mp4" expression="full" duration="3067" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>EA’s Secret Weapon: Packages and Modules</title>
    <description><![CDATA[A lot of people hate build systems. What if using a library was just as easy as header-only libraries? EA has had a Secret Weapon called “packages” for over 14 years. EA's Packages are like Ruby’s Gems or Perl’s CPAN or Rust’s cargo. If you build a package from the package server it will download all of its dependencies. This talk will be about what we have learned about packages and versioning while building our large AAA games over the last 10&#43; years. Finally, what do we see for the future, like how will C&#43;&#43; modules fit in? In detail I will talk about: -Package layout -Package server -Versioning control and packages -Libraries teams and platform fragmentation -Packages' effect on large scale architecture -C&#43;&#43; Modules TS prototypes  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7e35db69bd8e4646a787a86000014b68">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/017</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/017</link>
    <itunes:summary>A lot of people hate build systems. What if using a library was just as easy as header-only libraries? EA has had a Secret Weapon called “packages” for over 14 years. EA&#39;s Packages are like Ruby’s Gems or Perl’s CPAN or Rust’s cargo. If you build a package from the package server it will download all of its dependencies. This talk will be about what we have learned about packages and versioning while building our large AAA games over the last 10&amp;#43; years. Finally, what do we see for the future, like how will C&amp;#43;&amp;#43; modules fit in? In detail I will talk about: -Package layout -Package server -Versioning control and packages -Libraries teams and platform fragmentation -Packages&#39; effect on large scale architecture -C&amp;#43;&amp;#43; Modules TS prototypes </itunes:summary>
    <itunes:duration>3332</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:01:54 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/017</guid>
    <dc:creator>Scott Wardle</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>modules</category>
    <category>libraries</category>
    <enclosure url="http://video.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017_high.mp4" length="1570375006" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017.mp3" expression="full" duration="3332" fileSize="53317835" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017.mp4" expression="full" duration="3332" fileSize="95150638" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017_high.mp4" expression="full" duration="3332" fileSize="1570375006" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/856c/133fc6d8-ada2-453a-b53b-2e217a49856c/017_mid.mp4" expression="full" duration="3332" fileSize="412274784" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-Wardle.mp4" expression="full" duration="3332" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Time Travel Debugging: Root Causing Bugs in Commercial Scale Software </title>
    <description><![CDATA[We’ve all heard horror stories about bugs that were near-impossible to root-cause, and many of us have at least a few stories of our own. Corrupted or uninitialized memory. Resource leaks. API misuse and race conditions. Occasional and inconsistent crashes where all you have to go on are a series of unhelpful crash dumps. These kinds of problems are often time-consuming and tedious to debug, and can be both draining and infuriating. Time Travel Debugging (TTD) is a reverse debugging toolkit for Windows that makes debugging these kinds of problems far easier, in both small programs and commercial-scale software like Windows and Office. It's been an invaluable debugging tool for software developers and escalation engineers within Microsoft for many years. We’ve spent the last couple of years improving performance, scalability, and usability, and are excited to finally be able to release a public preview of Time Travel Debugging. In this interactive and hands-on session, we'll show you how to download and make use of our first public preview of Time Travel Debugging, demonstrate how to use TTD, and walk through the root cause analysis of some typically difficult-to-solve bugs like memory corruption, API misuse, and race conditions.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:64498b00120b45c2ac7ea86000014a8b">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/016</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/016</link>
    <itunes:summary>We’ve all heard horror stories about bugs that were near-impossible to root-cause, and many of us have at least a few stories of our own. Corrupted or uninitialized memory. Resource leaks. API misuse and race conditions. Occasional and inconsistent crashes where all you have to go on are a series of unhelpful crash dumps. These kinds of problems are often time-consuming and tedious to debug, and can be both draining and infuriating. Time Travel Debugging (TTD) is a reverse debugging toolkit for Windows that makes debugging these kinds of problems far easier, in both small programs and commercial-scale software like Windows and Office. It&#39;s been an invaluable debugging tool for software developers and escalation engineers within Microsoft for many years. We’ve spent the last couple of years improving performance, scalability, and usability, and are excited to finally be able to release a public preview of Time Travel Debugging. In this interactive and hands-on session, we&#39;ll show you how to download and make use of our first public preview of Time Travel Debugging, demonstrate how to use TTD, and walk through the root cause analysis of some typically difficult-to-solve bugs like memory corruption, API misuse, and race conditions. </itunes:summary>
    <itunes:duration>3634</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:00:58 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/016</guid>
    <dc:creator>James McNellis, Jordi Mola, Ken Sykes</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>debugging</category>
    <enclosure url="http://video.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016_high.mp4" length="936465362" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016.mp3" expression="full" duration="3634" fileSize="58150159" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016.mp4" expression="full" duration="3634" fileSize="85879487" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016_high.mp4" expression="full" duration="3634" fileSize="936465362" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0909/59027a47-b0dd-442a-8ca4-007c85c80909/016_mid.mp4" expression="full" duration="3634" fileSize="252105235" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-McNellisMolaSykes.mp4" expression="full" duration="3634" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>constexpr ALL the Things!</title>
    <description><![CDATA[constexpr: in C&#43;&#43;11, a curiosity; in C&#43;&#43;14, viable for more uses; now with added power, in C&#43;&#43;17 will it become an important tool in the programmer's toolkit? In this talk we will examine the possibilities and power of constexpr and explore what can (and what should) be done at compile-time with C&#43;&#43;17. We'll present techniques for building constexpr data structures and algorithms, and look at what the standard provides and where it can improve. We'll also explore constexpr use of user defined literals for expressive compile-time abstractions. Compile-time computation offers perhaps the ultimate zero-cost abstraction, and this talk attempts to gauge the power available with C&#43;&#43;17 constexpr.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:16cafa9814ea410687b5a860000149c6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/015</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/015</link>
    <itunes:summary>constexpr: in C&amp;#43;&amp;#43;11, a curiosity; in C&amp;#43;&amp;#43;14, viable for more uses; now with added power, in C&amp;#43;&amp;#43;17 will it become an important tool in the programmer&#39;s toolkit? In this talk we will examine the possibilities and power of constexpr and explore what can (and what should) be done at compile-time with C&amp;#43;&amp;#43;17. We&#39;ll present techniques for building constexpr data structures and algorithms, and look at what the standard provides and where it can improve. We&#39;ll also explore constexpr use of user defined literals for expressive compile-time abstractions. Compile-time computation offers perhaps the ultimate zero-cost abstraction, and this talk attempts to gauge the power available with C&amp;#43;&amp;#43;17 constexpr. </itunes:summary>
    <itunes:duration>4212</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 21:00:08 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/015</guid>
    <dc:creator>Jason Turner, Ben Deane</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <category>constexpr</category>
    <enclosure url="http://video.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015_high.mp4" length="985305129" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015.mp3" expression="full" duration="4212" fileSize="67403707" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015.mp4" expression="full" duration="4212" fileSize="108798409" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015_high.mp4" expression="full" duration="4212" fileSize="985305129" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ed3/b25b268d-3889-4c0f-b371-71dc7f102ed3/015_mid.mp4" expression="full" duration="4212" fileSize="294956444" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-DeaneTurner.mp4" expression="full" duration="4212" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Coroutines: what can&#39;t they do?</title>
    <description><![CDATA[Coroutines are coming. They're coming for your asynchronous operations. They're coming for your lazy generators. This much we know. But once they're here, will they be satisfied with these offerings? They will not. They will require feeding, lest they devour our very souls. We present some fun ways to keep their incessant hunger at bay. I, for one, welcome our new coroutine overlords. The Coroutines Technical Specification is an experimental extension to the C&#43;&#43; language that allows functions to be suspended and resumed, with the primary aim of simplifying code that invokes asynchronous operations. We present a short introduction to Coroutines followed by some possibly non-obvious ways they can help to simplify your code. Have you ever wanted to elegantly compose operations that might fail? Coroutines can help. Have you ever wished for a zero-overhead type-erased function wrapper? Coroutines can help. We show you how and more.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:17ddf0029935467c8339a86000014906">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/014</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/014</link>
    <itunes:summary>Coroutines are coming. They&#39;re coming for your asynchronous operations. They&#39;re coming for your lazy generators. This much we know. But once they&#39;re here, will they be satisfied with these offerings? They will not. They will require feeding, lest they devour our very souls. We present some fun ways to keep their incessant hunger at bay. I, for one, welcome our new coroutine overlords. The Coroutines Technical Specification is an experimental extension to the C&amp;#43;&amp;#43; language that allows functions to be suspended and resumed, with the primary aim of simplifying code that invokes asynchronous operations. We present a short introduction to Coroutines followed by some possibly non-obvious ways they can help to simplify your code. Have you ever wanted to elegantly compose operations that might fail? Coroutines can help. Have you ever wished for a zero-overhead type-erased function wrapper? Coroutines can help. We show you how and more. </itunes:summary>
    <itunes:duration>2898</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:59:18 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/014</guid>
    <dc:creator>Toby Allsopp</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>coroutines</category>
    <enclosure url="http://video.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014_high.mp4" length="967677711" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014.mp3" expression="full" duration="2898" fileSize="46379317" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014.mp4" expression="full" duration="2898" fileSize="67153913" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014_high.mp4" expression="full" duration="2898" fileSize="967677711" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/795f/e20728d3-4e37-4eb2-bf7b-bb47bec9795f/014_mid.mp4" expression="full" duration="2898" fileSize="242100690" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-AllsoppLelbach.mp4" expression="full" duration="2898" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Modern C++ Interfaces: Complexity, Emergent Simplicity, SFINAE, and Second Order Properties of Types</title>
    <description><![CDATA[We examine how the increasing complexity of language features related to interfaces in modern C&#43;&#43; has somewhat surprisingly produced increasing simplicity in the interfaces themselves. One of the major reasons for this emergent simplicity is common use of “substitution failure is not an error” or SFINAE in interface design. Appropriate use of SFINAE allows the production of “do what I mean” or DWIM interfaces that allow experienced designers to embed their judgement in interfaces. Most of the presentation will consist in examination of practical examples of SFINAE in interface design and development of a simple toolkit that automates construction of compile time template predicates. Abstract syntax trees are evaluated at compile time to enforce complex constraints on types in the SFINAE context.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c699943121b649b3ba08a86000014870">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/013</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/013</link>
    <itunes:summary>We examine how the increasing complexity of language features related to interfaces in modern C&amp;#43;&amp;#43; has somewhat surprisingly produced increasing simplicity in the interfaces themselves. One of the major reasons for this emergent simplicity is common use of “substitution failure is not an error” or SFINAE in interface design. Appropriate use of SFINAE allows the production of “do what I mean” or DWIM interfaces that allow experienced designers to embed their judgement in interfaces. Most of the presentation will consist in examination of practical examples of SFINAE in interface design and development of a simple toolkit that automates construction of compile time template predicates. Abstract syntax trees are evaluated at compile time to enforce complex constraints on types in the SFINAE context. </itunes:summary>
    <itunes:duration>3388</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:57:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/013</guid>
    <dc:creator>Stephen Dewhurst</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>metaprogramming</category>
    <enclosure url="http://video.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013_high.mp4" length="1242982832" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013.mp3" expression="full" duration="3388" fileSize="54224966" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013.mp4" expression="full" duration="3388" fileSize="89963800" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013_high.mp4" expression="full" duration="3388" fileSize="1242982832" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/689c/f1fbe44a-22f0-4cfc-8d15-3355cd3a689c/013_mid.mp4" expression="full" duration="3388" fileSize="370136126" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-Dewhurst.mp4" expression="full" duration="3388" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Development with Visual Studio Code</title>
    <description><![CDATA[If you’re looking for a fast and lightweight code editor, Visual Studio Code has you covered. Come get an overview of Visual Studio Code along with the C&#43;&#43; extension that enables editing, building, and debugging your C&#43;&#43; code across Windows, Mac, and Linux.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ce47f429e7134f699468a860000147cc">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/012</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/012</link>
    <itunes:summary>If you’re looking for a fast and lightweight code editor, Visual Studio Code has you covered. Come get an overview of Visual Studio Code along with the C&amp;#43;&amp;#43; extension that enables editing, building, and debugging your C&amp;#43;&amp;#43; code across Windows, Mac, and Linux. </itunes:summary>
    <itunes:duration>3655</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:57:02 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/012</guid>
    <dc:creator>Rong Lu</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>visualstudiocode</category>
    <enclosure url="http://video.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012_high.mp4" length="1118104823" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012.mp3" expression="full" duration="3655" fileSize="58497594" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012.mp4" expression="full" duration="3655" fileSize="80208467" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012_high.mp4" expression="full" duration="3655" fileSize="1118104823" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6463/77a5b6ca-2dbe-4bbd-a885-aa9692856463/012_mid.mp4" expression="full" duration="3655" fileSize="263475705" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-Lu.mp4" expression="full" duration="3655" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Quiet Little Gem in Modern C++: ＜system_error＞</title>
    <description><![CDATA[Amongst the loud fanfare of C&#43;&#43;11 arrived this quiet little gem of ＜system_error＞, with std::error_code and std::error_condition born from the heart of boost::asio. With Committee input they evolved for inclusion into the C&#43;&#43;11 Standard, providing consistent and extensible ways for applications to expose platform-specific error-codes, platform-independent error-conditions, and rely upon an open-ended design that permits future extensibility for message reporting; and even internationalization of logs and user-facing events and conditions. More than half a decade later, we most unhappily find that the motivation and intended use model for std::error_code and std::error_condition are still not well understood; even in circles eagerly embracing features and idioms encouraged by the latest C&#43;&#43; Standard revisions. This may be somewhat expected, as all things “error” tend to permeate system-wide design-decisions and influence the processing metaphor; how algorithms compose conditional success-or-failure branching; and create consistency challenges across APIs (both internally, and for interoperation with third-party libraries). We discuss the features and design of ＜system_error＞ and its intended use; make recommendations regarding API design; and propose possible extension mechanisms for module-specific concerns, instance-specific messages (with embedded value-reporting), and internationalization.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d0ba3208c7714d9a9d64a86000014749">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/011</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/011</link>
    <itunes:summary>Amongst the loud fanfare of C&amp;#43;&amp;#43;11 arrived this quiet little gem of ＜system_error＞, with std::error_code and std::error_condition born from the heart of boost::asio. With Committee input they evolved for inclusion into the C&amp;#43;&amp;#43;11 Standard, providing consistent and extensible ways for applications to expose platform-specific error-codes, platform-independent error-conditions, and rely upon an open-ended design that permits future extensibility for message reporting; and even internationalization of logs and user-facing events and conditions. More than half a decade later, we most unhappily find that the motivation and intended use model for std::error_code and std::error_condition are still not well understood; even in circles eagerly embracing features and idioms encouraged by the latest C&amp;#43;&amp;#43; Standard revisions. This may be somewhat expected, as all things “error” tend to permeate system-wide design-decisions and influence the processing metaphor; how algorithms compose conditional success-or-failure branching; and create consistency challenges across APIs (both internally, and for interoperation with third-party libraries). We discuss the features and design of ＜system_error＞ and its intended use; make recommendations regarding API design; and propose possible extension mechanisms for module-specific concerns, instance-specific messages (with embedded value-reporting), and internationalization. </itunes:summary>
    <itunes:duration>4424</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:56:05 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/011</guid>
    <dc:creator>Charles Bay</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>standard</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r_high.mp4" length="1868605144" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r_220.jpg" height="165" width="220"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r.mp3" expression="full" duration="4424" fileSize="70787922" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r.mp4" expression="full" duration="4424" fileSize="123296061" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r_high.mp4" expression="full" duration="4424" fileSize="1868605144" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e4ed/eb31f275-1144-440c-a0bb-ad50fa75e4ed/011r_mid.mp4" expression="full" duration="4424" fileSize="454387475" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-Bay.mp4" expression="full" duration="4424" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>New standards to the rescue: the view through an IDE’s glasses</title>
    <description><![CDATA[We often talk about how new language features can help developers to write more accurate and concise code. There is another type of discussion to be had on how tools help leverage language issues and support developers. How about quite a third perspective? Which is about how language can help tools to do better. As C&#43;&#43; tools vendors, we use to share our experience with C&#43;&#43; language trickiness and peculiarities, including preprocessor and non-trivial parsing. It’s time now to talk about the view on the upcoming language changes through the IDE’s glasses. In this talk I’ll identify the most important issues with the language from the IDE’s perspective and will show how new language standards, as well as other initiatives like C&#43;&#43; Core Guidelines, are helpful and beneficial to the IDEs. I’ll cover a variety of features from if constexpr to Concepts and Modules, as well as std2 and some other initiatives that are no more than proposals at this point. Come and see the language from our perspective.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:597a20e308b147229fcca860000146d4">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/010</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/010</link>
    <itunes:summary>We often talk about how new language features can help developers to write more accurate and concise code. There is another type of discussion to be had on how tools help leverage language issues and support developers. How about quite a third perspective? Which is about how language can help tools to do better. As C&amp;#43;&amp;#43; tools vendors, we use to share our experience with C&amp;#43;&amp;#43; language trickiness and peculiarities, including preprocessor and non-trivial parsing. It’s time now to talk about the view on the upcoming language changes through the IDE’s glasses. In this talk I’ll identify the most important issues with the language from the IDE’s perspective and will show how new language standards, as well as other initiatives like C&amp;#43;&amp;#43; Core Guidelines, are helpful and beneficial to the IDEs. I’ll cover a variety of features from if constexpr to Concepts and Modules, as well as std2 and some other initiatives that are no more than proposals at this point. Come and see the language from our perspective. </itunes:summary>
    <itunes:duration>1847</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:55:16 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/010</guid>
    <dc:creator>Anastasia Kazakova</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <category>cppcoreguidelines</category>
    <enclosure url="http://video.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010_high.mp4" length="527188205" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010.mp3" expression="full" duration="1847" fileSize="29566716" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010.mp4" expression="full" duration="1847" fileSize="40983414" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010_high.mp4" expression="full" duration="1847" fileSize="527188205" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a3a6/11bace9b-9b92-4307-8097-cadb52dda3a6/010_mid.mp4" expression="full" duration="1847" fileSize="127546382" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-Kazakova.mp4" expression="full" duration="1847" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Latest &amp; Greatest in Visual Studio for C++ developers</title>
    <description><![CDATA[Visual Studio 2017 was released this year and brings all sort of new functionality for C&#43;&#43; developers on any platform, not just Windows. In this talk, we'll cover many of the new features of the latest update of Visual Studio 2017 and give you a preview of new features coming in a major update later in 2017 that we've never shared before since you came to visit our hometown! We'll cover the ongoing evolution of our compiler and libraries, giving you an update on our conformance work as well as performance, and build throughput. We'll talk about the new enhancements to our Linux targeting. We'll talk about brand new unit testing capabilities for major test frameworks. We'll talk about improved support for CMake and our Open Folder experience for getting full Visual Studio IDE support for code that doesn't have a project or solution file. We'll also walk you through some cool new productivity and debugger features.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9749366678924ee58d12a860000145e5">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/009</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/009</link>
    <itunes:summary>Visual Studio 2017 was released this year and brings all sort of new functionality for C&amp;#43;&amp;#43; developers on any platform, not just Windows. In this talk, we&#39;ll cover many of the new features of the latest update of Visual Studio 2017 and give you a preview of new features coming in a major update later in 2017 that we&#39;ve never shared before since you came to visit our hometown! We&#39;ll cover the ongoing evolution of our compiler and libraries, giving you an update on our conformance work as well as performance, and build throughput. We&#39;ll talk about the new enhancements to our Linux targeting. We&#39;ll talk about brand new unit testing capabilities for major test frameworks. We&#39;ll talk about improved support for CMake and our Open Folder experience for getting full Visual Studio IDE support for code that doesn&#39;t have a project or solution file. We&#39;ll also walk you through some cool new productivity and debugger features. </itunes:summary>
    <itunes:duration>3697</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:24:19 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/009</guid>
    <dc:creator>Daniel Moth, Steve Carroll</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>visualstudio</category>
    <enclosure url="http://video.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009_high.mp4" length="1153233885" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009.mp3" expression="full" duration="3697" fileSize="59167717" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009.mp4" expression="full" duration="3697" fileSize="117475281" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009_high.mp4" expression="full" duration="3697" fileSize="1153233885" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8104/16c3c5fe-5bfc-4021-9ee9-a8c025508104/009_mid.mp4" expression="full" duration="3697" fileSize="359045278" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1515-CarrollMoth.mp4" expression="full" duration="3697" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Which Machine Am I Coding To?</title>
    <description><![CDATA[When writing a C&#43;&#43; program, we tend to think of the strengths and weaknesses of our computer, just as we think of our algorithms, data structures, and probably of language features we want to use (or we want to avoid), and we code accordingly. To some, it might be surprising to learn that C&#43;&#43; is actually specified in terms of an abstract machine, with its own characteristics. If this is indeed a surprise for you, then you might be interested in knowing more about this machine. It's been there for a long time, and it influences the way we program as well as the way the language was, and is. The aim of this talk is to provide a practical overview of what the C&#43;&#43; abstract machine is, how it affects the way we program and how it affects language design itself. It will probably most interesting to intermediate audiences who would like a closer look to some of the abstract underpinnings of the language.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8575dcc38fdf42deaa16a8600001457d">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/008</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/008</link>
    <itunes:summary>When writing a C&amp;#43;&amp;#43; program, we tend to think of the strengths and weaknesses of our computer, just as we think of our algorithms, data structures, and probably of language features we want to use (or we want to avoid), and we code accordingly. To some, it might be surprising to learn that C&amp;#43;&amp;#43; is actually specified in terms of an abstract machine, with its own characteristics. If this is indeed a surprise for you, then you might be interested in knowing more about this machine. It&#39;s been there for a long time, and it influences the way we program as well as the way the language was, and is. The aim of this talk is to provide a practical overview of what the C&amp;#43;&amp;#43; abstract machine is, how it affects the way we program and how it affects language design itself. It will probably most interesting to intermediate audiences who would like a closer look to some of the abstract underpinnings of the language. </itunes:summary>
    <itunes:duration>2956</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:23:29 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/008</guid>
    <dc:creator>Patrice Roy</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008_high.mp4" length="1042746789" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008.mp3" expression="full" duration="2956" fileSize="47299746" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008.mp4" expression="full" duration="2956" fileSize="93817809" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008_high.mp4" expression="full" duration="2956" fileSize="1042746789" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6411/7cc66859-c4db-49c1-a92f-e0d081f26411/008_mid.mp4" expression="full" duration="2956" fileSize="314123999" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1400-Roy.mp4" expression="full" duration="2956" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Programming with C++ Constraints: Background, Utility, and Gotchas</title>
    <description><![CDATA[Compile-time constraints will likely soon become part of our routine C&#43;&#43; programming vocabulary. Why? Such constraints are induced by new core language features (requires-clauses and requires-expressions) that are on the horizon for C&#43;&#43;. What are these all about? Almost every function imposes requirements on its users; violating those requirements typically leads to incorrect programs. Historically, such requirements had to be expressed in comments or other documentation, as there was little machinery to express them in code. Soon we will be able to express more requirements in code, thus allowing compilers to detect and address more violations. This talk aims to prepare both new and veteran C&#43;&#43; programmers with the necessary background, tutorial information, and advice to exploit this powerful new supplement to function declarations. A case study, illustrating an unexpected gotcha, will conclude the presentation.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:72d5a835af8043e6a175a86000014516">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/007</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/007</link>
    <itunes:summary>Compile-time constraints will likely soon become part of our routine C&amp;#43;&amp;#43; programming vocabulary. Why? Such constraints are induced by new core language features (requires-clauses and requires-expressions) that are on the horizon for C&amp;#43;&amp;#43;. What are these all about? Almost every function imposes requirements on its users; violating those requirements typically leads to incorrect programs. Historically, such requirements had to be expressed in comments or other documentation, as there was little machinery to express them in code. Soon we will be able to express more requirements in code, thus allowing compilers to detect and address more violations. This talk aims to prepare both new and veteran C&amp;#43;&amp;#43; programmers with the necessary background, tutorial information, and advice to exploit this powerful new supplement to function declarations. A case study, illustrating an unexpected gotcha, will conclude the presentation. </itunes:summary>
    <itunes:duration>3769</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:22:44 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/007</guid>
    <dc:creator>Walter E. Brown</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>language</category>
    <enclosure url="http://video.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007_high.mp4" length="979249591" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007.mp3" expression="full" duration="3769" fileSize="60319728" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007.mp4" expression="full" duration="3769" fileSize="102349894" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007_high.mp4" expression="full" duration="3769" fileSize="979249591" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e940/11c4ff51-fac8-425d-9722-f15944ace940/007_mid.mp4" expression="full" duration="3769" fileSize="293144405" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_1100-Brown.mp4" expression="full" duration="3769" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Designing (New) C++ Hardware</title>
    <description><![CDATA[You can run C&#43;&#43; on any computer you want, as long as it pretends it is an 80’s computer. Conveniently most computers pretend to be 80’s computers – with extras, but nothing too radical – because they want to run C&#43;&#43;. This contract isn’t written down anywhere, but both sides are absolutely bound by it. In this talk we’ll walk through the adaptation of the most radical new architecture to run C&#43;&#43; in decades, NVIDIA Volta. The talk contents will be divided into four parts that align to these abstract machine semantics: execution agents, progress guarantees, the object model, and the consistency model. We will close on new C&#43;&#43; features that make it easier, not harder, for hardware to support C&#43;&#43;.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cc8ef5b00f104c68b751a860000144a6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/006</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/006</link>
    <itunes:summary>You can run C&amp;#43;&amp;#43; on any computer you want, as long as it pretends it is an 80’s computer. Conveniently most computers pretend to be 80’s computers – with extras, but nothing too radical – because they want to run C&amp;#43;&amp;#43;. This contract isn’t written down anywhere, but both sides are absolutely bound by it. In this talk we’ll walk through the adaptation of the most radical new architecture to run C&amp;#43;&amp;#43; in decades, NVIDIA Volta. The talk contents will be divided into four parts that align to these abstract machine semantics: execution agents, progress guarantees, the object model, and the consistency model. We will close on new C&amp;#43;&amp;#43; features that make it easier, not harder, for hardware to support C&amp;#43;&amp;#43;. </itunes:summary>
    <itunes:duration>3596</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:21:58 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/006</guid>
    <dc:creator>Olivier Giroux</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>architecture</category>
    <category>hardware</category>
    <enclosure url="http://video.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006_high.mp4" length="1611365671" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006.mp3" expression="full" duration="3596" fileSize="57549105" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006.mp4" expression="full" duration="3596" fileSize="126002694" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006_high.mp4" expression="full" duration="3596" fileSize="1611365671" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/91d9/eab25764-22ce-484c-a895-9a299e6a91d9/006_mid.mp4" expression="full" duration="3596" fileSize="468322228" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1645-Giroux.mp4" expression="full" duration="3596" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What Has My Compiler Done for Me Lately? Unbolting the Compiler&#39;s Lid</title>
    <description><![CDATA[In 2012, Matt and a colleague were arguing whether it was efficient to use the then-new-fangled range for. During the discussion a bash script was written to quickly compile C&#43;&#43; source and dump the assembly. Five years later and that script has grown into a website relied on by many to quickly see the code their compiler emits, to compare different compilers' code generation and behaviour, to quickly prototype and share code, and investigate the effect of optimization flags. In this talk Matt will not only show you how easy (and fun!) it is to understand the assembly code generated by your compiler, but also how important it can be. He'll explain how he uses Compiler Explorer in his day job programming low-latency trading systems, and show some real-world examples. He'll demystify assembly code and give you the tools to understand and appreciate how hard your compiler works for you. He'll also talk a little about how Compiler Explorer works behind the scenes, how it is maintained and deployed, and share some stories about how it has changed over the years. By the end of this session you'll be itching to take your favourite code snippets and start exploring what your compiler does with them.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:06db56b753ee4c828866a860000143ea">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/005</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/005</link>
    <itunes:summary>In 2012, Matt and a colleague were arguing whether it was efficient to use the then-new-fangled range for. During the discussion a bash script was written to quickly compile C&amp;#43;&amp;#43; source and dump the assembly. Five years later and that script has grown into a website relied on by many to quickly see the code their compiler emits, to compare different compilers&#39; code generation and behaviour, to quickly prototype and share code, and investigate the effect of optimization flags. In this talk Matt will not only show you how easy (and fun!) it is to understand the assembly code generated by your compiler, but also how important it can be. He&#39;ll explain how he uses Compiler Explorer in his day job programming low-latency trading systems, and show some real-world examples. He&#39;ll demystify assembly code and give you the tools to understand and appreciate how hard your compiler works for you. He&#39;ll also talk a little about how Compiler Explorer works behind the scenes, how it is maintained and deployed, and share some stories about how it has changed over the years. By the end of this session you&#39;ll be itching to take your favourite code snippets and start exploring what your compiler does with them. </itunes:summary>
    <itunes:duration>4545</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:21:12 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/005</guid>
    <dc:creator>Matt Godbolt</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>compiler</category>
    <category>assembly</category>
    <enclosure url="http://video.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005_high.mp4" length="1295098249" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005.mp3" expression="full" duration="4545" fileSize="72724479" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005.mp4" expression="full" duration="4545" fileSize="126314716" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005_high.mp4" expression="full" duration="4545" fileSize="1295098249" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0821/179621a6-a3a7-412f-9a43-29b760d10821/005_mid.mp4" expression="full" duration="4545" fileSize="384746804" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0929_1445-Godbolt.mp4" expression="full" duration="4545" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Qt as a C++ Framework: History, Present State and Future</title>
    <description><![CDATA[Qt is one of the largest and most widely used C&#43;&#43; frameworks. It is fully cross-platform, covering all functionality required to develop advanced graphical applications. The talk will go through important parts of Qt's history from it's roots to what it is today. We will have a look into the relation between Qt and C&#43;&#43;, some of the design philosophies driving the evolution of Qt. I'll go through the current state of the frameworks, latest releases, ongoing development focus, and give an outlook into the future.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ee3c8d611d2b4fd28926a8600001434f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/004</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/004</link>
    <itunes:summary>Qt is one of the largest and most widely used C&amp;#43;&amp;#43; frameworks. It is fully cross-platform, covering all functionality required to develop advanced graphical applications. The talk will go through important parts of Qt&#39;s history from it&#39;s roots to what it is today. We will have a look into the relation between Qt and C&amp;#43;&amp;#43;, some of the design philosophies driving the evolution of Qt. I&#39;ll go through the current state of the frameworks, latest releases, ongoing development focus, and give an outlook into the future. </itunes:summary>
    <itunes:duration>5404</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:20:16 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/004</guid>
    <dc:creator>Lars Knoll</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>qt</category>
    <enclosure url="http://video.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004_high.mp4" length="1955230177" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004.mp3" expression="full" duration="5404" fileSize="86478161" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004.mp4" expression="full" duration="5404" fileSize="152299890" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004_high.mp4" expression="full" duration="5404" fileSize="1955230177" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9802/bca680e5-9fda-4af7-a48c-5ef7832e9802/004_mid.mp4" expression="full" duration="5404" fileSize="552620702" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0928_1030-Knoll.mp4" expression="full" duration="5404" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Meta: Thoughts on generative C++</title>
    <description><![CDATA[Two years ago, I started to focus on exploring ways that we might evolve the C&#43;&#43; language itself to make C&#43;&#43; programming both more powerful and simpler. The only way to accomplish both of those goals at the same time is by adding abstractions that let programmers directly express their intent—to elevate comments and documentation to testable code, and elevate coding patterns and idioms into compiler-checkable declarations. The work came up with several potential candidate features where judiciously adding some power to the language could simplify code dramatically, while staying true to C&#43;&#43;'s core values of efficient abstraction, closeness to hardware, and the zero-overhead principle. The first two potential candidate features from that work to be further developed and proposed for ISO C&#43;&#43; are the ＜=＞ unified comparison operator (minor) and what I've provisionally called &quot;metaclasses&quot; as a way to generatively write C&#43;&#43; types (major). This talk is about the latter, and includes design motivation, current progress, and some live online compiler demos using the prototype Clang-based compiler built by Andrew Sutton and hosted at godbolt.org.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:72081128dc0a4a549486a860000142d6">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/003</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/003</link>
    <itunes:summary>Two years ago, I started to focus on exploring ways that we might evolve the C&amp;#43;&amp;#43; language itself to make C&amp;#43;&amp;#43; programming both more powerful and simpler. The only way to accomplish both of those goals at the same time is by adding abstractions that let programmers directly express their intent—to elevate comments and documentation to testable code, and elevate coding patterns and idioms into compiler-checkable declarations. The work came up with several potential candidate features where judiciously adding some power to the language could simplify code dramatically, while staying true to C&amp;#43;&amp;#43;&#39;s core values of efficient abstraction, closeness to hardware, and the zero-overhead principle. The first two potential candidate features from that work to be further developed and proposed for ISO C&amp;#43;&amp;#43; are the ＜=＞ unified comparison operator (minor) and what I&#39;ve provisionally called &amp;quot;metaclasses&amp;quot; as a way to generatively write C&amp;#43;&amp;#43; types (major). This talk is about the latter, and includes design motivation, current progress, and some live online compiler demos using the prototype Clang-based compiler built by Andrew Sutton and hosted at godbolt.org. </itunes:summary>
    <itunes:duration>6464</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:19:25 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/003</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>abstraction</category>
    <category>metaclasses</category>
    <category>standard</category>
    <category>language</category>
    <category>metaprogramming</category>
    <enclosure url="http://video.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003_high.mp4" length="2187270608" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003.mp3" expression="full" duration="6464" fileSize="103429085" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003.mp4" expression="full" duration="6464" fileSize="195735354" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003_high.mp4" expression="full" duration="6464" fileSize="2187270608" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3c19/ebb22c52-33f0-428e-ad11-dbde84f73c19/003_mid.mp4" expression="full" duration="6464" fileSize="654338375" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0927_1030-Sutter.mp4" expression="full" duration="6464" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ as a &quot;Live at Head&quot; Language</title>
    <description><![CDATA[Engineering is programming integrated over time. That is to say, as much as it can be difficult to get your code to build and run correctly, it is manifestly harder to keep it working in the face of changing assumptions and requirements. This is true no matter the scale, from a small program to a shared library. Only two solutions have been shown to be theoretically sound: never change or provide no compatibility guarantees. What if there were a third option? What if we took the question of maintenance out of the realm of theory and moved it to practice? This talk discusses the approach we've used at Google and how that intersects with other languages, package management, API and ABI compatibility, and a host of other software engineering practices. The particulars of C&#43;&#43; as a language and an ecosystem make it well positioned for a different approach: Live at Head.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b264554353484be9b47da8600001421f">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/002</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/002</link>
    <itunes:summary>Engineering is programming integrated over time. That is to say, as much as it can be difficult to get your code to build and run correctly, it is manifestly harder to keep it working in the face of changing assumptions and requirements. This is true no matter the scale, from a small program to a shared library. Only two solutions have been shown to be theoretically sound: never change or provide no compatibility guarantees. What if there were a third option? What if we took the question of maintenance out of the realm of theory and moved it to practice? This talk discusses the approach we&#39;ve used at Google and how that intersects with other languages, package management, API and ABI compatibility, and a host of other software engineering practices. The particulars of C&amp;#43;&amp;#43; as a language and an ecosystem make it well positioned for a different approach: Live at Head. </itunes:summary>
    <itunes:duration>5473</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:18:34 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/002</guid>
    <dc:creator>Titus Winters</dc:creator>
    <category>cppcon2017</category>
    <category>c++</category>
    <category>engineering</category>
    <enclosure url="http://video.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002_high.mp4" length="2138651523" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002.mp3" expression="full" duration="5473" fileSize="87575213" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002.mp4" expression="full" duration="5473" fileSize="156753287" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002_high.mp4" expression="full" duration="5473" fileSize="2138651523" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0354/b99662c5-08b1-4918-a916-fb1ebc4e0354/002_mid.mp4" expression="full" duration="5473" fileSize="586491037" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0926_1030-Winters.mp4" expression="full" duration="5473" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Learning and Teaching Modern C++</title>
    <description><![CDATA[We – attendees at CppCon – are all teachers. Some teach for a living; many occasionally teach a course or give a lecture; essentially all give advice about how to learn C&#43;&#43; or how to use C&#43;&#43;. The communities we address are incredibly diverse. What do we teach, and why? Who do we teach, and how? What is “modern C&#43;&#43;”? How do we avoid pushing our own mistakes onto innocent learners? Teaching C&#43;&#43; implies a view of what C&#43;&#43; is; there is no value-neutral teaching. What teaching tools and support do we need? Consider libraries, compiler support, and tools for learners. This talk asks a lot of questions and offers a few answers. Its aim is to start a discussion, so the Q&amp;A will be relatively long.  <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/GoingNative/CppCon-2017/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9ee3233abb164893bdc8a860000141c1">]]></description>
    <comments>https://s.ch9.ms/Events/GoingNative/CppCon-2017/001</comments>
    <link>https://s.ch9.ms/Events/GoingNative/CppCon-2017/001</link>
    <itunes:summary>We – attendees at CppCon – are all teachers. Some teach for a living; many occasionally teach a course or give a lecture; essentially all give advice about how to learn C&amp;#43;&amp;#43; or how to use C&amp;#43;&amp;#43;. The communities we address are incredibly diverse. What do we teach, and why? Who do we teach, and how? What is “modern C&amp;#43;&amp;#43;”? How do we avoid pushing our own mistakes onto innocent learners? Teaching C&amp;#43;&amp;#43; implies a view of what C&amp;#43;&amp;#43; is; there is no value-neutral teaching. What teaching tools and support do we need? Consider libraries, compiler support, and tools for learners. This talk asks a lot of questions and offers a few answers. Its aim is to start a discussion, so the Q&amp;amp;A will be relatively long. </itunes:summary>
    <itunes:duration>5920</itunes:duration>
    <pubDate>Mon, 08 Jan 2018 20:18:19 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/GoingNative/CppCon-2017/001</guid>
    <dc:creator>Bjarne Stroustrup</dc:creator>
    <category>cppcon2017</category>
    <category>teaching</category>
    <category>c++</category>
    <category>learning</category>
    <category>modern</category>
    <enclosure url="http://video.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001_high.mp4" length="2230346212" type="video/mp4"></enclosure>
		<media:thumbnail url="https://sec.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/CPPConf512x288.png" height="288" width="512"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001.mp3" expression="full" duration="5920" fileSize="94734528" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001.mp4" expression="full" duration="5920" fileSize="202757907" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001_high.mp4" expression="full" duration="5920" fileSize="2230346212" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/21ab/10e8428f-231a-4ef0-a9db-cba485a921ab/001_mid.mp4" expression="full" duration="5920" fileSize="696938841" type="video/mp4" medium="video"></media:content>
					<media:content url="https://sec.ch9.ms/sessions/c1f9c808-82bc-480a-a930-b340097f6cc1/17-0925_0900-Stroustrup.mp4" expression="full" duration="5920" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>    
</channel>
</rss>