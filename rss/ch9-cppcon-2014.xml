<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" media="screen" href="/styles/xslt/rss.xslt"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:c9="http://channel9.msdn.com">
<channel>
	<title>CppCon 2014 Sessions (HD)</title>
    <atom:link rel="self" type="application/rss+xml" href="https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high"></atom:link>
    <generator>Rev9</generator>
    <description>Sessions for CppCon 2014</description>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014</link>
    <language>en</language>
		<media:thumbnail url="http://files.channel9.msdn.com/thumbnail/c4fdb1ba-730b-45e4-9c8b-696c1a2624d2.png" height="165" width="220"></media:thumbnail><media:thumbnail url="http://files.channel9.msdn.com/thumbnail/b7bf590a-8a6b-4249-b16f-c693a912b5e0.png" height="250" width="960"></media:thumbnail>
  <item>
    <title>Paying for Lunch: C++ in the ManyCore Age</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Concurrency is one of the major focuses of C&#43;&#43;17 and one of the biggest challenges facing C&#43;&#43; programmers today. Hear what this panel of experts has to say about how to write concurrent C&#43;&#43; now and in the future.<br>--<br>MODERATOR: Herb Sutter - Author, chair of the ISO C&#43;&#43; committee, software architect at Microsoft.<br>SPEAKERS:<br>PABLO HALPERN - Pablo Halpern has been programming in C&#43;&#43; since 1989 and has been a member of the C&#43;&#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&#43;&#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &quot;Reducers and other Cilk&#43;&#43; Hyperobjects&quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel's customers and promoting adoption of parallel constructs into the C&#43;&#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpern<br>JARED HOBEROCK - Jared Hoberock is a research scientist at NVIDIA where he develops the Thrust parallel algorithms library and edits the Technical Specification on Extensions for Parallelism for C&#43;&#43;.Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://github.com/jaredhoberock" href="http://github.com/jaredhoberock" target="_blank" rel="nofollow">http://github.com/jaredhoberock</a><br>ARTUR LAKSBERG - Artur Laksberg leads the Visual C&#43;&#43; Libraries development team at Microsoft. His interests include concurrency, programming language and library design, and modern C&#43;&#43;. Artur is one of the co-authors of the Parallel STL proposal; his team is now working on the prototype implementation of the proposal.<br>ADE MILLER - Ade Miller writes C&#43;&#43; for fun. He wrote his first N-body model in BASIC on an 8-bit microcomputer 30 years ago and never really looked back. He started using C&#43;&#43; in the early 90s. Recently, he's written two books on parallel programming with C&#43;&#43;; &quot;C&#43;&#43; AMP: Accelerated Massive Parallelism with Microsoft Visual C&#43;&#43;&quot; and &quot;Parallel Programming with Microsoft Visual C&#43;&#43;&quot;. Ade spends the long winters in Washington contributing to the open source C&#43;&#43; AMP Algorithms Library and well as a few other projects. His summers are mostly spent crashing expensive bicycles into trees. Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.ademiller.com/blogs/tech/" href="http://www.ademiller.com/blogs/tech/" target="_blank" rel="nofollow">http://www.ademiller.com/blogs/tech/</a><span class="Apple-converted-space">&nbsp;</span>Twitter handle: @ademiller<br>GOR NISHANOV - Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&#43;&#43; team. He works on the 'await' feature. Prior to joining C&#43;&#43; team, Gor was working on distributed systems in Windows Clustering team.<br>MICHAEL WONG - You can talk to me about anything including C&#43;&#43; (even C and that language that shall remain nameless but starts with F), Transactional Memory, Parallel Programming, OpenMP, astrophysics (where my degree came from), tennis (still trying to see if I can play for a living), travel, and the best food (which I am on a permanent quest to eat). Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. And did I forget to say he is a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, its a wonder he can get anything done. Oh, and he chairs the WG21 SG5 Transactional Memory, and is the co-author of a number C&#43;&#43;11/OpenMP/TM features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBMÂ´s XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo. He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, CASCON, and many Universities, research centers and companies, except his own, where he has to listen. Now he and his wife loves to teach their two children to be curious about everything.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f7412adf819448029611a3e300143c6f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0011-Paying-for-Lunch-CPP-in-the-ManyCore-Age</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0011-Paying-for-Lunch-CPP-in-the-ManyCore-Age</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Concurrency is one of the major focuses of C&amp;#43;&amp;#43;17 and one of the biggest challenges facing C&amp;#43;&amp;#43; programmers today. Hear what this panel of experts has to say about how to write concurrent C&amp;#43;&amp;#43; now and in the future.--MODERATOR: Herb Sutter - Author, chair of the ISO C&amp;#43;&amp;#43; committee, software architect at Microsoft.SPEAKERS:PABLO HALPERN - Pablo Halpern has been programming in C&amp;#43;&amp;#43; since 1989 and has been a member of the C&amp;#43;&amp;#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&amp;#43;&amp;#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &amp;quot;Reducers and other Cilk&amp;#43;&amp;#43; Hyperobjects&amp;quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel&#39;s customers and promoting adoption of parallel constructs into the C&amp;#43;&amp;#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpernJARED HOBEROCK - Jared Hoberock is a research scientist at NVIDIA where he develops the Thrust parallel algorithms library and edits the Technical Specification on Extensions for Parallelism for C&amp;#43;&amp;#43;.Website: http://github.com/jaredhoberockARTUR LAKSBERG - Artur Laksberg leads the Visual C&amp;#43;&amp;#43; Libraries development team at Microsoft. His interests include concurrency, programming language and library design, and modern C</itunes:summary>
    <itunes:duration>4533</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0011-Paying-for-Lunch-CPP-in-the-ManyCore-Age</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_high.mp4" length="1979875219" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel.mp3" expression="full" duration="4533" fileSize="72534090" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel.mp4" expression="full" duration="4533" fileSize="335913903" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel.webm" expression="full" duration="4533" fileSize="642125155" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_high.mp4" expression="full" duration="4533" fileSize="1979875219" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4584/0c206c83-6a20-4774-b508-3b9ee3a94584/CPPSutterLunchPanel_mid.mp4" expression="full" duration="4533" fileSize="1313759848" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Back to the Basics! Essentials of Modern C++ Style</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>This talk revisits basic questions, such as how to declare and initialize a variable, how to pass a value to a function, how to write a simple loop, and how to use smart pointers, in the light of experience with C&#43;&#43;11 and the latest C&#43;&#43;14 refinements. This involves examining auto, rvalue references, range-for loops, uniform initialization, lambda expressions, unique_ptr and shared_ptr, and more.<br>--<br>Herb Sutter - Author, chair of the ISO C&#43;&#43; committee, software architect at Microsoft.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a9b9568d5ba54e94be55a3e3001374c7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0010-Back-to-the-Basics-Essentials-of-Modern-C-Style</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0010-Back-to-the-Basics-Essentials-of-Modern-C-Style</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This talk revisits basic questions, such as how to declare and initialize a variable, how to pass a value to a function, how to write a simple loop, and how to use smart pointers, in the light of experience with C&amp;#43;&amp;#43;11 and the latest C&amp;#43;&amp;#43;14 refinements. This involves examining auto, rvalue references, range-for loops, uniform initialization, lambda expressions, unique_ptr and shared_ptr, and more.--Herb Sutter - Author, chair of the ISO C&amp;#43;&amp;#43; committee, software architect at Microsoft.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>6026</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0010-Back-to-the-Basics-Essentials-of-Modern-C-Style</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_high.mp4" length="1678601957" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter.mp3" expression="full" duration="6026" fileSize="96424646" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter.mp4" expression="full" duration="6026" fileSize="274862296" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter.webm" expression="full" duration="6026" fileSize="834860448" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_high.mp4" expression="full" duration="6026" fileSize="1678601957" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb5e/39551fa0-5ae1-4eb5-a640-b11d94d6bb5e/CPPBasicsSutter_mid.mp4" expression="full" duration="6026" fileSize="1087613948" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What did C++ do for Transactional Memory?</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>SG5 is a Study Group within WG21 developing a promising new way to deal with mutable shared memory, that is expected to be more usable and scalable than current techniques based on atomics and mutexes. It promises to be as easy to use as coarse-grained locks, as scalable as fine-grained locks and yet remain composable.</span><br><br><span>Find out where on the Gartner hype cycle lives Transactional Memory.</span><br><span>Is it at the Peak of Inflated Expectations, Trough of Disillusionment, Slope of Enlightenment, or Plateau of Productivity?</span><br><br><span>For that matter, just how soon will I be able to use it with the new Intel Haswell, and IBM Power Hardware, or is it one of those mirages where the closer you get to your hardware, the further it moves away.<span class="Apple-converted-space">&nbsp;</span></span><br><br><span>And is it true that one of the lead author of this TM proposal also wrote &quot;Is it just a Research Toy?&quot;</span><br><br><span>This 60 minute advanced talk will cover the history of Transactional Memory, various lock elision and optimistic speculation techniques, the technical engine behind Transactional Memory, the recent research in its use cases, usability and performance data that supports its entry into the C&#43;&#43; Standard, and of course the latest details of the SG5 Technical Specification, including our effort at transactionalizing the C&#43;&#43; Standard Library.</span><br><span>--</span><br><span>You can talk to me about anything including C&#43;&#43; (even C and that language that shall remain nameless but starts with F), Transactional Memory, Parallel Programming, OpenMP, astrophysics (where my degree came from), tennis (still trying to see if I can play for a living), travel, and the best food (which I am on a permanent quest to eat).</span><br><br><span>Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. And did I forget to say he is a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, its a wonder he can get anything done.</span><br><br><span>Oh, and he chairs the WG21 SG5 Transactional Memory, and is the co-author of a number C&#43;&#43;11/OpenMP/TM features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBMÂ´s XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo.<span class="Apple-converted-space">&nbsp;</span></span><br><br><span>He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, CASCON, and many Universities, research centers and companies, except his own, where he has to listen.<span class="Apple-converted-space">&nbsp;</span></span><br><br><span>Now he and his wife loves to teach their two children to be curious about everything.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9f64f43f0c194c1aab48a3e3001280e2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0009-What-did-C-do-for-Transactional-Memory</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0009-What-did-C-do-for-Transactional-Memory</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--SG5 is a Study Group within WG21 developing a promising new way to deal with mutable shared memory, that is expected to be more usable and scalable than current techniques based on atomics and mutexes. It promises to be as easy to use as coarse-grained locks, as scalable as fine-grained locks and yet remain composable.Find out where on the Gartner hype cycle lives Transactional Memory.Is it at the Peak of Inflated Expectations, Trough of Disillusionment, Slope of Enlightenment, or Plateau of Productivity?For that matter, just how soon will I be able to use it with the new Intel Haswell, and IBM Power Hardware, or is it one of those mirages where the closer you get to your hardware, the further it moves away. And is it true that one of the lead author of this TM proposal also wrote &amp;quot;Is it just a Research Toy?&amp;quot;This 60 minute advanced talk will cover the history of Transactional Memory, various lock elision and optimistic speculation techniques, the technical engine behind Transactional Memory, the recent research in its use cases, usability and performance data that supports its entry into the C&amp;#43;&amp;#43; Standard, and of course the latest details of the SG5 Technical Specification, including our effort at transactionalizing the C&amp;#43;&amp;#43; Standard Library.--You can talk to me about anything including C&amp;#43;&amp;#43; (even C and that language that shall remain nameless but starts with F), Transactional Memory, Parallel Programming, OpenMP, astrophysics (where my degree came from), tennis (still trying to see if I can play for a living), travel, and the best food (which I am on a permanent quest to eat).Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&amp;#43;&amp;#43; Standard and OpenMP Committee. And did I forget to say he is a Director of ISOCPP.org and a VP, Vice-Chair of Programming L</itunes:summary>
    <itunes:duration>3613</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0009-What-did-C-do-for-Transactional-Memory</guid>
    <dc:creator>Michael Wong</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_high.mp4" length="478402807" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong.mp3" expression="full" duration="3613" fileSize="57809606" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong.mp4" expression="full" duration="3613" fileSize="101385057" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong.webm" expression="full" duration="3613" fileSize="315449043" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_high.mp4" expression="full" duration="3613" fileSize="478402807" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60a1/6d76dd3b-c089-402b-8dd5-534a50c560a1/CPPWong_mid.mp4" expression="full" duration="3613" fileSize="317221300" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boost: a Bridge from C++98 to C++11; An introduction to using Boost</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Rachel Cheng &amp; Michael VanLoon &quot;Boost: a Bridge from C&#43;&#43;98 to C&#43;&#43;11; An introduction to using Boost&quot;<br>--<br>This is a two-part tutorial.<br><br>Part one is for those who are stuck with a C&#43;&#43;98/03 compiler, but are interested in using more advanced C&#43;&#43;11-like strategies. We will discuss some of the differences between C&#43;&#43;98 and C&#43;&#43;11 while demonstrating how strategic use of Boost libraries can bridge the gap, allowing more modern programming paradigms in many cases.<br><br>Part two is a deeper dive into some interesting Boost libraries for those who may be new to Boost usage. We will explore how C&#43;&#43;98 and C&#43;&#43;11 can be enhanced and extended by the additional richness of Boost libraries.<br><br>We will use as example some of the boost libraries used in the F5 Networks code base. If there is time leftover, we will discuss our experience upgrading GCC. This will be co-presented by Michael VanLoon and Rachel Cheng.<br>--<br>Rachel Cheng is a recent graduate from The Evergreen State College and employed at F5 Networks, working in control-plane, monitoring, and RBAC. Outside of development, she mostly spends her time with friends, working on her car, doing random side projects, traveling, eating, and napping.<br>--<br>I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&#43;&#43; for roughly 20 years, not very well at first, and slightly better now.<br><br>I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.<br><br>I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2da17c955397426db481a3e30011d932">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0008-Boost-a-Bridge-from-C98-to-C11-An-introduction-to-using-Boost</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0008-Boost-a-Bridge-from-C98-to-C11-An-introduction-to-using-Boost</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Rachel Cheng &amp;amp; Michael VanLoon &amp;quot;Boost: a Bridge from C&amp;#43;&amp;#43;98 to C&amp;#43;&amp;#43;11; An introduction to using Boost&amp;quot;--This is a two-part tutorial.Part one is for those who are stuck with a C&amp;#43;&amp;#43;98/03 compiler, but are interested in using more advanced C&amp;#43;&amp;#43;11-like strategies. We will discuss some of the differences between C&amp;#43;&amp;#43;98 and C&amp;#43;&amp;#43;11 while demonstrating how strategic use of Boost libraries can bridge the gap, allowing more modern programming paradigms in many cases.Part two is a deeper dive into some interesting Boost libraries for those who may be new to Boost usage. We will explore how C&amp;#43;&amp;#43;98 and C&amp;#43;&amp;#43;11 can be enhanced and extended by the additional richness of Boost libraries.We will use as example some of the boost libraries used in the F5 Networks code base. If there is time leftover, we will discuss our experience upgrading GCC. This will be co-presented by Michael VanLoon and Rachel Cheng.--Rachel Cheng is a recent graduate from The Evergreen State College and employed at F5 Networks, working in control-plane, monitoring, and RBAC. Outside of development, she mostly spends her time with friends, working on her car, doing random side projects, traveling, eating, and napping.--I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&amp;#43;&amp;#43; for roughly 20 years, not very well at first, and slightly better now.I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable pr</itunes:summary>
    <itunes:duration>3004</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0008-Boost-a-Bridge-from-C98-to-C11-An-introduction-to-using-Boost</guid>
    <dc:creator>Michael VanLoon, Rachel Cheng</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_high.mp4" length="1001946234" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng.mp3" expression="full" duration="3004" fileSize="48072518" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng.mp4" expression="full" duration="3004" fileSize="92188115" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng.webm" expression="full" duration="3004" fileSize="308678659" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_high.mp4" expression="full" duration="3004" fileSize="1001946234" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae1d/c3dcb4b7-f89d-4422-ad77-128e336dae1d/CPPVanLoonCheng_mid.mp4" expression="full" duration="3004" fileSize="584180708" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Accept No Visitors</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Visitor Design Pattern was an attempt to overcome a limitation of object-oriented languages - inability to retroactively introduce new polymorphic functions. While it was quite efficient in providing extensibility of functions, it was never truly retroactive, easy to teach, use or maintain, and it achieved this at the cost of hindering extensibility of classes, introduction of control inversion and requiring tons of boilerplate code to be written. Visitor Design Pattern is a workaround, not a solution to the problem and in this talk I would like to discuss a more elegant yet as efficient solution in the form of a Match statement. We will look at several use-cases for the Visitor Design Pattern, their encoding using both approaches and ultimately their advantages and disadvantages.</span><br><span>--</span><br><span>Yuriy Solodkyy received his PhD from Texas A&amp;M University, while working under the supervision of Dr. Bjarne Stroustrup on the ways to simplify the analysis of C&#43;&#43; programs. He is currently trying to materialize some of those ideas while working in the Visual C&#43;&#43; team at Microsoft. His research interests include C&#43;&#43;, generic programming, and abstract interpretation. More information about Yuriy can be found at his university page.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e6aa0716eee649cca35ba3e30010f374">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0007-Accept-No-Visitors</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0007-Accept-No-Visitors</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Visitor Design Pattern was an attempt to overcome a limitation of object-oriented languages - inability to retroactively introduce new polymorphic functions. While it was quite efficient in providing extensibility of functions, it was never truly retroactive, easy to teach, use or maintain, and it achieved this at the cost of hindering extensibility of classes, introduction of control inversion and requiring tons of boilerplate code to be written. Visitor Design Pattern is a workaround, not a solution to the problem and in this talk I would like to discuss a more elegant yet as efficient solution in the form of a Match statement. We will look at several use-cases for the Visitor Design Pattern, their encoding using both approaches and ultimately their advantages and disadvantages.--Yuriy Solodkyy received his PhD from Texas A&amp;amp;M University, while working under the supervision of Dr. Bjarne Stroustrup on the ways to simplify the analysis of C&amp;#43;&amp;#43; programs. He is currently trying to materialize some of those ideas while working in the Visual C&amp;#43;&amp;#43; team at Microsoft. His research interests include C&amp;#43;&amp;#43;, generic programming, and abstract interpretation. More information about Yuriy can be found at his university page.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3947</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0007-Accept-No-Visitors</guid>
    <dc:creator>Yuriy Solodkyy</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_high.mp4" length="474813888" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy.mp3" expression="full" duration="3947" fileSize="63161798" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy.mp4" expression="full" duration="3947" fileSize="95809186" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy.webm" expression="full" duration="3947" fileSize="280254325" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_high.mp4" expression="full" duration="3947" fileSize="474813888" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/657f/a21585b7-1a8e-497a-843a-3a25ddf9657f/CPPYuriySolodkyy_mid.mp4" expression="full" duration="3947" fileSize="307513500" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>await 2.0: Stackless Resumable Functions</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>C&#43;&#43;17 may bring most efficient, most scalable, most open/customizable coroutines of any programming language in existence. Stackless Resumable Functions are the proposed for standardization lightweight coroutines that scale to 100,000,000 of concurrent coroutines, allow to consume existing any asynchronous OS APIs / libraries with zero-overhead adapters and allow library designers go wild, invent new coroutine types and plug them into Resumable Stackless Functions machinery.</span><br><br><span>We will look at examples of tasks, goroutines, generators running on top of resumable functions. We will explore implementation details of how they actually work and look at the customization machinery that allows library designers and ordinary users to extend coroutines as needed.</span><br><span>--</span><br><span>Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&#43;&#43; team. He works on the 'await' feature. Prior to joining C&#43;&#43; team, Gor was working on distributed systems in Windows Clustering team.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f4663165556b4ba1b2a4a3e300103890">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0006-await-20-Stackless-Resumable-Functions</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0006-await-20-Stackless-Resumable-Functions</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43;17 may bring most efficient, most scalable, most open/customizable coroutines of any programming language in existence. Stackless Resumable Functions are the proposed for standardization lightweight coroutines that scale to 100,000,000 of concurrent coroutines, allow to consume existing any asynchronous OS APIs / libraries with zero-overhead adapters and allow library designers go wild, invent new coroutine types and plug them into Resumable Stackless Functions machinery.We will look at examples of tasks, goroutines, generators running on top of resumable functions. We will explore implementation details of how they actually work and look at the customization machinery that allows library designers and ordinary users to extend coroutines as needed.--Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&amp;#43;&amp;#43; team. He works on the &#39;await&#39; feature. Prior to joining C&amp;#43;&amp;#43; team, Gor was working on distributed systems in Windows Clustering team.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3220</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0006-await-20-Stackless-Resumable-Functions</guid>
    <dc:creator>Gor Nishanov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_high.mp4" length="838839881" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov.mp3" expression="full" duration="3220" fileSize="51536582" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov.mp4" expression="full" duration="3220" fileSize="99062610" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov.webm" expression="full" duration="3220" fileSize="293255384" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_high.mp4" expression="full" duration="3220" fileSize="838839881" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0b30/0bfba68b-7b56-4c97-bca0-ac2486e10b30/CPPGorNishanov_mid.mp4" expression="full" duration="3220" fileSize="518222099" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Hardening Your Code</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Ok, you've written some code, and it seems to work. How can you be sure that it works? It's a busy, complicated, dangerous world out there, and software has to work in lots of different environments.<br><br>How can you gain confidence about your code? How can you make your code more reliable?<br><br>There are a lot of techniques available to developers today; I'll talk about several of them: Unit tests, static analysis, runtime analysis, fuzzing, decoding compiler warnings and probably others.<br>--<br>Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0ee4631f0da94c6096eda3e3000fb9ea">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0005-Hardening-Your-Code</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0005-Hardening-Your-Code</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Ok, you&#39;ve written some code, and it seems to work. How can you be sure that it works? It&#39;s a busy, complicated, dangerous world out there, and software has to work in lots of different environments.How can you gain confidence about your code? How can you make your code more reliable?There are a lot of techniques available to developers today; I&#39;ll talk about several of them: Unit tests, static analysis, runtime analysis, fuzzing, decoding compiler warnings and probably others.--Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3518</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0005-Hardening-Your-Code</guid>
    <dc:creator>Marshall Clow</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_high.mp4" length="681497350" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow.mp3" expression="full" duration="3518" fileSize="56296262" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow.mp4" expression="full" duration="3518" fileSize="120319893" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow.webm" expression="full" duration="3518" fileSize="384996326" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_high.mp4" expression="full" duration="3518" fileSize="681497350" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3084/1db766dc-1c88-4080-a241-9725713b3084/CPPMarshallClow_mid.mp4" expression="full" duration="3518" fileSize="424233504" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Pimp my Log()</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Marc Eaddy - Software Architect, Intel</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2669626d88ce412a97cba3e3000f2867">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0004-Lightning-Talks-Pimp-my-Log</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0004-Lightning-Talks-Pimp-my-Log</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Marc Eaddy - Software Architect, Intel--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>694</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0004-Lightning-Talks-Pimp-my-Log</guid>
    <dc:creator>Marc Eaddy</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_high.mp4" length="103499484" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy.mp3" expression="full" duration="694" fileSize="11120582" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy.mp4" expression="full" duration="694" fileSize="18619989" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy.webm" expression="full" duration="694" fileSize="52681563" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_high.mp4" expression="full" duration="694" fileSize="103499484" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6853/d928e1dd-1929-4638-890c-e03279716853/CPPMarcEaddy_mid.mp4" expression="full" duration="694" fileSize="64772340" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Boostache</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Michael Caisse has been crafting code in C&#43;&#43; for nearly 25-years. He is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects. :: ciere.com</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cdae5018e83d4a66aa00a3e3000ea610">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0003-Lightning-Talks-Boostache</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0003-Lightning-Talks-Boostache</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for nearly 25-years. He is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects. :: ciere.com--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>356</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0003-Lightning-Talks-Boostache</guid>
    <dc:creator>Michael Caisse</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_high.mp4" length="47041816" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse.mp3" expression="full" duration="356" fileSize="5700422" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse.mp4" expression="full" duration="356" fileSize="9360796" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse.webm" expression="full" duration="356" fileSize="26236103" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_high.mp4" expression="full" duration="356" fileSize="47041816" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ebc/4ae56db2-d9f2-4199-8ad1-3434345d6ebc/CPPMichaelCaisse_mid.mp4" expression="full" duration="356" fileSize="29735687" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Cross Platform GUID Association with Types</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6e3449ee8fcb48d48ba4a3e3000e0e53">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0002-Lightning-Talks-Cross-Platform-GUID-Association-with-Types</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0002-Lightning-Talks-Cross-Platform-GUID-Association-with-Types</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014 </itunes:summary>
    <itunes:duration>741</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0002-Lightning-Talks-Cross-Platform-GUID-Association-with-Types</guid>
    <dc:creator>Vladimir Morozov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_high.mp4" length="99617924" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov.mp3" expression="full" duration="741" fileSize="11867462" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov.mp4" expression="full" duration="741" fileSize="20956178" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov.webm" expression="full" duration="741" fileSize="64829649" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_high.mp4" expression="full" duration="741" fileSize="99617924" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3917/708a0ad6-51b5-49b8-808a-063bf7ed3917/CPPVladimirMorozov_mid.mp4" expression="full" duration="741" fileSize="66083308" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Test-Drive Performance</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>After bouncing around from startup to startup, I have landed at F5 Networks in the LineRate group. I focus on the C&#43;&#43; data path performance which is very Boost heavy, functional programming heavy, and asynchronous.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fa22e456ffe942c68907a3e3000d2597">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0001-Lightning-Talks-Test-Drive-Performance</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0001-Lightning-Talks-Test-Drive-Performance</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--After bouncing around from startup to startup, I have landed at F5 Networks in the LineRate group. I focus on the C&amp;#43;&amp;#43; data path performance which is very Boost heavy, functional programming heavy, and asynchronous.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>389</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/0001-Lightning-Talks-Test-Drive-Performance</guid>
    <dc:creator>Lenny Maiorani</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_high.mp4" length="78567252" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani.mp3" expression="full" duration="389" fileSize="6228038" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani.mp4" expression="full" duration="389" fileSize="11498441" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani.webm" expression="full" duration="389" fileSize="36734482" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_high.mp4" expression="full" duration="389" fileSize="78567252" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99d7/a487bf1a-09d0-4bd0-ae68-f864f5c499d7/CPPLennyMaiorani_mid.mp4" expression="full" duration="389" fileSize="45771914" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Sanitize your C++ code</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>&quot;Sanitizers&quot; is a family of dynamic testing tools built into C&#43;&#43; compilers (Clang and GCC):</span><br><span>AddressSanitizer finds memory errors, such as use-after-free, buffer overflows, and leaks;</span><br><span>ThreadSanitizer finds data races, deadlocks, and other threading bugs;</span><br><span>MemorySanitizer finds uses of uninitialized memory;</span><br><span>UndefinedBehaviorSanitizer finds other kinds of undefined behavior, such as use of incorrect dynamic type, shift by illegal amount and many others.</span><br><span>You will learn how these tools work, how to use them on small programs and how we deploy them in large projects.</span><br><span>--</span><br><span>Konstantin (Kostya) Serebryany is a Software Engineer at Google. His team develops and deploys dynamic testing tools, such as AddressSanitizer and ThreadSanitizer. Prior to joining Google in 2007, Konstantin spent 4 years at Elbrus/MCST working for Sun compiler lab and then 3 years at Intel Compiler Lab. Konstantin holds a PhD from mesi.ru and a Master from msu.ru.Twitter handle: @kayseesee</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cb7fb8feef0145c6a4f4a3e30004e975">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Sanitize-your-CPP-code</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Sanitize-your-CPP-code</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--&amp;quot;Sanitizers&amp;quot; is a family of dynamic testing tools built into C&amp;#43;&amp;#43; compilers (Clang and GCC):AddressSanitizer finds memory errors, such as use-after-free, buffer overflows, and leaks;ThreadSanitizer finds data races, deadlocks, and other threading bugs;MemorySanitizer finds uses of uninitialized memory;UndefinedBehaviorSanitizer finds other kinds of undefined behavior, such as use of incorrect dynamic type, shift by illegal amount and many others.You will learn how these tools work, how to use them on small programs and how we deploy them in large projects.--Konstantin (Kostya) Serebryany is a Software Engineer at Google. His team develops and deploys dynamic testing tools, such as AddressSanitizer and ThreadSanitizer. Prior to joining Google in 2007, Konstantin spent 4 years at Elbrus/MCST working for Sun compiler lab and then 3 years at Intel Compiler Lab. Konstantin holds a PhD from mesi.ru and a Master from msu.ru.Twitter handle: @kayseesee--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3710</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Sanitize-your-CPP-code</guid>
    <dc:creator>Kostya Serebryany</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_high.mp4" length="638987645" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya.mp3" expression="full" duration="3710" fileSize="59369798" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya.mp4" expression="full" duration="3710" fileSize="113317724" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya.webm" expression="full" duration="3710" fileSize="356669764" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_high.mp4" expression="full" duration="3710" fileSize="638987645" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/494e/06f800e5-398b-4c9a-98e2-44b84e97494e/CPPKostyaSerebrya_mid.mp4" expression="full" duration="3710" fileSize="387779178" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How Ubisoft Develops Games for Multicore - Before and After C++11</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>&quot;How Ubisoft Montreal Develops Games for Multicore - Before and After C&#43;&#43;11&quot;</span><br><span>--</span><br><span>Multicore hit the video game industry in a big way. Every platform we develop for now comes in a multicore configuration, and we're always under pressure to exploit the hardware to its fullest. This talk will share our experience learning to develop C&#43;&#43; software for multicore processors over the last decade. It will also explore the new concurrency support in C&#43;&#43;11, and examine the way C&#43;&#43;11 has influenced the way we develop multicore software so far.</span><br><span>--</span><br><span>Jeff Preshing is a Technical Architect at Ubisoft Montreal, where he's worked on games such as Rainbow Six Vegas, Child of Light and Assassin's Creed Unity. He also maintains a blog where he writes frequently about lock-free programming and the C&#43;&#43;11 atomic library.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e50dd23fa6b14b659f5da3e3000431d4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-Ubisoft-Develops-Games-for-Multicore-Before-and-After-CPP11</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-Ubisoft-Develops-Games-for-Multicore-Before-and-After-CPP11</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--&amp;quot;How Ubisoft Montreal Develops Games for Multicore - Before and After C&amp;#43;&amp;#43;11&amp;quot;--Multicore hit the video game industry in a big way. Every platform we develop for now comes in a multicore configuration, and we&#39;re always under pressure to exploit the hardware to its fullest. This talk will share our experience learning to develop C&amp;#43;&amp;#43; software for multicore processors over the last decade. It will also explore the new concurrency support in C&amp;#43;&amp;#43;11, and examine the way C&amp;#43;&amp;#43;11 has influenced the way we develop multicore software so far.--Jeff Preshing is a Technical Architect at Ubisoft Montreal, where he&#39;s worked on games such as Rainbow Six Vegas, Child of Light and Assassin&#39;s Creed Unity. He also maintains a blog where he writes frequently about lock-free programming and the C&amp;#43;&amp;#43;11 atomic library.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3872</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-Ubisoft-Develops-Games-for-Multicore-Before-and-After-CPP11</guid>
    <dc:creator>Jeff Preshing</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_high.mp4" length="1333123635" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing.mp3" expression="full" duration="3872" fileSize="61965638" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing.mp4" expression="full" duration="3872" fileSize="109789307" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing.webm" expression="full" duration="3872" fileSize="445729645" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_high.mp4" expression="full" duration="3872" fileSize="1333123635" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/df41/1a93f8cd-f00e-4a21-8ed4-64118ca1df41/CPPJeffPreshing_mid.mp4" expression="full" duration="3872" fileSize="760689916" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Types Don&#39;t Know #</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>This presentation will be based on the following paper which will be a proposal to the C&#43;&#43; standards committee:</span><br><br><a class="yt-uix-redirect-link" dir="ltr" title="http://htmlpreview.github.io/?https://github.com/HowardHinnant/papers/blob/master/hashing.html" href="http://htmlpreview.github.io/?https://github.com/HowardHinnant/papers/blob/master/hashing.html" target="_blank" rel="nofollow">http://htmlpreview.github.io/?https:/...</a><br><br><span>This paper proposes a new hashing infrastructure that completely decouples hashing algorithms from individual types that need to be hashed. This decoupling divides the hashing computation among 3 different programmers who need not coordinate with each other:</span><br><br><span>1. Authors of hashable types (keys of type K) write their hashing support just once, using no specific hashing algorithm. This code resembles (and is approximately the same amount of work as) operator== and swap for a type.</span><br><br><span>2. Authors of hashing algorithms write a functor (e.g. H) that operates on a contiguous chunk of generic memory, represented by a void const* and a number of bytes. This code has no concept of a specific key type, only of bytes to be hashed.</span><br><br><span>3. Clients who want to hash keys of type K using hashing algorithm H will form a functor of type std::uhash to give to an unordered container.</span><br><br><span>unordered_set my_set;</span><br><br><span>Source code will be available at this link:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/HowardHinnant/hash_append" href="https://github.com/HowardHinnant/hash_append" target="_blank" rel="nofollow">https://github.com/HowardHinnant/hash...</a><br><span>--</span><br><span>Howard Hinnant: Lead author of several C&#43;&#43;11 features including: move semantics, unique_ptr, , and . Coming in C&#43;&#43;14: .Homepage is<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://home.roadrunner.com/~hinnant/" href="http://home.roadrunner.com/~hinnant/" target="_blank" rel="nofollow">http://home.roadrunner.com/~hinnant/</a><span><span class="Apple-converted-space">&nbsp;</span>(never seem to have time to make it look pretty).Lead author on two open source projects: A std::lib implementation:</span><a class="yt-uix-redirect-link" dir="ltr" title="http://libcxx.llvm.org" href="http://libcxx.llvm.org/" target="_blank" rel="nofollow">http://libcxx.llvm.org</a><span><span class="Apple-converted-space">&nbsp;</span>An Itanium ABI implementation:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://libcxxabi.llvm.orgWebsite:" href="http://libcxxabi.llvm.orgwebsite/" target="_blank" rel="nofollow">http://libcxxabi.llvm.orgWebsite:</a><a class="yt-uix-redirect-link" dir="ltr" title="http://home.roadrunner.com/~hinnant/" href="http://home.roadrunner.com/~hinnant/" target="_blank" rel="nofollow">http://home.roadrunner.com/~hinnant/</a><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4b0a6f00c38c4994b1baa3e30003a0cf">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Types-Dont-Know-PoundSign</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Types-Dont-Know-PoundSign</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This presentation will be based on the following paper which will be a proposal to the C&amp;#43;&amp;#43; standards committee:http://htmlpreview.github.io/?https:/...This paper proposes a new hashing infrastructure that completely decouples hashing algorithms from individual types that need to be hashed. This decoupling divides the hashing computation among 3 different programmers who need not coordinate with each other:1. Authors of hashable types (keys of type K) write their hashing support just once, using no specific hashing algorithm. This code resembles (and is approximately the same amount of work as) operator== and swap for a type.2. Authors of hashing algorithms write a functor (e.g. H) that operates on a contiguous chunk of generic memory, represented by a void const* and a number of bytes. This code has no concept of a specific key type, only of bytes to be hashed.3. Clients who want to hash keys of type K using hashing algorithm H will form a functor of type std::uhash to give to an unordered container.unordered_set my_set;Source code will be available at this link: https://github.com/HowardHinnant/hash...--Howard Hinnant: Lead author of several C&amp;#43;&amp;#43;11 features including: move semantics, unique_ptr, , and . Coming in C&amp;#43;&amp;#43;14: .Homepage is http://home.roadrunner.com/~hinnant/ (never seem to have time to make it look pretty).Lead author on two open source projects: A std::lib implementation:http://libcxx.llvm.org An Itanium ABI implementation: http://libcxxabi.llvm.orgWebsite:http://home.roadrunner.com/~hinnant/--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3688</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Types-Dont-Know-PoundSign</guid>
    <dc:creator>Howard Hinnant</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_high.mp4" length="1005216316" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant.mp3" expression="full" duration="3688" fileSize="59013830" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant.mp4" expression="full" duration="3688" fileSize="129413984" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant.webm" expression="full" duration="3688" fileSize="355316088" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_high.mp4" expression="full" duration="3688" fileSize="1005216316" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6d2/8cb2f97f-5cc6-43ba-ac1e-f1513841d6d2/CPPHowardHinnant_mid.mp4" expression="full" duration="3688" fileSize="610891526" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Gamgee: A C++14 library for genomics data processing and analysis</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Our group has defined the standards for DNA and RNA sequencing data processing and analysis for disease research and clinical applications. In the last 5 years we have published our tools in the GATK (genome analysis toolkit) which is completely written in java. With the scaling of next generation sequencing and the immense amount of that needs to be processed we hit a performance wall and found ourselves limited by the language to make optimizations and rewrite the algorithms in a way that would conform better to modern hardware.</span><br><br><span>Enter Gamgee. A free and open source C&#43;&#43;14 library that offers much of the functionality of the GATK framework with the performance necessary to scale to the hundreds of petabytes of todays complex diseases projects. We will show how the tools developed using the Gamgee library replaced legacy java GATK tools in the production pipeline of the Broad Institute. We will also talk about how the algorithms have changed to take advantage of the native libraries and modern hardware features such as SSE/AVX and GPUs.</span><br><span>--</span><br><span>Dr. Carneiro leads the computational technology development team at the Broad Institute of MIT and Harvard. He has contributed to major advances in DNA sequencing analysis with compression algorithms, statistical methods, heterogeneous compute optimizations and a systematic approach to the institute's computational development, distribution and support. His team is also responsible for the evaluation of new sequencing technologies and has provided several methods and tools to handle new data types in the world of next generation sequencing through the Genome Analysis Toolkit (GATK).Dr. Carneiro joined the Broad Institute in December 2010 after completing a Ph.D. in computational biology from Harvard University. He holds two championships in the International Collegiate Programming Contest organized by the Association for Computing Machinery (ACM) in 2002 and 2003, respectively, and a Programming Excellence Award from the ACM Upsilon Pi Epsilon Society in 2003.In his previous life, he was a video game developer and has led the development of the world's first massive online location based multiplayer game: Alien Revolt.Website:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.broadinstitute.org/~carneiro/Twitter" href="http://www.broadinstitute.org/~carneiro/Twitter" target="_blank" rel="nofollow">http://www.broadinstitute.org/~carnei...</a><span><span class="Apple-converted-space">&nbsp;</span>handle: @mauricinho</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:49bf9e9e52ea40d79a8ea3e30002ec99">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Gamgee-A-CPP14-library-for-genomics-data-processing-and-analysis</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Gamgee-A-CPP14-library-for-genomics-data-processing-and-analysis</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Our group has defined the standards for DNA and RNA sequencing data processing and analysis for disease research and clinical applications. In the last 5 years we have published our tools in the GATK (genome analysis toolkit) which is completely written in java. With the scaling of next generation sequencing and the immense amount of that needs to be processed we hit a performance wall and found ourselves limited by the language to make optimizations and rewrite the algorithms in a way that would conform better to modern hardware.Enter Gamgee. A free and open source C&amp;#43;&amp;#43;14 library that offers much of the functionality of the GATK framework with the performance necessary to scale to the hundreds of petabytes of todays complex diseases projects. We will show how the tools developed using the Gamgee library replaced legacy java GATK tools in the production pipeline of the Broad Institute. We will also talk about how the algorithms have changed to take advantage of the native libraries and modern hardware features such as SSE/AVX and GPUs.--Dr. Carneiro leads the computational technology development team at the Broad Institute of MIT and Harvard. He has contributed to major advances in DNA sequencing analysis with compression algorithms, statistical methods, heterogeneous compute optimizations and a systematic approach to the institute&#39;s computational development, distribution and support. His team is also responsible for the evaluation of new sequencing technologies and has provided several methods and tools to handle new data types in the world of next generation sequencing through the Genome Analysis Toolkit (GATK).Dr. Carneiro joined the Broad Institute in December 2010 after completing a Ph.D. in computational biology from Harvard University. He holds two championships in the International Collegiate Programming Co</itunes:summary>
    <itunes:duration>4081</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Gamgee-A-CPP14-library-for-genomics-data-processing-and-analysis</guid>
    <dc:creator>Mauricio Carneiro</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_high.mp4" length="993896055" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro.mp3" expression="full" duration="4081" fileSize="65310662" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro.mp4" expression="full" duration="4081" fileSize="149854699" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro.webm" expression="full" duration="4081" fileSize="538484600" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_high.mp4" expression="full" duration="4081" fileSize="993896055" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1148/248e2c68-eea8-46c9-b573-b19207761148/CPPCarneiro_mid.mp4" expression="full" duration="4081" fileSize="619781835" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical Cross-Platform Mobile C++ Development at Dropbox</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>&quot;Practical Cross-Platform Mobile C&#43;&#43; Development at Dropbox&quot;</span><br><span>--</span><br><span>The conventional wisdom of multi-platform mobile development comes down to two choices: write all your complex logic at least twice or settle for a slow, non-native experience for your users. Come learn how Dropbox has embraced a third option, where fast, cross-platform code in C&#43;&#43; is married to a smooth, native UI for the best of both worlds.</span><br><br><span>In Dropbox's new generation of iOS and Android apps, we leverage the strengths of the platform frameworks while only writing and maintaining one version of complex logic like data syncing. We'll explain the benefits and pitfalls of interfacing C&#43;&#43; to platform-specific code via Objective-C&#43;&#43; and JNI and how code generation has freed us from much of the effort involved. We'll share the benefits we've gained from C&#43;&#43;11/14, as well as the drawbacks, and how we've overcome each platform's quirks. Finally, we'll share tools that let you try this out yourselves, available at&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="https://www.github.com/dropbox/djinni" href="https://www.github.com/dropbox/djinni" target="_blank" rel="nofollow">https://www.github.com/dropbox/djinni</a><span>.</span><br><span>--</span><br><span>Alex Allain has been writing about C&#43;&#43; since 1998, when he started Cprogramming.com. In 2012, he published Jumping into C&#43;&#43; to teach new programmers how to think like a professional C&#43;&#43; programmer. At Dropbox, Alex leads the Platforms and Libraries team, helping make the dream of cross-platform C&#43;&#43;11 a reality. Prior to Dropbox, Alex led a team at Liquid Machines focused on injecting code into applications to perform binary hooking.</span><br><span>--</span><br><span>Andrew Twyman has been developing products and libraries in C&#43;&#43; for almost 10 years. He loves building robust systems and solving tricky low-level problems. Starting in 2012, Andrew helped spearhead Dropbox's new approach to cross-platform mobile development. Now on the Platforms and Libraries team, Andrew is helping bring cross-platform goodness to Dropbox's new generation of mobile and desktop apps. Prior to Dropbox, Andrew was an architect at Liquid Machines, where shared libraries supported parallel development of more products than there were developers.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:de4b15b44d9e4a65b13ea3e3000250ef">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Cross-Platform-Mobile-CPP-Development-at-Dropbox</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Cross-Platform-Mobile-CPP-Development-at-Dropbox</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--&amp;quot;Practical Cross-Platform Mobile C&amp;#43;&amp;#43; Development at Dropbox&amp;quot;--The conventional wisdom of multi-platform mobile development comes down to two choices: write all your complex logic at least twice or settle for a slow, non-native experience for your users. Come learn how Dropbox has embraced a third option, where fast, cross-platform code in C&amp;#43;&amp;#43; is married to a smooth, native UI for the best of both worlds.In Dropbox&#39;s new generation of iOS and Android apps, we leverage the strengths of the platform frameworks while only writing and maintaining one version of complex logic like data syncing. We&#39;ll explain the benefits and pitfalls of interfacing C&amp;#43;&amp;#43; to platform-specific code via Objective-C&amp;#43;&amp;#43; and JNI and how code generation has freed us from much of the effort involved. We&#39;ll share the benefits we&#39;ve gained from C&amp;#43;&amp;#43;11/14, as well as the drawbacks, and how we&#39;ve overcome each platform&#39;s quirks. Finally, we&#39;ll share tools that let you try this out yourselves, available at https://www.github.com/dropbox/djinni.--Alex Allain has been writing about C&amp;#43;&amp;#43; since 1998, when he started Cprogramming.com. In 2012, he published Jumping into C&amp;#43;&amp;#43; to teach new programmers how to think like a professional C&amp;#43;&amp;#43; programmer. At Dropbox, Alex leads the Platforms and Libraries team, helping make the dream of cross-platform C&amp;#43;&amp;#43;11 a reality. Prior to Dropbox, Alex led a team at Liquid Machines focused on injecting code into applications to perform binary hooking.--Andrew Twyman has been developing products and libraries in C&amp;#43;&amp;#43; for almost 10 years. He loves building robust systems and solving tricky low-level problems. Starting in 2012, Andrew helped spearhead Dropbox&#39;s new approach to cross-platform mobile development. Now on the Platforms and Libraries team, And</itunes:summary>
    <itunes:duration>3849</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Cross-Platform-Mobile-CPP-Development-at-Dropbox</guid>
    <dc:creator>Alex Allain, Andrew Twyman</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_high.mp4" length="1465824097" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain.mp3" expression="full" duration="3849" fileSize="61588166" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain.mp4" expression="full" duration="3849" fileSize="153557886" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain.webm" expression="full" duration="3849" fileSize="523333719" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_high.mp4" expression="full" duration="3849" fileSize="1465824097" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d70e/19fd1251-a4ae-48c2-8f89-84f79ddbd70e/CPPTwymanAllain_mid.mp4" expression="full" duration="3849" fileSize="839914952" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Async sequences and algorithms to compose them</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>All have heard and some have wept over all the many ways to express sequences (eg. iterator, range, container) and the algorithms to compose them (eg. filter, transform, merge, zip) in C&#43;&#43;. I will describe one more sequence that must have a representation and an algorithm library - A sequence of values that will arrive over time.</span><br><span>--</span><br><span>Hi! I have a family. I like food. I need sun (My need for sun must be why I live in Seattle). I like C&#43;&#43;. I don't like threads (My aversion to using threads must be why I spend all my free time working on a library that composes sequences on many threads). I work at Microsoft Open Technologies, Inc. | | Website:</span><a class="yt-uix-redirect-link" dir="ltr" title="http://kirkshoop.blogspot.com/" href="http://kirkshoop.blogspot.com/" target="_blank" rel="nofollow">http://kirkshoop.blogspot.com/</a><span><span class="Apple-converted-space">&nbsp;</span>| | Twitter handle: @kirkshoop</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:faa81a80e870403c84efa3e30001886e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Async-sequences-and-algorithms-to-compose-them</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Async-sequences-and-algorithms-to-compose-them</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--All have heard and some have wept over all the many ways to express sequences (eg. iterator, range, container) and the algorithms to compose them (eg. filter, transform, merge, zip) in C&amp;#43;&amp;#43;. I will describe one more sequence that must have a representation and an algorithm library - A sequence of values that will arrive over time.--Hi! I have a family. I like food. I need sun (My need for sun must be why I live in Seattle). I like C&amp;#43;&amp;#43;. I don&#39;t like threads (My aversion to using threads must be why I spend all my free time working on a library that composes sequences on many threads). I work at Microsoft Open Technologies, Inc. | | Website:http://kirkshoop.blogspot.com/ | | Twitter handle: @kirkshoop--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3163</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Async-sequences-and-algorithms-to-compose-them</guid>
    <dc:creator>Kirk Shoop</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_high.mp4" length="1015707974" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop.mp3" expression="full" duration="3163" fileSize="50621510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop.mp4" expression="full" duration="3163" fileSize="107760347" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop.webm" expression="full" duration="3163" fileSize="341398290" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_high.mp4" expression="full" duration="3163" fileSize="1015707974" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d31/9e25f210-6458-46e1-a008-62038f916d31/CPPKirkShoop_mid.mp4" expression="full" duration="3163" fileSize="606652507" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Simulating the Universe Using Modern C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>What is the link between C&#43;&#43;11/14, parallelism and the open question of the origin of the accelerated expansion of the Universe ? Answer: numerical cosmology and all the techniques to make the best out of supercomputers to shed a new light on unsolved problem in physics. In this talk, I will present the numerical lessons coming from the Full Universe Run, a numerical experiment realized in 2012 on the entire Curie thin-nodes Supercomputer to simulate the evolution of cosmological structures during the last 13.7 billion years. I will focus on how this experiment has changed our view on software design in astrophysics and how we started to implement new approaches using C&#43;&#43;11, template metaprogramming, constant expressions and std::thread in order to maximize both genericity and performance. I will also discuss optimization issues related to data locality, cache efficiency and spatial trees which are extensively used in our domain. I will also try to give some inputs on the cultural challenges raised by the introduction of C&#43;&#43;11/14 in our domain. This talk will be concluded by thoughts on the needs of computational physicists and how C&#43;&#43;17 may help us to solve some of the open problems we are currently facing.</span><br><span>--</span><br><span>Vincent Reverdy is a Ph.D. student in numerical cosmology at the Observatory of Paris. He studies the propagation of light according to general relativity in order to probe the unexplained accelerated expansion of the Universe. In this context, he is using supercomputing facilities on a daily basis and he develops scientific codes for these facilities, mainly in C&#43;&#43;.<span class="Apple-converted-space">&nbsp;</span></span><br><br><span>He is working now on approaches based on template metaprogramming to make the best out of supercomputers and to facilitate the implementation of non-standard cosmological models. Since the Bristol committee meeting, he also follows and contributes to the online discussions on the evolution of C&#43;&#43;.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:03c13a25d46f4c97bd6aa3e300012239">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Simulating-the-Universe-Using-Modern-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Simulating-the-Universe-Using-Modern-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--What is the link between C&amp;#43;&amp;#43;11/14, parallelism and the open question of the origin of the accelerated expansion of the Universe ? Answer: numerical cosmology and all the techniques to make the best out of supercomputers to shed a new light on unsolved problem in physics. In this talk, I will present the numerical lessons coming from the Full Universe Run, a numerical experiment realized in 2012 on the entire Curie thin-nodes Supercomputer to simulate the evolution of cosmological structures during the last 13.7 billion years. I will focus on how this experiment has changed our view on software design in astrophysics and how we started to implement new approaches using C&amp;#43;&amp;#43;11, template metaprogramming, constant expressions and std::thread in order to maximize both genericity and performance. I will also discuss optimization issues related to data locality, cache efficiency and spatial trees which are extensively used in our domain. I will also try to give some inputs on the cultural challenges raised by the introduction of C&amp;#43;&amp;#43;11/14 in our domain. This talk will be concluded by thoughts on the needs of computational physicists and how C&amp;#43;&amp;#43;17 may help us to solve some of the open problems we are currently facing.--Vincent Reverdy is a Ph.D. student in numerical cosmology at the Observatory of Paris. He studies the propagation of light according to general relativity in order to probe the unexplained accelerated expansion of the Universe. In this context, he is using supercomputing facilities on a daily basis and he develops scientific codes for these facilities, mainly in C&amp;#43;&amp;#43;. He is working now on approaches based on template metaprogramming to make the best out of supercomputers and to facilitate the implementation of non-standard cosmological models. Since the Bristol committee meeting,</itunes:summary>
    <itunes:duration>3564</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Simulating-the-Universe-Using-Modern-CPP</guid>
    <dc:creator>Vincent Reverdy</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_high.mp4" length="544755619" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy.mp3" expression="full" duration="3564" fileSize="57037382" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy.mp4" expression="full" duration="3564" fileSize="88566581" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy.webm" expression="full" duration="3564" fileSize="283248000" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_high.mp4" expression="full" duration="3564" fileSize="544755619" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/846e/845aaf83-fc4f-40d9-ab97-7cd4bc73846e/CPPVincentReverdy_mid.mp4" expression="full" duration="3564" fileSize="350377452" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Quick Tour of C++14</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>After the grand expansion of the C&#43;&#43;11 library, the extensions in C&#43;&#43;14 are more modest, often tweaking and cleaning up existing components.<br><br>Alisdair Meredith, the Library Working Group chair, walks through all these changes and additions, and a little insight into features that did not make the cut, and are expected to arrive in other Technical Specification before the next standard ships.<br>--<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.<br><br>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.<br><br>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d3c00908447a4a539c5ca3e20178e874">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-Quick-Tour-of-CPP14</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-Quick-Tour-of-CPP14</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--After the grand expansion of the C&amp;#43;&amp;#43;11 library, the extensions in C&amp;#43;&amp;#43;14 are more modest, often tweaking and cleaning up existing components.Alisdair Meredith, the Library Working Group chair, walks through all these changes and additions, and a little insight into features that did not make the cut, and are expected to arrive in other Technical Specification before the next standard ships.--Alisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3557</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-Quick-Tour-of-CPP14</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_high.mp4" length="1970403818" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith.mp3" expression="full" duration="3557" fileSize="56915654" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith.mp4" expression="full" duration="3557" fileSize="116991793" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith.webm" expression="full" duration="3557" fileSize="499663947" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_high.mp4" expression="full" duration="3557" fileSize="1970403818" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/42e5/ce71c6e3-9d68-461d-be37-591b5eb642e5/CPPAlisdairMeredith_mid.mp4" expression="full" duration="3557" fileSize="1204464233" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Unicode in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>In some programming languages, text processing is easy. Unfortunately, C&#43;&#43; is not one of those languages. C&#43;&#43; lacks good, built-in support for Unicode, though the situation is starting to improve.<br><br>This session will begin with a brief overview of text encodings, and an introduction to Unicode and the various Unicode encodings. We'll look at the woeful state of Unicode support in C&#43;&#43;98 (or, really, lack thereof), then take a look at the improvements that were made in C&#43;&#43;11 and other improvements that have recently been proposed for standardization. We'll finish up with a discussion of several libraries designed to make it easier to work with Unicode in C&#43;&#43;, including the widely-used, open-source International Components for Unicode (ICU) library.<br>--<br>James McNellis is a senior engineer on the Microsoft Visual C&#43;&#43; team, where he is responsible for the Visual C&#43;&#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&amp;A website and occasionally writes for the Visual C&#43;&#43; Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.jamesmcnellis.com" href="http://www.jamesmcnellis.com/" target="_blank" rel="nofollow">http://www.jamesmcnellis.com</a>.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f439916da00d4d29ba69a3e201746384">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Unicode-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Unicode-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In some programming languages, text processing is easy. Unfortunately, C&amp;#43;&amp;#43; is not one of those languages. C&amp;#43;&amp;#43; lacks good, built-in support for Unicode, though the situation is starting to improve.This session will begin with a brief overview of text encodings, and an introduction to Unicode and the various Unicode encodings. We&#39;ll look at the woeful state of Unicode support in C&amp;#43;&amp;#43;98 (or, really, lack thereof), then take a look at the improvements that were made in C&amp;#43;&amp;#43;11 and other improvements that have recently been proposed for standardization. We&#39;ll finish up with a discussion of several libraries designed to make it easier to work with Unicode in C&amp;#43;&amp;#43;, including the widely-used, open-source International Components for Unicode (ICU) library.--James McNellis is a senior engineer on the Microsoft Visual C&amp;#43;&amp;#43; team, where he is responsible for the Visual C&amp;#43;&amp;#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&amp;amp;A website and occasionally writes for the Visual C&amp;#43;&amp;#43; Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3579</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Unicode-in-CPP</guid>
    <dc:creator>James McNellis</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_high.mp4" length="793117651" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis.mp3" expression="full" duration="3579" fileSize="57271238" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis.mp4" expression="full" duration="3579" fileSize="97625513" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis.webm" expression="full" duration="3579" fileSize="295107698" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_high.mp4" expression="full" duration="3579" fileSize="793117651" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e439/a82d8b40-060e-47e2-b0df-b33de00ae439/CPPJamesMcNellis_mid.mp4" expression="full" duration="3579" fileSize="461206970" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ in Huge AAA Games</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Video games like Assassin's Creed or Rainbow Six are among the biggest code bases with a single static linking. Iteration-time is critical to develop a great game and keeping a complete compilation-time of a few minutes is a constant challenge. This talk will explain the C&#43;&#43; usage reality at Ubisoft Montreal for huge projects. Ideas will be shared regarding performance, debugging and iteration time.</span><br><span>--</span><br><span>Nicolas Fleury has been in video game industry for over 10 years, working as a Technical Architect on projects like Prince of Persia and currently on Rainbow Six: Siege. Before working in the game industry, he worked in computer assisted surgery, speech recognition and telecoms.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:707cce5f06384e318a3da3e2016fbb69">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/CPP-in-Huge-AAA-Games</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/CPP-in-Huge-AAA-Games</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Video games like Assassin&#39;s Creed or Rainbow Six are among the biggest code bases with a single static linking. Iteration-time is critical to develop a great game and keeping a complete compilation-time of a few minutes is a constant challenge. This talk will explain the C&amp;#43;&amp;#43; usage reality at Ubisoft Montreal for huge projects. Ideas will be shared regarding performance, debugging and iteration time.--Nicolas Fleury has been in video game industry for over 10 years, working as a Technical Architect on projects like Prince of Persia and currently on Rainbow Six: Siege. Before working in the game industry, he worked in computer assisted surgery, speech recognition and telecoms.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2922</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/CPP-in-Huge-AAA-Games</guid>
    <dc:creator>Nicolas Fleury</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_high.mp4" length="943883531" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury.mp3" expression="full" duration="2922" fileSize="46761926" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury.mp4" expression="full" duration="2922" fileSize="85204377" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury.webm" expression="full" duration="2922" fileSize="331804963" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_high.mp4" expression="full" duration="2922" fileSize="943883531" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c4e3/c7bb93b5-d20a-4f96-8e9b-2333b840c4e3/CPPNicolasFleury_mid.mp4" expression="full" duration="2922" fileSize="519978127" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Optimization Tips: Mo&#39; Hustle Mo&#39; Problems</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Reasonably-written C&#43;&#43; code will be naturally fast. This is to C&#43;&#43;'s excellent low-penalty abstractions and a memory model close to the machine.<br><br>However, a large category of applications have no boundaries on desired speed, meaning there's no point of diminishing returns in making code faster. Better speed means less power consumed for the same work, more workload with the same data center expense, better features for the end user, more features for machine learning, better analytics, and more.<br><br>Optimizing has always been an art, and in particular optimizing C&#43;&#43; on contemporary hardware has become a task of formidable complexity. This is because modern hardware has a few peculiarities about it that are not sufficiently understood and explored. This talk discusses a few such effects, and guides the attendee on how to navigate design and implementation options in search for better performance.<br>--<br>Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&#43;&#43; Design, C&#43;&#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &quot;Politehnica&quot; Bucharest. He works as a Research Scientist for Facebook.<br><br>Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://erdani.com" href="http://erdani.com/" target="_blank" rel="nofollow">http://erdani.com</a><br>Twitter handle: @incomputable<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c2f930a3cb5b4821b754a3e2016b82b9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Optimization-Tips-Mo-Hustle-Mo-Problems</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Optimization-Tips-Mo-Hustle-Mo-Problems</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Reasonably-written C&amp;#43;&amp;#43; code will be naturally fast. This is to C&amp;#43;&amp;#43;&#39;s excellent low-penalty abstractions and a memory model close to the machine.However, a large category of applications have no boundaries on desired speed, meaning there&#39;s no point of diminishing returns in making code faster. Better speed means less power consumed for the same work, more workload with the same data center expense, better features for the end user, more features for machine learning, better analytics, and more.Optimizing has always been an art, and in particular optimizing C&amp;#43;&amp;#43; on contemporary hardware has become a task of formidable complexity. This is because modern hardware has a few peculiarities about it that are not sufficiently understood and explored. This talk discusses a few such effects, and guides the attendee on how to navigate design and implementation options in search for better performance.--Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&amp;#43;&amp;#43; Design, C&amp;#43;&amp;#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &amp;quot;Politehnica&amp;quot; Bucharest. He works as a Research Scientist for Facebook.Website: http://erdani.comTwitter handle: @incomputable--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3498</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Optimization-Tips-Mo-Hustle-Mo-Problems</guid>
    <dc:creator>Andrei Alexandrescu</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_high.mp4" length="764147783" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu.mp3" expression="full" duration="3498" fileSize="55977542" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu.mp4" expression="full" duration="3498" fileSize="118533759" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu.webm" expression="full" duration="3498" fileSize="385456967" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_high.mp4" expression="full" duration="3498" fileSize="764147783" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b75/4cae1c94-eee1-4c5d-aa3b-76cb6b835b75/CPPAndreiAlexandrescu_mid.mp4" expression="full" duration="3498" fileSize="455795846" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lock-free by Example</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Dive into and follow along making a lock-free queue.<br><br>In particular, a multi-producer, multi-consumer, growing, shrinking, mostly contiguous, lock-free circular queue.<br><br>With this single (complicated!) example, we will come across, and attempt to solve, many of the typical problems found in lockfree programming, and delve into the pros and cons of various solutions to those problems.<br>--<br>Tony Van Eerd has been coding for well over 25 years, and hopefully coding well for at least some of that. Most of that time has been in the graphics/video/film/broadcast industry (at Inscriber/Adobe), writing low level pixel&#43;&#43;, high level UI, as well as threading and everything else in between. He now works at BlackBerry, watching over the BlackBerry APIs. He is also the company-wide &quot;C&#43;&#43; guy&quot; writing half of his code in emails and wiki pages.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:77227ce204bf4ce7bbdfa3e2016aee79">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-free-by-Example</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-free-by-Example</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Dive into and follow along making a lock-free queue.In particular, a multi-producer, multi-consumer, growing, shrinking, mostly contiguous, lock-free circular queue.With this single (complicated!) example, we will come across, and attempt to solve, many of the typical problems found in lockfree programming, and delve into the pros and cons of various solutions to those problems.--Tony Van Eerd has been coding for well over 25 years, and hopefully coding well for at least some of that. Most of that time has been in the graphics/video/film/broadcast industry (at Inscriber/Adobe), writing low level pixel&amp;#43;&amp;#43;, high level UI, as well as threading and everything else in between. He now works at BlackBerry, watching over the BlackBerry APIs. He is also the company-wide &amp;quot;C&amp;#43;&amp;#43; guy&amp;quot; writing half of his code in emails and wiki pages.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3559</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-free-by-Example</guid>
    <dc:creator>Tony Van Eerd</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_high.mp4" length="1327253545" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd.mp3" expression="full" duration="3559" fileSize="56952518" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd.mp4" expression="full" duration="3559" fileSize="111343977" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd.webm" expression="full" duration="3559" fileSize="329338270" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_high.mp4" expression="full" duration="3559" fileSize="1327253545" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7c0d/21b59558-b3a4-4c73-974f-24fda0517c0d/CPPTonyVanEerd_mid.mp4" expression="full" duration="3559" fileSize="701309626" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>STL Features And Implementation Techniques</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>This session will cover selected STL features from C&#43;&#43;11/14, both explaining how to use them and delving into implementation techniques that could be useful outside the STL.<br><br>I will avoid covering popular features you're already using (e.g. make_shared, make_unique) and obscure features of limited use (e.g. forward_list). The focus will be on useful but underappreciated features like dual-range algorithms, minimal allocators, and heterogeneous associative lookup.<br>--<br>Stephan T. Lavavej is a Senior Developer at Microsoft. Since 2007, he's worked with Dinkumware to maintain Visual C&#43;&#43;'s implementation of the C&#43;&#43; Standard Library. He also designed a couple of C&#43;&#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn't own any).<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:146c70b18e6245e8951fa3e20169f9fd">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/STL-Features-And-Implementation-Techniques</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/STL-Features-And-Implementation-Techniques</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This session will cover selected STL features from C&amp;#43;&amp;#43;11/14, both explaining how to use them and delving into implementation techniques that could be useful outside the STL.I will avoid covering popular features you&#39;re already using (e.g. make_shared, make_unique) and obscure features of limited use (e.g. forward_list). The focus will be on useful but underappreciated features like dual-range algorithms, minimal allocators, and heterogeneous associative lookup.--Stephan T. Lavavej is a Senior Developer at Microsoft. Since 2007, he&#39;s worked with Dinkumware to maintain Visual C&amp;#43;&amp;#43;&#39;s implementation of the C&amp;#43;&amp;#43; Standard Library. He also designed a couple of C&amp;#43;&amp;#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn&#39;t own any).--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3581</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/STL-Features-And-Implementation-Techniques</guid>
    <dc:creator>Stephan Lavavej</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_high.mp4" length="810974777" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej.mp3" expression="full" duration="3581" fileSize="57303110" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej.mp4" expression="full" duration="3581" fileSize="121117500" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej.webm" expression="full" duration="3581" fileSize="388529150" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_high.mp4" expression="full" duration="3581" fileSize="810974777" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f5c0/568e6f83-71a9-4aee-88e2-bfb5d08ef5c0/CPPStephanLavavej_mid.mp4" expression="full" duration="3581" fileSize="485056497" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Embarcadero Case Study: Bringing CLANG/LLVM To Windows</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>CLANG/LLVM delivers a highly conforming C&#43;&#43; compiler and architecture for targeting multiple CPUs, and, as such, has seen success in iOS and other operating systems. Embarcadero has successfully delivered the first commercial compiler for Windows based on CLANG/LLVM. This session describes the benefits of CLANG/LLVM as well as the challenges in bringing it to the Windows operating system. Particular emphasis is placed on the managing the changes in CLANG as well as the additional features added to enable Windows development.<br>--<br>John &quot;JT&quot; Thomas, Director of Product Management at Embarcadero Technologies, has more than 15 years of product management and product development experience including hands-on experience with the early versions of Delphi and C&#43;&#43;Builder at Borland Software. Previously, JT held product management positions at mobile Linux vendor MontaVista Software and at Research in Motion. He earned his Computer Science degree from University of California, Santa Cruz and his MBA and MSE from San Jose State University.Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.embarcadero.comTwitter" href="http://www.embarcadero.comtwitter/" target="_blank" rel="nofollow">http://www.embarcadero.comTwitter</a><span class="Apple-converted-space">&nbsp;</span>handle: @FireMonkeyPM<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:57ddb85367ff4fd1962da3e20162147d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Embarcadero-Case-Study-Bringing-CLANGLLVM-To-Windows</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Embarcadero-Case-Study-Bringing-CLANGLLVM-To-Windows</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--CLANG/LLVM delivers a highly conforming C&amp;#43;&amp;#43; compiler and architecture for targeting multiple CPUs, and, as such, has seen success in iOS and other operating systems. Embarcadero has successfully delivered the first commercial compiler for Windows based on CLANG/LLVM. This session describes the benefits of CLANG/LLVM as well as the challenges in bringing it to the Windows operating system. Particular emphasis is placed on the managing the changes in CLANG as well as the additional features added to enable Windows development.--John &amp;quot;JT&amp;quot; Thomas, Director of Product Management at Embarcadero Technologies, has more than 15 years of product management and product development experience including hands-on experience with the early versions of Delphi and C&amp;#43;&amp;#43;Builder at Borland Software. Previously, JT held product management positions at mobile Linux vendor MontaVista Software and at Research in Motion. He earned his Computer Science degree from University of California, Santa Cruz and his MBA and MSE from San Jose State University.Website: http://www.embarcadero.comTwitter handle: @FireMonkeyPM--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3630</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Embarcadero-Case-Study-Bringing-CLANGLLVM-To-Windows</guid>
    <dc:creator>John Thomas</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_high.mp4" length="991164779" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas.mp3" expression="full" duration="3630" fileSize="58093766" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas.mp4" expression="full" duration="3630" fileSize="137814926" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas.webm" expression="full" duration="3630" fileSize="497451779" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_high.mp4" expression="full" duration="3630" fileSize="991164779" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4415/699f2504-9fd8-4b6b-9636-38b7d09e4415/CPPJohnThomas_mid.mp4" expression="full" duration="3630" fileSize="603361582" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A CTO&#39;s guide to Modern C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>It's a very exciting time for C&#43;&#43; programmers: multiple competitive, capable toolchains to choose from, a re-invigorated standard body, and great IDEs that even die-hard emacs/edlin users are flocking toward. On the flipside, there are practical aspects that are extremely frustrating: what vendor can I pay for support of my toolchain/debugger/IDE? how can I fund open source development to move the needle in areas I care about? what static analysis tools are available that actually work? These questions, and other operational aspects of maintaining a C&#43;&#43; engineering organization, are covered in detail so you can immediately start covering your bases without learning the hard way.</span><br><span>--</span><br><span>Matt's first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &quot;the making of the making of&quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:618039cffbb342418b18a3e20160d6b4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-CTOs-guide-to-Modern-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-CTOs-guide-to-Modern-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--It&#39;s a very exciting time for C&amp;#43;&amp;#43; programmers: multiple competitive, capable toolchains to choose from, a re-invigorated standard body, and great IDEs that even die-hard emacs/edlin users are flocking toward. On the flipside, there are practical aspects that are extremely frustrating: what vendor can I pay for support of my toolchain/debugger/IDE? how can I fund open source development to move the needle in areas I care about? what static analysis tools are available that actually work? These questions, and other operational aspects of maintaining a C&amp;#43;&amp;#43; engineering organization, are covered in detail so you can immediately start covering your bases without learning the hard way.--Matt&#39;s first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &amp;quot;the making of the making of&amp;quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4117</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/A-CTOs-guide-to-Modern-CPP</guid>
    <dc:creator>Matt Hargett</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_high.mp4" length="1684701333" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett.mp3" expression="full" duration="4117" fileSize="65879750" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett.mp4" expression="full" duration="4117" fileSize="217422769" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett.webm" expression="full" duration="4117" fileSize="567614045" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_high.mp4" expression="full" duration="4117" fileSize="1684701333" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5fd7/8b2bcc03-8c3b-4dce-b60e-c706f19f5fd7/CPPMattHargett_mid.mp4" expression="full" duration="4117" fileSize="1012799578" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Metaprogramming with Boost.Hana: Unifying Boost.Fusion and Boost.MPL</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Template metaprogramming sucks. No, seriously; you might like the imposed purely functional paradigm, but not the templates themselves. While C&#43;&#43;11 has made our life easier, even simple metaprograms are often hard to write, impossible to maintain and slow to compile; we need better abstractions. In this talk, I will present Boost.Hana[1], an experimental C&#43;&#43;14 library for heterogeneous computation. The library takes metaprogramming to a whole new level of expressiveness by unifying the well-known Boost.MPL and Boost.Fusion libraries under a single generic, purely functional interface. The library incorporates some of the most recent advances in C&#43;&#43; metaprogramming; I will give an overview of the most interesting implementation techniques used internally. Finally, I will show concrete ways to use the library so you, as a developer, can write less template black magic, increase your productivity and spend less time in coffee breaks waiting for the compiler (sorry).<br>--<br>Louis is a programming enthusiast and math student living in Quebec City, Canada. He focuses mainly on metaprogramming and functional programming in C&#43;&#43; or other languages. Recently, he has been looking at ways to make C&#43;&#43; metaprogramming more enjoyable by combining C&#43;&#43;11/1y techniques with functional programming concepts. In particular, he is working on this very topic as a GSoC student with Boost for the summer of 2014.Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://ldionne.com" href="http://ldionne.com/" target="_blank" rel="nofollow">http://ldionne.com</a><br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:24c787d7aae24a6b9155a3e2015ced7d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Metaprogramming-with-BoostHana-Unifying-BoostFusion-and-BoostMPL</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Metaprogramming-with-BoostHana-Unifying-BoostFusion-and-BoostMPL</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Template metaprogramming sucks. No, seriously; you might like the imposed purely functional paradigm, but not the templates themselves. While C&amp;#43;&amp;#43;11 has made our life easier, even simple metaprograms are often hard to write, impossible to maintain and slow to compile; we need better abstractions. In this talk, I will present Boost.Hana[1], an experimental C&amp;#43;&amp;#43;14 library for heterogeneous computation. The library takes metaprogramming to a whole new level of expressiveness by unifying the well-known Boost.MPL and Boost.Fusion libraries under a single generic, purely functional interface. The library incorporates some of the most recent advances in C&amp;#43;&amp;#43; metaprogramming; I will give an overview of the most interesting implementation techniques used internally. Finally, I will show concrete ways to use the library so you, as a developer, can write less template black magic, increase your productivity and spend less time in coffee breaks waiting for the compiler (sorry).--Louis is a programming enthusiast and math student living in Quebec City, Canada. He focuses mainly on metaprogramming and functional programming in C&amp;#43;&amp;#43; or other languages. Recently, he has been looking at ways to make C&amp;#43;&amp;#43; metaprogramming more enjoyable by combining C&amp;#43;&amp;#43;11/1y techniques with functional programming concepts. In particular, he is working on this very topic as a GSoC student with Boost for the summer of 2014.Website: http://ldionne.com--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3610</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Metaprogramming-with-BoostHana-Unifying-BoostFusion-and-BoostMPL</guid>
    <dc:creator>Louis Dionne</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_high.mp4" length="1256541649" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne.mp3" expression="full" duration="3610" fileSize="57776582" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne.mp4" expression="full" duration="3610" fileSize="121045924" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne.webm" expression="full" duration="3610" fileSize="382648254" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_high.mp4" expression="full" duration="3610" fileSize="1256541649" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/30e6/286883de-7dc7-469d-b3e3-7cab8ea230e6/CPPlouisdionne_mid.mp4" expression="full" duration="3610" fileSize="761586483" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Creating Coding with C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Realtime graphics, computer vision, hardware hacking, and audio synthesis are just a few of the crafts that fall under the banner term of &quot;creative coding&quot;. In this session we'll talk about some of the creative projects putting C&#43;&#43; in places you might not expect it - everywhere from the Smithsonian's permanent design collection to robotic Coca-Cola dispensers on California beaches. We'll look at a wide spectrum of projects ranging from those of the &quot;maker&quot; community to commercial work from full-time professionals earning their livings in advertising and design agencies. And finally we'll take a look at how you can use the C&#43;&#43; you already know to jumpstart your own creative coding projects using the open source toolkit Cinder.<br>--<br>Andrew Bell is a Technology Research Fellow working at the creative agency The Barbarian Group. He maintains Cinder, a C&#43;&#43; open source creative coding framework, as his full-time job. When he's not coding on Cinder he can be found doing everything from writing emails about Cinder to being asleep, and yet somehow he remains single. In his career he has also coded too much in other capacities, specifically for the visual effects companies The Mill and Method.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b7301ac695064f958a8ea3e20150597a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Creating-Coding-with-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Creating-Coding-with-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Realtime graphics, computer vision, hardware hacking, and audio synthesis are just a few of the crafts that fall under the banner term of &amp;quot;creative coding&amp;quot;. In this session we&#39;ll talk about some of the creative projects putting C&amp;#43;&amp;#43; in places you might not expect it - everywhere from the Smithsonian&#39;s permanent design collection to robotic Coca-Cola dispensers on California beaches. We&#39;ll look at a wide spectrum of projects ranging from those of the &amp;quot;maker&amp;quot; community to commercial work from full-time professionals earning their livings in advertising and design agencies. And finally we&#39;ll take a look at how you can use the C&amp;#43;&amp;#43; you already know to jumpstart your own creative coding projects using the open source toolkit Cinder.--Andrew Bell is a Technology Research Fellow working at the creative agency The Barbarian Group. He maintains Cinder, a C&amp;#43;&amp;#43; open source creative coding framework, as his full-time job. When he&#39;s not coding on Cinder he can be found doing everything from writing emails about Cinder to being asleep, and yet somehow he remains single. In his career he has also coded too much in other capacities, specifically for the visual effects companies The Mill and Method.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3551</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Creating-Coding-with-CPP</guid>
    <dc:creator>Andrew Bell</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_high.mp4" length="1621256572" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell.mp3" expression="full" duration="3551" fileSize="56828102" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell.mp4" expression="full" duration="3551" fileSize="186318391" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell.webm" expression="full" duration="3551" fileSize="465800375" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_high.mp4" expression="full" duration="3551" fileSize="1621256572" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/579f/c1756f78-4ec8-475f-b847-2894f4cb579f/CPPAndrewBell_mid.mp4" expression="full" duration="3551" fileSize="951723052" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Data-Oriented Design and C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>The transformation of data is the only purpose of any program. Common approaches in C&#43;&#43; which are antithetical to this goal will be presented in the context of a performance-critical domain (console game development). Additionally, limitations inherent in any C&#43;&#43; compiler and how that affects the practical use of the language when transforming that data will be demonstrated.<br>--<br>Mike Acton: Engine Director, Insomniac Games<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7171733ccaf244b0acf3a3e10168b1e2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Data-Oriented-Design-and-C-P-P</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Data-Oriented-Design-and-C-P-P</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--The transformation of data is the only purpose of any program. Common approaches in C&amp;#43;&amp;#43; which are antithetical to this goal will be presented in the context of a performance-critical domain (console game development). Additionally, limitations inherent in any C&amp;#43;&amp;#43; compiler and how that affects the practical use of the language when transforming that data will be demonstrated.--Mike Acton: Engine Director, Insomniac Games--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>5265</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Data-Oriented-Design-and-C-P-P</guid>
    <dc:creator>Mike Acton</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_high.mp4" length="1452435034" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP.mp3" expression="full" duration="5265" fileSize="84252230" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP.mp4" expression="full" duration="5265" fileSize="290247151" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP.webm" expression="full" duration="5265" fileSize="748588910" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_high.mp4" expression="full" duration="5265" fileSize="1452435034" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d3e4/176bb354-535e-48f8-8880-6ba682afd3e4/DataOrientedDesignandCPP_mid.mp4" expression="full" duration="5265" fileSize="1002011994" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Quick Game Development With C++11/C++14</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Modern C&#43;&#43; has made game development a much more pleasurable experience. Features such as smart pointers and variadic templates are invaluable in speeding up the development process and in making the code cleaner and more robust. New easy-to-use multimedia libraries such as SFML, SDL and Cinder make dealing with graphics, sounds and input very easy, and work well with modern code principles. This talk guides the audience through the creation of an Arkanoid/Breakout clone in under 200 lines of code, using C&#43;&#43;11/C&#43;&#43;14 features and idioms. Chronologically sequential code segments, compiled and executed one by one, will show the attendees how a game is created from scratch, slowly becoming a playable product, step by step. The end result will be a small game, completely written in modern C&#43;&#43; code. Topics covered will range from basic graphics programming to entity management and collision detection/response.<br>--<br>Vittorio Romeo is an Italian 19 year old Computer Science student at the University of Messina. He started programming at a very young age and soon became an enthusiast of the C&#43;&#43; language. While following the evolution of the C&#43;&#43; standard and embracing the newest features, he worked on many open-source project, such as general-purpose libraries and free multiplatform independent games, which are still being maintained and expanded today. Vittorio also participated as a speaker at Messina's 2013 Linux Day event and he is currently creating an online game-development C&#43;&#43;11 video tutorial series for beginners.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:19e2b53badb04878a58ca3e101681aa9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Quick-Game-Development-With-C11C14</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Quick-Game-Development-With-C11C14</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Modern C&amp;#43;&amp;#43; has made game development a much more pleasurable experience. Features such as smart pointers and variadic templates are invaluable in speeding up the development process and in making the code cleaner and more robust. New easy-to-use multimedia libraries such as SFML, SDL and Cinder make dealing with graphics, sounds and input very easy, and work well with modern code principles. This talk guides the audience through the creation of an Arkanoid/Breakout clone in under 200 lines of code, using C&amp;#43;&amp;#43;11/C&amp;#43;&amp;#43;14 features and idioms. Chronologically sequential code segments, compiled and executed one by one, will show the attendees how a game is created from scratch, slowly becoming a playable product, step by step. The end result will be a small game, completely written in modern C&amp;#43;&amp;#43; code. Topics covered will range from basic graphics programming to entity management and collision detection/response.--Vittorio Romeo is an Italian 19 year old Computer Science student at the University of Messina. He started programming at a very young age and soon became an enthusiast of the C&amp;#43;&amp;#43; language. While following the evolution of the C&amp;#43;&amp;#43; standard and embracing the newest features, he worked on many open-source project, such as general-purpose libraries and free multiplatform independent games, which are still being maintained and expanded today. Vittorio also participated as a speaker at Messina&#39;s 2013 Linux Day event and he is currently creating an online game-development C&amp;#43;&amp;#43;11 video tutorial series for beginners.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3198</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Quick-Game-Development-With-C11C14</guid>
    <dc:creator>Vittorio Romeo</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_high.mp4" length="1374564812" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo.mp3" expression="full" duration="3198" fileSize="51170630" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo.mp4" expression="full" duration="3198" fileSize="104893315" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo.webm" expression="full" duration="3198" fileSize="444455733" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_high.mp4" expression="full" duration="3198" fileSize="1374564812" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ca6/abeeb8a2-8f02-4c00-9ee3-ddf24d8e2ca6/QuickGameDevelopmentRomeo_mid.mp4" expression="full" duration="3198" fileSize="808218742" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Where Did My Performance Go? (Scaling Visualization in Concurrent C++ Programs)</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>High performance is one of the main reasons programmers choose C&#43;&#43; for their applications. If you are writing in C&#43;&#43;, odds are you need every bit of computing power your hardware can provide. Today, this means writing multi-threaded programs to effectively utilize the multiple CPU cores that the hardware manufacturers keep adding. Everyone knows that writing multi-threaded programs is hard. Writing correct multi-threaded programs is even harder. Only after spending countless hours debugging race conditions and weird intermittent bugs do many programmers learn that writing efficient multi-threaded programs is harder yet. Have you ever wanted to see what are all your threads doing when they should be busy computing? This talk will show you how.<br><br>We begin by studying several techniques necessary for collecting large amounts of data from the running program very efficiently, with little overhead and minimal disruption to the program itself. We will cover efficient thread-safe memory management and efficient thread-safe disk I/O. Along the way we dabble in lock-free programming just enough to meet our needs, lest the subject will spiral into an hour-long talk of its own. With all these techniques put together, we can collect information about what each thread is doing, which threads are computing and what exactly, and which threads are slacking off waiting on locks, and do it at the time scale of tens of microseconds if necessary. Then we process the collected data and create a timeline that shows exactly what the program was doing at every moment in time.<br>--<br>Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e6a02d97662b4f41926ea3e101678f87">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Where-Did-My-Performance-Go-Scaling-Visualization-in-Concurrent-C-Programs</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Where-Did-My-Performance-Go-Scaling-Visualization-in-Concurrent-C-Programs</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--High performance is one of the main reasons programmers choose C&amp;#43;&amp;#43; for their applications. If you are writing in C&amp;#43;&amp;#43;, odds are you need every bit of computing power your hardware can provide. Today, this means writing multi-threaded programs to effectively utilize the multiple CPU cores that the hardware manufacturers keep adding. Everyone knows that writing multi-threaded programs is hard. Writing correct multi-threaded programs is even harder. Only after spending countless hours debugging race conditions and weird intermittent bugs do many programmers learn that writing efficient multi-threaded programs is harder yet. Have you ever wanted to see what are all your threads doing when they should be busy computing? This talk will show you how.We begin by studying several techniques necessary for collecting large amounts of data from the running program very efficiently, with little overhead and minimal disruption to the program itself. We will cover efficient thread-safe memory management and efficient thread-safe disk I/O. Along the way we dabble in lock-free programming just enough to meet our needs, lest the subject will spiral into an hour-long talk of its own. With all these techniques put together, we can collect information about what each thread is doing, which threads are computing and what exactly, and which threads are slacking off waiting on locks, and do it at the time scale of tens of microseconds if necessary. Then we process the collected data and create a timeline that shows exactly what the program was doing at every moment in time.--Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He join</itunes:summary>
    <itunes:duration>3796</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Where-Did-My-Performance-Go-Scaling-Visualization-in-Concurrent-C-Programs</guid>
    <dc:creator>Fedor Pikus</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_high.mp4" length="632995013" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus.mp3" expression="full" duration="3796" fileSize="60746822" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus.mp4" expression="full" duration="3796" fileSize="110080063" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus.webm" expression="full" duration="3796" fileSize="360530148" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_high.mp4" expression="full" duration="3796" fileSize="632995013" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/573a/81b19b31-43b3-4bc4-940e-4c4ff600573a/WhereDidMyPerformanceGoPikus_mid.mp4" expression="full" duration="3796" fileSize="385647862" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical Type Erasure</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Type erasure looks like a neat concept, but what are its real life uses? This talk will briefly show the inner workings of type erasure, and demonstrate a real working implementation of a configuration system from public domain production code. Uses and pitfalls of type erasure will also be covered.<br>--<br>As an engineer with a chemical engineering background, Cheinan is interested in practical code and wants to take the latest advances both in science and programming and use them in real life working code along with applying engineering principles to software development. Cheinan is a senior developer at Spiral Genetics, Inc. in Seattle.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b2193dca6fc346f2becea3e101597557">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Type-Erasure</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Type-Erasure</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Type erasure looks like a neat concept, but what are its real life uses? This talk will briefly show the inner workings of type erasure, and demonstrate a real working implementation of a configuration system from public domain production code. Uses and pitfalls of type erasure will also be covered.--As an engineer with a chemical engineering background, Cheinan is interested in practical code and wants to take the latest advances both in science and programming and use them in real life working code along with applying engineering principles to software development. Cheinan is a senior developer at Spiral Genetics, Inc. in Seattle.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3666</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Practical-Type-Erasure</guid>
    <dc:creator>Cheinan Marks</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_high.mp4" length="849042092" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure.mp3" expression="full" duration="3666" fileSize="58659014" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure.mp4" expression="full" duration="3666" fileSize="133702332" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure.webm" expression="full" duration="3666" fileSize="519429077" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_high.mp4" expression="full" duration="3666" fileSize="849042092" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca19/eff19622-aa2e-40cd-91e7-4380c98dca19/PracticalTypeErasure_mid.mp4" expression="full" duration="3666" fileSize="524036936" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Polymorphism With Unions</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Using tagged unions to create families of polymorphic types that are more flexible and more easily maintained than those formed with inheritance alone. We demonstrate the design pattern and implementation techniques of sum types with examples from a compiler development project. We also examine the technique's impact on project management and engineering and on algorithm design, including the role of type switches, value type semantics, and multiple dispatch polymorphism.<br>--<br>Jason Lucas is an alum of the Microsoft Visual C&#43;&#43; team and has been writing extensively in C&#43;&#43; since the early 90s. He is the architect for Orly, an open source, large-scale, distributed, transactional, and consistent graph database (all in C&#43;&#43;) which also includes a compiler for distributed programs.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e8c01950c00449ff98b2a3e10158a626">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Polymorphism-With-Unions</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Polymorphism-With-Unions</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Using tagged unions to create families of polymorphic types that are more flexible and more easily maintained than those formed with inheritance alone. We demonstrate the design pattern and implementation techniques of sum types with examples from a compiler development project. We also examine the technique&#39;s impact on project management and engineering and on algorithm design, including the role of type switches, value type semantics, and multiple dispatch polymorphism.--Jason Lucas is an alum of the Microsoft Visual C&amp;#43;&amp;#43; team and has been writing extensively in C&amp;#43;&amp;#43; since the early 90s. He is the architect for Orly, an open source, large-scale, distributed, transactional, and consistent graph database (all in C&amp;#43;&amp;#43;) which also includes a compiler for distributed programs.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3536</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Polymorphism-With-Unions</guid>
    <dc:creator>Jason Lucas</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_high.mp4" length="1032451918" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions.mp3" expression="full" duration="3536" fileSize="56583494" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions.mp4" expression="full" duration="3536" fileSize="109607249" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions.webm" expression="full" duration="3536" fileSize="362600801" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_high.mp4" expression="full" duration="3536" fileSize="1032451918" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2a2/8bfc2b8c-0e00-4c95-829a-8f247d76b2a2/PolymorphismwithUnions_mid.mp4" expression="full" duration="3536" fileSize="628818898" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Using C++ to Connect to Web Services</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Many languages have great support for connecting to web services. Trying to connect C&#43;&#43; applications to the cloud is difficult. The C&#43;&#43; standard library doesn't contain anything for networking (yet), and with the proliferation of devices, being able to do so in a cross platform manner is even more appealing. Often requiring use of multiple different styled, and potentially low level, libraries where asynchrony wasn't designed from the start. Or by building your own abstract layers over platform and operating system APIs, all of which distract from focusing on the core logic of your application.<br><br>The C&#43;&#43; REST SDK makes connecting to services easier by creating APIs focused on simplicity and asynchrony, built using tasks from the Parallel Patterns Library. This is done by putting together a series of cross platform libraries for working with HTTP, WebSockets, JSON, URIs, and OAuth. In many cases building on top of other popular open source libraries like Boost, OpenSSL, and WebSocket&#43;&#43;. This talk will take a practical approach looking at what is involved in connecting to some of the common popular services from C&#43;&#43;, using the C&#43;&#43; REST SDK and other libraries. Several tutorial style example and demos will be done using C&#43;&#43; code that runs on all the major platforms.<br>--<br>Steve Gates is a senior engineer on the Visual C&#43;&#43; team at Microsoft. Joining Microsoft in 2007, he's worked on various runtimes and libraries for parallel and asynchronous programming, including the Parallel Patterns Library. For the past couple of years he's been focusing on improving the experience in C&#43;&#43; for connecting to services. Specifically working on the C&#43;&#43; Rest SDK (Casablanca) open source project. Outside of work Steve's interests include growing vegetables, food preservation, and eating great food.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7f7c562ba76b4764823ea3e101583508">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Using-C-P-P-to-Connect-to-Web-Services</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Using-C-P-P-to-Connect-to-Web-Services</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Many languages have great support for connecting to web services. Trying to connect C&amp;#43;&amp;#43; applications to the cloud is difficult. The C&amp;#43;&amp;#43; standard library doesn&#39;t contain anything for networking (yet), and with the proliferation of devices, being able to do so in a cross platform manner is even more appealing. Often requiring use of multiple different styled, and potentially low level, libraries where asynchrony wasn&#39;t designed from the start. Or by building your own abstract layers over platform and operating system APIs, all of which distract from focusing on the core logic of your application.The C&amp;#43;&amp;#43; REST SDK makes connecting to services easier by creating APIs focused on simplicity and asynchrony, built using tasks from the Parallel Patterns Library. This is done by putting together a series of cross platform libraries for working with HTTP, WebSockets, JSON, URIs, and OAuth. In many cases building on top of other popular open source libraries like Boost, OpenSSL, and WebSocket&amp;#43;&amp;#43;. This talk will take a practical approach looking at what is involved in connecting to some of the common popular services from C&amp;#43;&amp;#43;, using the C&amp;#43;&amp;#43; REST SDK and other libraries. Several tutorial style example and demos will be done using C&amp;#43;&amp;#43; code that runs on all the major platforms.--Steve Gates is a senior engineer on the Visual C&amp;#43;&amp;#43; team at Microsoft. Joining Microsoft in 2007, he&#39;s worked on various runtimes and libraries for parallel and asynchronous programming, including the Parallel Patterns Library. For the past couple of years he&#39;s been focusing on improving the experience in C&amp;#43;&amp;#43; for connecting to services. Specifically working on the C&amp;#43;&amp;#43; Rest SDK (Casablanca) open source project. Outside of work Steve&#39;s interests include growing vegetables, food preservatio</itunes:summary>
    <itunes:duration>3491</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Using-C-P-P-to-Connect-to-Web-Services</guid>
    <dc:creator>Steve Gates</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_high.mp4" length="719737080" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices.mp3" expression="full" duration="3491" fileSize="55861958" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices.mp4" expression="full" duration="3491" fileSize="101062675" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices.webm" expression="full" duration="3491" fileSize="337879008" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_high.mp4" expression="full" duration="3491" fileSize="719737080" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a48c/a39fe8dd-15bc-4628-bd79-65f9f595a48c/UsingCPPToConnecttoWebServices_mid.mp4" expression="full" duration="3491" fileSize="449496223" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>SQLPP11, An SQL Library Worthy of Modern C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>SQL and C&#43;&#43; are both strongly typed languages. They should play well together. But most C/C&#43;&#43; interfaces to SQL databases are string based. They force the developer to effectively hide the SQL types, names and expression structures from the compiler. This defers the validation of SQL expressions until runtime, i.e. unit tests or even production. And the strings might even be vendor specific, because different databases expect different dialects of SQL in those strings.<br><br>That feels wrong. Modern C&#43;&#43; can do better.<br><br>This talk gives an introduction to sqlpp11, a templated embedded domain specific language for SQL in C&#43;&#43;. It allows you to build type-safe SQL expressions with type-safe results, all of which can be verified at compile time, long before your code enters unit tests or even production.<br><br>In addition to its obvious use with relational databases, sqlpp11 can also serve as an SQL frontend for all kinds of data sources: Since sqlpp11 offers complete SQL expression trees even at compile time, it isn't hard to apply SQL expressions to std::vector or std::map for instance, or streams, or XML, or JSON, you name it. With your help, sqlpp11 could become for C&#43;&#43; what LINQ is for C#.<br>--<br>Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions.<br><br>Since 2008 he has been using SQL in C&#43;&#43;. Being unhappy with the string-based approach of most SQL libraries, he decided to do something about it and developed a type-safe EDSL for SQL in C&#43;&#43;: sqlpp11, see <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/rbock/sqlpp11" href="https://github.com/rbock/sqlpp11" target="_blank" rel="nofollow">https://github.com/rbock/sqlpp11</a><br><br>In his spare time Roland is preparing sqlpp11 to be proposed for boost and possibly also for the C&#43;&#43; standard. He lives and codes in Munich (Germany). C&#43;&#43; is his preferred language, especially since the arrival of C&#43;&#43;11.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:dd47abfd0a234df3b861a3e1014fdf8d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/SQLPP11-An-SQL-Library-Worthy-of-Modern-C</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/SQLPP11-An-SQL-Library-Worthy-of-Modern-C</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--SQL and C&amp;#43;&amp;#43; are both strongly typed languages. They should play well together. But most C/C&amp;#43;&amp;#43; interfaces to SQL databases are string based. They force the developer to effectively hide the SQL types, names and expression structures from the compiler. This defers the validation of SQL expressions until runtime, i.e. unit tests or even production. And the strings might even be vendor specific, because different databases expect different dialects of SQL in those strings.That feels wrong. Modern C&amp;#43;&amp;#43; can do better.This talk gives an introduction to sqlpp11, a templated embedded domain specific language for SQL in C&amp;#43;&amp;#43;. It allows you to build type-safe SQL expressions with type-safe results, all of which can be verified at compile time, long before your code enters unit tests or even production.In addition to its obvious use with relational databases, sqlpp11 can also serve as an SQL frontend for all kinds of data sources: Since sqlpp11 offers complete SQL expression trees even at compile time, it isn&#39;t hard to apply SQL expressions to std::vector or std::map for instance, or streams, or XML, or JSON, you name it. With your help, sqlpp11 could become for C&amp;#43;&amp;#43; what LINQ is for C#.--Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions.Since 2008 he has been using SQL in C&amp;#43;&amp;#43;. Being unhappy with the string-based approach of most SQL libraries, he decided to do something about it and developed a type-safe EDSL for SQL in C&amp;#43;&amp;#43;: sqlpp11, see https://github.com/rbock/sqlpp11In his spare time Roland is preparing sqlpp11 to be proposed for boost and possibly also for the C&amp;#43;&amp;#43; standard. He lives and codes in Munich (</itunes:summary>
    <itunes:duration>3553</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/SQLPP11-An-SQL-Library-Worthy-of-Modern-C</guid>
    <dc:creator>Roland Bock</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_high.mp4" length="638113205" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock.mp3" expression="full" duration="3553" fileSize="56863430" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock.mp4" expression="full" duration="3553" fileSize="102945705" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock.webm" expression="full" duration="3553" fileSize="348038480" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_high.mp4" expression="full" duration="3553" fileSize="638113205" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b77/71795cee-afc7-49c1-9680-d7f630d39b77/SQLPP11Bock_mid.mp4" expression="full" duration="3553" fileSize="408519924" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: C++ Package Manager</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&#43;&#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&#43;&#43; using domain-specific languages (DSL), C&#43;&#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&#43;&#43; ORM system as well as XSD and XSD/e XML Schema to C&#43;&#43; compilers.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5830cd1403f7491c8b03a3e1014ef477">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Package-Manager</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Package-Manager</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&amp;#43;&amp;#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&amp;#43;&amp;#43; using domain-specific languages (DSL), C&amp;#43;&amp;#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&amp;#43;&amp;#43; ORM system as well as XSD and XSD/e XML Schema to C&amp;#43;&amp;#43; compilers.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>566</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Package-Manager</guid>
    <dc:creator>Boris Kolpackov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_high.mp4" length="148753559" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager.mp3" expression="full" duration="566" fileSize="9070790" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager.mp4" expression="full" duration="566" fileSize="16422666" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager.webm" expression="full" duration="566" fileSize="49945494" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_high.mp4" expression="full" duration="566" fileSize="148753559" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3119/0809a01e-7734-41e6-ad79-56cbb37f3119/LightningTalksCPPOackageManager_mid.mp4" expression="full" duration="566" fileSize="82172077" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Convergent Evolution</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>I work on Microsoft's C&#43;&#43; language conformance efforts and IntelliSense in Visual Studio. | I am also interested in type theory and language design.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f40f44393a2744ca8c39a3e1014e7fd9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Convergent-Evolution</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Convergent-Evolution</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--I work on Microsoft&#39;s C&amp;#43;&amp;#43; language conformance efforts and IntelliSense in Visual Studio. | I am also interested in type theory and language design.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>481</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Convergent-Evolution</guid>
    <dc:creator>Karl Niu</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_high.mp4" length="129734607" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution.mp3" expression="full" duration="481" fileSize="7699910" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution.mp4" expression="full" duration="481" fileSize="17148434" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution.webm" expression="full" duration="481" fileSize="55106269" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_high.mp4" expression="full" duration="481" fileSize="129734607" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/caca/cdca4d4b-f543-4841-a9f6-5575a41ccaca/LightningTalksConvergentEvolution_mid.mp4" expression="full" duration="481" fileSize="75269010" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: C++ Hardware Register Access</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Ken Smith, Production Engineer, Facebook<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e311d9f06e834e83b825a3e1014d9b9b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Hardware-Register-Access</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Hardware-Register-Access</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Ken Smith, Production Engineer, Facebook--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>431</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-C-P-P-Hardware-Register-Access</guid>
    <dc:creator>Ken Smith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_high.mp4" length="87394832" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister.mp3" expression="full" duration="431" fileSize="6899654" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister.mp4" expression="full" duration="431" fileSize="11413589" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister.webm" expression="full" duration="431" fileSize="32588412" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_high.mp4" expression="full" duration="431" fileSize="87394832" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/732a/5b5229a5-1668-4c3d-b097-a630944e732a/LightningTalksCPPHardwareRegister_mid.mp4" expression="full" duration="431" fileSize="47652813" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: My Four Year Bug</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>I primarily develop with MFC on applications that perform financial simulations. I have been learning AMP as of late, having started with CUDA about five years ago. I am really excited about what AMP could do since it allows a single interface to various hardware types. In addition I am learning more about writing apps using WPF for Windows 8 and Windows Phone 8. For hobbies I enjoy working with microcontrollers interfaced to the real world. Both small robotics and automotive applications.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5a6c8ea859b741539432a3e1014bc0f4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-My-Four-Year-Bug</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-My-Four-Year-Bug</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--I primarily develop with MFC on applications that perform financial simulations. I have been learning AMP as of late, having started with CUDA about five years ago. I am really excited about what AMP could do since it allows a single interface to various hardware types. In addition I am learning more about writing apps using WPF for Windows 8 and Windows Phone 8. For hobbies I enjoy working with microcontrollers interfaced to the real world. Both small robotics and automotive applications.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>306</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-My-Four-Year-Bug</guid>
    <dc:creator>Kevin Carpenter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_high.mp4" length="50363464" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug.mp3" expression="full" duration="306" fileSize="4908998" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug.mp4" expression="full" duration="306" fileSize="7607285" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug.webm" expression="full" duration="306" fileSize="21561953" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_high.mp4" expression="full" duration="306" fileSize="50363464" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5db2/3a33f823-fc65-4eed-90f5-5f8a912b5db2/LightningTalksMyFourYearBug_mid.mp4" expression="full" duration="306" fileSize="28934293" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Wishful Thinking</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions.<br><br>Since 2008 he has been using SQL in C&#43;&#43;. Being unhappy with the string-based approach of most SQL libraries, he decided to do something about it and developed a type-safe EDSL for SQL in C&#43;&#43;: sqlpp11, see <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/rbock/sqlpp11" href="https://github.com/rbock/sqlpp11" target="_blank" rel="nofollow">https://github.com/rbock/sqlpp11</a><br><br>In his spare time Roland is preparing sqlpp11 to be proposed for boost and possibly also for the C&#43;&#43; standard. He lives and codes in Munich (Germany). C&#43;&#43; is his preferred language, especially since the arrival of C&#43;&#43;11.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e2d4db6b842b46ba9548a3e101431f39">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Wishful-Thinking</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Wishful-Thinking</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions.Since 2008 he has been using SQL in C&amp;#43;&amp;#43;. Being unhappy with the string-based approach of most SQL libraries, he decided to do something about it and developed a type-safe EDSL for SQL in C&amp;#43;&amp;#43;: sqlpp11, see https://github.com/rbock/sqlpp11In his spare time Roland is preparing sqlpp11 to be proposed for boost and possibly also for the C&amp;#43;&amp;#43; standard. He lives and codes in Munich (Germany). C&amp;#43;&amp;#43; is his preferred language, especially since the arrival of C&amp;#43;&amp;#43;11.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>306</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Wishful-Thinking</guid>
    <dc:creator>Roland Bock</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_high.mp4" length="57276529" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking.mp3" expression="full" duration="306" fileSize="4898246" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking.mp4" expression="full" duration="306" fileSize="9379482" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking.webm" expression="full" duration="306" fileSize="30244754" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_high.mp4" expression="full" duration="306" fileSize="57276529" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a7/d9ba6520-e7d9-46ae-8f8a-ea615f36b5a7/LightningTalksWishfulThinking_mid.mp4" expression="full" duration="306" fileSize="33398593" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Grill the Committee</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Jon Kalb â¢ Marshall Clow â¢ John Lakos â¢ Chandler Carruth â¢ Herb Sutter â¢ Alisdair Meredith â¢ Howard Hinnant â¢ Michael Wong â¢ Pablo Halpern â¢ Stefanus Du Toit â¢ Stephan T. Lavavej â¢ Walter E. Brown â¢ Nevin Liber â¢ Marshall Clow<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e0582d5d40e64ed18832a3e1012aa92f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Grill-the-Committee</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Grill-the-Committee</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Jon Kalb â¢ Marshall Clow â¢ John Lakos â¢ Chandler Carruth â¢ Herb Sutter â¢ Alisdair Meredith â¢ Howard Hinnant â¢ Michael Wong â¢ Pablo Halpern â¢ Stefanus Du Toit â¢ Stephan T. Lavavej â¢ Walter E. Brown â¢ Nevin Liber â¢ Marshall Clow--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>5346</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Grill-the-Committee</guid>
    <dc:creator>Herb Sutter, Chandler Carruth, Michael Wong, Alisdair Meredith, Pablo Halpern, John Lakos, stefanus Du Toit, Walter E. Brown, Marchall Clow, Howard Hinnant</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_high.mp4" length="3024680398" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee.mp3" expression="full" duration="5346" fileSize="85543238" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee.mp4" expression="full" duration="5346" fileSize="497022260" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee.webm" expression="full" duration="5346" fileSize="758647242" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_high.mp4" expression="full" duration="5346" fileSize="3024680398" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a6e/5cea8588-36d1-46e9-a90f-3deec57a8a6e/GrilltheCommittee_mid.mp4" expression="full" duration="5346" fileSize="1982737578" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Memory Model Meets High-Update-Rate Data Structures </title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Highly performant and scalable techniques such as RCU and hazard pointers have been quite successful in read-mostly situations. However, there do come times when updates are necessary. It would be convenient if there was some general update-side counterpart to these techniques, but sadly there is not yet any such thing. Nevertheless, there are a number of specialized update-side techniques whose performance and scalability rival those of RCU and hazard pointers. This talk will discuss several of them, one of which is a solution to a challenge to the speaker at the 2014 Issaquah C&#43;&#43; standards committee meeting. This talk will also provide an outlook into the future of low-overhead scalable updates.<br>--<br>Paul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware, where his work has earned him a reputation among some as a flaming heretic. Over the past decade, Paul has been an IBM Distinguished Engineer at the IBM Linux Technology Center. Paul maintains the RCU implementation within the Linux kernel, where the variety of workloads present highly entertaining performance, scalability, real-time response, and energy-efficiency challenges. He is also the editor of &quot;Is Parallel Programming Hard, And, If So, What Can You Do About It?&quot; Prior to that, he worked on the DYNIX/ptx kernel at Sequent, and prior to that on packet-radio and Internet protocols (but long before it was polite to mention Internet at cocktail parties), system administration, business applications, and real-time systems. His hobbies include what passes for running at his age along with the usual house-wife-and-kids habit.Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.rdrop.com/users/paulmck" href="http://www.rdrop.com/users/paulmck" target="_blank" rel="nofollow">http://www.rdrop.com/users/paulmck</a><br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d4e1e787b4cb4e12a51ca3e10129809d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Memory-Model-Meets-High-Update-Rate-Data-Structures</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Memory-Model-Meets-High-Update-Rate-Data-Structures</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Highly performant and scalable techniques such as RCU and hazard pointers have been quite successful in read-mostly situations. However, there do come times when updates are necessary. It would be convenient if there was some general update-side counterpart to these techniques, but sadly there is not yet any such thing. Nevertheless, there are a number of specialized update-side techniques whose performance and scalability rival those of RCU and hazard pointers. This talk will discuss several of them, one of which is a solution to a challenge to the speaker at the 2014 Issaquah C&amp;#43;&amp;#43; standards committee meeting. This talk will also provide an outlook into the future of low-overhead scalable updates.--Paul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware, where his work has earned him a reputation among some as a flaming heretic. Over the past decade, Paul has been an IBM Distinguished Engineer at the IBM Linux Technology Center. Paul maintains the RCU implementation within the Linux kernel, where the variety of workloads present highly entertaining performance, scalability, real-time response, and energy-efficiency challenges. He is also the editor of &amp;quot;Is Parallel Programming Hard, And, If So, What Can You Do About It?&amp;quot; Prior to that, he worked on the DYNIX/ptx kernel at Sequent, and prior to that on packet-radio and Internet protocols (but long before it was polite to mention Internet at cocktail parties), system administration, business applications, and real-time systems. His hobbies include what passes for running at his age along with the usual house-wife-and-kids habit.Website: http://www.rdrop.com/users/paulmck--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4403</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Memory-Model-Meets-High-Update-Rate-Data-Structures</guid>
    <dc:creator>Paul E. McKenney</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_high.mp4" length="1529992020" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney.mp3" expression="full" duration="4403" fileSize="70465094" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney.mp4" expression="full" duration="4403" fileSize="153099160" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney.webm" expression="full" duration="4403" fileSize="555029279" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_high.mp4" expression="full" duration="4403" fileSize="1529992020" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e727/edbd2be0-2d33-4ee8-b256-dc4ab283e727/CPPMemoryModelMcKenney_mid.mp4" expression="full" duration="4403" fileSize="879334272" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Pragmatic Unit Testing in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Successful adoption of unit testing goes beyond picking a framework: The effectiveness of unit testing is dependent on run-time analysis, static analysis, and other tools to make up the &quot;iron triangle&quot; necessary to get profitable increases in feature velocity and MTBF in the field. We'll cover where to start in a legacy codebase get the most ROI on unit testing effort, the top 5 legacy design knots and refactoring steps to loosen those knots, and how to write tests that are easy to read *and* maintain. Intermediate knowledge of linkers and preprocessors are highly recommended.<br>--<br>Matt's first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &quot;the making of the making of&quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d09c7274c0e540fb9d25a3e101286fa3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Pragmatic-Unit-Testing-in-C</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Pragmatic-Unit-Testing-in-C</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Successful adoption of unit testing goes beyond picking a framework: The effectiveness of unit testing is dependent on run-time analysis, static analysis, and other tools to make up the &amp;quot;iron triangle&amp;quot; necessary to get profitable increases in feature velocity and MTBF in the field. We&#39;ll cover where to start in a legacy codebase get the most ROI on unit testing effort, the top 5 legacy design knots and refactoring steps to loosen those knots, and how to write tests that are easy to read *and* maintain. Intermediate knowledge of linkers and preprocessors are highly recommended.--Matt&#39;s first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &amp;quot;the making of the making of&amp;quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4029</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Pragmatic-Unit-Testing-in-C</guid>
    <dc:creator>Matt Hargett</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_high.mp4" length="1387766161" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP.mp3" expression="full" duration="4029" fileSize="64480838" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP.mp4" expression="full" duration="4029" fileSize="155150751" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP.webm" expression="full" duration="4029" fileSize="496250228" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_high.mp4" expression="full" duration="4029" fileSize="1387766161" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3521/8ee7cb28-c32d-4561-86ff-a49782f53521/PragmaticUnitTestinginCPP_mid.mp4" expression="full" duration="4029" fileSize="784071857" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Costless Software Abstractions for Parallel Architectures </title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Performing large, intensive or non-trivial computing on array like data structures is one of the most common task in scientific computing, video game development and other fields. This matter of fact is backed up by the large number of tools, languages and libraries to perform such tasks. If we restrict ourselves to C&#43;&#43; based solutions, more than a dozen such libraries exists from BLAS/LAPACK C&#43;&#43; binding to template meta-programming based Blitz&#43;&#43; or Eigen. If all of these libraries provide good performance or good abstraction, none of them seems to fit the need of so many different user types.<br><br>Moreover, as parallel system complexity grows, the need to maintain all those components quickly become unwieldy. This talk explores various software design techniques - like Generative Programming, MetaProgramming and Generic Programming - and their application to the implementation of a parallel computing librariy in such a way that:<br><br>- abstraction and expressiveness are maximized - cost over efficiency is minimized<br><br>We'll skim over various applications and see how they can benefit from such tools. We will conclude by discussing what lessons were learnt from this kind of implementation and how those lessons can translate into new directions for the language itself.<br>--<br>Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d'Informatique in Orsay, France. His researches focus on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are : exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. <br><br>He is also NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. <br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:78622f9d303540d7bf3ba3e10106903b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Costless-Software-Abstractions-for-Parallel-Architectures</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Costless-Software-Abstractions-for-Parallel-Architectures</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Performing large, intensive or non-trivial computing on array like data structures is one of the most common task in scientific computing, video game development and other fields. This matter of fact is backed up by the large number of tools, languages and libraries to perform such tasks. If we restrict ourselves to C&amp;#43;&amp;#43; based solutions, more than a dozen such libraries exists from BLAS/LAPACK C&amp;#43;&amp;#43; binding to template meta-programming based Blitz&amp;#43;&amp;#43; or Eigen. If all of these libraries provide good performance or good abstraction, none of them seems to fit the need of so many different user types.Moreover, as parallel system complexity grows, the need to maintain all those components quickly become unwieldy. This talk explores various software design techniques - like Generative Programming, MetaProgramming and Generic Programming - and their application to the implementation of a parallel computing librariy in such a way that:- abstraction and expressiveness are maximized - cost over efficiency is minimizedWe&#39;ll skim over various applications and see how they can benefit from such tools. We will conclude by discussing what lessons were learnt from this kind of implementation and how those lessons can translate into new directions for the language itself.--Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d&#39;Informatique in Orsay, France. His researches focus on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are : exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range f</itunes:summary>
    <itunes:duration>4898</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Costless-Software-Abstractions-for-Parallel-Architectures</guid>
    <dc:creator>Joel Falcou</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_high.mp4" length="1271428903" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou.mp3" expression="full" duration="4898" fileSize="78385094" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou.mp4" expression="full" duration="4898" fileSize="163032187" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou.webm" expression="full" duration="4898" fileSize="486928603" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_high.mp4" expression="full" duration="4898" fileSize="1271428903" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9266/ca6810ad-c742-43f7-ba0c-692289279266/CostlessSoftwareAbstractionsFalcou_mid.mp4" expression="full" duration="4898" fileSize="728930328" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Hourglass Interfaces for C++ APIs</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>C&#43;&#43; provides a much richer set of abstractions than C. Classes, templates, overloading, and other core C&#43;&#43; features can be leveraged for more readable syntax, better compile time typechecking, more open ended genericity and improved modularity. On the flip side, C89 still boasts some advantages over C&#43;&#43;, especially when viewed through a pragmatic lens. C ABIs on many platforms have been stable for decades, practically every language supports binding to C code through foreign function interfaces, and including nearly any C89 header has a negligible effect on compile time on modern computers.<br><br>The Hourglass pattern provides the best of both worlds. It's a way to structure libraries that retains the pragmatic benefits of C89 while still providing C&#43;&#43;'s richness both at an interface and implementation level. It makes providing bindings from other languages to C&#43;&#43; libraries easier, and insulates from ABI issues such as incompatibilities between debug and release variants of runtimes. This talk provides an overview of the pattern, teaches practical techniques for its implementation using C&#43;&#43;98 and C&#43;&#43;11, and shares experience from using the pattern in real world projects.<br>--<br>Stefanus Du Toit is a Software Lead at Thalmic Labs, where he enables amazing gestural experiences using the Myo armband. Stefanus previously worked as a Software Architect and Software Development Manager at Intel Corporation, and co-founded RapidMind (acquired by Intel), a startup that targeted GPUs and other processors using standard C&#43;&#43;. Stefanus served on the C&#43;&#43; standards committee as Project Editor for C&#43;&#43;14 and as Committee Secretary. He lives in Kitchener-Waterloo, Ontario, Canada and holds a BMath CS from the University of Waterloo.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f4fb5974f25b4ab88b99a3e10105eae3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Hourglass-Interfaces-for-C-APIs</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Hourglass-Interfaces-for-C-APIs</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43; provides a much richer set of abstractions than C. Classes, templates, overloading, and other core C&amp;#43;&amp;#43; features can be leveraged for more readable syntax, better compile time typechecking, more open ended genericity and improved modularity. On the flip side, C89 still boasts some advantages over C&amp;#43;&amp;#43;, especially when viewed through a pragmatic lens. C ABIs on many platforms have been stable for decades, practically every language supports binding to C code through foreign function interfaces, and including nearly any C89 header has a negligible effect on compile time on modern computers.The Hourglass pattern provides the best of both worlds. It&#39;s a way to structure libraries that retains the pragmatic benefits of C89 while still providing C&amp;#43;&amp;#43;&#39;s richness both at an interface and implementation level. It makes providing bindings from other languages to C&amp;#43;&amp;#43; libraries easier, and insulates from ABI issues such as incompatibilities between debug and release variants of runtimes. This talk provides an overview of the pattern, teaches practical techniques for its implementation using C&amp;#43;&amp;#43;98 and C&amp;#43;&amp;#43;11, and shares experience from using the pattern in real world projects.--Stefanus Du Toit is a Software Lead at Thalmic Labs, where he enables amazing gestural experiences using the Myo armband. Stefanus previously worked as a Software Architect and Software Development Manager at Intel Corporation, and co-founded RapidMind (acquired by Intel), a startup that targeted GPUs and other processors using standard C&amp;#43;&amp;#43;. Stefanus served on the C&amp;#43;&amp;#43; standards committee as Project Editor for C&amp;#43;&amp;#43;14 and as Committee Secretary. He lives in Kitchener-Waterloo, Ontario, Canada and holds a BMath CS from the University of Waterloo.--Videos Filmed &amp;amp; Edited by Bash Film</itunes:summary>
    <itunes:duration>3971</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Hourglass-Interfaces-for-C-APIs</guid>
    <dc:creator>stefanus Du Toit</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_high.mp4" length="1298060365" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs.mp3" expression="full" duration="3971" fileSize="63551942" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs.mp4" expression="full" duration="3971" fileSize="116344855" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs.webm" expression="full" duration="3971" fileSize="405135640" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_high.mp4" expression="full" duration="3971" fileSize="1298060365" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cb1/5ae22e0e-1601-46a0-8ae1-651f58be0cb1/HourglassInterfacesforCPPAPIs_mid.mp4" expression="full" duration="3971" fileSize="736131441" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Test-Driven Development: Unit Testing, Coed Assistance and Refractoring</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>&quot;C&#43;&#43; Test-driven Development: Unit Testing, Code Assistance and Refactoring&quot;<br>--<br>Unit Testing and TDD, if applied correctly, lead to high quality and simple code. If done by hand, both often require writing some boiler-plate code and can be slow and cumbersome. Especially refactoring without good tool support can be a burden. Java and C# developers are used to have good tool support for these tasks to be effective. Many C&#43;&#43; developers often aren't even aware of the need for the practices, because without tool support and training of the goals, they are hard to discover.<br><br>This talk introduces C&#43;&#43; Unit Testing, Test-driven Development, and Refactoring and demonstrates the tooling available for Eclipse CDT for free on www.cevelop.com that was inspired and implemented by the author and his team.<br><br>For example, when phrasing a unit test to use a to-be-defined class, the class is generated automatically from its name used as a type. Another tool feature is simplifying a function, by extracting a sub-function and placing a call in its place.<br>--<br>rof. Peter Sommerlad is head of IFS Institute for Software at FHO HSR Rapperswil. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&#43;&#43; standardization committee, ACCU, ACM, SI and president of SWEN.Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://wiki.hsr.ch/PeterSommerladTwitter" href="http://wiki.hsr.ch/PeterSommerladTwitter" target="_blank" rel="nofollow">http://wiki.hsr.ch/PeterSommerladTwitter</a> handle: @PeterSommerlad<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6cf407ef60704d96ada2a3e10104671a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Test-Driven-Development-Unit-Testing-Coed-Assistance-and-Refractoring</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Test-Driven-Development-Unit-Testing-Coed-Assistance-and-Refractoring</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--&amp;quot;C&amp;#43;&amp;#43; Test-driven Development: Unit Testing, Code Assistance and Refactoring&amp;quot;--Unit Testing and TDD, if applied correctly, lead to high quality and simple code. If done by hand, both often require writing some boiler-plate code and can be slow and cumbersome. Especially refactoring without good tool support can be a burden. Java and C# developers are used to have good tool support for these tasks to be effective. Many C&amp;#43;&amp;#43; developers often aren&#39;t even aware of the need for the practices, because without tool support and training of the goals, they are hard to discover.This talk introduces C&amp;#43;&amp;#43; Unit Testing, Test-driven Development, and Refactoring and demonstrates the tooling available for Eclipse CDT for free on www.cevelop.com that was inspired and implemented by the author and his team.For example, when phrasing a unit test to use a to-be-defined class, the class is generated automatically from its name used as a type. Another tool feature is simplifying a function, by extracting a sub-function and placing a call in its place.--rof. Peter Sommerlad is head of IFS Institute for Software at FHO HSR Rapperswil. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&amp;#43;&amp;#43; standardization committee, ACCU, ACM, SI and president of SWEN.Website: http://wiki.hsr.ch/PeterSommerladTwitter handle: @PeterSommerlad--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3598</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-Test-Driven-Development-Unit-Testing-Coed-Assistance-and-Refractoring</guid>
    <dc:creator>Peter Sommerlad</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_high.mp4" length="832041080" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting.mp3" expression="full" duration="3598" fileSize="57571526" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting.mp4" expression="full" duration="3598" fileSize="118933712" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting.webm" expression="full" duration="3598" fileSize="438695535" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_high.mp4" expression="full" duration="3598" fileSize="832041080" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b5a1/5533d2dc-5132-4867-bd81-272a2bf7b5a1/CPPTestDrivenDevelopmentUnitTesting_mid.mp4" expression="full" duration="3598" fileSize="529735446" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Making Allocators Work, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Memory is an important property for every object, as whatever resources it manages, it must occupy some memory. THe ability to customize memory allocation is important for every C&#43;&#43; program that cares about performance, debug ability and support.<br><br>The original C&#43;&#43; standard supported an allocator parameter for every container, yet this feature was widely derided or ignored, as it was underspecified to the point it could not portably be used. C&#43;&#43;11 makes significant changes to the allocator model, that simply its use while making it more powerful.<br><br>The Library Fundamentals TS goes further, allowing allocators' type to be supplied at runtime, rather than compile type, using classic object oriented polymorphism - yet building on the infrastructure laid down in C&#43;&#43;11.<br><br>This material should be of interest to both library authors and consumers, although clearly there are more details for the implementers to absorb. It also includes an interesting case study in C&#43;&#43;11 compile time reflection, as required to implement the new 'allocator_traits' facility.<br>--<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.<br><br>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.<br><br>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6d56d6c8a096483ebd37a3e101038ef7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Memory is an important property for every object, as whatever resources it manages, it must occupy some memory. THe ability to customize memory allocation is important for every C&amp;#43;&amp;#43; program that cares about performance, debug ability and support.The original C&amp;#43;&amp;#43; standard supported an allocator parameter for every container, yet this feature was widely derided or ignored, as it was underspecified to the point it could not portably be used. C&amp;#43;&amp;#43;11 makes significant changes to the allocator model, that simply its use while making it more powerful.The Library Fundamentals TS goes further, allowing allocators&#39; type to be supplied at runtime, rather than compile type, using classic object oriented polymorphism - yet building on the infrastructure laid down in C&amp;#43;&amp;#43;11.This material should be of interest to both library authors and consumers, although clearly there are more details for the implementers to absorb. It also includes an interesting case study in C&amp;#43;&amp;#43;11 compile time reflection, as required to implement the new &#39;allocator_traits&#39; facility.--Alisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4085</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-II</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_high.mp4" length="1246750956" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII.mp3" expression="full" duration="4085" fileSize="65370182" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII.mp4" expression="full" duration="4085" fileSize="131082060" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII.webm" expression="full" duration="4085" fileSize="558707336" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_high.mp4" expression="full" duration="4085" fileSize="1246750956" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccff/d05e3344-c4c9-4b0d-9125-563ede24ccff/MakingAllocatorsWorkPartII_mid.mp4" expression="full" duration="4085" fileSize="741367047" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Parallelizing the Standard Algorithms Library</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Until recently, C&#43;&#43; programmers building parallel programs found little support for parallelism in the standard toolbox. That's changing with the technical specification on Extensions for Parallelism in C&#43;&#43;. This talk will explore how programmers can build portable parallel programs from high-level parallel algorithms which can execute on CPU threads, vector units, and even GPUs.<br>--<br>Jared Hoberock is a research scientist at NVIDIA where he develops the Thrust parallel algorithms library and edits the Technical Specification on Extensions for Parallelism for C&#43;&#43;.Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://github.com/jaredhoberock" href="http://github.com/jaredhoberock" target="_blank" rel="nofollow">http://github.com/jaredhoberock</a><br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7bea891d0d5d4d1496eda3e1000a920a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Parallelizing-the-Standard-Algorithms-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Parallelizing-the-Standard-Algorithms-Library</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Until recently, C&amp;#43;&amp;#43; programmers building parallel programs found little support for parallelism in the standard toolbox. That&#39;s changing with the technical specification on Extensions for Parallelism in C&amp;#43;&amp;#43;. This talk will explore how programmers can build portable parallel programs from high-level parallel algorithms which can execute on CPU threads, vector units, and even GPUs.--Jared Hoberock is a research scientist at NVIDIA where he develops the Thrust parallel algorithms library and edits the Technical Specification on Extensions for Parallelism for C&amp;#43;&amp;#43;.Website: http://github.com/jaredhoberock--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2419</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Parallelizing-the-Standard-Algorithms-Library</guid>
    <dc:creator>Jared Hoberock</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_high.mp4" length="684660873" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary.mp3" expression="full" duration="2419" fileSize="38721350" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary.mp4" expression="full" duration="2419" fileSize="72868603" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary.webm" expression="full" duration="2419" fileSize="231997758" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_high.mp4" expression="full" duration="2419" fileSize="684660873" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f86c/84598f4e-ce8d-4912-b1d3-91e839d2f86c/ParallelizingtheStandardAlgorithmsLibrary_mid.mp4" expression="full" duration="2419" fileSize="394627411" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Tme Implementation of Value Types</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Predefined value types are central to C&#43;&#43; efficiency and robustness. More importantly, C&#43;&#43; provides mechanisms that enable programmers to create high-quality value types, programmers are not limited to the small predefined value types. However, implementing a high-quality type requires attention to several problems, among them portability, representation, efficient copying, efficient parameters, aliasing, constant initialization, and constant expressions. We present the issues and several approaches to implementing high-quality value types.<br>--<br>Dr. Lawrence Crowl has expertise in programming languages, compilers, and parallel programming. He has been mixing threads with C&#43;&#43; for twenty-five years and is a major contributor to C&#43;&#43;11. His goal is to achieve both high quality and high performance programs.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ab3efa652f344b409e70a3e10009e3ea">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Tme-Implementation-of-Value-Types</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Tme-Implementation-of-Value-Types</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Predefined value types are central to C&amp;#43;&amp;#43; efficiency and robustness. More importantly, C&amp;#43;&amp;#43; provides mechanisms that enable programmers to create high-quality value types, programmers are not limited to the small predefined value types. However, implementing a high-quality type requires attention to several problems, among them portability, representation, efficient copying, efficient parameters, aliasing, constant initialization, and constant expressions. We present the issues and several approaches to implementing high-quality value types.--Dr. Lawrence Crowl has expertise in programming languages, compilers, and parallel programming. He has been mixing threads with C&amp;#43;&amp;#43; for twenty-five years and is a major contributor to C&amp;#43;&amp;#43;11. His goal is to achieve both high quality and high performance programs.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3587</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Tme-Implementation-of-Value-Types</guid>
    <dc:creator>Lawrence Crowl</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_high.mp4" length="1544489040" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes.mp3" expression="full" duration="3587" fileSize="57397574" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes.mp4" expression="full" duration="3587" fileSize="134467128" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes.webm" expression="full" duration="3587" fileSize="461062305" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_high.mp4" expression="full" duration="3587" fileSize="1544489040" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d530/9c5febbd-7f38-40dd-83f4-fa3e745ed530/TheImplementationofValueTypes_mid.mp4" expression="full" duration="3587" fileSize="856042642" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Multiplatform C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>C&#43;&#43; is a multiplatform language, yet many difficulties arise when you want the same code to compile properly and function identically on different platforms. If you put aside the obvious system programming related obstacles, and the differences you might have between compilers (especially when it comes to supporting C&#43;&#43;11 and C&#43;&#43;14), you come to the surprising conclusion that what is truly hard is all the &quot;little things&quot; you didn't anticipate.<br><br>This talk will be about our experience with our own software, quasardb, that runs every day on three OS (FreeBSD, Linux and Windows), is built with three compilers (clang, gcc and msvc) and supports two architectures (IA32 and AMD64).<br><br>How to build natively the same software on Windows and Linux, provided that they have radically different tool chains? How to work around the subtle, but existing differences between Linux and FreeBSD? How do you solve cross-tools, cross-platform file editing problems? How to prevent your maintenance costs from increasing dramatically?<br>--<br>Edouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France.Website: <a class="yt-uix-redirect-link" dir="ltr" title="https://blogea.bureau14.fr/" href="https://blogea.bureau14.fr/" target="_blank" rel="nofollow">https://blogea.bureau14.fr/</a> <a class="yt-uix-redirect-link" dir="ltr" title="http://twitter.com/edouarda14" href="http://twitter.com/edouarda14" target="_blank" rel="nofollow">http://twitter.com/edouarda14</a><br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7be3dd6e315c4411970ea3e10009069b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Multiplatform-C-P-P</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Multiplatform-C-P-P</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43; is a multiplatform language, yet many difficulties arise when you want the same code to compile properly and function identically on different platforms. If you put aside the obvious system programming related obstacles, and the differences you might have between compilers (especially when it comes to supporting C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14), you come to the surprising conclusion that what is truly hard is all the &amp;quot;little things&amp;quot; you didn&#39;t anticipate.This talk will be about our experience with our own software, quasardb, that runs every day on three OS (FreeBSD, Linux and Windows), is built with three compilers (clang, gcc and msvc) and supports two architectures (IA32 and AMD64).How to build natively the same software on Windows and Linux, provided that they have radically different tool chains? How to work around the subtle, but existing differences between Linux and FreeBSD? How do you solve cross-tools, cross-platform file editing problems? How to prevent your maintenance costs from increasing dramatically?--Edouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France.Website: https://blogea.bureau14.fr/ http://twitter.com/edouarda14--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2892</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Multiplatform-C-P-P</guid>
    <dc:creator>Edourad Alligand</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_high.mp4" length="758470369" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP.mp3" expression="full" duration="2892" fileSize="46276550" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP.mp4" expression="full" duration="2892" fileSize="95905233" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP.webm" expression="full" duration="2892" fileSize="302923809" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_high.mp4" expression="full" duration="2892" fileSize="758470369" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2bf8/35caded6-d907-4350-827c-e6978deb2bf8/MulitplatformCPP_mid.mp4" expression="full" duration="2892" fileSize="442073515" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boost.Asio and Boost.Serialization: Designs for Object Transmission, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Network programming in C&#43;&#43; frequently requires programmers to find a way to express C&#43;&#43; objects as a sequence of bytes which can be transmitted and reconstructed on another network endpoint. In the case of simpler objects (such as most PODs), object serialization is trivial to perform.<br><br>For more complex C&#43;&#43; constructs (polymorphic objects, etc), the approach to serialization is more challenging. This talk will discuss how two powerful Boost libraries, Asio and Serialization, can be used to craft C&#43;&#43; networking code that can handle a vast array of uses cases. A prototype for a message passing framework will be developed throughout the talk.<br><br>Programmers familiar with or interested in network programming (but perhaps unfamiliar with Boost.Asio, Boost.Serialization or both) are the intended audience. No prior knowledge of Boost.Asio and Boost.Serialization will be assumed, and alternatives to both libraries will be discussed.<br>--<br>Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f777e9563e26454f9a30a3e0018b13b8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-for-Object-Transmission-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-for-Object-Transmission-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Network programming in C&amp;#43;&amp;#43; frequently requires programmers to find a way to express C&amp;#43;&amp;#43; objects as a sequence of bytes which can be transmitted and reconstructed on another network endpoint. In the case of simpler objects (such as most PODs), object serialization is trivial to perform.For more complex C&amp;#43;&amp;#43; constructs (polymorphic objects, etc), the approach to serialization is more challenging. This talk will discuss how two powerful Boost libraries, Asio and Serialization, can be used to craft C&amp;#43;&amp;#43; networking code that can handle a vast array of uses cases. A prototype for a message passing framework will be developed throughout the talk.Programmers familiar with or interested in network programming (but perhaps unfamiliar with Boost.Asio, Boost.Serialization or both) are the intended audience. No prior knowledge of Boost.Asio and Boost.Serialization will be assumed, and alternatives to both libraries will be discussed.--Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2002</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-for-Object-Transmission-Part-II</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_high.mp4" length="448887101" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII.mp3" expression="full" duration="2002" fileSize="32048966" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII.mp4" expression="full" duration="2002" fileSize="56633725" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII.webm" expression="full" duration="2002" fileSize="189933032" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_high.mp4" expression="full" duration="2002" fileSize="448887101" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0c38/0a949241-004e-43da-9546-2c520f680c38/BoostAsioandBoostSerializationPartII_mid.mp4" expression="full" duration="2002" fileSize="260913011" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Making Allocators Work, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Memory is an important property for every object, as whatever resources it manages, it must occupy some memory. THe ability to customize memory allocation is important for every C&#43;&#43; program that cares about performance, debug ability and support.<br><br>The original C&#43;&#43; standard supported an allocator parameter for every container, yet this feature was widely derided or ignored, as it was underspecified to the point it could not portably be used. C&#43;&#43;11 makes significant changes to the allocator model, that simply its use while making it more powerful.<br><br>The Library Fundamentals TS goes further, allowing allocators' type to be supplied at runtime, rather than compile type, using classic object oriented polymorphism - yet building on the infrastructure laid down in C&#43;&#43;11.<br><br>This material should be of interest to both library authors and consumers, although clearly there are more details for the implementers to absorb. It also includes an interesting case study in C&#43;&#43;11 compile time reflection, as required to implement the new 'allocator_traits' facility.<br>--<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.<br><br>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.<br><br>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0f9ca22c889647fa9c95a3e00188e180">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Memory is an important property for every object, as whatever resources it manages, it must occupy some memory. THe ability to customize memory allocation is important for every C&amp;#43;&amp;#43; program that cares about performance, debug ability and support.The original C&amp;#43;&amp;#43; standard supported an allocator parameter for every container, yet this feature was widely derided or ignored, as it was underspecified to the point it could not portably be used. C&amp;#43;&amp;#43;11 makes significant changes to the allocator model, that simply its use while making it more powerful.The Library Fundamentals TS goes further, allowing allocators&#39; type to be supplied at runtime, rather than compile type, using classic object oriented polymorphism - yet building on the infrastructure laid down in C&amp;#43;&amp;#43;11.This material should be of interest to both library authors and consumers, although clearly there are more details for the implementers to absorb. It also includes an interesting case study in C&amp;#43;&amp;#43;11 compile time reflection, as required to implement the new &#39;allocator_traits&#39; facility.--Alisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2954</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-Allocators-Work-Part-I</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_high.mp4" length="1260686538" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI.mp3" expression="full" duration="2954" fileSize="47269190" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI.mp4" expression="full" duration="2954" fileSize="122251006" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI.webm" expression="full" duration="2954" fileSize="378718008" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_high.mp4" expression="full" duration="2954" fileSize="1260686538" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7ff2/8aad2a27-5b45-45eb-a222-91b36c707ff2/MakingAllocatorsWorkPartI_mid.mp4" expression="full" duration="2954" fileSize="735642571" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Making C++ Code Beautiful </title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Ask a non-C&#43;&#43; developer what they think of C&#43;&#43; and they'll give the language plenty of compliments: powerful, fast, flexible, and &quot;the language for smart people&quot;. But along with that you are likely to hear ugly, complicated, hard to read, and &quot;the language for smart people&quot;. Is it possible to write beautiful C&#43;&#43;? Not arcanely elegant or wickedly compact, but readable, clear, expressive - beautiful! We say it is, and we want to show you how.<br><br>In this session, you'll see how to turn pages of &quot;comic book characters swearing&quot; into code you'll be proud to call your own. By making your code express your intent, using the power of new language and library functionality, and leaving hard-to-read constructs out of your vocabulary, you can give your code a makeover that will stand the test of time.<br>--<br>James McNellis is a senior engineer on the Microsoft Visual C&#43;&#43; team, where he is responsible for the Visual C&#43;&#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&amp;A website and occasionally writes for the Visual C&#43;&#43; Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via <a class="yt-uix-redirect-link" dir="ltr" title="http://www.jamesmcnellis.com" href="http://www.jamesmcnellis.com/" target="_blank" rel="nofollow">http://www.jamesmcnellis.com</a>.<br>--<br>Kate Gregory has been using C&#43;&#43; since before Microsoft had a C&#43;&#43; compiler. She writes, mentors, codes, and leads projects, in both C&#43;&#43; and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C&#43;&#43; MVP, and has written over a dozen books (the most recent on C&#43;&#43; AMP for Microsoft Press) and speaks at conferences and user groups around the world. Kate develops courses on C&#43;&#43;, Visual Studio, and Windows programming for Pluralsight, founded the East of Toronto .NET Users group, and is a member of adjunct faculty at Trent University in Peterborough.Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.gregcons.comTwitter" href="http://www.gregcons.comtwitter/" target="_blank" rel="nofollow">http://www.gregcons.comTwitter</a> handle: @gregcons<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:abfa8a32b13e417cb035a3e001880d62">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-C-P-P-Code-Beautiful</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-C-P-P-Code-Beautiful</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Ask a non-C&amp;#43;&amp;#43; developer what they think of C&amp;#43;&amp;#43; and they&#39;ll give the language plenty of compliments: powerful, fast, flexible, and &amp;quot;the language for smart people&amp;quot;. But along with that you are likely to hear ugly, complicated, hard to read, and &amp;quot;the language for smart people&amp;quot;. Is it possible to write beautiful C&amp;#43;&amp;#43;? Not arcanely elegant or wickedly compact, but readable, clear, expressive - beautiful! We say it is, and we want to show you how.In this session, you&#39;ll see how to turn pages of &amp;quot;comic book characters swearing&amp;quot; into code you&#39;ll be proud to call your own. By making your code express your intent, using the power of new language and library functionality, and leaving hard-to-read constructs out of your vocabulary, you can give your code a makeover that will stand the test of time.--James McNellis is a senior engineer on the Microsoft Visual C&amp;#43;&amp;#43; team, where he is responsible for the Visual C&amp;#43;&amp;#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&amp;amp;A website and occasionally writes for the Visual C&amp;#43;&amp;#43; Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.--Kate Gregory has been using C&amp;#43;&amp;#43; since before Microsoft had a C&amp;#43;&amp;#43; compiler. She writes, mentors, codes, and leads projects, in both C&amp;#43;&amp;#43; and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C&amp;#43;&amp;#43; MVP, and has written over a dozen books (the most </itunes:summary>
    <itunes:duration>3382</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Making-C-P-P-Code-Beautiful</guid>
    <dc:creator>Kate Gregory, James McNellis</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_high.mp4" length="819930865" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful.mp3" expression="full" duration="3382" fileSize="54127814" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful.mp4" expression="full" duration="3382" fileSize="124361928" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful.webm" expression="full" duration="3382" fileSize="352673526" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_high.mp4" expression="full" duration="3382" fileSize="819930865" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7465/9f87b254-695c-454b-a63b-43cac9e37465/MakingCPPCodeBeautiful_mid.mp4" expression="full" duration="3382" fileSize="509341979" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How to Call C Libraries from C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Many libraries used by C&#43;&#43; programs present C-like interfaces that are compatible with C&#43;&#43;, but are not directly compatible with good C&#43;&#43; style. Using these libraries directly is error-prone in many of the ways C&#43;&#43; is designed to avoid. It is better to pass through an interface layer that presents good C&#43;&#43; style on the C&#43;&#43; side.<br><br>But writing such an interface layer is daunting. Completing it may be an enormous task, as are documenting it and maintaining it as the underlying library evolves. To address this problem, I will present a style of writing such interfaces that can be used incrementally as needed, and that reduces documentation cost. I will also present a small library that supports the writing of interface layers in this style.<br>--<br>Lisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&#43;&#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:891bf003243a4dc79912a3e001846f7a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-to-Call-C-Libraries-from-C</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-to-Call-C-Libraries-from-C</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Many libraries used by C&amp;#43;&amp;#43; programs present C-like interfaces that are compatible with C&amp;#43;&amp;#43;, but are not directly compatible with good C&amp;#43;&amp;#43; style. Using these libraries directly is error-prone in many of the ways C&amp;#43;&amp;#43; is designed to avoid. It is better to pass through an interface layer that presents good C&amp;#43;&amp;#43; style on the C&amp;#43;&amp;#43; side.But writing such an interface layer is daunting. Completing it may be an enormous task, as are documenting it and maintaining it as the underlying library evolves. To address this problem, I will present a style of writing such interfaces that can be used incrementally as needed, and that reduces documentation cost. I will also present a small library that supports the writing of interface layers in this style.--Lisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&amp;#43;&amp;#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3570</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-to-Call-C-Libraries-from-C</guid>
    <dc:creator>Lisa Lippincott</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_high.mp4" length="1162368948" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries.mp3" expression="full" duration="3570" fileSize="57136838" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries.mp4" expression="full" duration="3570" fileSize="140045208" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries.webm" expression="full" duration="3570" fileSize="446770223" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_high.mp4" expression="full" duration="3570" fileSize="1162368948" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e3f/14107e96-d72b-48cd-970f-204591ae0e3f/HowToCallCLibraries_mid.mp4" expression="full" duration="3570" fileSize="671580850" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Meta Techniques: Heterogeneous Polymorphism and Fast Prototyping</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>As data driven systems evolve there's an ever growing demand for bringing new functionality into existing systems in an efficient, maintainable and least intrusive manner. When implementing features with different semantics or interfaces, virtual inheritance requires a compromise between design simplicity and performance. This implies a need for new techniques to achieve heterogeneous polymorphism efficiently. With C&#43;&#43;11 and 14, type lists, type maps and variants can now be trivially implemented by the initiated. Facebook moves fast so we quickly adopted the new standards to further explore the capabilities of the type system. This talk demonstrates some meta-programming techniques like reflection and compile-time built structures to achieve heterogeneous polymorphism and fast prototyping.<br>--<br>Marcelo Juchem is a Software Engineer at Facebook, working in stream processing and spam fighting systems. Fascinated by template meta-programming, he sees the C&#43;&#43; compiler as a powerful type juggler and programmable code generator. Such capabilities allow the combinatoric composition of types into efficient abstractions, reducing code duplication and enabling non-library writers to design logical components interaction and semantics rather than deal with low level details.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:57c1548da2f94c8f8b14a3e001838eb5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meta-Techniques-Heterogeneous-Polymorphism-and-Fast-Prototyping</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meta-Techniques-Heterogeneous-Polymorphism-and-Fast-Prototyping</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--As data driven systems evolve there&#39;s an ever growing demand for bringing new functionality into existing systems in an efficient, maintainable and least intrusive manner. When implementing features with different semantics or interfaces, virtual inheritance requires a compromise between design simplicity and performance. This implies a need for new techniques to achieve heterogeneous polymorphism efficiently. With C&amp;#43;&amp;#43;11 and 14, type lists, type maps and variants can now be trivially implemented by the initiated. Facebook moves fast so we quickly adopted the new standards to further explore the capabilities of the type system. This talk demonstrates some meta-programming techniques like reflection and compile-time built structures to achieve heterogeneous polymorphism and fast prototyping.--Marcelo Juchem is a Software Engineer at Facebook, working in stream processing and spam fighting systems. Fascinated by template meta-programming, he sees the C&amp;#43;&amp;#43; compiler as a powerful type juggler and programmable code generator. Such capabilities allow the combinatoric composition of types into efficient abstractions, reducing code duplication and enabling non-library writers to design logical components interaction and semantics rather than deal with low level details.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3754</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meta-Techniques-Heterogeneous-Polymorphism-and-Fast-Prototyping</guid>
    <dc:creator>Marcelo Juchem</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_high.mp4" length="1229063529" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem.mp3" expression="full" duration="3754" fileSize="60066374" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem.mp4" expression="full" duration="3754" fileSize="120322887" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem.webm" expression="full" duration="3754" fileSize="473684731" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_high.mp4" expression="full" duration="3754" fileSize="1229063529" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e8d/7a4a3378-7376-4f16-857b-9c248d365e8d/HeterogeneousPolymorphismJuchem_mid.mp4" expression="full" duration="3754" fileSize="694625646" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boost.Asio and Boost.Serialization: Designs For Object Transmission, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Network programming in C&#43;&#43; frequently requires programmers to find a way to express C&#43;&#43; objects as a sequence of bytes which can be transmitted and reconstructed on another network endpoint. In the case of simpler objects (such as most PODs), object serialization is trivial to perform.<br><br>For more complex C&#43;&#43; constructs (polymorphic objects, etc), the approach to serialization is more challenging. This talk will discuss how two powerful Boost libraries, Asio and Serialization, can be used to craft C&#43;&#43; networking code that can handle a vast array of uses cases. A prototype for a message passing framework will be developed throughout the talk.<br><br>Programmers familiar with or interested in network programming (but perhaps unfamiliar with Boost.Asio, Boost.Serialization or both) are the intended audience. No prior knowledge of Boost.Asio and Boost.Serialization will be assumed, and alternatives to both libraries will be discussed.<br>--<br>Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:98d2ff9867404af8b911a3e00182b10d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-For-Object-Transmission-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-For-Object-Transmission-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Network programming in C&amp;#43;&amp;#43; frequently requires programmers to find a way to express C&amp;#43;&amp;#43; objects as a sequence of bytes which can be transmitted and reconstructed on another network endpoint. In the case of simpler objects (such as most PODs), object serialization is trivial to perform.For more complex C&amp;#43;&amp;#43; constructs (polymorphic objects, etc), the approach to serialization is more challenging. This talk will discuss how two powerful Boost libraries, Asio and Serialization, can be used to craft C&amp;#43;&amp;#43; networking code that can handle a vast array of uses cases. A prototype for a message passing framework will be developed throughout the talk.Programmers familiar with or interested in network programming (but perhaps unfamiliar with Boost.Asio, Boost.Serialization or both) are the intended audience. No prior knowledge of Boost.Asio and Boost.Serialization will be assumed, and alternatives to both libraries will be discussed.--Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3460</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/BoostAsio-and-BoostSerialization-Designs-For-Object-Transmission-Part-I</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_high.mp4" length="1392044425" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI.mp3" expression="full" duration="3460" fileSize="55376582" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI.mp4" expression="full" duration="3460" fileSize="143153489" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI.webm" expression="full" duration="3460" fileSize="465447327" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_high.mp4" expression="full" duration="3460" fileSize="1392044425" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ee01/c80f8e62-6679-4803-923c-73abfa47ee01/DesignForObjectTransmissionPartI_mid.mp4" expression="full" duration="3460" fileSize="834087673" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ On Mars: Incorporating C++ Into Mars Rover Flight Software</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>One of the more challenging aspects of developing flight software (FSW) for NASA's Spirit and Opportunity Mars Exploration Rovers (MER) and Curiosity, the Mars Science Laboratory rover was how to enable them to drive themselves safely through unknown Martian terrain. When the MER mission was approved in the year 2000, JPL researchers had already demonstrated that capability on prototype rovers [1] using software written primarily in C&#43;&#43; on a VxWorks realtime O/S platform with shared memory. So when asked to incorporate that capability into the MER vehicles which also relied on a similar VxWorks realtime O/S, the team concluded it would be safest and most expedient to incorporate the already field-tested C&#43;&#43; software. But that presented a challenge, since at that point all rover FSW development was mandated to be done mainly in the C programming language.<br><br>In this talk we present some of the challenges we faced and solutions we found in deploying C&#43;&#43; onto the Mars Rovers. For example, dynamic allocation was initially precluded, but development of a specialized memory allocator (using the C&#43;&#43; &quot;placement new&quot; operator) enabled us to incorporate it safely into the flight system. We will discuss what aspects of C&#43;&#43; were incorporated, what simulation environments aided development, describe some of the tools used to validate system behavior, and explain how our success using C&#43;&#43; for the implementation of autonomous navigation on MER has influenced future FSW efforts.<br><br>[1] Jeffrey Biesiadecki, Mark W. Maimone, and Jack Morrison., &quot;The Athena SDM Rover: A Testbed for Mars Rover Mobility,&quot; June 2001 iSAIRAS conference proceedings, Montreal, Canada., june 2001.<br>--<br>Mark Maimone is a Navigation and Machine Vision researcher at JPL.Mark designed and developed the autonomous vision and navigation software that lets the MER and MSL Mars Rovers drive themselves safely, and wrote ground software that automated the analysis of Mobility and arm operations on MER.Mark is now a Rover Driver for Curiosity, and he continues to develop and enhance the onboard autonomous vision and navigation software for the rovers.Mark earned his Ph.D. in Computer Science at Carnegie Mellon University in 1996, and completed a postdoc there in 1997 as Navigation and Software Lead for the 1997 Atacama Desert Trek.At JPL since 1997, Mark has also worked on the Long Range Science Rover, Planetary Dexterous Manipulator, and Pioneer Vision System for Chornobyl Inspection projects, delivering 3D vision systems for autonomous robotic operations and mapping.Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://www-robotics.jpl.nasa.gov/people/Mark_Maimone/" href="http://www-robotics.jpl.nasa.gov/people/Mark_Maimone/" target="_blank" rel="nofollow">http://www-robotics.jpl.nasa.gov/peop...</a><br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b134990c9dfd41728cf9a3e0017fcb6b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-On-Mars-Incorporating-C-Into-Mars-Rover-Flight-Software</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-On-Mars-Incorporating-C-Into-Mars-Rover-Flight-Software</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--One of the more challenging aspects of developing flight software (FSW) for NASA&#39;s Spirit and Opportunity Mars Exploration Rovers (MER) and Curiosity, the Mars Science Laboratory rover was how to enable them to drive themselves safely through unknown Martian terrain. When the MER mission was approved in the year 2000, JPL researchers had already demonstrated that capability on prototype rovers [1] using software written primarily in C&amp;#43;&amp;#43; on a VxWorks realtime O/S platform with shared memory. So when asked to incorporate that capability into the MER vehicles which also relied on a similar VxWorks realtime O/S, the team concluded it would be safest and most expedient to incorporate the already field-tested C&amp;#43;&amp;#43; software. But that presented a challenge, since at that point all rover FSW development was mandated to be done mainly in the C programming language.In this talk we present some of the challenges we faced and solutions we found in deploying C&amp;#43;&amp;#43; onto the Mars Rovers. For example, dynamic allocation was initially precluded, but development of a specialized memory allocator (using the C&amp;#43;&amp;#43; &amp;quot;placement new&amp;quot; operator) enabled us to incorporate it safely into the flight system. We will discuss what aspects of C&amp;#43;&amp;#43; were incorporated, what simulation environments aided development, describe some of the tools used to validate system behavior, and explain how our success using C&amp;#43;&amp;#43; for the implementation of autonomous navigation on MER has influenced future FSW efforts.[1] Jeffrey Biesiadecki, Mark W. Maimone, and Jack Morrison., &amp;quot;The Athena SDM Rover: A Testbed for Mars Rover Mobility,&amp;quot; June 2001 iSAIRAS conference proceedings, Montreal, Canada., june 2001.--Mark Maimone is a Navigation and Machine Vision researcher at JPL.Mark designed and developed the autonomou</itunes:summary>
    <itunes:duration>5178</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/C-P-P-On-Mars-Incorporating-C-Into-Mars-Rover-Flight-Software</guid>
    <dc:creator>mark Maimone</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_high.mp4" length="1624641634" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone.mp3" expression="full" duration="5178" fileSize="82852550" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone.mp4" expression="full" duration="5178" fileSize="208588245" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone.webm" expression="full" duration="5178" fileSize="684662498" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_high.mp4" expression="full" duration="5178" fileSize="1624641634" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f16/686cb546-79b9-45a4-b97e-4fb996b19f16/CPPonMarsMaimone_mid.mp4" expression="full" duration="5178" fileSize="993192981" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Philosophy of Google&#39;s C++ Code</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>The Google C&#43;&#43; Style Guide is a fairly popular guide for C&#43;&#43; coding practices, both at Google and externally, but some of its recommendations often seem dated and have created controversy and perceived tension with more modern C&#43;&#43; In this talk we will focus on the core philosophies underlying that guide, ranging from the common (be consistent) to the unusual (leave an explicit trace for the reader), and debunk the idea that Google's C&#43;&#43; is anything less than modern. We'll discuss how these core ideas inform contentious rules like &quot;No non-const references&quot; and &quot;Don't use exceptions,&quot; and how the application of those rules has worked for us in practice, both as developers and reliability engineers (SREs).<br>--<br>Titus Winters has spent the past 3 years working on Google's core C&#43;&#43; libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&#43;&#43; Style Guide.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3b04362db2154819afcca3e00146b277">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Philosophy-of-Googles-C-Code</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Philosophy-of-Googles-C-Code</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--The Google C&amp;#43;&amp;#43; Style Guide is a fairly popular guide for C&amp;#43;&amp;#43; coding practices, both at Google and externally, but some of its recommendations often seem dated and have created controversy and perceived tension with more modern C&amp;#43;&amp;#43; In this talk we will focus on the core philosophies underlying that guide, ranging from the common (be consistent) to the unusual (leave an explicit trace for the reader), and debunk the idea that Google&#39;s C&amp;#43;&amp;#43; is anything less than modern. We&#39;ll discuss how these core ideas inform contentious rules like &amp;quot;No non-const references&amp;quot; and &amp;quot;Don&#39;t use exceptions,&amp;quot; and how the application of those rules has worked for us in practice, both as developers and reliability engineers (SREs).--Titus Winters has spent the past 3 years working on Google&#39;s core C&amp;#43;&amp;#43; libraries. He&#39;s particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&amp;#43;&amp;#43; Style Guide.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3603</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Philosophy-of-Googles-C-Code</guid>
    <dc:creator>Titus Winters</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_high.mp4" length="1462234976" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode.mp3" expression="full" duration="3603" fileSize="57662150" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode.mp4" expression="full" duration="3603" fileSize="158248913" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode.webm" expression="full" duration="3603" fileSize="471579615" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_high.mp4" expression="full" duration="3603" fileSize="1462234976" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bed9/16eb0e44-61ea-4f3b-9ac0-6a61754bbed9/ThePhilosophyofGooglesCPPCode_mid.mp4" expression="full" duration="3603" fileSize="929217588" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Founding C++ User Groups</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Jens and Jon will share their experiences starting and working with local user groups and C&#43;&#43; conferences. They share some history and pointers on what has worked for them.<br><br>If you'd like to start or be active in a local tech group this session will be a good place to start.<br>--<br>Jon has been programming in C&#43;&#43; for over twenty years. During the last two decades he has written C&#43;&#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less wellÂ­âknown companies. He taught C&#43;&#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists.<br><br>Jon is active in the Silicon Valley chapter of the ACCU and programs the C&#43;&#43; track at the Silicon Valley Code Camp.<br>--<br>Jens Weller has worked, since 2007, as a freelancer in C&#43;&#43;, specialising in consulting, training and programming C&#43;&#43;. He started with programming C&#43;&#43; back in 1998. He is an active member of the European C&#43;&#43; community and the founder of the Meeting C&#43;&#43; platform and conference. Jens is an active supporter of C&#43;&#43; user groups and blogs often about C&#43;&#43;.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:170e5aaef6834645a283a3e00145fc67">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Founding-C-P-P-User-Groups</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Founding-C-P-P-User-Groups</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Jens and Jon will share their experiences starting and working with local user groups and C&amp;#43;&amp;#43; conferences. They share some history and pointers on what has worked for them.If you&#39;d like to start or be active in a local tech group this session will be a good place to start.--Jon has been programming in C&amp;#43;&amp;#43; for over twenty years. During the last two decades he has written C&amp;#43;&amp;#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less well&#173;âknown companies. He taught C&amp;#43;&amp;#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists.Jon is active in the Silicon Valley chapter of the ACCU and programs the C&amp;#43;&amp;#43; track at the Silicon Valley Code Camp.--Jens Weller has worked, since 2007, as a freelancer in C&amp;#43;&amp;#43;, specialising in consulting, training and programming C&amp;#43;&amp;#43;. He started with programming C&amp;#43;&amp;#43; back in 1998. He is an active member of the European C&amp;#43;&amp;#43; community and the founder of the Meeting C&amp;#43;&amp;#43; platform and conference. Jens is an active supporter of C&amp;#43;&amp;#43; user groups and blogs often about C&amp;#43;&amp;#43;.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3334</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Founding-C-P-P-User-Groups</guid>
    <dc:creator>Jens Weller, Jon Kalb</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_high.mp4" length="925906252" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller.mp3" expression="full" duration="3334" fileSize="53352134" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller.mp4" expression="full" duration="3334" fileSize="103344524" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller.webm" expression="full" duration="3334" fileSize="365447506" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_high.mp4" expression="full" duration="3334" fileSize="925906252" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/442e/590e6f2e-16d4-4402-8867-53efef3e442e/FoundCPPUserGroupsKalbWeller_mid.mp4" expression="full" duration="3334" fileSize="513513180" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Canonical Class </title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://cppcon.org/" href="http://cppcon.org/" target="_blank" rel="nofollow">http://cppcon.org/</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>It was a simpler time. A period in which every college student and learn-C&#43;&#43;-in-a-weekend duffer could write a class with the assuredness that it would behave as desired when assigned and copied. There was a check list. Complete the checklist, add some domain specific behaviour, bake in the regression oven, and you were done.<br><br>Enter C&#43;&#43;11 with its fancy new use of the delete keyword, additional applications of explicit, rvalue references, and some perfect forwarding. How are you to write a &quot;simple&quot; class? Should you include a swap? What does movable mean and are there expected semantics? When is the noexcept specifier used?<br><br>During this session we will explore the boilerplate of a C&#43;&#43;11 class. The session will touch on rvalue references, move semantics, perfect forwarding, explicit, noexcept, initializer lists, and more as it applies to producing the desired semantics for our classes and structs.<br>--<br>Michael Caisse has been crafting code in C&#43;&#43; for nearly 25-years. He is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c1c0627c611143f4a4f4a3e001431ded">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Canonical-Class</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Canonical-Class</link>
    <itunes:summary>http://cppcon.org/--Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--It was a simpler time. A period in which every college student and learn-C&amp;#43;&amp;#43;-in-a-weekend duffer could write a class with the assuredness that it would behave as desired when assigned and copied. There was a check list. Complete the checklist, add some domain specific behaviour, bake in the regression oven, and you were done.Enter C&amp;#43;&amp;#43;11 with its fancy new use of the delete keyword, additional applications of explicit, rvalue references, and some perfect forwarding. How are you to write a &amp;quot;simple&amp;quot; class? Should you include a swap? What does movable mean and are there expected semantics? When is the noexcept specifier used?During this session we will explore the boilerplate of a C&amp;#43;&amp;#43;11 class. The session will touch on rvalue references, move semantics, perfect forwarding, explicit, noexcept, initializer lists, and more as it applies to producing the desired semantics for our classes and structs.--Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for nearly 25-years. He is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3956</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/The-Canonical-Class</guid>
    <dc:creator>Michael Caisse</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_high.mp4" length="1190679452" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse.mp3" expression="full" duration="3956" fileSize="63310022" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse.mp4" expression="full" duration="3956" fileSize="139415073" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse.webm" expression="full" duration="3956" fileSize="410951389" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_high.mp4" expression="full" duration="3956" fileSize="1190679452" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/570b/b23592de-3f75-4f01-97c5-78293500570b/TheCanonicalClassCaisse_mid.mp4" expression="full" duration="3956" fileSize="709735251" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Anatomy of A Smart Pointer</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&#43;&#43; for roughly 20 years, not very well at first, and slightly better now.<br><br>I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.<br><br>I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ea74df59fde84963b4bda3e0014271c2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Anatomy-of-A-Smart-Pointer</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Anatomy-of-A-Smart-Pointer</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&amp;#43;&amp;#43; for roughly 20 years, not very well at first, and slightly better now.I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>681</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Anatomy-of-A-Smart-Pointer</guid>
    <dc:creator>Michael VanLoon</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_high.mp4" length="120384776" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer.mp3" expression="full" duration="681" fileSize="10910534" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer.mp4" expression="full" duration="681" fileSize="20567300" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer.webm" expression="full" duration="681" fileSize="64630764" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_high.mp4" expression="full" duration="681" fileSize="120384776" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fac/d9444bd7-bdad-4e63-adcb-778162ec8fac/LightningTalksAnatomyofaSmartPointer_mid.mp4" expression="full" duration="681" fileSize="70283155" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: The New Old Thing, Or Fun with Lambdas</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Jonathan Caves, C&#43;&#43; compiler developer<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5e522454418145cd98f7a3e001412bd5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-New-Old-Thing-Or-Fun-with-Lambdas</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-New-Old-Thing-Or-Fun-with-Lambdas</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Jonathan Caves, C&amp;#43;&amp;#43; compiler developer--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>642</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-New-Old-Thing-Or-Fun-with-Lambdas</guid>
    <dc:creator>Jonathan Caves</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_high.mp4" length="134378043" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas.mp3" expression="full" duration="642" fileSize="10283078" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas.mp4" expression="full" duration="642" fileSize="18937703" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas.webm" expression="full" duration="642" fileSize="59396474" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_high.mp4" expression="full" duration="642" fileSize="134378043" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5faa/ac523f0e-88ca-4639-ba94-5d17d8db5faa/LightningTalksTheNewOldThingorFunwithLambdas_mid.mp4" expression="full" duration="642" fileSize="75782873" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks Software Transaction Memory, For Reals </title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://cppcon2014.sched.org" href="http://cppcon2014.sched.org/" target="_blank" rel="nofollow">http://cppcon2014.sched.org</a><br><br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1fec3fed460b4b8e98daa3e00140847e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Software-Transaction-Memory-For-Reals</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Software-Transaction-Memory-For-Reals</link>
    <itunes:summary>http://cppcon2014.sched.orgPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>997</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-Software-Transaction-Memory-For-Reals</guid>
    <dc:creator>Brett Hall</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_high.mp4" length="277533649" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory.mp3" expression="full" duration="997" fileSize="15963590" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory.mp4" expression="full" duration="997" fileSize="36460391" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory.webm" expression="full" duration="997" fileSize="117044227" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_high.mp4" expression="full" duration="997" fileSize="277533649" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a0/5b102538-0b22-4462-b39f-2cf2fed8e8a0/LightningTalksSoftwareTransactionMemory_mid.mp4" expression="full" duration="997" fileSize="163383942" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks The Perils of Strict Aliasing </title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Andrew Webber, Technologist, SIG<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9ebfb39397bb4ebfa785a3e0013f914f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-Perils-of-Strict-Aliasing</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-Perils-of-Strict-Aliasing</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Andrew Webber, Technologist, SIG--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>390</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lightning-Talks-The-Perils-of-Strict-Aliasing</guid>
    <dc:creator>Andrew Webber</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_high.mp4" length="69311403" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing.mp3" expression="full" duration="390" fileSize="6246470" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing.mp4" expression="full" duration="390" fileSize="11700714" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing.webm" expression="full" duration="390" fileSize="34118650" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_high.mp4" expression="full" duration="390" fileSize="69311403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/122c/f00f7597-e271-45f9-a72c-9283e68a122c/LightningTalksThePerilsofStrictAliasing_mid.mp4" expression="full" duration="390" fileSize="41317520" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Connecting C++ and JavaScript on the Web with Embind</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Emscripten compiles C or C&#43;&#43; source code into JavaScript so it can run in a web browser. Emscripten is commonly used to port games to the web with no download or plugin required.<br><br>Embind is a C&#43;&#43;11 binding library that makes it easy to expose libraries written in C&#43;&#43; to JavaScript. This allows JavaScript applications to take advantage of existing bodies of C&#43;&#43; code. In addition, C&#43;&#43; compiled into the asm.js subset of JavaScript is often faster than hand-written JavaScript, so Embind makes it convenient to accelerate JavaScript applications by writing high-performance functionality in C&#43;&#43;.<br><br>With several motivating examples, this lecture will cover the design of embind, how variadic templates and constexpr facilitate interesting optimizations, and how embind minimizes its impact on the size of the generated JavaScript.<br>--<br>Chad is a Senior Technical Director at IMVU, where he works on highly scalable backend systems, front-end web architectures, and optimizing the bits and bytes of 3D graphics pipelines. C&#43;&#43; was Chad's first love, and he once mowed &quot;C&#43;&#43;&quot; into his back yard before a rainstorm, where it stayed for weeks. | | Website: <a class="yt-uix-redirect-link" dir="ltr" title="http://chadaustin.me" href="http://chadaustin.me/" target="_blank" rel="nofollow">http://chadaustin.me</a> | Twitter: @chadaustin<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6ca9cc6eece640d5afe8a3e00135676e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Connecting-C-and-JavaScript-on-the-Web-with-Embind</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Connecting-C-and-JavaScript-on-the-Web-with-Embind</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Emscripten compiles C or C&amp;#43;&amp;#43; source code into JavaScript so it can run in a web browser. Emscripten is commonly used to port games to the web with no download or plugin required.Embind is a C&amp;#43;&amp;#43;11 binding library that makes it easy to expose libraries written in C&amp;#43;&amp;#43; to JavaScript. This allows JavaScript applications to take advantage of existing bodies of C&amp;#43;&amp;#43; code. In addition, C&amp;#43;&amp;#43; compiled into the asm.js subset of JavaScript is often faster than hand-written JavaScript, so Embind makes it convenient to accelerate JavaScript applications by writing high-performance functionality in C&amp;#43;&amp;#43;.With several motivating examples, this lecture will cover the design of embind, how variadic templates and constexpr facilitate interesting optimizations, and how embind minimizes its impact on the size of the generated JavaScript.--Chad is a Senior Technical Director at IMVU, where he works on highly scalable backend systems, front-end web architectures, and optimizing the bits and bytes of 3D graphics pipelines. C&amp;#43;&amp;#43; was Chad&#39;s first love, and he once mowed &amp;quot;C&amp;#43;&amp;#43;&amp;quot; into his back yard before a rainstorm, where it stayed for weeks. | | Website: http://chadaustin.me | Twitter: @chadaustin--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3381</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Connecting-C-and-JavaScript-on-the-Web-with-Embind</guid>
    <dc:creator></dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_high.mp4" length="904135624" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind.mp3" expression="full" duration="3381" fileSize="54104774" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind.mp4" expression="full" duration="3381" fileSize="98084340" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind.webm" expression="full" duration="3381" fileSize="322831930" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_high.mp4" expression="full" duration="3381" fileSize="904135624" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ef62/ec7e2ffd-0251-4a8d-bcf9-a6c9d0d8ef62/ConnectingCPPandJavaScriptontheWebwithEmbind_mid.mp4" expression="full" duration="3381" fileSize="516419763" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>GPU/Accelarator Programming with OpenMP 4.0: Yet Another Significant Parallel Shift in High-Level Parallel Computing</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Another fundamental shift in Parallelism Paradigm? Sure. When was the last time you heard that before?<br><br>But seriously, as the number of threads/cores continue to increase, there is a growing pressure on applications to exploit more of the available parallelism in their codes, including coarse-, medium-, and fine-grain parallelism. OpenMP has been one of the dominant shared-memory programming models but is evolving beyond that with a new Mission Statement (no, really!) making it well suited for exploiting medium- and fine-grained parallelism.<br><br>OpenMP 4.0 exhibits many of these features to support the next step in both consumer, high-performance and exascale computing, with one of the world's first programming model for high-level language support for GPU/Accelerators and vector SIMD across not 1 but 3 high-level languages: C&#43;&#43;, C, and that language whose name we dare not speak, but starts with F.<br>--<br>You can talk to me about anything including C&#43;&#43; (even C and that language that shall remain nameless but starts with F), Transactional Memory, Parallel Programming, OpenMP, astrophysics (where my degree came from), tennis (still trying to see if I can play for a living), travel, and the best food (which I am on a permanent quest to eat).<br><br>Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. And did I forget to say he is a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, its a wonder he can get anything done.<br><br>Oh, and he chairs the WG21 SG5 Transactional Memory, and is the co-author of a number C&#43;&#43;11/OpenMP/TM features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBMÂ´s XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo. <br><br>He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, CASCON, and many Universities, research centers and companies, except his own, where he has to listen. <br><br>Now he and his wife loves to teach their two children to be curious about everything.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5501656690db4091b1aaa3e001340252">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/GPUAccelarator-Programming-with-OpenMP-40-Yet-Another-Significant-Parallel-Shift-in-High-Level-Paral</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/GPUAccelarator-Programming-with-OpenMP-40-Yet-Another-Significant-Parallel-Shift-in-High-Level-Paral</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Another fundamental shift in Parallelism Paradigm? Sure. When was the last time you heard that before?But seriously, as the number of threads/cores continue to increase, there is a growing pressure on applications to exploit more of the available parallelism in their codes, including coarse-, medium-, and fine-grain parallelism. OpenMP has been one of the dominant shared-memory programming models but is evolving beyond that with a new Mission Statement (no, really!) making it well suited for exploiting medium- and fine-grained parallelism.OpenMP 4.0 exhibits many of these features to support the next step in both consumer, high-performance and exascale computing, with one of the world&#39;s first programming model for high-level language support for GPU/Accelerators and vector SIMD across not 1 but 3 high-level languages: C&amp;#43;&amp;#43;, C, and that language whose name we dare not speak, but starts with F.--You can talk to me about anything including C&amp;#43;&amp;#43; (even C and that language that shall remain nameless but starts with F), Transactional Memory, Parallel Programming, OpenMP, astrophysics (where my degree came from), tennis (still trying to see if I can play for a living), travel, and the best food (which I am on a permanent quest to eat).Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&amp;#43;&amp;#43; Standard and OpenMP Committee. And did I forget to say he is a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada&#39;s Standard Council. He has so many titles, its a wonder he can get anything done.Oh, and he chairs the WG21 SG5 Transactional Memory, and is the co-author of a number C&amp;#43;&amp;#43;11/OpenMP/TM features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&amp;#43;&amp;</itunes:summary>
    <itunes:duration>3991</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/GPUAccelarator-Programming-with-OpenMP-40-Yet-Another-Significant-Parallel-Shift-in-High-Level-Paral</guid>
    <dc:creator>Michael Wong</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_high.mp4" length="1319483667" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu.mp3" expression="full" duration="3991" fileSize="63867590" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu.mp4" expression="full" duration="3991" fileSize="172297665" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu.webm" expression="full" duration="3991" fileSize="523324768" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_high.mp4" expression="full" duration="3991" fileSize="1319483667" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17d8/d5d8620b-d7c5-4ffa-b490-1d47a11717d8/YetAnotherSignificantParallelShiftinParallelCompu_mid.mp4" expression="full" duration="3991" fileSize="805863780" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Microsoft w/ C++ to Deliver Office Across Different Platforms, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>How Microsoft Uses C&#43;&#43; to Deliver Office (and More) Across iOS, Android, Windows, and Mac, Part II<br>--<br>What does it take to target multiple major mobile devices (as well as traditional environments) with portable, efficient, single-source code? This talk demonstrates architectures, techniques, and lessons learned rooted in actual experience with using C&#43;&#43; to deliver several major cross-platform projects across iOS, Android, Windows, and Mac: Microsoft Office (Word, Excel, PowerPoint, OneNote) and the SQL Server PowerBI. Each presents a different case study: For example, Office already used C&#43;&#43;, whereas PowerBI was originally written in Silverlight and then rewritten in C&#43;&#43;; Office is a set of user-facing apps, whereas PowerBI is a system component. Although some of these are demanding first-tier &quot;Cadillac&quot; applications, we expect this experience to be a model for the future as more and more apps fall into this category and use C&#43;&#43; to target many popular platforms from (mostly) a single source base. This talk will cover the following key topics and tradeoffs: Rich vs. reach, including access to latest OS features (e.g., iOS 8 additions) and hardware features (e.g., vector units, GPUs). Consistency of functionality. Client code vs. server/service web code. Sharing vs. quality, including dialing appropriately between more shared code and high quality code. Drawing the line between the bulk of C&#43;&#43; code and interfacing with non-C&#43;&#43; for UX and PALs (platform adaptation/abstraction layers) for target-specific user interface and system services. Architecting PALs, including why &quot;mini-PALs&quot; rather than an &quot;Ã¼ber-PAL.&quot; Forces &quot;doing the right thing&quot; and good architecture with composable components. How C&#43;&#43; enables things not feasible using other technologies. Velocity and enabling faster cross-platform development and deployment. Cost of maintenance, including time, size, and complexity (both breadth and depth). And, last but not least, developing in a single modern C&#43;&#43; source base built with different evolving C&#43;&#43; compilers, including VC&#43;&#43; and Clang/LLVM.<br>--<br>Tony Antoun is Director of Development for APEX, focusing on delivering Office on all Apple platforms and form factors (iPhone, iPad, Mac), as well as aligning the Office experience on other major platforms (Win32, WinRT, Android). Before that, Dev Manager for SQL PowerBI â a cross-platform interactive client data visualization solution (iOS, WinRT, Web) connected to the SQL Reporting cloud service. Before that, Dev Manager for HD-DVD, cross-plat client solution for High Definition interactivity of media experiences (Win32, WinCE, Linux, Xbox).<br>--<br>Igor Zaika is the Development Manager for the Office Core Experience team at Microsoft, responsible for shared UX components and application framework used by Office applications. Before that, Igor worked in various areas related to Office client applications, ranging from building Word Object Model and integrating VBA (Visual Basic for Applications) with Office, to shipping first version of OneNote for the WinRT platform. Before joining Microsoft, Igor worked on 3D CAD application and contributed to the Kronos project .<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:09f9824cac7942b99c90a3e00038c815">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/030-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/030-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--How Microsoft Uses C&amp;#43;&amp;#43; to Deliver Office (and More) Across iOS, Android, Windows, and Mac, Part II--What does it take to target multiple major mobile devices (as well as traditional environments) with portable, efficient, single-source code? This talk demonstrates architectures, techniques, and lessons learned rooted in actual experience with using C&amp;#43;&amp;#43; to deliver several major cross-platform projects across iOS, Android, Windows, and Mac: Microsoft Office (Word, Excel, PowerPoint, OneNote) and the SQL Server PowerBI. Each presents a different case study: For example, Office already used C&amp;#43;&amp;#43;, whereas PowerBI was originally written in Silverlight and then rewritten in C&amp;#43;&amp;#43;; Office is a set of user-facing apps, whereas PowerBI is a system component. Although some of these are demanding first-tier &amp;quot;Cadillac&amp;quot; applications, we expect this experience to be a model for the future as more and more apps fall into this category and use C&amp;#43;&amp;#43; to target many popular platforms from (mostly) a single source base. This talk will cover the following key topics and tradeoffs: Rich vs. reach, including access to latest OS features (e.g., iOS 8 additions) and hardware features (e.g., vector units, GPUs). Consistency of functionality. Client code vs. server/service web code. Sharing vs. quality, including dialing appropriately between more shared code and high quality code. Drawing the line between the bulk of C&amp;#43;&amp;#43; code and interfacing with non-C&amp;#43;&amp;#43; for UX and PALs (platform adaptation/abstraction layers) for target-specific user interface and system services. Architecting PALs, including why &amp;quot;mini-PALs&amp;quot; rather than an &amp;quot;&#252;ber-PAL.&amp;quot; Forces &amp;quot;doing the right thing&amp;quot; and good architecture with composable components. How C&amp;#43;&amp;#43; enables things not feasible </itunes:summary>
    <itunes:duration>3411</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/030-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-II</guid>
    <dc:creator>Tony Antoun, Erik Schwiebert, Tomasz Kukielka</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_high.mp4" length="928398797" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII.mp3" expression="full" duration="3411" fileSize="54592838" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII.mp4" expression="full" duration="3411" fileSize="112253509" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII.webm" expression="full" duration="3411" fileSize="339242740" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_high.mp4" expression="full" duration="3411" fileSize="928398797" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e9bf/0f3589da-45a1-4230-bd7f-68939818e9bf/MicrosoftusesCPPtoDeliverOfficeAppsPartII_mid.mp4" expression="full" duration="3411" fileSize="546782524" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>0xBADC0DE</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>My motivation for this talk is my own expierence as a freelancer and trainer. I have seen a lot of good and bad code in different places. As a freelancer I often had to deal with different, unknown and often large codebases. This talk tries not only to show examples of bad code, but also to analyze why it exists in the first place, and how to deal with it or fix it. I'll visit anti-patterns, but this talk is not about anti-patterns, as that would only spotlight one of the many problems.</span><br><span>--</span><br><span>Jens Weller has worked, since 2007, as a freelancer in C&#43;&#43;, specialising in consulting, training and programming C&#43;&#43;. He started with programming C&#43;&#43; back in 1998. He is an active member of the European C&#43;&#43; community and the founder of the Meeting C&#43;&#43; platform and conference. Jens is an active supporter of C&#43;&#43; user groups and blogs often about C&#43;&#43;.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aec9f46a59274154a8eea3e000382995">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/029-0xBADC0DE</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/029-0xBADC0DE</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--My motivation for this talk is my own expierence as a freelancer and trainer. I have seen a lot of good and bad code in different places. As a freelancer I often had to deal with different, unknown and often large codebases. This talk tries not only to show examples of bad code, but also to analyze why it exists in the first place, and how to deal with it or fix it. I&#39;ll visit anti-patterns, but this talk is not about anti-patterns, as that would only spotlight one of the many problems.--Jens Weller has worked, since 2007, as a freelancer in C&amp;#43;&amp;#43;, specialising in consulting, training and programming C&amp;#43;&amp;#43;. He started with programming C&amp;#43;&amp;#43; back in 1998. He is an active member of the European C&amp;#43;&amp;#43; community and the founder of the Meeting C&amp;#43;&amp;#43; platform and conference. Jens is an active supporter of C&amp;#43;&amp;#43; user groups and blogs often about C&amp;#43;&amp;#43;.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3036</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/029-0xBADC0DE</guid>
    <dc:creator>Jens Weller</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_high.mp4" length="916707097" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE.mp3" expression="full" duration="3036" fileSize="48578246" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE.mp4" expression="full" duration="3036" fileSize="98853537" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE.webm" expression="full" duration="3036" fileSize="311115728" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_high.mp4" expression="full" duration="3036" fileSize="916707097" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aa9b/4980975b-ee82-4cf6-847e-5d20dc9faa9b/0xBADC0DE_mid.mp4" expression="full" duration="3036" fileSize="533063322" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Committee Experience</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>What happens behind the closed doors of the ISO Standard Committee? And just how closed are they?<br><br>The session collects some anecdotes and relates what it is like to get involved in the process of standardizing C&#43;&#43;, from the perspective of someone attending their first meeting - me 10 years ago! - to now. We will hear some of the highs and lows along the way to C&#43;&#43;11, some misconceptions of what might be involved, and get some idea of what happens during a typical standard meeting, and between.<br><br>By the end you will have some idea of how the standard itself is actually formed, and hopefully spark the interest of folks who might be interested in getting involved themselves...<br>--<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.<br><br>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.<br><br>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e6abc760ffef408ea3ffa3e000377c18">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/028-The-Committee-Experience</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/028-The-Committee-Experience</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--What happens behind the closed doors of the ISO Standard Committee? And just how closed are they?The session collects some anecdotes and relates what it is like to get involved in the process of standardizing C&amp;#43;&amp;#43;, from the perspective of someone attending their first meeting - me 10 years ago! - to now. We will hear some of the highs and lows along the way to C&amp;#43;&amp;#43;11, some misconceptions of what might be involved, and get some idea of what happens during a typical standard meeting, and between.By the end you will have some idea of how the standard itself is actually formed, and hopefully spark the interest of folks who might be interested in getting involved themselves...--Alisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4141</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/028-The-Committee-Experience</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_high.mp4" length="1010196500" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith.mp3" expression="full" duration="4141" fileSize="66270278" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith.mp4" expression="full" duration="4141" fileSize="154487544" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith.webm" expression="full" duration="4141" fileSize="515377607" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_high.mp4" expression="full" duration="4141" fileSize="1010196500" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9432/7e3703c4-fbe2-4acd-a853-cb1285099432/TheCommitteeExperienceMeredith_mid.mp4" expression="full" duration="4141" fileSize="636177577" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Pragmatic Type Erasure: Solving OOP Problems w/ Elegant Design Pattern</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>There are numerous, serious OOP design problems that we have all encountered in production code. These include, among others: - object lifetime/ownership - how to make classes from different class hierarchies conform to a common interface - writing classes that can present multiple interfaces - separating interface and implementation - how to write virtual functions so that subclasses override them properly - the virtual inheritance &quot;diamond of death&quot;<br><br>Proper use of type erasure can mitigate, or outright eliminate, these and other problems, without sacrificing performance.<br><br>This talk will cover the OOP design problems above and more, and will cover hand-rolled and library-based type erasure approaches that solve those problems. Performance metrics will be provided for the different approaches, and source code will be available after the talk.<br>--<br>Zach Laine has been using C&#43;&#43; in industry for 11 years, focusing on data visualization, numeric computing, games, generic programming, and good library design. He finds the process of writing bio blurbs to be a little uncomfortable.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c9e12d765f3d4208b751a3e000367f60">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/027-Pragmatic-Type-Erasure-Solving-OOP-Problems-w-Elegant-Design-Pattern</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/027-Pragmatic-Type-Erasure-Solving-OOP-Problems-w-Elegant-Design-Pattern</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--There are numerous, serious OOP design problems that we have all encountered in production code. These include, among others: - object lifetime/ownership - how to make classes from different class hierarchies conform to a common interface - writing classes that can present multiple interfaces - separating interface and implementation - how to write virtual functions so that subclasses override them properly - the virtual inheritance &amp;quot;diamond of death&amp;quot;Proper use of type erasure can mitigate, or outright eliminate, these and other problems, without sacrificing performance.This talk will cover the OOP design problems above and more, and will cover hand-rolled and library-based type erasure approaches that solve those problems. Performance metrics will be provided for the different approaches, and source code will be available after the talk.--Zach Laine has been using C&amp;#43;&amp;#43; in industry for 11 years, focusing on data visualization, numeric computing, games, generic programming, and good library design. He finds the process of writing bio blurbs to be a little uncomfortable.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2626</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/027-Pragmatic-Type-Erasure-Solving-OOP-Problems-w-Elegant-Design-Pattern</guid>
    <dc:creator>Zach Laine</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_high.mp4" length="521590286" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic.mp3" expression="full" duration="2626" fileSize="42019910" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic.mp4" expression="full" duration="2626" fileSize="78716209" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic.webm" expression="full" duration="2626" fileSize="260777574" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_high.mp4" expression="full" duration="2626" fileSize="521590286" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/417f/c513a125-8f1f-4f82-b815-030c657f417f/PragmaticTypeErasureSolvingClassic_mid.mp4" expression="full" duration="2626" fileSize="309862073" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Exception-Safe Code, Part III</title>
    <description><![CDATA[<p>http://www.cppcon.org<br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014<br>--<br>Are you 100% confident that your code is exception-safe?</p><p>Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&#43;&#43; and/or C&#43;&#43;11/14, this session is for you. We'll start with &quot;What is the problem we are trying to solve?&quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base.</p><p>When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.<br>--<br>Jon has been programming in C&#43;&#43; for over twenty years. During the last two decades he has written C&#43;&#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less wellÂ­âknown companies. He taught C&#43;&#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists.</p><p>Jon is active in the Silicon Valley chapter of the ACCU and programs the C&#43;&#43; track at the Silicon Valley Code Camp.</p><p>Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&#43;LinkedIn<br>--<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a5037be835a445bc850fa3e00034ddb7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/026-Exception-Safe-Code-Part-III</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/026-Exception-Safe-Code-Part-III</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Are you 100% confident that your code is exception-safe? Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&amp;#43;&amp;#43; and/or C&amp;#43;&amp;#43;11/14, this session is for you. We&#39;ll start with &amp;quot;What is the problem we are trying to solve?&amp;quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base. When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.--Jon has been programming in C&amp;#43;&amp;#43; for over twenty years. During the last two decades he has written C&amp;#43;&amp;#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less well&#173;âknown companies. He taught C&amp;#43;&amp;#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists. Jon is active in the Silicon Valley chapter of the ACCU and programs the C&amp;#43;&amp;#43; track at the Silicon Valley Code Camp. Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&amp;#43;LinkedIn--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3856</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/026-Exception-Safe-Code-Part-III</guid>
    <dc:creator>Jon Kalb</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_high.mp4" length="666291763" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII.mp3" expression="full" duration="3856" fileSize="61710278" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII.mp4" expression="full" duration="3856" fileSize="103367945" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII.webm" expression="full" duration="3856" fileSize="310243258" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_high.mp4" expression="full" duration="3856" fileSize="666291763" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7411/bb2130c1-4a30-40ce-bec4-ff8708157411/ExceptionSafeCodePartIII_mid.mp4" expression="full" duration="3856" fileSize="390720653" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Asynchronous Computation in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>With the adoption of the new C&#43;&#43;11 Standard the community sees a revival of interest in the language. This interest is also driven by the demands that new computer architectures and technologies are exerting on application developers and domain scientists. Especially the need for highly runtime adaptive algorithms and applications puts a great strain on our ability to efficiently write code which performs well and which scales satisfactory, as multi-core and multi-threading is the new modality of computation. We argue that new programming models have to be developed if we are to gain continued scalability of computations as we increase the size of our systems. These are programming models which work equally well for inter-node as well for intra-node use. With the degree of complexity and size increasing in new hardware architectures, applications are more and more hindered by the main bottlenecks in computation, namely starvation, latency, overheads, and waiting for contention resolution. We present HPX, which is a general purpose parallel C&#43;&#43; runtime system implementing a new model of computation - ParalleX, that attempts to address those challenges. We show results from using HPX for leveraging and managing asynchrony, overlapping different phases of computation and communication, suggesting ways to seamlessly expose it to programmers in an easy to use way.</span><br><span>--</span><br><span>Hartmut is a member of the faculty at the CS department at Louisiana State University (LSU) and a senior research scientist at LSU's Center for Computation and Technology (CCT). He received his doctorate from the Technical University of Chemnitz (Germany) in 1988. He is probably best known through his involvement in open source software projects, mainly as the author of several C&#43;&#43; libraries he has contributed to Boost, which are in use by thousands of developers worldwide. His current research is focused on leading the STE||AR group at CCT working on the practical design and implementation of future execution models and programming methods. His research interests are focused on the complex interaction of compiler technologies, runtime systems, active libraries, and modern system's architectures. His goal is to enable the creation of a new generation of scientific applications in powerful, though complex environments, such as high performance computing, distributed and grid computing, spatial information systems, and compiler technologies.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:841d49ffe4c04fafae64a3e0003454ec">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/025-Asynchronous-Computation-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/025-Asynchronous-Computation-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--With the adoption of the new C&amp;#43;&amp;#43;11 Standard the community sees a revival of interest in the language. This interest is also driven by the demands that new computer architectures and technologies are exerting on application developers and domain scientists. Especially the need for highly runtime adaptive algorithms and applications puts a great strain on our ability to efficiently write code which performs well and which scales satisfactory, as multi-core and multi-threading is the new modality of computation. We argue that new programming models have to be developed if we are to gain continued scalability of computations as we increase the size of our systems. These are programming models which work equally well for inter-node as well for intra-node use. With the degree of complexity and size increasing in new hardware architectures, applications are more and more hindered by the main bottlenecks in computation, namely starvation, latency, overheads, and waiting for contention resolution. We present HPX, which is a general purpose parallel C&amp;#43;&amp;#43; runtime system implementing a new model of computation - ParalleX, that attempts to address those challenges. We show results from using HPX for leveraging and managing asynchrony, overlapping different phases of computation and communication, suggesting ways to seamlessly expose it to programmers in an easy to use way.--Hartmut is a member of the faculty at the CS department at Louisiana State University (LSU) and a senior research scientist at LSU&#39;s Center for Computation and Technology (CCT). He received his doctorate from the Technical University of Chemnitz (Germany) in 1988. He is probably best known through his involvement in open source software projects, mainly as the author of several C&amp;#43;&amp;#43; libraries he has contributed to Boost, which are in use by tho</itunes:summary>
    <itunes:duration>3980</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/025-Asynchronous-Computation-in-CPP</guid>
    <dc:creator>Hartmut Kaiser</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_high.mp4" length="1536711720" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP.mp3" expression="full" duration="3980" fileSize="63687110" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP.mp4" expression="full" duration="3980" fileSize="145933212" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP.webm" expression="full" duration="3980" fileSize="493078761" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_high.mp4" expression="full" duration="3980" fileSize="1536711720" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/446e/c1cf9ea6-b9ed-41a6-9f54-283c19cb446e/AsynchronousComputationinCPP_mid.mp4" expression="full" duration="3980" fileSize="855989638" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Microsoft w/ C++ to Deliver Office Across Different Platforms, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>&quot;How Microsoft Uses C&#43;&#43; to Deliver Office (and More) Across iOS, Android, Windows, and Mac, Part I&quot;<br>--<br>What does it take to target multiple major mobile devices (as well as traditional environments) with portable, efficient, single-source code? This talk demonstrates architectures, techniques, and lessons learned rooted in actual experience with using C&#43;&#43; to deliver several major cross-platform projects across iOS, Android, Windows, and Mac: Microsoft Office (Word, Excel, PowerPoint, OneNote) and the SQL Server PowerBI. Each presents a different case study: For example, Office already used C&#43;&#43;, whereas PowerBI was originally written in Silverlight and then rewritten in C&#43;&#43;; Office is a set of user-facing apps, whereas PowerBI is a system component. Although some of these are demanding first-tier &quot;Cadillac&quot; applications, we expect this experience to be a model for the future as more and more apps fall into this category and use C&#43;&#43; to target many popular platforms from (mostly) a single source base. This talk will cover the following key topics and tradeoffs: Rich vs. reach, including access to latest OS features (e.g., iOS 8 additions) and hardware features (e.g., vector units, GPUs). Consistency of functionality. Client code vs. server/service web code. Sharing vs. quality, including dialing appropriately between more shared code and high quality code. Drawing the line between the bulk of C&#43;&#43; code and interfacing with non-C&#43;&#43; for UX and PALs (platform adaptation/abstraction layers) for target-specific user interface and system services. Architecting PALs, including why &quot;mini-PALs&quot; rather than an &quot;Ã¼ber-PAL.&quot; Forces &quot;doing the right thing&quot; and good architecture with composable components. How C&#43;&#43; enables things not feasible using other technologies. Velocity and enabling faster cross-platform development and deployment. Cost of maintenance, including time, size, and complexity (both breadth and depth). And, last but not least, developing in a single modern C&#43;&#43; source base built with different evolving C&#43;&#43; compilers, including VC&#43;&#43; and Clang/LLVM.<br>--<br>Igor Zaika is the Development Manager for the Office Core Experience team at Microsoft, responsible for shared UX components and application framework used by Office applications. Before that, Igor worked in various areas related to Office client applications, ranging from building Word Object Model and integrating VBA (Visual Basic for Applications) with Office, to shipping first version of OneNote for the WinRT platform. Before joining Microsoft, Igor worked on 3D CAD application and contributed to the Kronos project .<br>--<br>Tony Antoun is Director of Development for APEX, focusing on delivering Office on all Apple platforms and form factors (iPhone, iPad, Mac), as well as aligning the Office experience on other major platforms (Win32, WinRT, Android). Before that, Dev Manager for SQL PowerBI â a cross-platform interactive client data visualization solution (iOS, WinRT, Web) connected to the SQL Reporting cloud service. Before that, Dev Manager for HD-DVD, cross-plat client solution for High Definition interactivity of media experiences (Win32, WinCE, Linux, Xbox).<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:30243ffe41e446e282f6a3e00033921f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/024-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/024-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--&amp;quot;How Microsoft Uses C&amp;#43;&amp;#43; to Deliver Office (and More) Across iOS, Android, Windows, and Mac, Part I&amp;quot;--What does it take to target multiple major mobile devices (as well as traditional environments) with portable, efficient, single-source code? This talk demonstrates architectures, techniques, and lessons learned rooted in actual experience with using C&amp;#43;&amp;#43; to deliver several major cross-platform projects across iOS, Android, Windows, and Mac: Microsoft Office (Word, Excel, PowerPoint, OneNote) and the SQL Server PowerBI. Each presents a different case study: For example, Office already used C&amp;#43;&amp;#43;, whereas PowerBI was originally written in Silverlight and then rewritten in C&amp;#43;&amp;#43;; Office is a set of user-facing apps, whereas PowerBI is a system component. Although some of these are demanding first-tier &amp;quot;Cadillac&amp;quot; applications, we expect this experience to be a model for the future as more and more apps fall into this category and use C&amp;#43;&amp;#43; to target many popular platforms from (mostly) a single source base. This talk will cover the following key topics and tradeoffs: Rich vs. reach, including access to latest OS features (e.g., iOS 8 additions) and hardware features (e.g., vector units, GPUs). Consistency of functionality. Client code vs. server/service web code. Sharing vs. quality, including dialing appropriately between more shared code and high quality code. Drawing the line between the bulk of C&amp;#43;&amp;#43; code and interfacing with non-C&amp;#43;&amp;#43; for UX and PALs (platform adaptation/abstraction layers) for target-specific user interface and system services. Architecting PALs, including why &amp;quot;mini-PALs&amp;quot; rather than an &amp;quot;&#252;ber-PAL.&amp;quot; Forces &amp;quot;doing the right thing&amp;quot; and good architecture with composable components. How C&amp;#43;&amp;#43; enables things no</itunes:summary>
    <itunes:duration>3570</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/024-Microsoft-w-C-to-Deliver-Office-Across-Different-Platforms-Part-I</guid>
    <dc:creator>Igor Zaika, Tony Antoun</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_high.mp4" length="1162962094" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross.mp3" expression="full" duration="3570" fileSize="57136070" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross.mp4" expression="full" duration="3570" fileSize="132128006" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross.webm" expression="full" duration="3570" fileSize="431040546" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_high.mp4" expression="full" duration="3570" fileSize="1162962094" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cecc/a01de657-92c6-43a1-a521-da95c944cecc/MicrosoftusesCPPtodeliverofficeappsacross_mid.mp4" expression="full" duration="3570" fileSize="694648056" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Exception-Safe Code, Part II</title>
    <description><![CDATA[<p>http://www.cppcon.org<br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014<br>--<br>Are you 100% confident that your code is exception-safe?</p><p>Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&#43;&#43; and/or C&#43;&#43;11/14, this session is for you. We'll start with &quot;What is the problem we are trying to solve?&quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base.</p><p>When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.<br>--<br>Jon has been programming in C&#43;&#43; for over twenty years. During the last two decades he has written C&#43;&#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less wellÂ­âknown companies. He taught C&#43;&#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists.</p><p>Jon is active in the Silicon Valley chapter of the ACCU and programs the C&#43;&#43; track at the Silicon Valley Code Camp.</p><p>Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&#43;LinkedIn<br>--<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8e1d77be67834daaa2dda3e00032b426">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/023-Exception-Safe-Code-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/023-Exception-Safe-Code-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Are you 100% confident that your code is exception-safe? Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&amp;#43;&amp;#43; and/or C&amp;#43;&amp;#43;11/14, this session is for you. We&#39;ll start with &amp;quot;What is the problem we are trying to solve?&amp;quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base. When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.--Jon has been programming in C&amp;#43;&amp;#43; for over twenty years. During the last two decades he has written C&amp;#43;&amp;#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less well&#173;âknown companies. He taught C&amp;#43;&amp;#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists. Jon is active in the Silicon Valley chapter of the ACCU and programs the C&amp;#43;&amp;#43; track at the Silicon Valley Code Camp. Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&amp;#43;LinkedIn--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3580</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/023-Exception-Safe-Code-Part-II</guid>
    <dc:creator>Jon Kalb</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_high.mp4" length="743221071" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb.mp3" expression="full" duration="3580" fileSize="57293894" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb.mp4" expression="full" duration="3580" fileSize="99539514" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb.webm" expression="full" duration="3580" fileSize="318830906" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_high.mp4" expression="full" duration="3580" fileSize="743221071" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/51ac/0aebb2c3-b10b-45a3-a178-fe34dcbd51ac/ExceptionSafeCodePartIIKalb_mid.mp4" expression="full" duration="3580" fileSize="413229522" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Decomposing a Problem for Parallel Execution</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>So you want to speed up your computation using multicore parallel execution and you've picked a parallelism framework. What now? Parallelism frameworks give you the tools you need, but they don't actually parallelize the code; that's your job. To take advantage of parallel hardware, you must decompose your computation into tasks that can be computed in parallel. In this session, I'll present a real-world problem (the n-bodies problem) and guide you through several different ways in which it can be decomposed for parallel execution. We'll look at how to achieve scalability, resolve data races, and avoid negative multi-core cache effects. At the end of this session, you should have a conceptual understanding of parallel programming fundamentals that can be applied to a wide range of problems using a variety of frameworks.</span><br><span>--</span><br><span>Pablo Halpern has been programming in C&#43;&#43; since 1989 and has been a member of the C&#43;&#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&#43;&#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &quot;Reducers and other Cilk&#43;&#43; Hyperobjects&quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel's customers and promoting adoption of parallel constructs into the C&#43;&#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpern</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1be01bc38d27486a8073a3e000320b38">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/022-Decomposing-a-Problem-for-Parallel-Execution</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/022-Decomposing-a-Problem-for-Parallel-Execution</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--So you want to speed up your computation using multicore parallel execution and you&#39;ve picked a parallelism framework. What now? Parallelism frameworks give you the tools you need, but they don&#39;t actually parallelize the code; that&#39;s your job. To take advantage of parallel hardware, you must decompose your computation into tasks that can be computed in parallel. In this session, I&#39;ll present a real-world problem (the n-bodies problem) and guide you through several different ways in which it can be decomposed for parallel execution. We&#39;ll look at how to achieve scalability, resolve data races, and avoid negative multi-core cache effects. At the end of this session, you should have a conceptual understanding of parallel programming fundamentals that can be applied to a wide range of problems using a variety of frameworks.--Pablo Halpern has been programming in C&amp;#43;&amp;#43; since 1989 and has been a member of the C&amp;#43;&amp;#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&amp;#43;&amp;#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &amp;quot;Reducers and other Cilk&amp;#43;&amp;#43; Hyperobjects&amp;quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel&#39;s customers and promoting adoption of parallel constructs into the C&amp;#43;&amp;#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twi</itunes:summary>
    <itunes:duration>3873</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/022-Decomposing-a-Problem-for-Parallel-Execution</guid>
    <dc:creator>Pablo Halpern</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_high.mp4" length="950147850" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern.mp3" expression="full" duration="3873" fileSize="61970246" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern.mp4" expression="full" duration="3873" fileSize="115579021" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern.webm" expression="full" duration="3873" fileSize="321884432" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_high.mp4" expression="full" duration="3873" fileSize="950147850" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/19ff/eeddd25b-f192-4409-81a8-b7fe753c19ff/DecomposingAProblemforParallelExecutionHalpern_mid.mp4" expression="full" duration="3873" fileSize="533721144" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Modern Template Metaprogramming: A Compendium, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Template metaprogramming has become an important part of a C&#43;&#43; programmer's toolkit. This talk will demonstrate state-of-the-art metaprogramming techniques, applying each to obtain representative implementations of selected standard library facilities.<br><br>Along the way, we will look at void_t, a recently-proposed, extremely simple new type_traits candidate whose use has been described by one expert as &quot;highly advanced (and elegant), and surprising even to experienced template metaprogrammers.&quot;<br>--<br>With broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C&#43;&#43; programmer for over thirty years, joining the C&#43;&#43; standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C&#43;&#43; library features as cbegin/cend and common_type as well as headers random and ratio , and has significantly impacted such core language features as alias templates, contextual conversions, and variable templates. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C&#43;&#43;.<br><br>When not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C&#43;&#43; standards process, with several more core and library proposals under consideration. He was recently appointed an associate project editor for the C&#43;&#43; standard itself.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:af2a26518db44cbf9c13a3e000312dbb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/021-Modern-Template-Metaprogramming-A-Compendium-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/021-Modern-Template-Metaprogramming-A-Compendium-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Template metaprogramming has become an important part of a C&amp;#43;&amp;#43; programmer&#39;s toolkit. This talk will demonstrate state-of-the-art metaprogramming techniques, applying each to obtain representative implementations of selected standard library facilities.Along the way, we will look at void_t, a recently-proposed, extremely simple new type_traits candidate whose use has been described by one expert as &amp;quot;highly advanced (and elegant), and surprising even to experienced template metaprogrammers.&amp;quot;--With broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C&amp;#43;&amp;#43; programmer for over thirty years, joining the C&amp;#43;&amp;#43; standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C&amp;#43;&amp;#43; library features as cbegin/cend and common_type as well as headers random and ratio , and has significantly impacted such core language features as alias templates, contextual conversions, and variable templates. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C&amp;#43;&amp;#43;.When not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C&amp;#43;&amp;#43; standards process, with several more core and library proposals under consideration. He was recently appointed an associate project editor for the C&amp;#43;&amp;#43; standard itself.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3528</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/021-Modern-Template-Metaprogramming-A-Compendium-Part-II</guid>
    <dc:creator>walter brown</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_high.mp4" length="995916452" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII.mp3" expression="full" duration="3528" fileSize="56449862" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII.mp4" expression="full" duration="3528" fileSize="134985502" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII.webm" expression="full" duration="3528" fileSize="493049695" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_high.mp4" expression="full" duration="3528" fileSize="995916452" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dab/0733b5bd-b7bd-4233-8957-473a2d1a9dab/ModernTemplateProgrammingPartII_mid.mp4" expression="full" duration="3528" fileSize="632935343" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Implementing Wire Protocols with Boost Fusion</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>--</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>There are a number of common serialization formats available which work well for marshaling C&#43;&#43; types into messaging protocols, e.g. ProtoBufs, Thrift, JSON, XML, FIX, etc. Unfortunately, not every protocol uses one of these popular encodings and instead implements a unique binary protocol. The classical &quot;C&quot; way of handling binary protocols is to use packed structs, unfortunately there are many binary protocols which are not particularly friendly to using this approach due to things like nested variable length data structures, etc.. The packed struct approach is also fairly limited in that it only generally supports primitive POD types.</span><br><br><span>This talk will explore an approach that uses Boost's Fusion library to implement an easily extensible serialization mechanism for on a non-trivial binary financial exchange protocol which exposes the underlying data in terms of &quot;modern&quot; C&#43;&#43; types. The talk will also cover aspects of general use of Boost Fusion and Boost MPL, type traits, enable_if, SFINAE, and other members of the C&#43;&#43; type system bestiary.</span><br><span>--</span><br><span>Thomas Rodgers has been programming in C&#43;&#43; since 1989 and a member of the C&#43;&#43; Standards Committee since 2013. Thomas has worked in the financial industry since 1996 and currently works for DRW Trading Group in Chicago.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:54bf16a6874443168a68a3e0002ed26f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/018-Implementing-Wire-Protocols-with-Boost-Fusion</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/018-Implementing-Wire-Protocols-with-Boost-Fusion</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--There are a number of common serialization formats available which work well for marshaling C&amp;#43;&amp;#43; types into messaging protocols, e.g. ProtoBufs, Thrift, JSON, XML, FIX, etc. Unfortunately, not every protocol uses one of these popular encodings and instead implements a unique binary protocol. The classical &amp;quot;C&amp;quot; way of handling binary protocols is to use packed structs, unfortunately there are many binary protocols which are not particularly friendly to using this approach due to things like nested variable length data structures, etc.. The packed struct approach is also fairly limited in that it only generally supports primitive POD types.This talk will explore an approach that uses Boost&#39;s Fusion library to implement an easily extensible serialization mechanism for on a non-trivial binary financial exchange protocol which exposes the underlying data in terms of &amp;quot;modern&amp;quot; C&amp;#43;&amp;#43; types. The talk will also cover aspects of general use of Boost Fusion and Boost MPL, type traits, enable_if, SFINAE, and other members of the C&amp;#43;&amp;#43; type system bestiary.--Thomas Rodgers has been programming in C&amp;#43;&amp;#43; since 1989 and a member of the C&amp;#43;&amp;#43; Standards Committee since 2013. Thomas has worked in the financial industry since 1996 and currently works for DRW Trading Group in Chicago.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3317</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/018-Implementing-Wire-Protocols-with-Boost-Fusion</guid>
    <dc:creator>Thomas Rodgers</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_high.mp4" length="1267508349" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols.mp3" expression="full" duration="3317" fileSize="53080262" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols.mp4" expression="full" duration="3317" fileSize="139460654" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols.webm" expression="full" duration="3317" fileSize="461472343" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_high.mp4" expression="full" duration="3317" fileSize="1267508349" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd2a/38e1c4ef-8774-4105-99f1-06945048bd2a/ImplementingWireProtocols_mid.mp4" expression="full" duration="3317" fileSize="788519970" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++11 in the Wild: Techniques from a Real Codebase</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>This talk presents several reusable constructs from a production C&#43;&#43;11 codebase, each of which would not be possible without C&#43;&#43;11's new features. Auto() is what Alexandrescu's ScopeGuard looks like after a dozen years of C&#43;&#43; evolution. make_iterable() constructs a container from a pair of iterators, enabling simple &quot;foreach&quot; iteration over legacy containers. spaceship() is an efficient &quot;strcmp&quot; for tuples. Time permitting, we'll look at some more arcane code samples.<br>--<br>Arthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C&#43;&#43; compilers. Until recently he worked at MemSQL, making the world's fastest distributed SQL database.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0e1735c2597540159d82a3e0002e0ed9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/017-C11-in-the-Wild-Techniques-from-a-Real-Codebase</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/017-C11-in-the-Wild-Techniques-from-a-Real-Codebase</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This talk presents several reusable constructs from a production C&amp;#43;&amp;#43;11 codebase, each of which would not be possible without C&amp;#43;&amp;#43;11&#39;s new features. Auto() is what Alexandrescu&#39;s ScopeGuard looks like after a dozen years of C&amp;#43;&amp;#43; evolution. make_iterable() constructs a container from a pair of iterators, enabling simple &amp;quot;foreach&amp;quot; iteration over legacy containers. spaceship() is an efficient &amp;quot;strcmp&amp;quot; for tuples. Time permitting, we&#39;ll look at some more arcane code samples.--Arthur O&#39;Dwyer worked for many years at Green Hills Software, making the world&#39;s most optimizing C and C&amp;#43;&amp;#43; compilers. Until recently he worked at MemSQL, making the world&#39;s fastest distributed SQL database.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3884</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/017-C11-in-the-Wild-Techniques-from-a-Real-Codebase</guid>
    <dc:creator>arthur o&#39;dwyer</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_high.mp4" length="872686499" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade.mp3" expression="full" duration="3884" fileSize="62151110" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade.mp4" expression="full" duration="3884" fileSize="111828045" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade.webm" expression="full" duration="3884" fileSize="379495609" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_high.mp4" expression="full" duration="3884" fileSize="872686499" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dea/350579bb-aecb-4caa-b185-cc7719022dea/TechniquesFromaRealCodebade_mid.mp4" expression="full" duration="3884" fileSize="501704526" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Exception-Safe Code, Part I</title>
    <description><![CDATA[<p>http://www.cppcon.org<br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014<br>--<br>Are you 100% confident that your code is exception-safe?</p><p>Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&#43;&#43; and/or C&#43;&#43;11/14, this session is for you. We'll start with &quot;What is the problem we are trying to solve?&quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base.</p><p>When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.<br>--<br>Jon has been programming in C&#43;&#43; for over twenty years. During the last two decades he has written C&#43;&#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less wellÂ­âknown companies. He taught C&#43;&#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists.</p><p>Jon is active in the Silicon Valley chapter of the ACCU and programs the C&#43;&#43; track at the Silicon Valley Code Camp.</p><p>Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&#43;LinkedIn<br>--<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:50fc8c842a7443ec9fdea3e000286506">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/016-Exception-Safe-Code-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/016-Exception-Safe-Code-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/CppCon/CppCon2014--Are you 100% confident that your code is exception-safe? Safe usage of exceptions is a non-trivial problem that the industry has struggled with for the better part of two decades. If you have fear, uncertainty, or doubt about exception safety or just want to see the best practices for using exceptions in C&amp;#43;&amp;#43; and/or C&amp;#43;&amp;#43;11/14, this session is for you. We&#39;ll start with &amp;quot;What is the problem we are trying to solve?&amp;quot; and discuss alternatives, acknowledge the challenges associated with exception usage, and cover some well-meaning but misguided attempts at safety. I will then present a set of guidelines that are the basis for safe exception usage and solid implementation techniques, including how to transition from an exception-unsafe legacy code base. When we are finished you will know how to produce code that is easier to write, easier to understand, faster, and 100% robust in the face of exceptions.--Jon has been programming in C&amp;#43;&amp;#43; for over twenty years. During the last two decades he has written C&amp;#43;&amp;#43; for Apple, Dow Chemical, Intuit, Lotus, Microsoft, Netscape, Sun, Yahoo! and some less well&#173;âknown companies. He taught C&amp;#43;&amp;#43; in the graduate school at Golden Gate University for three years and is a founding moderator of the BoostâUser and BoostâInterest mailing lists. Jon is active in the Silicon Valley chapter of the ACCU and programs the C&amp;#43;&amp;#43; track at the Silicon Valley Code Camp. Jon blogs at http://slashshlash.info@_JonKalbJonKalb on G&amp;#43;LinkedIn--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3630</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/016-Exception-Safe-Code-Part-I</guid>
    <dc:creator>Jon Kalb</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_high.mp4" length="688221167" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI.mp3" expression="full" duration="3630" fileSize="58087238" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI.mp4" expression="full" duration="3630" fileSize="97535022" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI.webm" expression="full" duration="3630" fileSize="304190008" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_high.mp4" expression="full" duration="3630" fileSize="688221167" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9f91/b7214c77-8444-4fe1-a844-0ed94b339f91/ExceptionSafeCodePartI_mid.mp4" expression="full" duration="3630" fileSize="384387654" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Deep Dive into 2 Cross-Platform Mobile Apps Written in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Tony Grue &amp; Steven Kabbes &quot;From the Dropbox Trenches: A Deep Dive into Two Cross-Platform Mobile Apps Written in C&#43;&#43;&quot;<br>--<br>At Dropbox we've spent the last year and a half building two cross platform mobile apps: the email client, Mailbox, and the photo gallery, Carousel. We started with the goal of a native look and feel with seamless performance but also needed to leverage a small team to build these apps on multiple platforms. We ultimately accomplished this by using C&#43;&#43; to share significant amounts of code in each app.<br><br>We'll cover what portions of our apps we built in C&#43;&#43; and why we left some portions in the platform languages of Java and Objective-C, deep diving into some of the most important components. We'll also discuss some unexpected benefits, areas we faced technical and human challenges, and some tips and tricks that you can use to leverage C&#43;&#43; to build very high performance apps.<br>--<br>Tony Grue has been building mobile applications, mostly in C&#43;&#43;, for the last 8 years. He worked on Dropbox for Android as it grew from a few million to more than 100 million installs. Now he leads the Carousel for Android and lib-carousel teams at Dropbox. Before Dropbox, Tony was at Microsoft where he contributed to the email, SMS, and visual search clients on Windows Phone.<br>--<br>Steven Kabbes is a mobile engineer at Dropbox. He was a member of the founding team of Mailbox and designed many of the core email sync algorithms that power it. Since then he has been working on cross platform mobile building the C&#43;&#43; layer of Mailbox which powers clients on iOS, Android and Mac. Steven is especially passionate about developer libraries, specifically ones that enable fast iteration on the next generation of products.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8db090aab2eb477891dda3e0002771ac">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/015-A-Deep-Dive-into-2-Cross-Platform-Mobile-Apps-Written-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/015-A-Deep-Dive-into-2-Cross-Platform-Mobile-Apps-Written-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Tony Grue &amp;amp; Steven Kabbes &amp;quot;From the Dropbox Trenches: A Deep Dive into Two Cross-Platform Mobile Apps Written in C&amp;#43;&amp;#43;&amp;quot;--At Dropbox we&#39;ve spent the last year and a half building two cross platform mobile apps: the email client, Mailbox, and the photo gallery, Carousel. We started with the goal of a native look and feel with seamless performance but also needed to leverage a small team to build these apps on multiple platforms. We ultimately accomplished this by using C&amp;#43;&amp;#43; to share significant amounts of code in each app.We&#39;ll cover what portions of our apps we built in C&amp;#43;&amp;#43; and why we left some portions in the platform languages of Java and Objective-C, deep diving into some of the most important components. We&#39;ll also discuss some unexpected benefits, areas we faced technical and human challenges, and some tips and tricks that you can use to leverage C&amp;#43;&amp;#43; to build very high performance apps.--Tony Grue has been building mobile applications, mostly in C&amp;#43;&amp;#43;, for the last 8 years. He worked on Dropbox for Android as it grew from a few million to more than 100 million installs. Now he leads the Carousel for Android and lib-carousel teams at Dropbox. Before Dropbox, Tony was at Microsoft where he contributed to the email, SMS, and visual search clients on Windows Phone.--Steven Kabbes is a mobile engineer at Dropbox. He was a member of the founding team of Mailbox and designed many of the core email sync algorithms that power it. Since then he has been working on cross platform mobile building the C&amp;#43;&amp;#43; layer of Mailbox which powers clients on iOS, Android and Mac. Steven is especially passionate about developer libraries, specifically ones that enable fast iteration on the next generation of products.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3639</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/015-A-Deep-Dive-into-2-Cross-Platform-Mobile-Apps-Written-in-CPP</guid>
    <dc:creator>Tony Grue, Steven Kabbes</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_high.mp4" length="1105306977" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps.mp3" expression="full" duration="3639" fileSize="58231238" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps.mp4" expression="full" duration="3639" fileSize="117072997" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps.webm" expression="full" duration="3639" fileSize="404974482" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_high.mp4" expression="full" duration="3639" fileSize="1105306977" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/92b9/ca9ffb92-4f87-4aca-8367-833c1e7e92b9/ADeepDiveInto2CrossPlatformMobileApps_mid.mp4" expression="full" duration="3639" fileSize="620161742" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Make Simple Tasks Simple!</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>C&#43;&#43; faces two challenges: Helping programmers address the most demanding tasks in terms of performance, scale, and dependability. It must also help programmers be productive writing ordinary maintainable code. There is much more &quot;ordinary code&quot; than there is performance-critical code. Thus, C&#43;&#43; must make simple tasks simple while not getting in the way of tuning software for the last byte and last cycle where that's necessary. This talk focuses on what C&#43;&#43;11 and C&#43;&#43;14 offers to simplify programming: auto, range-for loops, move semantics, futures, concepts, and more. However, the focus is not primarily on language features: the key is programming: how can we write better, more readable, efficient, and more maintainable code? If you think that the essence of C&#43;&#43; is clever pointer manipulation and huge class hierarchies you may be in for a few surprises.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:63134e028e6e488eb091a3e000226d60">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/013-Make-Simple-Tasks-Simple</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/013-Make-Simple-Tasks-Simple</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43; faces two challenges: Helping programmers address the most demanding tasks in terms of performance, scale, and dependability. It must also help programmers be productive writing ordinary maintainable code. There is much more &amp;quot;ordinary code&amp;quot; than there is performance-critical code. Thus, C&amp;#43;&amp;#43; must make simple tasks simple while not getting in the way of tuning software for the last byte and last cycle where that&#39;s necessary. This talk focuses on what C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 offers to simplify programming: auto, range-for loops, move semantics, futures, concepts, and more. However, the focus is not primarily on language features: the key is programming: how can we write better, more readable, efficient, and more maintainable code? If you think that the essence of C&amp;#43;&amp;#43; is clever pointer manipulation and huge class hierarchies you may be in for a few surprises.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>5855</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/013-Make-Simple-Tasks-Simple</guid>
    <dc:creator>Bjarne Stroustrup</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_high.mp4" length="1345698464" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup.mp3" expression="full" duration="5855" fileSize="93686726" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup.mp4" expression="full" duration="5855" fileSize="201046722" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup.webm" expression="full" duration="5855" fileSize="605149192" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_high.mp4" expression="full" duration="5855" fileSize="1345698464" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8beb/354d9049-a638-4faf-9bc3-573567a08beb/MakeSimpleTasksSimpleStroustrup_mid.mp4" expression="full" duration="5855" fileSize="817145577" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Writing Data Parallel Algorithms on GPUs</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Today most PCs, tablets and phones support multi-core processors and most programmers have some familiarity with writing (task) parallel code. Many of those same devices also have GPUs but writing code to run on a GPU is harder. Or is it?<br><br>Getting to grips with GPU programming is really about understanding things in a data parallel way. This talk will look at some of the common patterns for implementing algorithms on today's GPUs using examples from the C&#43;&#43; AMP Algorithms Library. Along the way it will cover some of the unique aspects of writing code for GPUs and contrast them with a more conventional code running on a CPU.<br>--<br>Ade Miller writes C&#43;&#43; for fun. He wrote his first N-body model in BASIC on an 8-bit microcomputer 30 years ago and never really looked back. He started using C&#43;&#43; in the early 90s.<span class="Apple-converted-space">&nbsp;</span><br><br>Recently, he's written two books on parallel programming with C&#43;&#43;; &quot;C&#43;&#43; AMP: Accelerated Massive Parallelism with Microsoft Visual C&#43;&#43;&quot; and &quot;Parallel Programming with Microsoft Visual C&#43;&#43;&quot;. Ade spends the long winters in Washington contributing to the open source C&#43;&#43; AMP Algorithms Library and well as a few other projects. His summers are mostly spent crashing expensive bicycles into trees.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:775cd39dcc334ca9a0cca3e0002085cd">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/012-Writing-Data-Parallel-Algorithms-on-GPUs</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/012-Writing-Data-Parallel-Algorithms-on-GPUs</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Today most PCs, tablets and phones support multi-core processors and most programmers have some familiarity with writing (task) parallel code. Many of those same devices also have GPUs but writing code to run on a GPU is harder. Or is it?Getting to grips with GPU programming is really about understanding things in a data parallel way. This talk will look at some of the common patterns for implementing algorithms on today&#39;s GPUs using examples from the C&amp;#43;&amp;#43; AMP Algorithms Library. Along the way it will cover some of the unique aspects of writing code for GPUs and contrast them with a more conventional code running on a CPU.--Ade Miller writes C&amp;#43;&amp;#43; for fun. He wrote his first N-body model in BASIC on an 8-bit microcomputer 30 years ago and never really looked back. He started using C&amp;#43;&amp;#43; in the early 90s. Recently, he&#39;s written two books on parallel programming with C&amp;#43;&amp;#43;; &amp;quot;C&amp;#43;&amp;#43; AMP: Accelerated Massive Parallelism with Microsoft Visual C&amp;#43;&amp;#43;&amp;quot; and &amp;quot;Parallel Programming with Microsoft Visual C&amp;#43;&amp;#43;&amp;quot;. Ade spends the long winters in Washington contributing to the open source C&amp;#43;&amp;#43; AMP Algorithms Library and well as a few other projects. His summers are mostly spent crashing expensive bicycles into trees.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4033</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/012-Writing-Data-Parallel-Algorithms-on-GPUs</guid>
    <dc:creator>Ade Miller</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_high.mp4" length="1760474707" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller.mp3" expression="full" duration="4033" fileSize="64540742" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller.mp4" expression="full" duration="4033" fileSize="193870995" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller.webm" expression="full" duration="4033" fileSize="557619849" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_high.mp4" expression="full" duration="4033" fileSize="1760474707" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/828a/7b7e5b89-a653-4247-8c21-e29b3c63828a/WritingDataParallelMiller_mid.mp4" expression="full" duration="4033" fileSize="1083478820" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>UI prototyping and development for multiple devices in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Using C&#43;&#43; for multi-device user interface and app development should be pretty straightforward. However, since the Standard C&#43;&#43; Language and Library specification does not specify a user interface library, it's actually quite challenging given that the two leading mobile platforms provide non-C&#43;&#43; User Interface APIs. Even more challenging is the new world of mobile devices and the myriad form factors, layouts, resolutions, sensors, and services that an application developer has to deal with. Plus, the deployment model for remote devices makes testing UI changes slower due to the increased build and turnaround time. This session will describe how C&#43;&#43; can be used effectively for multi-device UI development and also deliver a rapid prototyping experience to minimize the deployment time to the device for testing.<br>--<br>John &quot;JT&quot; Thomas, Director of Product Management at Embarcadero Technologies, has more than 15 years of product management and product development experience including hands-on experience with the early versions of Delphi and C&#43;&#43;Builder at Borland Software. Previously, JT held product management positions at mobile Linux vendor MontaVista Software and at Research in Motion. He earned his Computer Science degree from University of California, Santa Cruz and his MBA and MSE from San Jose State University.Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.embarcadero.comTwitter" href="http://www.embarcadero.comtwitter/" target="_blank" rel="nofollow">http://www.embarcadero.comTwitter</a><span class="Apple-converted-space">&nbsp;</span>handle: @FireMonkeyPM<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c45332d531e34633b453a3e0001f442a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/011-UI-prototyping-and-development-for-multiple-devices-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/011-UI-prototyping-and-development-for-multiple-devices-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Using C&amp;#43;&amp;#43; for multi-device user interface and app development should be pretty straightforward. However, since the Standard C&amp;#43;&amp;#43; Language and Library specification does not specify a user interface library, it&#39;s actually quite challenging given that the two leading mobile platforms provide non-C&amp;#43;&amp;#43; User Interface APIs. Even more challenging is the new world of mobile devices and the myriad form factors, layouts, resolutions, sensors, and services that an application developer has to deal with. Plus, the deployment model for remote devices makes testing UI changes slower due to the increased build and turnaround time. This session will describe how C&amp;#43;&amp;#43; can be used effectively for multi-device UI development and also deliver a rapid prototyping experience to minimize the deployment time to the device for testing.--John &amp;quot;JT&amp;quot; Thomas, Director of Product Management at Embarcadero Technologies, has more than 15 years of product management and product development experience including hands-on experience with the early versions of Delphi and C&amp;#43;&amp;#43;Builder at Borland Software. Previously, JT held product management positions at mobile Linux vendor MontaVista Software and at Research in Motion. He earned his Computer Science degree from University of California, Santa Cruz and his MBA and MSE from San Jose State University.Website: http://www.embarcadero.comTwitter handle: @FireMonkeyPM--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4188</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/011-UI-prototyping-and-development-for-multiple-devices-in-CPP</guid>
    <dc:creator>John Thomas</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_high.mp4" length="1464580219" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas.mp3" expression="full" duration="4188" fileSize="67015238" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas.mp4" expression="full" duration="4188" fileSize="158114011" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas.webm" expression="full" duration="4188" fileSize="511776351" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_high.mp4" expression="full" duration="4188" fileSize="1464580219" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8af/1b1950ba-e553-4ceb-83e0-10539f4df8af/UIPrototypinginCPPThomas_mid.mp4" expression="full" duration="4188" fileSize="899751705" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Using C++ on Mission and Safety Critical Platforms</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>The Joint Strike Fighter (JSF) is the first major DOD aircraft program to use C&#43;&#43;. Much of this software is either safety critical or mission critical and so must be written in such a way as to be clear, readable, unambiguous, testable, and maintainable. We discuss the driving requirements behind the standard and its evolution. We give a quick overview of our standard and discuss how it differs from later standards such as MISRA C&#43;&#43;. We discuss lessons learned over our nine year history of applying the standard to a large embedded software program. We also address ambiguities in rules and difficulties with automated checking of conformance with the standard.<br>--<br>Bill Emshoff has been programming in C&#43;&#43; for over 12 years. He is currently a Senior Staff Software Engineer working on the Joint Strike Fighter program at Lockheed Martin, where he has evolved to become an informal interpreter of the JSF coding standard and champion of static analysis as a means to catch and prevent coding errors prior to formal test.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2008a08f95864fe1bff6a3e0001e7c9e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/010-Using-C-on-Mission-and-Safety-Critical-Platforms</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/010-Using-C-on-Mission-and-Safety-Critical-Platforms</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--The Joint Strike Fighter (JSF) is the first major DOD aircraft program to use C&amp;#43;&amp;#43;. Much of this software is either safety critical or mission critical and so must be written in such a way as to be clear, readable, unambiguous, testable, and maintainable. We discuss the driving requirements behind the standard and its evolution. We give a quick overview of our standard and discuss how it differs from later standards such as MISRA C&amp;#43;&amp;#43;. We discuss lessons learned over our nine year history of applying the standard to a large embedded software program. We also address ambiguities in rules and difficulties with automated checking of conformance with the standard.--Bill Emshoff has been programming in C&amp;#43;&amp;#43; for over 12 years. He is currently a Senior Staff Software Engineer working on the Joint Strike Fighter program at Lockheed Martin, where he has evolved to become an informal interpreter of the JSF coding standard and champion of static analysis as a means to catch and prevent coding errors prior to formal test.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3606</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/010-Using-C-on-Mission-and-Safety-Critical-Platforms</guid>
    <dc:creator>Bill Emshoff</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_high.mp4" length="1714950394" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff.mp3" expression="full" duration="3606" fileSize="57704006" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff.mp4" expression="full" duration="3606" fileSize="113137461" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff.webm" expression="full" duration="3606" fileSize="497192731" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_high.mp4" expression="full" duration="3606" fileSize="1714950394" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/582e/6664015a-59e8-4494-96e9-24832f70582e/UsingCPPonMissionCriticalPlatformsEmshoff_mid.mp4" expression="full" duration="3606" fileSize="820520161" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Practical Functional Programming in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>To the untrained eye, pure functional programming may appear to be out of place in our traditionally imperative C&#43;&#43; world. However, the functional paradigm has become increasing prominent in production C&#43;&#43; codes, especially when implementing asynchronous execution.<br><br>This talk is intended as a primer for attendees who are either unfamiliar with functional programming or have doubts its practical uses in modern C&#43;&#43;.<span class="Apple-converted-space">&nbsp;</span><br><br>Examples from different sectors of industry/academia will be presented throughout.<br><br>No prior functional programming knowledge will be needed. While this talk will cover some theory, coverage of non-C&#43;&#43; programming languages will be minimal. The focus of this talk will be the application of theories from FP to C&#43;&#43;, not FP itself.<br>--<br>Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:529dc4084003407e925aa3e0001da346">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/009-Practical-Functional-Programming-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/009-Practical-Functional-Programming-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--To the untrained eye, pure functional programming may appear to be out of place in our traditionally imperative C&amp;#43;&amp;#43; world. However, the functional paradigm has become increasing prominent in production C&amp;#43;&amp;#43; codes, especially when implementing asynchronous execution.This talk is intended as a primer for attendees who are either unfamiliar with functional programming or have doubts its practical uses in modern C&amp;#43;&amp;#43;. Examples from different sectors of industry/academia will be presented throughout.No prior functional programming knowledge will be needed. While this talk will cover some theory, coverage of non-C&amp;#43;&amp;#43; programming languages will be minimal. The focus of this talk will be the application of theories from FP to C&amp;#43;&amp;#43;, not FP itself.--Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2755</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/009-Practical-Functional-Programming-in-CPP</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_high.mp4" length="694276096" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach.mp3" expression="full" duration="2755" fileSize="44090438" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach.mp4" expression="full" duration="2755" fileSize="115881848" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach.webm" expression="full" duration="2755" fileSize="331784370" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_high.mp4" expression="full" duration="2755" fileSize="694276096" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/04c8/3e8c23bf-639e-4817-aa50-1166770c04c8/PracticalFunctionalProgrammingAdelsteinLelbach_mid.mp4" expression="full" duration="2755" fileSize="438335813" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: C++ Puzzlers</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.<br><br>Leor is the author of The BD Software C Compiler (&quot;BDS C&quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.<br><br>In the early 90's, Leor was a member of the technical staff of R&amp;D Publications, where he wrote columns for R&amp;D's magazines: The C/C&#43;&#43; Users Journal, Windows Developer's Journal, and SysAdmin, and he also authored the first book ever published by R&amp;D Books: Illustrated C.<br><br>More recently, in addition to designing and delivering on-site training courses on C, C&#43;&#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&#43;&#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&#43;&#43; error diagnostics.<br><br>When not engaged in learning or teaching C&#43;&#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:71d06aa0fdad4ed3b971a3e0001c574c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/008-Lightning-Talks-C-Puzzlers</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/008-Lightning-Talks-C-Puzzlers</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.Leor is the author of The BD Software C Compiler (&amp;quot;BDS C&amp;quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.In the early 90&#39;s, Leor was a member of the technical staff of R&amp;amp;D Publications, where he wrote columns for R&amp;amp;D&#39;s magazines: The C/C&amp;#43;&amp;#43; Users Journal, Windows Developer&#39;s Journal, and SysAdmin, and he also authored the first book ever published by R&amp;amp;D Books: Illustrated C.More recently, in addition to designing and delivering on-site training courses on C, C&amp;#43;&amp;#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&amp;#43;&amp;#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&amp;#43;&amp;#43; error diagnostics.When not engaged in learning or teaching C&amp;#43;&amp;#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area. </itunes:summary>
    <itunes:duration>900</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/008-Lightning-Talks-C-Puzzlers</guid>
    <dc:creator>Leor Zolman</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_high.mp4" length="287034508" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers.mp3" expression="full" duration="900" fileSize="14411462" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers.mp4" expression="full" duration="900" fileSize="40041321" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers.webm" expression="full" duration="900" fileSize="120805630" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_high.mp4" expression="full" duration="900" fileSize="287034508" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/dc6c/0cf47c09-3c2f-40bf-813e-d8596d96dc6c/LightningTalksCPPPuzzlers_mid.mp4" expression="full" duration="900" fileSize="188756225" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Assertions of Competence</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&#43;&#43; for roughly 20 years, not very well at first, and slightly better now.<br><br>I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.<br><br>I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5caadf5e123f4dd29e90a3e0001baedf">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/007-Lightning-Talks-Assertions-of-Competence</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/007-Lightning-Talks-Assertions-of-Competence</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--I have been developing software for roughly 30 years. Yes, I started before I was born. I have been doing C&amp;#43;&amp;#43; for roughly 20 years, not very well at first, and slightly better now.I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities.I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>436</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/007-Lightning-Talks-Assertions-of-Competence</guid>
    <dc:creator>Michael VanLoon</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_high.mp4" length="82619644" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence.mp3" expression="full" duration="436" fileSize="6980294" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence.mp4" expression="full" duration="436" fileSize="13872290" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence.webm" expression="full" duration="436" fileSize="38922997" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_high.mp4" expression="full" duration="436" fileSize="82619644" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce8e/c20287af-dc6c-4cad-a826-e413c585ce8e/LightningTalksAssertionsofCompetence_mid.mp4" expression="full" duration="436" fileSize="50943607" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Less Code = More Software</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Prof. Peter Sommerlad is head of IFS Institute for Software at FHO HSR Rapperswil. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&#43;&#43; standardization committee, ACCU, ACM, SI and president of SWEN.Website:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://wiki.hsr.ch/PeterSommerladTwitter" href="http://wiki.hsr.ch/PeterSommerladTwitter" target="_blank" rel="nofollow">http://wiki.hsr.ch/PeterSommerladTwitter</a><span class="Apple-converted-space">&nbsp;</span>handle: @PeterSommerlad<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:add72e4b725a447ab245a3e0001b1e3c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/006-Lightning-Talks-Less-Code-More-Software</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/006-Lightning-Talks-Less-Code-More-Software</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Prof. Peter Sommerlad is head of IFS Institute for Software at FHO HSR Rapperswil. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&amp;#43;&amp;#43; standardization committee, ACCU, ACM, SI and president of SWEN.Website: http://wiki.hsr.ch/PeterSommerladTwitter handle: @PeterSommerlad--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>349</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/006-Lightning-Talks-Less-Code-More-Software</guid>
    <dc:creator>Peter Sommerlad</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_high.mp4" length="74824011" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware.mp3" expression="full" duration="349" fileSize="5589062" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware.mp4" expression="full" duration="349" fileSize="10871755" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware.webm" expression="full" duration="349" fileSize="34693336" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_high.mp4" expression="full" duration="349" fileSize="74824011" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3199/0c4be418-930e-45d7-b9bc-a049a0443199/LightningTalksLessCodeMoreSoftware_mid.mp4" expression="full" duration="349" fileSize="42680284" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Return Values Take A Closure Walk</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Programming in C&#43;&#43; since the early 90'. | Responsible: | - Development of realtime controller systems running on RT Linux for industrial manufacturing machines. | Recent hot topics: | - ReSTful server framework in C&#43;&#43; | - (Unit) testing of new and legacy C&#43;&#43; code<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f2e295d92e7741feac04a3e00019d1c0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/005-Lightning-Talks-Return-Values-Take-A-Closure-Walk</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/005-Lightning-Talks-Return-Values-Take-A-Closure-Walk</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Programming in C&amp;#43;&amp;#43; since the early 90&#39;. | Responsible: | - Development of realtime controller systems running on RT Linux for industrial manufacturing machines. | Recent hot topics: | - ReSTful server framework in C&amp;#43;&amp;#43; | - (Unit) testing of new and legacy C&amp;#43;&amp;#43; code--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>464</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/005-Lightning-Talks-Return-Values-Take-A-Closure-Walk</guid>
    <dc:creator>Martin Troxler</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_high.mp4" length="80259189" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues.mp3" expression="full" duration="464" fileSize="7438790" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues.mp4" expression="full" duration="464" fileSize="12680427" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues.webm" expression="full" duration="464" fileSize="36721785" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_high.mp4" expression="full" duration="464" fileSize="80259189" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/59bc/2f9b7470-f741-4f0d-8fbe-7273b81159bc/LightningTalksReturnValues_mid.mp4" expression="full" duration="464" fileSize="47411607" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Writing A Python Interpreter for Fun &amp; Profit</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Shy Shalom. Senior Software Engineer, Intigua. Expert cat herder.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:04113f99d60b4cf0aa5ca3e00018e581">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/004-Lightning-Talks-Writing-A-Python-Interpreter-for-Fun-Profit</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/004-Lightning-Talks-Writing-A-Python-Interpreter-for-Fun-Profit</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Shy Shalom. Senior Software Engineer, Intigua. Expert cat herder.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>400</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/004-Lightning-Talks-Writing-A-Python-Interpreter-for-Fun-Profit</guid>
    <dc:creator>Shy Shalom</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_high.mp4" length="83369399" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter.mp3" expression="full" duration="400" fileSize="6411974" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter.mp4" expression="full" duration="400" fileSize="13033936" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter.webm" expression="full" duration="400" fileSize="38526492" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_high.mp4" expression="full" duration="400" fileSize="83369399" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3be1/3545dbaf-98f4-41b8-9001-70546eb53be1/LightningTalksWritingAPythonInterpreter_mid.mp4" expression="full" duration="400" fileSize="50596243" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: C++ Conferences</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Jens Weller has worked, since 2007, as a freelancer in C&#43;&#43;, specialising in consulting, training and programming C&#43;&#43;. He started with programming C&#43;&#43; back in 1998. He is an active member of the European C&#43;&#43; community and the founder of the Meeting C&#43;&#43; platform and conference. Jens is an active supporter of C&#43;&#43; user groups and blogs often about C&#43;&#43;.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cc22a4a05f4a4f79b7eda3e0001783d4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/003-Lightning-Talks-C-Conferences</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/003-Lightning-Talks-C-Conferences</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Jens Weller has worked, since 2007, as a freelancer in C&amp;#43;&amp;#43;, specialising in consulting, training and programming C&amp;#43;&amp;#43;. He started with programming C&amp;#43;&amp;#43; back in 1998. He is an active member of the European C&amp;#43;&amp;#43; community and the founder of the Meeting C&amp;#43;&amp;#43; platform and conference. Jens is an active supporter of C&amp;#43;&amp;#43; user groups and blogs often about C&amp;#43;&amp;#43;.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>804</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/003-Lightning-Talks-C-Conferences</guid>
    <dc:creator>Jens Weller</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_high.mp4" length="186549929" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences.mp3" expression="full" duration="804" fileSize="12866630" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences.mp4" expression="full" duration="804" fileSize="25248486" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences.webm" expression="full" duration="804" fileSize="74613685" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_high.mp4" expression="full" duration="804" fileSize="186549929" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8a81/5ada9d9e-b11f-4e82-b338-42b8820e8a81/LightningTalksCPPConferences_mid.mp4" expression="full" duration="804" fileSize="108370695" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Rolling Your Own Circuit Simulator</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://cppcon2014.sched.org" href="http://cppcon2014.sched.org/" target="_blank" rel="nofollow">http://cppcon2014.sched.org</a><br><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b2581c05821f4f21a800a3e00016d4b2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/002-Lightning-Talks-Rolling-Your-Own-Circuit-Simulator</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/002-Lightning-Talks-Rolling-Your-Own-Circuit-Simulator</link>
    <itunes:summary>http://cppcon2014.sched.orgPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>767</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/002-Lightning-Talks-Rolling-Your-Own-Circuit-Simulator</guid>
    <dc:creator>Jeff Trull</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_high.mp4" length="136679322" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator.mp3" expression="full" duration="767" fileSize="12287558" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator.mp4" expression="full" duration="767" fileSize="23098336" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator.webm" expression="full" duration="767" fileSize="68181688" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_high.mp4" expression="full" duration="767" fileSize="136679322" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7b9f/6b031601-0539-4c4c-a8c9-dd0d30097b9f/LightningTalksRollingyourOwnCircuitSimulator_mid.mp4" expression="full" duration="767" fileSize="82059024" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lightning Talks: Introduction to Undodb</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Julian Smith is co-founder and Software Architect at Undo Software. He holds a physics degree from Oxford University and a Ph.D. in cognitive psychology from the University of Edinburgh. Along with co-founder and CEO Greg Law, Julian designed and developed Undo's patented record-and-rewind functionality. Julian is also an accomplished violin, viola and baroque violin player and a keen cyclist.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:70752ebde75f40439070a3e00015a577">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Lightning-Talks-Introduction-to-Undodb</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Lightning-Talks-Introduction-to-Undodb</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Julian Smith is co-founder and Software Architect at Undo Software. He holds a physics degree from Oxford University and a Ph.D. in cognitive psychology from the University of Edinburgh. Along with co-founder and CEO Greg Law, Julian designed and developed Undo&#39;s patented record-and-rewind functionality. Julian is also an accomplished violin, viola and baroque violin player and a keen cyclist.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>849</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/001-Lightning-Talks-Introduction-to-Undodb</guid>
    <dc:creator>Julian Smith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_high.mp4" length="174358050" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb.mp3" expression="full" duration="849" fileSize="13600454" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb.mp4" expression="full" duration="849" fileSize="30428009" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb.webm" expression="full" duration="849" fileSize="81772402" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_high.mp4" expression="full" duration="849" fileSize="174358050" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c0c8/c1b77fe3-0dc4-46ff-8fd1-cac0a8dcc0c8/LightningTalkIntrotoUndodb_mid.mp4" expression="full" duration="849" fileSize="110336359" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Meet the Authors</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Chandler Carruth â¢ John Lakos â¢ Herb Sutter â¢ Ade Miller â¢ Alex Allain â¢ Kate Gregory â¢ Michael Wong â¢ Peter Sommerlad â¢ Scott Meyers<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f75eaeaa932b41bb8e67a3df017b2197">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meet-the-Authors</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meet-the-Authors</link>
    <itunes:summary>http://www.cppcon.org--Chandler Carruth â¢ John Lakos â¢ Herb Sutter â¢ Ade Miller â¢ Alex Allain â¢ Kate Gregory â¢ Michael Wong â¢ Peter Sommerlad â¢ Scott Meyers--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>5446</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Meet-the-Authors</guid>
    <dc:creator>Herb Sutter, Kate Gregory, Ade Miller, Chandler Carruth, Scott Meyers, Michael Wong, John Lakos, Alex Allain, Peter Sommerlad</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_high.mp4" length="3001366322" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors.mp3" expression="full" duration="5446" fileSize="87149510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors.mp4" expression="full" duration="5446" fileSize="392854345" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors.webm" expression="full" duration="5446" fileSize="772181351" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_high.mp4" expression="full" duration="5446" fileSize="3001366322" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b9ca/301e7757-94f7-42d9-80e0-8f2ebd59b9ca/MeetTheAuthors_mid.mp4" expression="full" duration="5446" fileSize="1872671396" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>ODB, Advanced Weapons and Tactics</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Hiding a relational database behind an ORM does not work. Did I just say that? Yes! Performance and scalability limitations always get in the way. Should we then throw away the whole ORM idea and go back to SQL? We don't have to. In fact, the bulk of ODB features were specifically designed to resolve these limitations without degenerating to JOINs and SQL. And that's what the second part of this talk is all about: bulk operations, object caches, lazy pointers, views, change-tracking containers, optimistic concurrency, object sections (partitions), and prepared and cached queries. By the end of the second half you will be ready for anything that real-world C&#43;&#43; object persistence and database access can throw at you.<br>--<br>Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&#43;&#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&#43;&#43; using domain-specific languages (DSL), C&#43;&#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&#43;&#43; ORM system as well as XSD and XSD/e XML Schema to C&#43;&#43; compilers.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0d787a28b71147be9559a3df017a31ea">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/ODB-Advanced-Weapons-and-Tactics</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/ODB-Advanced-Weapons-and-Tactics</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Hiding a relational database behind an ORM does not work. Did I just say that? Yes! Performance and scalability limitations always get in the way. Should we then throw away the whole ORM idea and go back to SQL? We don&#39;t have to. In fact, the bulk of ODB features were specifically designed to resolve these limitations without degenerating to JOINs and SQL. And that&#39;s what the second part of this talk is all about: bulk operations, object caches, lazy pointers, views, change-tracking containers, optimistic concurrency, object sections (partitions), and prepared and cached queries. By the end of the second half you will be ready for anything that real-world C&amp;#43;&amp;#43; object persistence and database access can throw at you.--Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&amp;#43;&amp;#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&amp;#43;&amp;#43; using domain-specific languages (DSL), C&amp;#43;&amp;#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&amp;#43;&amp;#43; ORM system as well as XSD and XSD/e XML Schema to C&amp;#43;&amp;#43; compilers.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3872</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/ODB-Advanced-Weapons-and-Tactics</guid>
    <dc:creator>Boris Kolpackov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_high.mp4" length="871614148" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics.mp3" expression="full" duration="3872" fileSize="61956422" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics.mp4" expression="full" duration="3872" fileSize="108754316" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics.webm" expression="full" duration="3872" fileSize="369631817" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_high.mp4" expression="full" duration="3872" fileSize="871614148" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d93a/decb628a-0998-46b0-b5b0-d1a97187d93a/KolpackovAdvancedWeaponsTactics_mid.mp4" expression="full" duration="3872" fileSize="503344678" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Introduction to C++ AMP (GPGPU Computing)</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Meet C&#43;&#43; AMP (Accelerated Massive Parallelism), an abstraction layer on top of accelerators such as GPUs. In its current version it allows you to run code on any DX11 GPU, independent of the vendor, and it will even distribute workload across GPUs of different vendors simultaneously. C&#43;&#43; AMP was originally designed by Microsoft but is now an open standard. C&#43;&#43; AMP can deliver orders of magnitude performance increase with certain algorithms by utilizing the GPU to perform mathematical calculations. This talk will give a high level overview of what C&#43;&#43; AMP is and what it can do for you. It is time to start taking advantage of the computing power of GPUs!<br>--<br>Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&#43;&#43;, and specifically Microsoft VC&#43;&#43; and the MFC framework. Next to C/C&#43;&#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&#43;&#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&#43;&#43; expertise. Marc is the author of &quot;Professional C&#43;&#43;, Second and Third Edition&quot;, published by Wiley/Wrox, is the founder of the Belgian C&#43;&#43; Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blog. He also creates freeware and shareware programs that are distributed through his website at www.nuonsoft.com, and maintains a blog on www.nuonsoft.com/blog/. He is also passionate about traveling and gastronomic restaurants.m<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3c0880399f364a75a2ffa3df0179527f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Introduction-to-C-AMP-GPGPU-Computing</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Introduction-to-C-AMP-GPGPU-Computing</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Meet C&amp;#43;&amp;#43; AMP (Accelerated Massive Parallelism), an abstraction layer on top of accelerators such as GPUs. In its current version it allows you to run code on any DX11 GPU, independent of the vendor, and it will even distribute workload across GPUs of different vendors simultaneously. C&amp;#43;&amp;#43; AMP was originally designed by Microsoft but is now an open standard. C&amp;#43;&amp;#43; AMP can deliver orders of magnitude performance increase with certain algorithms by utilizing the GPU to perform mathematical calculations. This talk will give a high level overview of what C&amp;#43;&amp;#43; AMP is and what it can do for you. It is time to start taking advantage of the computing power of GPUs!--Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&amp;#43;&amp;#43;, and specifically Microsoft VC&amp;#43;&amp;#43; and the MFC framework. Next to C/C&amp;#43;&amp;#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&amp;#43;&amp;#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&amp;#43;&amp;#43; expertise. Marc is the author of &amp;quot;Professional C&amp;#43;&amp;#43;, Second and Third Edition&amp;quot;, published by Wiley/Wrox, is the founder of the Belgian C&amp;#43;&amp;#43; Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blo</itunes:summary>
    <itunes:duration>3187</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Introduction-to-C-AMP-GPGPU-Computing</guid>
    <dc:creator>Marc Gregoire</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_high.mp4" length="833686293" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP.mp3" expression="full" duration="3187" fileSize="50998982" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP.mp4" expression="full" duration="3187" fileSize="105669106" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP.webm" expression="full" duration="3187" fileSize="333118565" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_high.mp4" expression="full" duration="3187" fileSize="833686293" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c119/c5fe4782-e45b-4e9b-a1ab-3279d4aac119/GregoireIntrotoCPPAMP_mid.mp4" expression="full" duration="3187" fileSize="486801981" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Rebuilding Boost Date-Time for C++11</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Boost date_time is a widely used C&#43;&#43; library originally released in 2001 -- including being the basis for elements of the chrono library in c&#43;&#43;11. While the library interface has stayed stable for more than a decade, the world around it has changed with the standard library and language changing. It is time for the library tobe rewritten to account for c&#43;&#43;11.<br><br>The lecture describes in detail the design decisions and changes to the library for C&#43;&#43;11. More generally it describes elements of design for a small valuetype library. Many of these considerations involve new features of C&#43;&#43;11 and how they should be used. This includes noexcept, move construction/assignment (R-values), constexpr, enum classes, and user defined literals.<br><br>Attendees will learn about the design considerations and tradeoffs of using the new language features in their own work while getting a glimpse of boost date-time version 2.<br>--<br>Jeff Garland has worked on many large-scale, distributed software projects over the past 20&#43; years. The systems span many different domains including telephone switching, industrial process control, satellite ground control, ip-based communications, and financial systems. He has written C&#43;&#43; networked code for several large systems including the development high performance network servers and data distribution frameworks.Mr. Garland's interest in Boost started in 2000 as a user. Since then he has developed Boost.date_time, become a moderator, served as a review manager for several libraries (including asio and serialization), administered the Boost wiki, and served as a mentor for Google Summer of Code. Mr. Garland holds a Master's degree in Computer Science from Arizona State University and a Bachelor of Science in Systems Engineering from the University of Arizona. He is co-author of Large Scale Software Architecture: A Practical Guide Using UML. He is currently Principal Consultant for his own company: CrystalClear Software, Inc.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8b1560e5d23c4bc3a5c6a3df01789f5d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Rebuilding-Boost-Date-Time-for-CPP11</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Rebuilding-Boost-Date-Time-for-CPP11</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Boost date_time is a widely used C&amp;#43;&amp;#43; library originally released in 2001 -- including being the basis for elements of the chrono library in c&amp;#43;&amp;#43;11. While the library interface has stayed stable for more than a decade, the world around it has changed with the standard library and language changing. It is time for the library tobe rewritten to account for c&amp;#43;&amp;#43;11.The lecture describes in detail the design decisions and changes to the library for C&amp;#43;&amp;#43;11. More generally it describes elements of design for a small valuetype library. Many of these considerations involve new features of C&amp;#43;&amp;#43;11 and how they should be used. This includes noexcept, move construction/assignment (R-values), constexpr, enum classes, and user defined literals.Attendees will learn about the design considerations and tradeoffs of using the new language features in their own work while getting a glimpse of boost date-time version 2.--Jeff Garland has worked on many large-scale, distributed software projects over the past 20&amp;#43; years. The systems span many different domains including telephone switching, industrial process control, satellite ground control, ip-based communications, and financial systems. He has written C&amp;#43;&amp;#43; networked code for several large systems including the development high performance network servers and data distribution frameworks.Mr. Garland&#39;s interest in Boost started in 2000 as a user. Since then he has developed Boost.date_time, become a moderator, served as a review manager for several libraries (including asio and serialization), administered the Boost wiki, and served as a mentor for Google Summer of Code. Mr. Garland holds a Master&#39;s degree in Computer Science from Arizona State University and a Bachelor of Science in Systems Engineering from the University of Arizona. He is co-auth</itunes:summary>
    <itunes:duration>3971</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Rebuilding-Boost-Date-Time-for-CPP11</guid>
    <dc:creator>Jeff Garland</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_high.mp4" length="1294399574" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime.mp3" expression="full" duration="3971" fileSize="63540806" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime.mp4" expression="full" duration="3971" fileSize="129251730" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime.webm" expression="full" duration="3971" fileSize="428446054" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_high.mp4" expression="full" duration="3971" fileSize="1294399574" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae12/a4127961-f26b-442f-8e05-9a17ee44ae12/GarlandRebuildingBoostDateTime_mid.mp4" expression="full" duration="3971" fileSize="732462550" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Efficiency with Algorithms, Performance with Data Structures</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Why do you write C&#43;&#43; code? There is a good chance it is in part because of concerns about the performance of your software. Whether they stem from needing to run on every smaller mobile devices, squeezing the last few effects into video game, or because every watt of power in your data center costs too much, C&#43;&#43; programmers throughout the industry have an insatiable desire for writing high performance code.</span><br><br><span>Unfortunately, even with C&#43;&#43;, this can be really challenging. Over the past twenty years processors, memory, software libraries, and even compilers have radically changed what makes C&#43;&#43; code fast. Even measuring the performance of your code can be a daunting task. This talk will dig into how modern processors work, what makes them fast, and how to exploit them effectively with modern C&#43;&#43; code. It will teach you how modern C&#43;&#43; optimizers see your code today, and how that is likely to change in the coming years. It will teach you how to reason better about the performance of your code, and how to write your code so that it performs better. You will even learn some tricks about how to measure the performance of your code.</span><br><span>--</span><br><span>Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google's distributed build system. He makes guest appearances helping to maintain a few core C&#43;&#43; libraries across Google's codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master's thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2252c4e1cbc94e4197b0a3df0177beec">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Efficiency-with-Algorithms-Performance-with-Data-Structures</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Efficiency-with-Algorithms-Performance-with-Data-Structures</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Why do you write C&amp;#43;&amp;#43; code? There is a good chance it is in part because of concerns about the performance of your software. Whether they stem from needing to run on every smaller mobile devices, squeezing the last few effects into video game, or because every watt of power in your data center costs too much, C&amp;#43;&amp;#43; programmers throughout the industry have an insatiable desire for writing high performance code.Unfortunately, even with C&amp;#43;&amp;#43;, this can be really challenging. Over the past twenty years processors, memory, software libraries, and even compilers have radically changed what makes C&amp;#43;&amp;#43; code fast. Even measuring the performance of your code can be a daunting task. This talk will dig into how modern processors work, what makes them fast, and how to exploit them effectively with modern C&amp;#43;&amp;#43; code. It will teach you how modern C&amp;#43;&amp;#43; optimizers see your code today, and how that is likely to change in the coming years. It will teach you how to reason better about the performance of your code, and how to write your code so that it performs better. You will even learn some tricks about how to measure the performance of your code.--Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google&#39;s distributed build system. He makes guest appearances helping to maintain a few core C&amp;#43;&amp;#43; libraries across Google&#39;s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master&#39;s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.Bas</itunes:summary>
    <itunes:duration>4420</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Efficiency-with-Algorithms-Performance-with-Data-Structures</guid>
    <dc:creator>Chandler Carruth</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_high.mp4" length="1243595652" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms.mp3" expression="full" duration="4420" fileSize="70733510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms.mp4" expression="full" duration="4420" fileSize="178169134" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms.webm" expression="full" duration="4420" fileSize="525410446" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_high.mp4" expression="full" duration="4420" fileSize="1243595652" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/28f5/b2f27e44-699b-4bf3-aed9-4953548428f5/CarruthEfficiencyWithAlgorithms_mid.mp4" expression="full" duration="4420" fileSize="749464247" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Adventures In Updating a Vintage Codebase</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Still maintaining a legacy application? Do you have strdup()'s crying to be replaced with std::string? Do pre-standard headers such as iostream.h litter your code? Do boost libraries no longer compile with your favorite C&#43;&#43;98 compiler? From GUIs to kernel drivers, this talk will look at some of the adventures taken while updating a codebase with more than 20 years of history to C&#43;&#43;11.<br>--<br>Billy Baker has developed deterministic real-time flight simulation software using C&#43;&#43; for FlightSafety International, Evans and Sutherland and Boeing since 1997. At C&#43;&#43; committee meetings, he can most likely be found in LWG. He received his B.S. and M.S in Applied Mathematics from the University of Tulsa and is currently working on a Ph.D. in Computer Science. If asked, he will tell stories from his research semester at NCSA when web browsers did not yet have forms support.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e3f90a011437449194efa3df0176b3f7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Adventures-In-Updating-a-Vintage-Codebase</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Adventures-In-Updating-a-Vintage-Codebase</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Still maintaining a legacy application? Do you have strdup()&#39;s crying to be replaced with std::string? Do pre-standard headers such as iostream.h litter your code? Do boost libraries no longer compile with your favorite C&amp;#43;&amp;#43;98 compiler? From GUIs to kernel drivers, this talk will look at some of the adventures taken while updating a codebase with more than 20 years of history to C&amp;#43;&amp;#43;11.--Billy Baker has developed deterministic real-time flight simulation software using C&amp;#43;&amp;#43; for FlightSafety International, Evans and Sutherland and Boeing since 1997. At C&amp;#43;&amp;#43; committee meetings, he can most likely be found in LWG. He received his B.S. and M.S in Applied Mathematics from the University of Tulsa and is currently working on a Ph.D. in Computer Science. If asked, he will tell stories from his research semester at NCSA when web browsers did not yet have forms support.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2665</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Adventures-In-Updating-a-Vintage-Codebase</guid>
    <dc:creator>Billy Baker</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_high.mp4" length="877678257" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase.mp3" expression="full" duration="2665" fileSize="42645830" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase.mp4" expression="full" duration="2665" fileSize="97984184" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase.webm" expression="full" duration="2665" fileSize="281922130" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_high.mp4" expression="full" duration="2665" fileSize="877678257" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2dee/5cb074f0-133a-4226-a6f9-ae136d422dee/BakerUpdatingVintageCodebase_mid.mp4" expression="full" duration="2665" fileSize="510374586" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Viewing the World Through Array-Shaped Glasses</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>It's agreed among experts that the most performant data structure in C&#43;&#43; is an array. Or a vector. Or a dynarray. Indeed, until recently there was no standardized approach in C&#43;&#43; to view these types in an uniform manner. It was even murkier when the data had logically more than one dimension. This talk is an introduction to the new features proposed for C&#43;&#43;17 in N3851 [TBD: update after Rapperswil] bringing all contiguous data into harmony and lifting it to higher dimensions: index, bounds, array_view and more. Attendees will also learn how indexable algorithms differ from the traditional elemental ones, and what does it mean for parallelism.<br>--<br>Åukasz Mendakiewicz is a software engineer at Microsoft, where he focuses on the customer experience with parallel programming models for C&#43;&#43;. He is especially interested in GPGPU acceleration, and puts this passion to work on C&#43;&#43; AMP. He holds an M.S. in Computer Science from AGH UST in Krakow, Poland.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3cecabba7e4e47abaaeca3df0173ca55">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Viewing-the-World-Through-Array-Shaped-Glasses</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Viewing-the-World-Through-Array-Shaped-Glasses</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--It&#39;s agreed among experts that the most performant data structure in C&amp;#43;&amp;#43; is an array. Or a vector. Or a dynarray. Indeed, until recently there was no standardized approach in C&amp;#43;&amp;#43; to view these types in an uniform manner. It was even murkier when the data had logically more than one dimension. This talk is an introduction to the new features proposed for C&amp;#43;&amp;#43;17 in N3851 [TBD: update after Rapperswil] bringing all contiguous data into harmony and lifting it to higher dimensions: index, bounds, array_view and more. Attendees will also learn how indexable algorithms differ from the traditional elemental ones, and what does it mean for parallelism.--Åukasz Mendakiewicz is a software engineer at Microsoft, where he focuses on the customer experience with parallel programming models for C&amp;#43;&amp;#43;. He is especially interested in GPGPU acceleration, and puts this passion to work on C&amp;#43;&amp;#43; AMP. He holds an M.S. in Computer Science from AGH UST in Krakow, Poland.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>1330</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Viewing-the-World-Through-Array-Shaped-Glasses</guid>
    <dc:creator>Lukasz Mendakiewicz</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_high.mp4" length="142782912" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses.mp3" expression="full" duration="1330" fileSize="21292358" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses.mp4" expression="full" duration="1330" fileSize="31623079" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses.webm" expression="full" duration="1330" fileSize="90819376" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_high.mp4" expression="full" duration="1330" fileSize="142782912" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a9f4/461892d4-3221-48cc-ae30-15e4f6e5a9f4/MendakiewiczArrayShapedGlasses_mid.mp4" expression="full" duration="1330" fileSize="96652629" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>An Overview of C++11/14, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>This accelerated introduction to C&#43;&#43;11/14 surveys most of the key additions to the C&#43;&#43; language, including support for increased code clarity (lambdas, uniform initialization, auto, new OOD control) and improved performance (rvalue references, move semantics and perfect forwarding.)</span><br><br><span>The presentation is designed for those who truly need a quick overview of the new C&#43;&#43;, so the focus is on breadth rather than depth. Whenever feasible, new language features are presented in a style showcasing how they improve over their &quot;Old C&#43;&#43;&quot; counterparts.</span><br><span>--</span><br><span>Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.</span><br><br><br><span>Leor is the author of The BD Software C Compiler (&quot;BDS C&quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.</span><br><br><br><span>In the early 90's, Leor was a member of the technical staff of R&amp;D Publications, where he wrote columns for R&amp;D's magazines: The C/C&#43;&#43; Users Journal, Windows Developer's Journal, and SysAdmin, and he also authored the first book ever published by R&amp;D Books: Illustrated C.</span><br><br><br><span>More recently, in addition to designing and delivering on-site training courses on C, C&#43;&#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&#43;&#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&#43;&#43; error diagnostics.</span><br><br><br><br><span>When not engaged in learning or teaching C&#43;&#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fa265bfcafe1437586b7a3df017241b1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-CPP1114-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-CPP1114-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This accelerated introduction to C&amp;#43;&amp;#43;11/14 surveys most of the key additions to the C&amp;#43;&amp;#43; language, including support for increased code clarity (lambdas, uniform initialization, auto, new OOD control) and improved performance (rvalue references, move semantics and perfect forwarding.)The presentation is designed for those who truly need a quick overview of the new C&amp;#43;&amp;#43;, so the focus is on breadth rather than depth. Whenever feasible, new language features are presented in a style showcasing how they improve over their &amp;quot;Old C&amp;#43;&amp;#43;&amp;quot; counterparts.--Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.Leor is the author of The BD Software C Compiler (&amp;quot;BDS C&amp;quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.In the early 90&#39;s, Leor was a member of the technical staff of R&amp;amp;D Publications, where he wrote columns for R&amp;amp;D&#39;s magazines: The C/C&amp;#43;&amp;#43; Users Journal, Windows Developer&#39;s Journal, and SysAdmin, and he also authored the first book ever published by R&amp;amp;D Books: Illustrated C.More recently, in addition to designing and delivering on-site training courses on C, C&amp;#43;&amp;#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&amp;#43;&amp;#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&amp;#43;&amp;#43; error diagnostics.When not engaged in learning or teaching C&amp;#43;&amp;#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area.--Videos Filmed &amp;a</itunes:summary>
    <itunes:duration>4223</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-CPP1114-Part-II</guid>
    <dc:creator>Leor Zolman</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_high.mp4" length="595227678" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII.mp3" expression="full" duration="4223" fileSize="67572038" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII.mp4" expression="full" duration="4223" fileSize="112087625" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII.webm" expression="full" duration="4223" fileSize="333160210" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_high.mp4" expression="full" duration="4223" fileSize="595227678" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f2f6/f800a630-6d7a-4c39-82ef-1162deaaf2f6/ZolmanOverviewCPPPartII_mid.mp4" expression="full" duration="4223" fileSize="384863727" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Generic Programming with Concepts Lite, Part II</title>
    <description><![CDATA[<p><span>Link:</span><br><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>In this talk, I will give an overview of the Concepts Lite language extension for C&#43;&#43; and present examples of its use in design and implementation of real-world generic libraries. Concepts Lite provides the ability for programmers to directly state constraints on template arguments as part of the template declaration. These constraints are predicates which determine whether or not a template argument can be used with that template. Constraints are checked by the compiler at the point of use, meaning that that effectively constrained generic libraries will not suffer from the usual problems of insane diagnostics. Libraries written using concepts will be far more readable and maintainable than the status quo. This talk will focus on generic programming, proposed language features, and their use in building real-world libraries.</span><br><br><span>Concepts Lite is a forthcoming ISO Technical Specification (TS) aimed at publication alongside C&#43;&#43;14. Concepts Lite is implemented in a branch of GCC, which will be made available to the audience for experiments and experience.</span><br><span>--</span><br><span>Andrew Sutton is an assistant professor at the University of Akron in Ohio where he teaches and conducts research at the intersection of Software Engineering and Programming Languages. Dr. Sutton helped design and implemented the Concepts Lite proposal for the C&#43;&#43; programming language. He is also the author of the Origin C&#43;&#43; Libraries, an experimental collection of generic libraries that supports ideas and research for generic programming. Dr. Sutton had previously worked as a postdoctoral researcher at Texas A&amp;M University where he worked with Bjarne Stroustrup and Gabriel Dos Reis on the design and implementation of language support for generic programming (i.e., Concepts Lite). He is a member of the C&#43;&#43; Standards Committee and Project Editor for the Concepts Lite Technical Specification. He graduated with a PhD in computer science from Kent State University in Ohio in 2010.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:897fdbf52d6240439a8fa3df01716d82">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-II</link>
    <itunes:summary>Link:http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In this talk, I will give an overview of the Concepts Lite language extension for C&amp;#43;&amp;#43; and present examples of its use in design and implementation of real-world generic libraries. Concepts Lite provides the ability for programmers to directly state constraints on template arguments as part of the template declaration. These constraints are predicates which determine whether or not a template argument can be used with that template. Constraints are checked by the compiler at the point of use, meaning that that effectively constrained generic libraries will not suffer from the usual problems of insane diagnostics. Libraries written using concepts will be far more readable and maintainable than the status quo. This talk will focus on generic programming, proposed language features, and their use in building real-world libraries.Concepts Lite is a forthcoming ISO Technical Specification (TS) aimed at publication alongside C&amp;#43;&amp;#43;14. Concepts Lite is implemented in a branch of GCC, which will be made available to the audience for experiments and experience.--Andrew Sutton is an assistant professor at the University of Akron in Ohio where he teaches and conducts research at the intersection of Software Engineering and Programming Languages. Dr. Sutton helped design and implemented the Concepts Lite proposal for the C&amp;#43;&amp;#43; programming language. He is also the author of the Origin C&amp;#43;&amp;#43; Libraries, an experimental collection of generic libraries that supports ideas and research for generic programming. Dr. Sutton had previously worked as a postdoctoral researcher at Texas A&amp;amp;M University where he worked with Bjarne Stroustrup and Gabriel Dos Reis on the design and implementation of language support for generic programming (i.e., Concepts Lite). He is a member of the C&amp;#43;&amp;#43; Standards Committee and</itunes:summary>
    <itunes:duration>3884</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-II</guid>
    <dc:creator>Andrew Sutton</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_high.mp4" length="927277399" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII.mp3" expression="full" duration="3884" fileSize="62151110" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII.mp4" expression="full" duration="3884" fileSize="126184873" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII.webm" expression="full" duration="3884" fileSize="427873404" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_high.mp4" expression="full" duration="3884" fileSize="927277399" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/613b/91004f5c-8a8c-406a-8953-85e4a268613b/SuttonGenericProgrammingPartII_mid.mp4" expression="full" duration="3884" fileSize="562155875" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lock-Free Programming (or, Juggling Razor Blades), Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Example-driven talk on how to design and write lock-free algorithms and data structures using C&#43;&#43; atomic -- something that can look deceptively simple, but contains very deep topics. (Important note: This is not the same as my &quot;atomic Weapons&quot; talk; that talk was about the &quot;what they are and why&quot; of the C&#43;&#43; memory model and atomics, and did not cover how to actually use atomics to implement highly concurrent algorithms and data structures.)</span><br><span>--</span><br><span>Herb Sutter: Author, chair of the ISO C&#43;&#43; committee, software architect at Microsoft.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e4e2ee5156ca403c8579a3df016fa432">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Example-driven talk on how to design and write lock-free algorithms and data structures using C&amp;#43;&amp;#43; atomic -- something that can look deceptively simple, but contains very deep topics. (Important note: This is not the same as my &amp;quot;atomic Weapons&amp;quot; talk; that talk was about the &amp;quot;what they are and why&amp;quot; of the C&amp;#43;&amp;#43; memory model and atomics, and did not cover how to actually use atomics to implement highly concurrent algorithms and data structures.)--Herb Sutter: Author, chair of the ISO C&amp;#43;&amp;#43; committee, software architect at Microsoft.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4279</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-II</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_high.mp4" length="755920811" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII.mp3" expression="full" duration="4279" fileSize="68477510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII.mp4" expression="full" duration="4279" fileSize="146143369" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII.webm" expression="full" duration="4279" fileSize="534527306" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_high.mp4" expression="full" duration="4279" fileSize="755920811" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4496/de7daeba-6536-4f31-b398-734ec7504496/SutterLockFreeProgrammingPartII_mid.mp4" expression="full" duration="4279" fileSize="506514488" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Defensive Programming Done Right, Part II</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>In our component-based development methodology, each developer is responsible for ensuring that the software he or she creates is easy to understand and use, and not especially easy to misuse. One common form of misuse is to invoke a library function or method under circumstances where not all of its preconditions are satisfied, leading to undefined behavior. Contracts having undefined behavior are not necessarily undesirable, and (for many engineering reasons) are often optimal. Most would agree that a well-implemented library should do something other than silently continue when a pre-condition violation is detected, although these same folks might not agree on what specific action should be taken. Unfortunately, validating preconditions implies writing additional code that will execute at runtime. More code runs slower, and some would fairly argue that they should not be forced to pay for redundant runtime checks in the library software they use. Whether and to what extent library functions should validate their preconditions, and what should happen if a precondition violation is detected are questions that are best answered on an application by application basis - i.e., by the owner of main. &quot;Defensive Programming Done Right&quot; makes it all possible.</span><br><br><span>In this talk, we begin by reviewing the basic concepts of Design-By-Contract (DbC), and what we mean by the term &quot;Defensive Programming&quot; (DP). We then explore our overall approach to institutionalizing defensive programming in robust reusable library software such that each application can conveniently specify both the runtime budget (e.g., none, some, lots) for defensive checking, and also the specific action to be taken (e.g., abort, throw, spin) should a precondition violation occur. Along the way, we touch on how modern compilers and linkers work, binary compatibility, and the consequences of possibly violating the one-definition rule in mixed-mode builds. We conclude the talk by describing and then demonstrating our &quot;negative testing&quot; strategy (and supporting test apparatus) for readily verifying, in our component-level test drivers, that our defensive checks detect and report out-of-contract client use as intended. Actual source for the supporting utility components will be presented throughout the talk and made available afterwards.</span><br><span>--</span><br><span>John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:09241063a4094a44bc59a3df016ed3ba">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-II</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-II</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In our component-based development methodology, each developer is responsible for ensuring that the software he or she creates is easy to understand and use, and not especially easy to misuse. One common form of misuse is to invoke a library function or method under circumstances where not all of its preconditions are satisfied, leading to undefined behavior. Contracts having undefined behavior are not necessarily undesirable, and (for many engineering reasons) are often optimal. Most would agree that a well-implemented library should do something other than silently continue when a pre-condition violation is detected, although these same folks might not agree on what specific action should be taken. Unfortunately, validating preconditions implies writing additional code that will execute at runtime. More code runs slower, and some would fairly argue that they should not be forced to pay for redundant runtime checks in the library software they use. Whether and to what extent library functions should validate their preconditions, and what should happen if a precondition violation is detected are questions that are best answered on an application by application basis - i.e., by the owner of main. &amp;quot;Defensive Programming Done Right&amp;quot; makes it all possible.In this talk, we begin by reviewing the basic concepts of Design-By-Contract (DbC), and what we mean by the term &amp;quot;Defensive Programming&amp;quot; (DP). We then explore our overall approach to institutionalizing defensive programming in robust reusable library software such that each application can conveniently specify both the runtime budget (e.g., none, some, lots) for defensive checking, and also the specific action to be taken (e.g., abort, throw, spin) should a precondition violation occur. Along the way, we touch on how modern compilers and linkers work, bina</itunes:summary>
    <itunes:duration>3969</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-II</guid>
    <dc:creator>John Lakos</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_high.mp4" length="431251278" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII.mp3" expression="full" duration="3969" fileSize="63518918" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII.mp4" expression="full" duration="3969" fileSize="86944405" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII.webm" expression="full" duration="3969" fileSize="238850028" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_high.mp4" expression="full" duration="3969" fileSize="431251278" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bde/acec2d39-6bb5-437a-9ecf-efc09ddf1bde/DefensiveProgrammingPartII_mid.mp4" expression="full" duration="3969" fileSize="272388509" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Persisting C++ Classes in Relational Databases with ODB</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>ODB is an open source, cross-platform and cross-database (SQLite, PostgreSQL, MySQL, MS SQL Server, Oracle) object-relational mapping (ORM) system for C&#43;&#43;. It allows you to persist C&#43;&#43; objects to a relational database without having to deal with tables, columns, or SQL, and without manually writing any mapping code.<br><br>In the first part of this two-part talk we will cover the basics of transactionally persisting, loading, updating, and deleting simple C&#43;&#43; classes in a database as well as querying the database for objects. We will then look into persisting C&#43;&#43; classes that have more interesting data members, such as containers and pointers to objects, or that form a polymorphic hierarchy. Support for C&#43;&#43;11, Qt, and Boost value types, containers, and smart pointers will also be covered.<br><br>Targeting 5 different database systems at the same time may sound like a daunting task but as we will see it is not that hard with ODB. Life would also be a lot easier if our C&#43;&#43; classes never changed. The next best thing is to have comprehensive tooling support. So we will conclude the first half with a discussion of database schema evolution and its support in ODB.<br>--<br>Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&#43;&#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&#43;&#43; using domain-specific languages (DSL), C&#43;&#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&#43;&#43; ORM system as well as XSD and XSD/e XML Schema to C&#43;&#43; compilers.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d0d196c4534142838ea1a3df016d62e8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Persisting-C-Classes-in-Relational-Databases-with-ODB</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Persisting-C-Classes-in-Relational-Databases-with-ODB</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--ODB is an open source, cross-platform and cross-database (SQLite, PostgreSQL, MySQL, MS SQL Server, Oracle) object-relational mapping (ORM) system for C&amp;#43;&amp;#43;. It allows you to persist C&amp;#43;&amp;#43; objects to a relational database without having to deal with tables, columns, or SQL, and without manually writing any mapping code.In the first part of this two-part talk we will cover the basics of transactionally persisting, loading, updating, and deleting simple C&amp;#43;&amp;#43; classes in a database as well as querying the database for objects. We will then look into persisting C&amp;#43;&amp;#43; classes that have more interesting data members, such as containers and pointers to objects, or that form a polymorphic hierarchy. Support for C&amp;#43;&amp;#43;11, Qt, and Boost value types, containers, and smart pointers will also be covered.Targeting 5 different database systems at the same time may sound like a daunting task but as we will see it is not that hard with ODB. Life would also be a lot easier if our C&amp;#43;&amp;#43; classes never changed. The next best thing is to have comprehensive tooling support. So we will conclude the first half with a discussion of database schema evolution and its support in ODB.--Boris Kolpackov is a founder and chief software designer at Code Synthesis, a company focusing on the development of open-source tools and libraries for C&amp;#43;&amp;#43;. For the past 10 years Boris has been working on solving interesting problems in the context of C&amp;#43;&amp;#43; using domain-specific languages (DSL), C&amp;#43;&amp;#43; parsing, source-to-source translation, and code generation. His notable projects to date include the ODB C&amp;#43;&amp;#43; ORM system as well as XSD and XSD/e XML Schema to C&amp;#43;&amp;#43; compilers.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3765</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Persisting-C-Classes-in-Relational-Databases-with-ODB</guid>
    <dc:creator>Boris Kolpackov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_high.mp4" length="973186057" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses.mp3" expression="full" duration="3765" fileSize="60243014" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses.mp4" expression="full" duration="3765" fileSize="109463398" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses.webm" expression="full" duration="3765" fileSize="356725705" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_high.mp4" expression="full" duration="3765" fileSize="973186057" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1891/cbd18e95-6896-482d-b247-8c09caa21891/KolpackovPersistingCPPClasses_mid.mp4" expression="full" duration="3765" fileSize="583961042" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>cppreference.com: Documenting C++ One Edit at a Time</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>How do you convert hundreds of pages of C&#43;&#43; standardese into a resource that is accessible to software engineers around the world? This talk will describe the process of building a community-run website that documents all of the nooks and dark corners of the C&#43;&#43; programming language. I'll look back at the history of how C&#43;&#43; was defined, cover the current state of documentation, examine the pros and cons of running a fairly high-profile publicly-editable wiki, and try to guess at what the future holds.</span><br><span>--</span><br><span>Nate Kohl is an intergalactic computerist who enjoys herding cats.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d4b304a3429e4b9aa22aa3df016c8c05">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/cppreferencecom-Documenting-CPP-One-Edit-at-a-Time</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/cppreferencecom-Documenting-CPP-One-Edit-at-a-Time</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--How do you convert hundreds of pages of C&amp;#43;&amp;#43; standardese into a resource that is accessible to software engineers around the world? This talk will describe the process of building a community-run website that documents all of the nooks and dark corners of the C&amp;#43;&amp;#43; programming language. I&#39;ll look back at the history of how C&amp;#43;&amp;#43; was defined, cover the current state of documentation, examine the pros and cons of running a fairly high-profile publicly-editable wiki, and try to guess at what the future holds.--Nate Kohl is an intergalactic computerist who enjoys herding cats.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>1999</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/cppreferencecom-Documenting-CPP-One-Edit-at-a-Time</guid>
    <dc:creator>Nate Kohl</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_high.mp4" length="423140486" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit.mp3" expression="full" duration="1999" fileSize="31989830" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit.mp4" expression="full" duration="1999" fileSize="68192309" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit.webm" expression="full" duration="1999" fileSize="239003815" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_high.mp4" expression="full" duration="1999" fileSize="423140486" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2b01/f032e9c5-de4a-4ef2-8dae-2bcb05372b01/KohlDocumentingCPPOneEdit_mid.mp4" expression="full" duration="1999" fileSize="269669751" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>An Overview of C++11/14, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>This accelerated introduction to C&#43;&#43;11/14 surveys most of the key additions to the C&#43;&#43; language, including support for increased code clarity (lambdas, uniform initialization, auto, new OOD control) and improved performance (rvalue references, move semantics and perfect forwarding.)</span><br><br><span>The presentation is designed for those who truly need a quick overview of the new C&#43;&#43;, so the focus is on breadth rather than depth. Whenever feasible, new language features are presented in a style showcasing how they improve over their &quot;Old C&#43;&#43;&quot; counterparts.</span><br><span>--</span><br><span>Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.</span><br><br><br><span>Leor is the author of The BD Software C Compiler (&quot;BDS C&quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.</span><br><br><br><span>In the early 90's, Leor was a member of the technical staff of R&amp;D Publications, where he wrote columns for R&amp;D's magazines: The C/C&#43;&#43; Users Journal, Windows Developer's Journal, and SysAdmin, and he also authored the first book ever published by R&amp;D Books: Illustrated C.</span><br><br><br><span>More recently, in addition to designing and delivering on-site training courses on C, C&#43;&#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&#43;&#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&#43;&#43; error diagnostics.</span><br><br><br><br><span>When not engaged in learning or teaching C&#43;&#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:562ae7df9010402eb308a3df0168d192">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-C1114-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-C1114-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--This accelerated introduction to C&amp;#43;&amp;#43;11/14 surveys most of the key additions to the C&amp;#43;&amp;#43; language, including support for increased code clarity (lambdas, uniform initialization, auto, new OOD control) and improved performance (rvalue references, move semantics and perfect forwarding.)The presentation is designed for those who truly need a quick overview of the new C&amp;#43;&amp;#43;, so the focus is on breadth rather than depth. Whenever feasible, new language features are presented in a style showcasing how they improve over their &amp;quot;Old C&amp;#43;&amp;#43;&amp;quot; counterparts.--Leor Zolman has been involved in system software/compiler development, system administration, application development, and education for 40 years, spanning the CP/M, UNIX, and Windows operating systems.Leor is the author of The BD Software C Compiler (&amp;quot;BDS C&amp;quot;, 1979), the first native-code C compiler targeted exclusively for personal computers.In the early 90&#39;s, Leor was a member of the technical staff of R&amp;amp;D Publications, where he wrote columns for R&amp;amp;D&#39;s magazines: The C/C&amp;#43;&amp;#43; Users Journal, Windows Developer&#39;s Journal, and SysAdmin, and he also authored the first book ever published by R&amp;amp;D Books: Illustrated C.More recently, in addition to designing and delivering on-site training courses on C, C&amp;#43;&amp;#43;, Java, Perl, and Unix, Leor wrote STLFilt: An STL Error Message Decryptor for C&amp;#43;&amp;#43;, a Freeware tool for simplification of complex (i.e., unreadable) template-related C&amp;#43;&amp;#43; error diagnostics.When not engaged in learning or teaching C&amp;#43;&amp;#43;, you may find Leor administering and participating in several financial discussions boards, riding his BMW R1200RT, playing tennis or showing people the Ring Nebula through his LX200GPS telescope at star parties around the North Shore Boston area.--Videos Filmed &amp;a</itunes:summary>
    <itunes:duration>3748</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/An-Overview-of-C1114-Part-I</guid>
    <dc:creator>Leor Zolman</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_high.mp4" length="542953626" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI.mp3" expression="full" duration="3748" fileSize="59981510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI.mp4" expression="full" duration="3748" fileSize="103949417" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI.webm" expression="full" duration="3748" fileSize="293909620" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_high.mp4" expression="full" duration="3748" fileSize="542953626" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d903/721ecc15-56ee-4f32-8ae9-b5705b99d903/ZolmanOverviewCPPPartI_mid.mp4" expression="full" duration="3748" fileSize="343595934" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Generic Programming with Concepts Lite, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>In this talk, I will give an overview of the Concepts Lite language extension for C&#43;&#43; and present examples of its use in design and implementation of real-world generic libraries. Concepts Lite provides the ability for programmers to directly state constraints on template arguments as part of the template declaration. These constraints are predicates which determine whether or not a template argument can be used with that template. Constraints are checked by the compiler at the point of use, meaning that that effectively constrained generic libraries will not suffer from the usual problems of insane diagnostics. Libraries written using concepts will be far more readable and maintainable than the status quo. This talk will focus on generic programming, proposed language features, and their use in building real-world libraries.</span><br><br><span>Concepts Lite is a forthcoming ISO Technical Specification (TS) aimed at publication alongside C&#43;&#43;14. Concepts Lite is implemented in a branch of GCC, which will be made available to the audience for experiments and experience.</span><br><span>--</span><br><span>Andrew Sutton is an assistant professor at the University of Akron in Ohio where he teaches and conducts research at the intersection of Software Engineering and Programming Languages. Dr. Sutton helped design and implemented the Concepts Lite proposal for the C&#43;&#43; programming language. He is also the author of the Origin C&#43;&#43; Libraries, an experimental collection of generic libraries that supports ideas and research for generic programming. Dr. Sutton had previously worked as a postdoctoral researcher at Texas A&amp;M University where he worked with Bjarne Stroustrup and Gabriel Dos Reis on the design and implementation of language support for generic programming (i.e., Concepts Lite). He is a member of the C&#43;&#43; Standards Committee and Project Editor for the Concepts Lite Technical Specification. He graduated with a PhD in computer science from Kent State University in Ohio in 2010.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e3afea5bdedf41d0a28fa3df01680b4d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In this talk, I will give an overview of the Concepts Lite language extension for C&amp;#43;&amp;#43; and present examples of its use in design and implementation of real-world generic libraries. Concepts Lite provides the ability for programmers to directly state constraints on template arguments as part of the template declaration. These constraints are predicates which determine whether or not a template argument can be used with that template. Constraints are checked by the compiler at the point of use, meaning that that effectively constrained generic libraries will not suffer from the usual problems of insane diagnostics. Libraries written using concepts will be far more readable and maintainable than the status quo. This talk will focus on generic programming, proposed language features, and their use in building real-world libraries.Concepts Lite is a forthcoming ISO Technical Specification (TS) aimed at publication alongside C&amp;#43;&amp;#43;14. Concepts Lite is implemented in a branch of GCC, which will be made available to the audience for experiments and experience.--Andrew Sutton is an assistant professor at the University of Akron in Ohio where he teaches and conducts research at the intersection of Software Engineering and Programming Languages. Dr. Sutton helped design and implemented the Concepts Lite proposal for the C&amp;#43;&amp;#43; programming language. He is also the author of the Origin C&amp;#43;&amp;#43; Libraries, an experimental collection of generic libraries that supports ideas and research for generic programming. Dr. Sutton had previously worked as a postdoctoral researcher at Texas A&amp;amp;M University where he worked with Bjarne Stroustrup and Gabriel Dos Reis on the design and implementation of language support for generic programming (i.e., Concepts Lite). He is a member of the C&amp;#43;&amp;#43; Standards Committee and Proj</itunes:summary>
    <itunes:duration>3495</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Generic-Programming-with-Concepts-Lite-Part-I</guid>
    <dc:creator>Andrew Sutton</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_high.mp4" length="878198347" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI.mp3" expression="full" duration="3495" fileSize="55932998" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI.mp4" expression="full" duration="3495" fileSize="123343225" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI.webm" expression="full" duration="3495" fileSize="424897880" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_high.mp4" expression="full" duration="3495" fileSize="878198347" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d731/2fad0933-70fa-4075-a158-b93ef511d731/SuttonGenericProgrammingPartI_mid.mp4" expression="full" duration="3495" fileSize="529278510" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lock-Free Programming (or, Juggling Razor Blades), Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>â</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>Example-driven talk on how to design and write lock-free algorithms and data structures using C&#43;&#43; atomic -- something that can look deceptively simple, but contains very deep topics. (Important note: This is not the same as my &quot;atomic Weapons&quot; talk; that talk was about the &quot;what they are and why&quot; of the C&#43;&#43; memory model and atomics, and did not cover how to actually use atomics to implement highly concurrent algorithms and data structures.)</span><br><span>--</span><br><span>Herb Sutter: Author, chair of the ISO C&#43;&#43; committee, software architect at Microsoft.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9dc71c63d2f54139a6cba3df01669ab0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Example-driven talk on how to design and write lock-free algorithms and data structures using C&amp;#43;&amp;#43; atomic -- something that can look deceptively simple, but contains very deep topics. (Important note: This is not the same as my &amp;quot;atomic Weapons&amp;quot; talk; that talk was about the &amp;quot;what they are and why&amp;quot; of the C&amp;#43;&amp;#43; memory model and atomics, and did not cover how to actually use atomics to implement highly concurrent algorithms and data structures.)--Herb Sutter: Author, chair of the ISO C&amp;#43;&amp;#43; committee, software architect at Microsoft.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3623</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Lock-Free-Programming-or-Juggling-Razor-Blades-Part-I</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_high.mp4" length="758768228" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI.mp3" expression="full" duration="3623" fileSize="57969734" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI.mp4" expression="full" duration="3623" fileSize="139933066" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI.webm" expression="full" duration="3623" fileSize="440100984" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_high.mp4" expression="full" duration="3623" fileSize="758768228" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c729/361f6f0c-a658-448b-8fd6-d84d5f2fc729/SutterLockFreeProgrammingPartI_mid.mp4" expression="full" duration="3623" fileSize="497206835" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How HHVM Uses Modern C++ for Fun and Profit (Literally)</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>--<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>HHVM is a just-in-time compiler for PHP used by Facebook to serve billions of requests each day. This talk will give a quick overview of HHVM's history and architecture, followed by a deep dive into what made C&#43;&#43; the language of choice for writing HHVM.<br><br>C&#43;&#43; hits a sweet spot between performance and control on one end, and safety, maintainability, and convenience on the other.<br><br>The topics we'll cover will include:<br>how to call into generated machine code from C&#43;&#43;;<br>taking advantage of C&#43;&#43;'s power to control &quot;unsafe&quot; details with memory including how memory is allocated, field size and layout, unions, reinterpret_casts, bit-stealing;<br>integrating generated machine code with C&#43;&#43; exception handling and C&#43;&#43; profiling tools;<br>leveraging templates and using the X Macro technique to improve performance and maintainability;<br>and taking advantage of new C&#43;&#43;11 features like unrestricted unions and move constructors.<br>Finally, we'll go over some obstacles we encountered such as generating machine code that calls C&#43;&#43; virtual methods, and how C&#43;&#43;'s superb flexibility allowed us to work around these obstacles.<br>--<br>Drew Paroski is a Software Engineer at Facebook and a co-creator of the HipHop Virtual Machine (HHVM) and the Hack programming language. Among other things, Drew is the primary designer and implementor of HHVM's virtual instruction set architecture and Hack's Collections framework, and he was a core contributor to HHVM's JIT compiler in the early days of the project. Before Facebook, Drew was at Microsoft where he worked on improving the performance of Microsoft's runtime and JIT compiler for .NET languages (C#, VB.NET, F#, and more) known as the Common Language Runtime. Drew enjoys designing and optimizing complex low-level systems and been coding in C&#43;&#43; for over 10 years.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6db99c0ae75c433fa1cfa3df016572e6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-HHVM-Uses-Modern-C-for-Fun-and-Profit-Literally</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-HHVM-Uses-Modern-C-for-Fun-and-Profit-Literally</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--HHVM is a just-in-time compiler for PHP used by Facebook to serve billions of requests each day. This talk will give a quick overview of HHVM&#39;s history and architecture, followed by a deep dive into what made C&amp;#43;&amp;#43; the language of choice for writing HHVM.C&amp;#43;&amp;#43; hits a sweet spot between performance and control on one end, and safety, maintainability, and convenience on the other.The topics we&#39;ll cover will include:how to call into generated machine code from C&amp;#43;&amp;#43;;taking advantage of C&amp;#43;&amp;#43;&#39;s power to control &amp;quot;unsafe&amp;quot; details with memory including how memory is allocated, field size and layout, unions, reinterpret_casts, bit-stealing;integrating generated machine code with C&amp;#43;&amp;#43; exception handling and C&amp;#43;&amp;#43; profiling tools;leveraging templates and using the X Macro technique to improve performance and maintainability;and taking advantage of new C&amp;#43;&amp;#43;11 features like unrestricted unions and move constructors.Finally, we&#39;ll go over some obstacles we encountered such as generating machine code that calls C&amp;#43;&amp;#43; virtual methods, and how C&amp;#43;&amp;#43;&#39;s superb flexibility allowed us to work around these obstacles.--Drew Paroski is a Software Engineer at Facebook and a co-creator of the HipHop Virtual Machine (HHVM) and the Hack programming language. Among other things, Drew is the primary designer and implementor of HHVM&#39;s virtual instruction set architecture and Hack&#39;s Collections framework, and he was a core contributor to HHVM&#39;s JIT compiler in the early days of the project. Before Facebook, Drew was at Microsoft where he worked on improving the performance of Microsoft&#39;s runtime and JIT compiler for .NET languages (C#, VB.NET, F#, and more) known as the Common Language Runtime. Drew enjoys designing and optimizing complex low-level systems and been coding in C&amp;#43;&amp;#43; </itunes:summary>
    <itunes:duration>4267</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-HHVM-Uses-Modern-C-for-Fun-and-Profit-Literally</guid>
    <dc:creator>Drew Paroski</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_high.mp4" length="1801894567" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM.mp3" expression="full" duration="4267" fileSize="68285510" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM.mp4" expression="full" duration="4267" fileSize="163407466" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM.webm" expression="full" duration="4267" fileSize="559157143" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_high.mp4" expression="full" duration="4267" fileSize="1801894567" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c120/5f49a61a-cf87-4c9b-bf5a-2684171ac120/ParoskiHowHHVM_mid.mp4" expression="full" duration="4267" fileSize="1108721414" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Defensive Programming Done Right, Part I</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>In our component-based development methodology, each developer is responsible for ensuring that the software he or she creates is easy to understand and use, and not especially easy to misuse. One common form of misuse is to invoke a library function or method under circumstances where not all of its preconditions are satisfied, leading to undefined behavior. Contracts having undefined behavior are not necessarily undesirable, and (for many engineering reasons) are often optimal. Most would agree that a well-implemented library should do something other than silently continue when a pre-condition violation is detected, although these same folks might not agree on what specific action should be taken. Unfortunately, validating preconditions implies writing additional code that will execute at runtime. More code runs slower, and some would fairly argue that they should not be forced to pay for redundant runtime checks in the library software they use. Whether and to what extent library functions should validate their preconditions, and what should happen if a precondition violation is detected are questions that are best answered on an application by application basis - i.e., by the owner of main. &quot;Defensive Programming Done Right&quot; makes it all possible.<br><br>In this talk, we begin by reviewing the basic concepts of Design-By-Contract (DbC), and what we mean by the term &quot;Defensive Programming&quot; (DP). We then explore our overall approach to institutionalizing defensive programming in robust reusable library software such that each application can conveniently specify both the runtime budget (e.g., none, some, lots) for defensive checking, and also the specific action to be taken (e.g., abort, throw, spin) should a precondition violation occur. Along the way, we touch on how modern compilers and linkers work, binary compatibility, and the consequences of possibly violating the one-definition rule in mixed-mode builds. We conclude the talk by describing and then demonstrating our &quot;negative testing&quot; strategy (and supporting test apparatus) for readily verifying, in our component-level test drivers, that our defensive checks detect and report out-of-contract client use as intended. Actual source for the supporting utility components will be presented throughout the talk and made available afterwards.<br>--<br>John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e61159a771eb41dc8e9ba3df016441d1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-I</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-I</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In our component-based development methodology, each developer is responsible for ensuring that the software he or she creates is easy to understand and use, and not especially easy to misuse. One common form of misuse is to invoke a library function or method under circumstances where not all of its preconditions are satisfied, leading to undefined behavior. Contracts having undefined behavior are not necessarily undesirable, and (for many engineering reasons) are often optimal. Most would agree that a well-implemented library should do something other than silently continue when a pre-condition violation is detected, although these same folks might not agree on what specific action should be taken. Unfortunately, validating preconditions implies writing additional code that will execute at runtime. More code runs slower, and some would fairly argue that they should not be forced to pay for redundant runtime checks in the library software they use. Whether and to what extent library functions should validate their preconditions, and what should happen if a precondition violation is detected are questions that are best answered on an application by application basis - i.e., by the owner of main. &amp;quot;Defensive Programming Done Right&amp;quot; makes it all possible.In this talk, we begin by reviewing the basic concepts of Design-By-Contract (DbC), and what we mean by the term &amp;quot;Defensive Programming&amp;quot; (DP). We then explore our overall approach to institutionalizing defensive programming in robust reusable library software such that each application can conveniently specify both the runtime budget (e.g., none, some, lots) for defensive checking, and also the specific action to be taken (e.g., abort, throw, spin) should a precondition violation occur. Along the way, we touch on how modern compilers and linkers work, bina</itunes:summary>
    <itunes:duration>3591</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Defensive-Programming-Done-Right-Part-I</guid>
    <dc:creator>John Lakos</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_high.mp4" length="610145026" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI.mp3" expression="full" duration="3591" fileSize="57464390" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI.mp4" expression="full" duration="3591" fileSize="101425000" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI.webm" expression="full" duration="3591" fileSize="316291353" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_high.mp4" expression="full" duration="3591" fileSize="610145026" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4203/456fc963-e7c2-456f-8351-89a0d62d4203/LakosDefensiveProgrammingPartI_mid.mp4" expression="full" duration="3591" fileSize="369251561" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Common-sense Acceleration of Your MLOC Build</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>In this talk, I lay out detailed examples of steps I took to dramatically improve build times, and ultimately developer productivity, in very large, legacy C/C&#43;&#43; codebases. Is it worth the extra money for SSD or a 15K RPM SAS? How do I make ccache and distcc work together? How do I profile-optimize my toolchain? What network topology issues come into play? These questions, and more, are addressed in detail so you can immediately apply what you've learned to shorten the timeline between when you make a change to your code and when you see it in action.<br>--<br>Matt's first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &quot;the making of the making of&quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4ad5cc3b96cf4f28a9b7a3df01626ced">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Common-sense-Acceleration-of-Your-MLOC-Build</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Common-sense-Acceleration-of-Your-MLOC-Build</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--In this talk, I lay out detailed examples of steps I took to dramatically improve build times, and ultimately developer productivity, in very large, legacy C/C&amp;#43;&amp;#43; codebases. Is it worth the extra money for SSD or a 15K RPM SAS? How do I make ccache and distcc work together? How do I profile-optimize my toolchain? What network topology issues come into play? These questions, and more, are addressed in detail so you can immediately apply what you&#39;ve learned to shorten the timeline between when you make a change to your code and when you see it in action.--Matt&#39;s first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &amp;quot;the making of the making of&amp;quot;. Matt lives in San Francisco with his husband of 14 years. Twitter handle: @syke--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3818</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Common-sense-Acceleration-of-Your-MLOC-Build</guid>
    <dc:creator>Matt Hargett</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_high.mp4" length="623284493" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense.mp3" expression="full" duration="3818" fileSize="61095878" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense.mp4" expression="full" duration="3818" fileSize="123779424" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense.webm" expression="full" duration="3818" fileSize="425518626" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_high.mp4" expression="full" duration="3818" fileSize="623284493" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/48db/65ff7517-09e2-4ac0-a678-7a38215748db/HargettCommonSense_mid.mp4" expression="full" duration="3818" fileSize="409469708" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Emscripten and AMS.js: C++&#39;s Role in the Modern Web</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>All major web browsers are written in C&#43;&#43;, but C&#43;&#43; is starting to fill an important role in web *content* as well: while JavaScript is the only standards-compliant language available to websites, compiling other languages to JavaScript has been shown to be practical and effective. This talk will explain how Emscripten, an LLVM-based open source compiler from C&#43;&#43; to JavaScript, lets you run a C&#43;&#43; codebase on the web at near-native speed. To achieve that level of performance, Emscripten emits asm.js, a strict subset of JavaScript that is easy for JavaScript engines to optimize, and was designed specifically as a compilation target for languages like C and C&#43;&#43;. We'll also discuss some of the more challenging aspects of compiling C&#43;&#43; to JavaScript, stemming from the C&#43;&#43; language itself, libraries and toolchains, and some thoughts on possible solutions.<br>--<br>Alon is a researcher at Mozilla, where he works on Emscripten, an LLVM-based compiler from C&#43;&#43; to JavaScript, as well as other projects related to porting existing content to the web.Twitter handle: @kripken<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b9081873792845499322a3df016083c0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Emscripten-and-AMSjs-CPPs-Role-in-the-Modern-Web</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Emscripten-and-AMSjs-CPPs-Role-in-the-Modern-Web</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--All major web browsers are written in C&amp;#43;&amp;#43;, but C&amp;#43;&amp;#43; is starting to fill an important role in web *content* as well: while JavaScript is the only standards-compliant language available to websites, compiling other languages to JavaScript has been shown to be practical and effective. This talk will explain how Emscripten, an LLVM-based open source compiler from C&amp;#43;&amp;#43; to JavaScript, lets you run a C&amp;#43;&amp;#43; codebase on the web at near-native speed. To achieve that level of performance, Emscripten emits asm.js, a strict subset of JavaScript that is easy for JavaScript engines to optimize, and was designed specifically as a compilation target for languages like C and C&amp;#43;&amp;#43;. We&#39;ll also discuss some of the more challenging aspects of compiling C&amp;#43;&amp;#43; to JavaScript, stemming from the C&amp;#43;&amp;#43; language itself, libraries and toolchains, and some thoughts on possible solutions.--Alon is a researcher at Mozilla, where he works on Emscripten, an LLVM-based compiler from C&amp;#43;&amp;#43; to JavaScript, as well as other projects related to porting existing content to the web.Twitter handle: @kripken--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3537</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Emscripten-and-AMSjs-CPPs-Role-in-the-Modern-Web</guid>
    <dc:creator>Alon Zakai</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_high.mp4" length="1279629077" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM.mp3" expression="full" duration="3537" fileSize="56600006" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM.mp4" expression="full" duration="3537" fileSize="130776113" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM.webm" expression="full" duration="3537" fileSize="370751571" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_high.mp4" expression="full" duration="3537" fileSize="1279629077" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9b21/cf0ca095-0c94-496b-9af1-acbb40bc9b21/ZakaiEmscriptenASM_mid.mp4" expression="full" duration="3537" fileSize="752002623" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How You Can Make a Boost C++ Library</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>The purpose of this presentation is to encourage C&#43;&#43; programmers to create and submit new quality C&#43;&#43; libraries to Boost.<br><br>Premises: a) C&#43;&#43; needs more quality libraries b) There are many C&#43;&#43; programmers who would like to contribute libraries but they are discouraged by the amount of effort and associated heartache.<br><br>Methodology: Walk through the website www.blincubator.com from the point of view of a C&#43;&#43; library contributor. It will address issues related to requirements, suggested tools, user feedback, library promotion. It will assume that the attendee is an intermediate to advanced C&#43;&#43; programmer with an idea for a library.<br>--<br>Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&#43;&#43; library development. Lately, he has been mostly interested in C&#43;&#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5fcbdd7dbba3452595baa3df015f3aef">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-You-Can-Make-a-Boost-CPP-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-You-Can-Make-a-Boost-CPP-Library</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--The purpose of this presentation is to encourage C&amp;#43;&amp;#43; programmers to create and submit new quality C&amp;#43;&amp;#43; libraries to Boost.Premises: a) C&amp;#43;&amp;#43; needs more quality libraries b) There are many C&amp;#43;&amp;#43; programmers who would like to contribute libraries but they are discouraged by the amount of effort and associated heartache.Methodology: Walk through the website www.blincubator.com from the point of view of a C&amp;#43;&amp;#43; library contributor. It will address issues related to requirements, suggested tools, user feedback, library promotion. It will assume that the attendee is an intermediate to advanced C&amp;#43;&amp;#43; programmer with an idea for a library.--Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&amp;#43;&amp;#43; library development. Lately, he has been mostly interested in C&amp;#43;&amp;#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3699</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/How-You-Can-Make-a-Boost-CPP-Library</guid>
    <dc:creator>Robert Ramey</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_high.mp4" length="668047818" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost.mp3" expression="full" duration="3699" fileSize="59188166" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost.mp4" expression="full" duration="3699" fileSize="106599901" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost.webm" expression="full" duration="3699" fileSize="383867483" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_high.mp4" expression="full" duration="3699" fileSize="668047818" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f618/86fd87be-2483-405c-92b4-cccdb058f618/RameyHowYouCanMakeaBoost_mid.mp4" expression="full" duration="3699" fileSize="403368686" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What the Committee Did Next!</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>Now that C&#43;&#43;14 is done, what is the standard committee working on next?<br><br>After inking 8 years to produce the C&#43;&#43;11 standard (arguably 13) there was a feeling we should be able to produce new work faster, more incrementally. With the renewed interest in C&#43;&#43;, we have more participation on the committee, and have looked to harness that enthusiasm in new ways. In the last 3 years we have spun up at least a dozen new study groups, and have 8 or mode Technical Specifications in various stages of development that we hope to ship over the next 12-24 months. So what are all these new groups and specifications about? Come to this session and get a vision of where C&#43;&#43; is headed in the immediate and short-term future.<br>--<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.<br><br>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.<br><br>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:626e48184aee4020bc3da3df015e770c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/What-the-Committee-Did-Next</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/What-the-Committee-Did-Next</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--Now that C&amp;#43;&amp;#43;14 is done, what is the standard committee working on next?After inking 8 years to produce the C&amp;#43;&amp;#43;11 standard (arguably 13) there was a feeling we should be able to produce new work faster, more incrementally. With the renewed interest in C&amp;#43;&amp;#43;, we have more participation on the committee, and have looked to harness that enthusiasm in new ways. In the last 3 years we have spun up at least a dozen new study groups, and have 8 or mode Technical Specifications in various stages of development that we hope to ship over the next 12-24 months. So what are all these new groups and specifications about? Come to this session and get a vision of where C&amp;#43;&amp;#43; is headed in the immediate and short-term future.--Alisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4027</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/What-the-Committee-Did-Next</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_high.mp4" length="1045159226" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext.mp3" expression="full" duration="4027" fileSize="64447814" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext.mp4" expression="full" duration="4027" fileSize="116632019" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext.webm" expression="full" duration="4027" fileSize="383630635" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_high.mp4" expression="full" duration="4027" fileSize="1045159226" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5d2a/3cadf7d6-d3a1-4549-b17f-08e867a15d2a/MeredithCommitteeDidNext_mid.mp4" expression="full" duration="4027" fileSize="582557986" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Modernizing Legacy C++ Code</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br><span>--</span><br><span>Presentation Slides, PDFs, Source Code and other presenter materials are available at:</span><a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br><span>--</span><br><span>C&#43;&#43; is a programming language with a long, storied history spanning over three decades--four if one includes its C ancestry. The C&#43;&#43; language has undergone many changes during that time, compiler technology has advanced substantially, and computers today are very different from the computers of decades past. But despite all of these advances, there's an awful lot of C&#43;&#43; code in use today that looks like it was written in the 1980s. In some cases, the code was written in the 1980s and it's still in use; in other cases, it's recently-written code that just doesn't use modern style.</span><br><br><span>In this talk, we'll discuss some of the problems with legacy code, and review some practical techniques for applying principles of modern C&#43;&#43; to gradually improve the quality of legacy code and improve maintainability and debuggability. We'll show how some very small changes to code can yield huge benefits.</span><br><span>--</span><br><span>Kate Gregory has been using C&#43;&#43; since before Microsoft had a C&#43;&#43; compiler. She writes, mentors, codes, and leads projects, in both C&#43;&#43; and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C&#43;&#43; MVP, and has written over a dozen books (the most recent on C&#43;&#43; AMP for Microsoft Press) and speaks at conferences and user groups around the world. Kate develops courses on C&#43;&#43;, Visual Studio, and Windows programming for Pluralsight, founded the East of Toronto .NET Users group, and is a member of adjunct faculty at Trent University in Peterborough.Website:</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.gregcons.comTwitter" href="http://www.gregcons.comtwitter/" target="_blank" rel="nofollow">http://www.gregcons.comTwitter</a><span><span class="Apple-converted-space">&nbsp;</span>handle: @gregcons</span><br><br><span>James McNellis is a senior engineer on the Microsoft Visual C&#43;&#43; team, where he is responsible for the Visual C&#43;&#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression Blend team, developing the XAML designer tools for Windows 8 apps. Prior to joining Microsoft in 2010, he spent several years working on real-time 3-D simulation and robotics projects in the defense industry. James is a prolific contributor on the Stack Overflow programming Q&amp;A website and occasionally writes for the Visual C&#43;&#43; Team Blog. He tweets at @JamesMcNellis and can be found elsewhere online via<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.jamesmcnellis.com" href="http://www.jamesmcnellis.com/" target="_blank" rel="nofollow">http://www.jamesmcnellis.com</a><span>.</span><br><span>--</span><br><span>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span></span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ff893ae794aa42f4a0a8a3df015dd634">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Modernizing-Legacy-CPP-Code</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Modernizing-Legacy-CPP-Code</link>
    <itunes:summary>http://www.cppcon.org--Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43; is a programming language with a long, storied history spanning over three decades--four if one includes its C ancestry. The C&amp;#43;&amp;#43; language has undergone many changes during that time, compiler technology has advanced substantially, and computers today are very different from the computers of decades past. But despite all of these advances, there&#39;s an awful lot of C&amp;#43;&amp;#43; code in use today that looks like it was written in the 1980s. In some cases, the code was written in the 1980s and it&#39;s still in use; in other cases, it&#39;s recently-written code that just doesn&#39;t use modern style.In this talk, we&#39;ll discuss some of the problems with legacy code, and review some practical techniques for applying principles of modern C&amp;#43;&amp;#43; to gradually improve the quality of legacy code and improve maintainability and debuggability. We&#39;ll show how some very small changes to code can yield huge benefits.--Kate Gregory has been using C&amp;#43;&amp;#43; since before Microsoft had a C&amp;#43;&amp;#43; compiler. She writes, mentors, codes, and leads projects, in both C&amp;#43;&amp;#43; and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C&amp;#43;&amp;#43; MVP, and has written over a dozen books (the most recent on C&amp;#43;&amp;#43; AMP for Microsoft Press) and speaks at conferences and user groups around the world. Kate develops courses on C&amp;#43;&amp;#43;, Visual Studio, and Windows programming for Pluralsight, founded the East of Toronto .NET Users group, and is a member of adjunct faculty at Trent University in Peterborough.Website:http://www.gregcons.comTwitter handle: @gregconsJames McNellis is a senior engineer on the Microsoft Visual C&amp;#43;&amp;#43; team, where he is responsible for the Visual C&amp;#43;&amp;#43; C Runtime (CRT) and C Standard Library implementation. He was previously a member of the Microsoft Expression B</itunes:summary>
    <itunes:duration>3560</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Modernizing-Legacy-CPP-Code</guid>
    <dc:creator>Kate Gregory, James McNellis</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_high.mp4" length="1075186994" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy.mp3" expression="full" duration="3560" fileSize="56972486" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy.mp4" expression="full" duration="3560" fileSize="114840655" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy.webm" expression="full" duration="3560" fileSize="474916488" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_high.mp4" expression="full" duration="3560" fileSize="1075186994" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/78bc/843f98c1-1f12-4c90-ae58-9b06060378bc/McNellisGregoryModernizingLegacy_mid.mp4" expression="full" duration="3560" fileSize="628824511" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Overview of Parallel Programming in C++</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>â<br>Parallel programming was once considered to be the exclusive realm of weather forecasters and particle physicists working on multi-million dollar super computers while the rest us relied on chip manufacturers to crank out faster CPUs every year. That era has come to an end. Clock speedups have been largely replaced by having more CPUs on a chip. Your typical smart phone now has 2 to 4 cores and your typical laptop or tablet has 4 to 8 cores. Servers have dozens of cores and supercomputers have thousands of cores.<br><br>If you want to speed up a computation on modern hardware, you need to take advantage of the multiple cores available. This talk is provides an overview of the parallelism landscape. We'll explore the what, why, and how of parallel programming, discuss the distinction between parallelism and concurrency and how they overlap, and learn about the problems that one runs into. We'll conclude with an overview of existing parallelism technologies in C&#43;&#43; and the future directions being considered for parallel programming in standard C&#43;&#43;.<br>--<br>Pablo Halpern has been programming in C&#43;&#43; since 1989 and has been a member of the C&#43;&#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&#43;&#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &quot;Reducers and other Cilk&#43;&#43; Hyperobjects&quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel's customers and promoting adoption of parallel constructs into the C&#43;&#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpern<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cda5f284ef984c289d40a3df015cf854">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Overview-of-Parallel-Programming-in-CPP</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Overview-of-Parallel-Programming-in-CPP</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014âParallel programming was once considered to be the exclusive realm of weather forecasters and particle physicists working on multi-million dollar super computers while the rest us relied on chip manufacturers to crank out faster CPUs every year. That era has come to an end. Clock speedups have been largely replaced by having more CPUs on a chip. Your typical smart phone now has 2 to 4 cores and your typical laptop or tablet has 4 to 8 cores. Servers have dozens of cores and supercomputers have thousands of cores.If you want to speed up a computation on modern hardware, you need to take advantage of the multiple cores available. This talk is provides an overview of the parallelism landscape. We&#39;ll explore the what, why, and how of parallel programming, discuss the distinction between parallelism and concurrency and how they overlap, and learn about the problems that one runs into. We&#39;ll conclude with an overview of existing parallelism technologies in C&amp;#43;&amp;#43; and the future directions being considered for parallel programming in standard C&amp;#43;&amp;#43;.--Pablo Halpern has been programming in C&amp;#43;&amp;#43; since 1989 and has been a member of the C&amp;#43;&amp;#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&amp;#43;&amp;#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &amp;quot;Reducers and other Cilk&amp;#43;&amp;#43; Hyperobjects&amp;quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel&#39;s customers and promoting adoptio</itunes:summary>
    <itunes:duration>3708</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Overview-of-Parallel-Programming-in-CPP</guid>
    <dc:creator>Pablo Halpern</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_high.mp4" length="715106305" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel.mp3" expression="full" duration="3708" fileSize="59343302" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel.mp4" expression="full" duration="3708" fileSize="120147821" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel.webm" expression="full" duration="3708" fileSize="401118536" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_high.mp4" expression="full" duration="3708" fileSize="715106305" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14a4/3772bec4-748e-4490-9059-a630286314a4/HalpernOverviewofParallel_mid.mp4" expression="full" duration="3708" fileSize="450668467" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Type Deduction and Why You Care</title>
    <description><![CDATA[<p><a class="yt-uix-redirect-link" dir="ltr" title="http://www.cppcon.org" href="http://www.cppcon.org/" target="_blank" rel="nofollow">http://www.cppcon.org</a><br>â<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/CppCon/CppCon2014" href="https://github.com/CppCon/CppCon2014" target="_blank" rel="nofollow">https://github.com/CppCon/CppCon2014</a><br>--<br>C&#43;&#43;98 had template type deduction, and it worked so intuitively, there was little need to understand what took place under the covers. C&#43;&#43;11 extends type deduction to include universal references, applies it to auto variables and lambda expressions, then throws in a special auto-only deduction rule. C&#43;&#43;14 pushes the boundary further, adding two forms of function return type deduction (auto and decltype(auto)) for arbitrary functions and offering auto parameters for lambdas. The result is that what could be treated as a black box in C&#43;&#43;98 has become a topic that practicing C&#43;&#43; developers really need to understand. This talk will give you the information you need to do that.<br>--<br>Scott Meyers has been working with C&#43;&#43; since 1988. He recently finished his new book, &quot;Effective Modern C&#43;&#43;&quot;.<br>--<br>Videos Filmed &amp; Edited by Bash Films:<span class="Apple-converted-space">&nbsp;</span><a class="yt-uix-redirect-link" dir="ltr" title="http://www.BashFilms.com" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/C-PP-Con-2014/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:afe1ed7a182a4ecfb51fa3df015bf547">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Type-Deduction-and-Why-You-Care</comments>
    <link>https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Type-Deduction-and-Why-You-Care</link>
    <itunes:summary>http://www.cppcon.orgâPresentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/CppCon/CppCon2014--C&amp;#43;&amp;#43;98 had template type deduction, and it worked so intuitively, there was little need to understand what took place under the covers. C&amp;#43;&amp;#43;11 extends type deduction to include universal references, applies it to auto variables and lambda expressions, then throws in a special auto-only deduction rule. C&amp;#43;&amp;#43;14 pushes the boundary further, adding two forms of function return type deduction (auto and decltype(auto)) for arbitrary functions and offering auto parameters for lambdas. The result is that what could be treated as a black box in C&amp;#43;&amp;#43;98 has become a topic that practicing C&amp;#43;&amp;#43; developers really need to understand. This talk will give you the information you need to do that.--Scott Meyers has been working with C&amp;#43;&amp;#43; since 1988. He recently finished his new book, &amp;quot;Effective Modern C&amp;#43;&amp;#43;&amp;quot;.--Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4173</itunes:duration>
    <pubDate>Tue, 18 Nov 2014 17:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/C-PP-Con-2014/Type-Deduction-and-Why-You-Care</guid>
    <dc:creator>Scott Meyers</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_high.mp4" length="672293899" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_512.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction.mp3" expression="full" duration="4173" fileSize="66779462" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction.mp4" expression="full" duration="4173" fileSize="116958294" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction.webm" expression="full" duration="4173" fileSize="341134902" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_high.mp4" expression="full" duration="4173" fileSize="672293899" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9049/45e041b6-2025-4527-afd4-c9edbe3c9049/MeyersTypeDeduction_mid.mp4" expression="full" duration="4173" fileSize="417962911" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>    
</channel>
</rss>