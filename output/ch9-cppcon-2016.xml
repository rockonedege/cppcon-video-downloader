<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" media="screen" href="/styles/xslt/rss.xslt"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:c9="http://channel9.msdn.com">
<channel>
	<title>CppCon 2016 Sessions (HD)</title>
    <atom:link rel="self" type="application/rss+xml" href="https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high"></atom:link>
    <generator>Rev9</generator>
    <description>Sessions for CppCon 2016</description>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016</link>
    <language>en</language>
		<media:thumbnail url="https://f.ch9.ms/thumbnail/ebfe81ec-5fec-4eff-b0e8-313096dcdc6c.jpg" height="165" width="220"></media:thumbnail>
  <item>
    <title>CppCon 2016: Casey Carter “Iterator Haiku&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Iterator Haiku: How five iterator categories blossomed into seven, and Sentinels trimmed them back to five again. Recently proposed changes to the ranges TS distill its seven iterator categories back to five without sacrificing any expressive power. Removing operations that are extraneous in the Sentinel world eliminates a potential source of programming errors. <br>— <br>Casey Carter<br>Software Engineer II, Microsoft<br>Casey Carter is longtime user of C&#43;&#43; who recently ended his career in aerospace manufacturing to participate in C&#43;&#43; standardization. After attending a WG21 meeting, his enthusiasm for Concept library design and semantics somehow turned into authorship of the Ranges TS. He is currently pursuing interests in Ranges, world domination, and doughnuts at Microsoft Redmond.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f32487c7cad44297b92aa69b0132d544">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Casey-Carter-Iterator-Haiku</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Casey-Carter-Iterator-Haiku</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Iterator Haiku: How five iterator categories blossomed into seven, and Sentinels trimmed them back to five again. Recently proposed changes to the ranges TS distill its seven iterator categories back to five without sacrificing any expressive power. Removing operations that are extraneous in the Sentinel world eliminates a potential source of programming errors. — Casey CarterSoftware Engineer II, MicrosoftCasey Carter is longtime user of C&amp;#43;&amp;#43; who recently ended his career in aerospace manufacturing to participate in C&amp;#43;&amp;#43; standardization. After attending a WG21 meeting, his enthusiasm for Concept library design and semantics somehow turned into authorship of the Ranges TS. He is currently pursuing interests in Ranges, world domination, and doughnuts at Microsoft Redmond.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3500</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Casey-Carter-Iterator-Haiku</guid>
    <dc:creator>Casey Carter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_high.mp4" length="1475100014" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f32487c7cad44297b92aa69b0132d544/CPPConCarterIteratorHaiku.mp4" expression="full" duration="3500" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku.mp3" expression="full" duration="3500" fileSize="56009802" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku.mp4" expression="full" duration="3500" fileSize="86477682" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_high.mp4" expression="full" duration="3500" fileSize="1475100014" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62e5/9d2f49bc-d7d5-4008-ad66-38376aa362e5/CPPConCarterIteratorHaiku_mid.mp4" expression="full" duration="3500" fileSize="322650937" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “From Numerical Cosmology to Efficient Bit Abstractions for the Standard Library&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Efficient bit abstractions for the standard library, or how to beat vector＜bool＞ performances by three orders of magnitude.</div><div>Can you imagine a perfect world? A world of unicorns. A world of double rainbows. A world of candy mountains. A world in which vector＜bool＞ would not even have existed. As the first three aspects are easy to imagine, I will mostly focus on the last one. For about 20 years now, vector＜bool＞ has been regarded as a bad design decision. There is no problem with the functionality provided by a dynamic vector of bits, but specializing vector for boolean data types was not the best idea ever. In this talk, I will present a radically new approach, generalizing existing implementation practices and experimentations, to achieve both genericity and performances for bit manipulation. I will describe how we designed a minimalist set of abstractions to access and manipulate bits and to serve as a common basis for bit oriented data structures, algorithms and arbitrary precision arithmetic. This presentation echoes a standardization work that will hopefully make bit utilities available in a future revision of the C&#43;&#43; standard library.</div><div>Bit manipulation is used as a fundamental building block of a wide range of applications including arithmetic of big integers, cryptography, hash tables, compression, fast Fourier transforms and bioinformatics. We started this work while investigating... the expansion of the Universe. Cosmological simulations on supercomputers require fast data structures, and in our case bit manipulation was a bottleneck. A common problem with bit abstractions is that they need a double standard: an easy to use interface for users, and a full access to low level instructions and compiler intrinsics to make the most of modern architectures. I will review our approach and give examples on how to use our library. I will also explain how to use bit values, bit references, bit pointers and bit iterators to design algorithms that outperform bit vectors by factors varying between 100 an 3500. I will conclude this talk by discussing how the bit abstraction proposal may affect the future of the standard library and particularly how it will be interfaced with standard algorithms, standard containers, ranges and arbitrary precision arithmetic.<br>— <br>Vincent Reverdy<br>University of Illinois at Urbana-Champaign<br>Astrophysicist<br>Urbana-Champaign, Illinois Area<br>Vincent has been working as a post-doctoral researcher at the University of Illinois at Urbana-Champaign (USA) since he obtained his PhD at the Paris observatory (France) in november 2014. His main scientific interests are related to cosmology and general relativity. He his particularly interested in the study of relativistic effects at cosmological scales using high performance simulations run on supercomputers. Because these simulations rely on tree data structures, he started investigating ways to optimize them. He now leads a research team working on tree data structures with main applications in simulations, machine learning, and data science. He also participates into the C&#43;&#43; standardization process and regularly submits proposals to improve the C&#43;&#43; language.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0f8d1fd83acb44689022a69b0132b0e7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-From-Numerical-Cosmology-to-Efficient-Bit-Abstractions-for-the-Standard-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-From-Numerical-Cosmology-to-Efficient-Bit-Abstractions-for-the-Standard-Library</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Efficient bit abstractions for the standard library, or how to beat vector＜bool＞ performances by three orders of magnitude.Can you imagine a perfect world? A world of unicorns. A world of double rainbows. A world of candy mountains. A world in which vector＜bool＞ would not even have existed. As the first three aspects are easy to imagine, I will mostly focus on the last one. For about 20 years now, vector＜bool＞ has been regarded as a bad design decision. There is no problem with the functionality provided by a dynamic vector of bits, but specializing vector for boolean data types was not the best idea ever. In this talk, I will present a radically new approach, generalizing existing implementation practices and experimentations, to achieve both genericity and performances for bit manipulation. I will describe how we designed a minimalist set of abstractions to access and manipulate bits and to serve as a common basis for bit oriented data structures, algorithms and arbitrary precision arithmetic. This presentation echoes a standardization work that will hopefully make bit utilities available in a future revision of the C&amp;#43;&amp;#43; standard library.Bit manipulation is used as a fundamental building block of a wide range of applications including arithmetic of big integers, cryptography, hash tables, compression, fast Fourier transforms and bioinformatics. We started this work while investigating... the expansion of the Universe. Cosmological simulations on supercomputers require fast data structures, and in our case bit manipulation was a bottleneck. A common problem with bit abstractions is that they need a double standard: an easy to use interface for users, and a full access to low level instructions and compiler intrinsics to make the most of modern architectures. I will review our approach and give e</itunes:summary>
    <itunes:duration>4106</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-From-Numerical-Cosmology-to-Efficient-Bit-Abstractions-for-the-Standard-Library</guid>
    <dc:creator>Vincent Reverdy</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_high.mp4" length="1550265095" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/0f8d1fd83acb44689022a69b0132b0e7/CPPConFromNumericalCosmology.mp4" expression="full" duration="4106" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology.mp3" expression="full" duration="4106" fileSize="65703114" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology.mp4" expression="full" duration="4106" fileSize="92661626" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_high.mp4" expression="full" duration="4106" fileSize="1550265095" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/99ec/b2f5ac0c-9d60-42a3-944c-868706c799ec/CPPConFromNumericalCosmology_mid.mp4" expression="full" duration="4106" fileSize="347977332" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: &quot;C++14 Reflections Without Macros, Markup nor External Tooling..&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>C&#43;&#43; was lacking the reflections feature for a long time. But a new metaprogramming trick was discovered recently: we can get some information about POD structure by probing it's braced initializes. Combining that trick with variadic templates, constexpr functions, implicit conversion operators, SFINAE, decltype and integral constants we can count structure's fields and even deduce type of each field.</div><div>Now the best part: everything works without any additional markup nor macros typically needed to implement reflections in C&#43;&#43;.</div><div>In this talk I'll explain most of the tricks in detail, starting from a very basic implementation that is only capable of detecting fields count and ending up with a fully functional prototype capable of dealing with nested PODs, const/volatile qualified pointers, pointers-to-pointers and enum members. Highly useful use-cases will be shown a the end of the talk. You may start experimenting right now using the implementation at https://github.com/apolukhin/magic_get.<br>— <br>Antony Polukhin<br>Yandex<br>Hi, I'm Antony Polukhin, the author of Boost.TypeIndex and Boost.DLL libraries; maintainer of the Boost.LexicalCast, Boost.Any, Boost.Variant and Boost.Conversion libraries. I'm also the author of of the &quot;Boost C&#43;&#43; Application Development Cookbook&quot;<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9a145e72ce0b4fd0a6e1a69b01328fc2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C14-Reflections-Without-Macros-Markup-nor-External-Tooling</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C14-Reflections-Without-Macros-Markup-nor-External-Tooling</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—C&amp;#43;&amp;#43; was lacking the reflections feature for a long time. But a new metaprogramming trick was discovered recently: we can get some information about POD structure by probing it&#39;s braced initializes. Combining that trick with variadic templates, constexpr functions, implicit conversion operators, SFINAE, decltype and integral constants we can count structure&#39;s fields and even deduce type of each field.Now the best part: everything works without any additional markup nor macros typically needed to implement reflections in C&amp;#43;&amp;#43;.In this talk I&#39;ll explain most of the tricks in detail, starting from a very basic implementation that is only capable of detecting fields count and ending up with a fully functional prototype capable of dealing with nested PODs, const/volatile qualified pointers, pointers-to-pointers and enum members. Highly useful use-cases will be shown a the end of the talk. You may start experimenting right now using the implementation at https://github.com/apolukhin/magic_get.— Antony PolukhinYandexHi, I&#39;m Antony Polukhin, the author of Boost.TypeIndex and Boost.DLL libraries; maintainer of the Boost.LexicalCast, Boost.Any, Boost.Variant and Boost.Conversion libraries. I&#39;m also the author of of the &amp;quot;Boost C&amp;#43;&amp;#43; Application Development Cookbook&amp;quot;—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3281</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C14-Reflections-Without-Macros-Markup-nor-External-Tooling</guid>
    <dc:creator>Antony Polukhin</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_high.mp4" length="995103756" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/9a145e72ce0b4fd0a6e1a69b01328fc2/CPPConCpp14ReflectionsWithoutMacros.mp4" expression="full" duration="3281" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros.mp3" expression="full" duration="3281" fileSize="52510026" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros.mp4" expression="full" duration="3281" fileSize="87971331" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_high.mp4" expression="full" duration="3281" fileSize="995103756" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9c31/dcf4a0f3-3f43-4e8f-8120-0b34f8589c31/CPPConCpp14ReflectionsWithoutMacros_mid.mp4" expression="full" duration="3281" fileSize="299553926" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Serge Guelton “C++ Costless Abstractions: the compiler view&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>One of the motto of C&#43;&#43; is « costless abstractions », a.k.a. you only pay for what you use. To achieve this goal, modern C&#43;&#43; puts a heavy burden on the compiler. But what does the compiler really does when it meets an exception? When it finds a nested lambda? When it encounters a structure that wraps a single scalar?</div><div>During this talk, we'll go trough a set of innocent C&#43;&#43; sample that involves several data types and algorithms from the standard library, and verify that the costless abstraction principle holds, especially when looking at the difference between several optimization level, eventually digging into specific compiler optimization to understand what happens under the hood.</div><div>This talk uses Clang&#43;&#43; as the reference compiler, and relies on its LLVM bitcode output to explain how the abstractions are lowered (or completely pruned) at the Intermediate Representation level.<br>— <br>Serge Guelton<br>QuarksLab<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a73e34f998da40159481a69b01326757">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Serge-Guelton-C-Costless-Abstractions-the-compiler-view</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Serge-Guelton-C-Costless-Abstractions-the-compiler-view</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—One of the motto of C&amp;#43;&amp;#43; is &#171; costless abstractions &#187;, a.k.a. you only pay for what you use. To achieve this goal, modern C&amp;#43;&amp;#43; puts a heavy burden on the compiler. But what does the compiler really does when it meets an exception? When it finds a nested lambda? When it encounters a structure that wraps a single scalar?During this talk, we&#39;ll go trough a set of innocent C&amp;#43;&amp;#43; sample that involves several data types and algorithms from the standard library, and verify that the costless abstraction principle holds, especially when looking at the difference between several optimization level, eventually digging into specific compiler optimization to understand what happens under the hood.This talk uses Clang&amp;#43;&amp;#43; as the reference compiler, and relies on its LLVM bitcode output to explain how the abstractions are lowered (or completely pruned) at the Intermediate Representation level.— Serge GueltonQuarksLab—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2974</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Serge-Guelton-C-Costless-Abstractions-the-compiler-view</guid>
    <dc:creator>Serge Guelton</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_high.mp4" length="1343651933" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a73e34f998da40159481a69b01326757/CPPConGueltonCppCostlessAbstractions.mp4" expression="full" duration="2974" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions.mp3" expression="full" duration="2974" fileSize="47595594" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions.mp4" expression="full" duration="2974" fileSize="90537767" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_high.mp4" expression="full" duration="2974" fileSize="1343651933" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/00ec/77a0424d-bb8b-475a-97d9-24b8ab1100ec/CPPConGueltonCppCostlessAbstractions_mid.mp4" expression="full" duration="2974" fileSize="359721332" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Nat Goodspeed “Elegant Asynchronous Code&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Asynchronous I/O is an essential technology for increasing concurrency without introducing more threads, which carry both overhead and risks. Unfortunately, leveraging async I/O can be disruptive to careful code architecture.</div><div>This talk focuses not on the mechanics of async I/O, but rather on a library that manages async I/O with code that looks and behaves like traditional sequential code. Boost.Fiber introduces &quot;userland threads,&quot; permitting the application coder the benefits of both async I/O and clean layers of abstraction.</div><div>This talk presents an overview of the library, discusses integration with event-driven frameworks and illustrates several useful patterns.<br>—</div><div>Nat Goodspeed<br>Linden Lab<br>Nat Goodspeed first read about C&#43;&#43; shortly after implementing a medium-sized language interpreter in classic C. Almost every C&#43;&#43; feature led to forehead smacking accompanied by muttered remarks about how the language could have solved THIS problem... He has been fascinated (sometimes infuriated) by C&#43;&#43; ever since.</div><div>When he first encountered Boost libraries, a light shone from the heavens and choirs of angels sang &quot;AAAAAAH...&quot; The idea of writing and maintaining C&#43;&#43; code without Boost has become unthinkable -- even now that some of those libraries have been adopted into the C&#43;&#43; standard.</div><div>Nat has presented papers on coroutines and fibers to WG21, the ISO C&#43;&#43; committee. He has spoken on these topics at C&#43;&#43; Now conferences.</div><div>Nat has worked on databases, games and virtual worlds, usually on architecture and infrastructure. He has functioned as Boost evangelist within various organizations.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5321b60ef3904e5488e5a69b0132465c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nat-Goodspeed-Elegant-Asynchronous-Code</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nat-Goodspeed-Elegant-Asynchronous-Code</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Asynchronous I/O is an essential technology for increasing concurrency without introducing more threads, which carry both overhead and risks. Unfortunately, leveraging async I/O can be disruptive to careful code architecture.This talk focuses not on the mechanics of async I/O, but rather on a library that manages async I/O with code that looks and behaves like traditional sequential code. Boost.Fiber introduces &amp;quot;userland threads,&amp;quot; permitting the application coder the benefits of both async I/O and clean layers of abstraction.This talk presents an overview of the library, discusses integration with event-driven frameworks and illustrates several useful patterns.—Nat GoodspeedLinden LabNat Goodspeed first read about C&amp;#43;&amp;#43; shortly after implementing a medium-sized language interpreter in classic C. Almost every C&amp;#43;&amp;#43; feature led to forehead smacking accompanied by muttered remarks about how the language could have solved THIS problem... He has been fascinated (sometimes infuriated) by C&amp;#43;&amp;#43; ever since.When he first encountered Boost libraries, a light shone from the heavens and choirs of angels sang &amp;quot;AAAAAAH...&amp;quot; The idea of writing and maintaining C&amp;#43;&amp;#43; code without Boost has become unthinkable -- even now that some of those libraries have been adopted into the C&amp;#43;&amp;#43; standard.Nat has presented papers on coroutines and fibers to WG21, the ISO C&amp;#43;&amp;#43; committee. He has spoken on these topics at C&amp;#43;&amp;#43; Now conferences.Nat has worked on databases, games and virtual worlds, usually on architecture and infrastructure. He has functioned as Boost evangelist within various organizations.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3298</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nat-Goodspeed-Elegant-Asynchronous-Code</guid>
    <dc:creator>Nat Goodspeed</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_high.mp4" length="2042670617" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/5321b60ef3904e5488e5a69b0132465c/CPPConGoodspeedElegantAsynchronousCode.mp4" expression="full" duration="3298" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode.mp3" expression="full" duration="3298" fileSize="52776522" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode.mp4" expression="full" duration="3298" fileSize="88675168" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_high.mp4" expression="full" duration="3298" fileSize="2042670617" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0930/012443bf-18a7-4fdc-9024-3e5a5f2c0930/CPPConGoodspeedElegantAsynchronousCode_mid.mp4" expression="full" duration="3298" fileSize="473961593" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Dan Gohman “C++ on the Web: Let&#39;s have some serious fun.&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Want to get started compiling C&#43;&#43; code for the Web? Come to this session to learn how. We'll look at the tools, C&#43;&#43; libraries, and C&#43;&#43; OpenGL and SDL APIs, available to C&#43;&#43; programmers today, and walk through building and running a C&#43;&#43; application in Web browsers using WebAssembly, the new cross-browser standard for compiled code on the Web.</div><div>We'll also do an deep-dive tour through the entire system, starting from C&#43;&#43; code, through the compilation process to the WebAssembly binary format, and then to native code. We'll look at how to make C&#43;&#43; code interface with Web APIs and JavaScript, how both standalone C&#43;&#43; and hybrid applications are built, how WebAssembly delivers the kinds of performance characteristics C&#43;&#43; code expects while keeping users safe, and how C&#43;&#43; developers can make the most of WebAssembly's optimizations for fast download and startup times to deliver great experiences on the Web.</div><div>Let's play some games, have some fun, and do some serious C&#43;&#43; on the Web!<br>— <br>Dan Gohman<br>Mozilla<br>WebAssembly. asm.js. Emscripten. Itanium C&#43;&#43; ABI V2. SIMD. Undef. AliasAnalysis. Instruction Sets. Control Flow representations. Floating point determinism. Vulkan. NaNs. Did I say WebAssembly?<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8fedee6b342d489894efa69b01322809">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-Gohman-C-on-the-Web-Lets-have-some-serious-fun</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-Gohman-C-on-the-Web-Lets-have-some-serious-fun</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Want to get started compiling C&amp;#43;&amp;#43; code for the Web? Come to this session to learn how. We&#39;ll look at the tools, C&amp;#43;&amp;#43; libraries, and C&amp;#43;&amp;#43; OpenGL and SDL APIs, available to C&amp;#43;&amp;#43; programmers today, and walk through building and running a C&amp;#43;&amp;#43; application in Web browsers using WebAssembly, the new cross-browser standard for compiled code on the Web.We&#39;ll also do an deep-dive tour through the entire system, starting from C&amp;#43;&amp;#43; code, through the compilation process to the WebAssembly binary format, and then to native code. We&#39;ll look at how to make C&amp;#43;&amp;#43; code interface with Web APIs and JavaScript, how both standalone C&amp;#43;&amp;#43; and hybrid applications are built, how WebAssembly delivers the kinds of performance characteristics C&amp;#43;&amp;#43; code expects while keeping users safe, and how C&amp;#43;&amp;#43; developers can make the most of WebAssembly&#39;s optimizations for fast download and startup times to deliver great experiences on the Web.Let&#39;s play some games, have some fun, and do some serious C&amp;#43;&amp;#43; on the Web!— Dan GohmanMozillaWebAssembly. asm.js. Emscripten. Itanium C&amp;#43;&amp;#43; ABI V2. SIMD. Undef. AliasAnalysis. Instruction Sets. Control Flow representations. Floating point determinism. Vulkan. NaNs. Did I say WebAssembly?—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3411</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-Gohman-C-on-the-Web-Lets-have-some-serious-fun</guid>
    <dc:creator>Dan Gohman</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_high.mp4" length="1616028841" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/8fedee6b342d489894efa69b01322809/CPPConGohmanCppOnTheWeb.mp4" expression="full" duration="3411" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb.mp3" expression="full" duration="3411" fileSize="54579402" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb.mp4" expression="full" duration="3411" fileSize="99556669" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_high.mp4" expression="full" duration="3411" fileSize="1616028841" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1371/1796e456-52fa-47a4-b8ee-898aa54b1371/CPPConGohmanCppOnTheWeb_mid.mp4" expression="full" duration="3411" fileSize="408847994" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Neil MacIntosh “The Guideline Support Library: One Year Later&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>At CppCon 2015 we introduced the Guideline Support Library (GSL): a set of portable vocabulary types for use constructing safe and efficient C&#43;&#43; programs. This talk looks at how the library has evolved in the course of one year. The talk will provide a brief review of the current set of facilities in the library, where it is available, how to build and contribute. Then the talk will look at how the library changed in response to feedback and contributions from the user community, as well as from the ISO C&#43;&#43; Working Group as parts of the library move through the standardization process for inclusion in the C&#43;&#43; standard library. The talk will cover lessons learned about how to optimize key parts of the library - such as the span＜T＞ type - in the compiler, and what had to change in the library implementation to support this. It will present some examples of these optimizations and discuss performance of span＜T＞. Finally, the talk will include a status report on notable places the library is being used and preview what might be next for the GSL.<br>— <br>Neil MacIntosh<br>Principal Software Engineer, Microsoft<br>Neil is the lead for the C&#43;&#43; static analysis frameworks used widely within Microsoft, including PREfix, PREfast, and EspXtension, as well as the /analyze feature of the Microsoft C&#43;&#43; compiler. He is currently focused on making all these tools work better with portable C&#43;&#43;14 code rather than nonstandard annotations. He also maintains Microsoft's implementation of the Guideline Support Library (GSL).<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:167006479eed46cebc5ba69b0131cc08">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Neil-MacIntosh-The-Guideline-Support-Library-One-Year-Later</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Neil-MacIntosh-The-Guideline-Support-Library-One-Year-Later</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—At CppCon 2015 we introduced the Guideline Support Library (GSL): a set of portable vocabulary types for use constructing safe and efficient C&amp;#43;&amp;#43; programs. This talk looks at how the library has evolved in the course of one year. The talk will provide a brief review of the current set of facilities in the library, where it is available, how to build and contribute. Then the talk will look at how the library changed in response to feedback and contributions from the user community, as well as from the ISO C&amp;#43;&amp;#43; Working Group as parts of the library move through the standardization process for inclusion in the C&amp;#43;&amp;#43; standard library. The talk will cover lessons learned about how to optimize key parts of the library - such as the span＜T＞ type - in the compiler, and what had to change in the library implementation to support this. It will present some examples of these optimizations and discuss performance of span＜T＞. Finally, the talk will include a status report on notable places the library is being used and preview what might be next for the GSL.— Neil MacIntoshPrincipal Software Engineer, MicrosoftNeil is the lead for the C&amp;#43;&amp;#43; static analysis frameworks used widely within Microsoft, including PREfix, PREfast, and EspXtension, as well as the /analyze feature of the Microsoft C&amp;#43;&amp;#43; compiler. He is currently focused on making all these tools work better with portable C&amp;#43;&amp;#43;14 code rather than nonstandard annotations. He also maintains Microsoft&#39;s implementation of the Guideline Support Library (GSL).—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3619</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Neil-MacIntosh-The-Guideline-Support-Library-One-Year-Later</guid>
    <dc:creator>Neil MacIntosh</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_high.mp4" length="1902250647" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/167006479eed46cebc5ba69b0131cc08/CPPConMacIntoshTheGuidelineSupportLibrary.mp4" expression="full" duration="3619" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary.mp3" expression="full" duration="3619" fileSize="57919818" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary.mp4" expression="full" duration="3619" fileSize="139165782" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_high.mp4" expression="full" duration="3619" fileSize="1902250647" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9dc0/ccf7b542-4808-4039-9c12-9b4497b99dc0/CPPConMacIntoshTheGuidelineSupportLibrary_mid.mp4" expression="full" duration="3619" fileSize="592300884" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: David Watson “Experiences with Facebook&#39;s C++ library&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Facebook has open sourced Folly, its core C&#43;&#43; Library and the <br>foundation of all of Facebook's C&#43;&#43; code. Folly builds practical, <br>efficient, and novel components on top of the standard library. <br>Facebook engineer Dave Watson will do a deep dive on the core <br>components, and investigate how they have changed over time. We will <br>compare its design with previous talks and proposals, and highlight <br>insights learned from real-world usage in Facebook's large production <br>codebase.</div><div>Topics include: <br>* Singletons in a world with fork <br>* Useful ThreadLocals <br>* Pragmatic exceptions <br>* Easy type conversions <br>* Optimizing primitives, such as shared_mutex, vector, and atomic_shared_ptr<br>— <br>David Watson<br>Engineer, Facebook<br>Dave Watson is an infrastructure engineer at Facebook. He has been focused on improving the application server stack, including improvements in RPC, load balancing, memory management, and asynchronous programming. He has contributed to many of Facebook's core services and OSS projects, including HHVM, folly, proxygen, wangle, and mcrouter. Previously he worked at F5 networks on load balancers and network monitoring tools.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3c3c2ab185ea41d9b335a69b0131ab85">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Watson-Experiences-with-Facebooks-C-library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Watson-Experiences-with-Facebooks-C-library</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Facebook has open sourced Folly, its core C&amp;#43;&amp;#43; Library and the foundation of all of Facebook&#39;s C&amp;#43;&amp;#43; code. Folly builds practical, efficient, and novel components on top of the standard library. Facebook engineer Dave Watson will do a deep dive on the core components, and investigate how they have changed over time. We will compare its design with previous talks and proposals, and highlight insights learned from real-world usage in Facebook&#39;s large production codebase.Topics include: * Singletons in a world with fork * Useful ThreadLocals * Pragmatic exceptions * Easy type conversions * Optimizing primitives, such as shared_mutex, vector, and atomic_shared_ptr— David WatsonEngineer, FacebookDave Watson is an infrastructure engineer at Facebook. He has been focused on improving the application server stack, including improvements in RPC, load balancing, memory management, and asynchronous programming. He has contributed to many of Facebook&#39;s core services and OSS projects, including HHVM, folly, proxygen, wangle, and mcrouter. Previously he worked at F5 networks on load balancers and network monitoring tools.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2840</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Watson-Experiences-with-Facebooks-C-library</guid>
    <dc:creator>David Watson</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_high.mp4" length="773079969" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/3c3c2ab185ea41d9b335a69b0131ab85/CPPConExperiencesWithFacebooksCppLibrary.mp4" expression="full" duration="2840" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary.mp3" expression="full" duration="2840" fileSize="45448650" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary.mp4" expression="full" duration="2840" fileSize="86061735" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_high.mp4" expression="full" duration="2840" fileSize="773079969" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/90db/d8daab34-4cff-43bc-9fdc-5ce3743190db/CPPConExperiencesWithFacebooksCppLibrary_mid.mp4" expression="full" duration="2840" fileSize="237424328" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: &quot;Achieving performance in financial data processing through compile time introspection&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>C&#43;&#43; does not yet have complete introspection (reflection), but in many cases it may be easy to complete. We will present an example of what we think is is a general method whenever data specifications may be converted to C&#43;&#43; through a code generator. We have done this for processing financial market data very sensitive to latencies and obtained huge advantages of <br>* Economy of effort <br>* Performance <br>* Reliability <br>* Extensibility <br>over any other option we considered. We will show: <br>* How we converted the specification of market data from an important exchange, CME MDP3, into C&#43;&#43; types and a minimal set of variadic templates that give us full introspection capabilities <br>* The code and the techniques to implement generic introspecting software components, including these concrete examples: <br>* Converting any value that belongs to the specification into string <br>* Testing for whether the value is null in any of the three ways the specification allows encoding of null values <br>* Applying design patterns such as flyweights to traverse the data with zero or minimal performance cost <br>* Subscription mechanisms</div><div>We hope these code examples will show how straightforward and maintainable metaprogramming techniques can emulate introspection for truly significant quality gains.</div><div>Support code at github:<br>https://github.com/thecppzoo/cppcon2016/<br>— <br>Eduardo Madrid<br>Software Developer, Crabel Capital Management<br>Eduardo Madrid has over 18 years of C&#43;&#43; experience and works as Software Developer at Crabel Capital Management. The material for this presentation is derivative of work made by him currently running in production at &quot;Crabel&quot; to process CME MDP3 financial data. &quot;Crabel&quot; is a Hedge Fund with activities including automated trading, it has been continuously successful for over two decades, and is among the largest trader of Futures<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:90dd926a1f864c78a238a69b01318fac">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Achieving-performance-in-financial-data-processing-through-compile-time-introspection</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Achieving-performance-in-financial-data-processing-through-compile-time-introspection</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—C&amp;#43;&amp;#43; does not yet have complete introspection (reflection), but in many cases it may be easy to complete. We will present an example of what we think is is a general method whenever data specifications may be converted to C&amp;#43;&amp;#43; through a code generator. We have done this for processing financial market data very sensitive to latencies and obtained huge advantages of * Economy of effort * Performance * Reliability * Extensibility over any other option we considered. We will show: * How we converted the specification of market data from an important exchange, CME MDP3, into C&amp;#43;&amp;#43; types and a minimal set of variadic templates that give us full introspection capabilities * The code and the techniques to implement generic introspecting software components, including these concrete examples: * Converting any value that belongs to the specification into string * Testing for whether the value is null in any of the three ways the specification allows encoding of null values * Applying design patterns such as flyweights to traverse the data with zero or minimal performance cost * Subscription mechanismsWe hope these code examples will show how straightforward and maintainable metaprogramming techniques can emulate introspection for truly significant quality gains.Support code at github:https://github.com/thecppzoo/cppcon2016/— Eduardo MadridSoftware Developer, Crabel Capital ManagementEduardo Madrid has over 18 years of C&amp;#43;&amp;#43; experience and works as Software Developer at Crabel Capital Management. The material for this presentation is derivative of work made by him currently running in production at &amp;quot;Crabel&amp;quot; to process CME MDP3 financial data. &amp;quot;Crabel&amp;quot; is a Hedge Fund with activities including automated trading, it has been continuously successful for over two decades,</itunes:summary>
    <itunes:duration>3620</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Achieving-performance-in-financial-data-processing-through-compile-time-introspection</guid>
    <dc:creator>Eduardo Madrid</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_high.mp4" length="1027193579" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/90dd926a1f864c78a238a69b01318fac/CPPConMadridAchievingPerformance.mp4" expression="full" duration="3620" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance.mp3" expression="full" duration="3620" fileSize="57928266" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance.mp4" expression="full" duration="3620" fileSize="85258598" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_high.mp4" expression="full" duration="3620" fileSize="1027193579" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a679/e3acd83f-aefb-4418-8451-cfc08f8ba679/CPPConMadridAchievingPerformance_mid.mp4" expression="full" duration="3620" fileSize="238611401" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Jens Weller “Writing applications in modern C++ and Qt&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>I started writing my own Content Managment System for Meeting C&#43;&#43; last year. One of the goals for this project is to seperate the Qt GUI code from the layer that handles the logic and data storage, written in modern C&#43;&#43; and boost. This presentation will focus on my usage of modern C&#43;&#43; to implement the CMS.</div><div>Today my CMS has a little bit more then 10k loc, uses boost extensively and has a Qt GUI as the user facing frontend. In this talk I will focus on how boost powers the application and where I had to find my own solutions. I knew that with boostache there is a library for text templates, which later also inspired me to write a generic layer to use JSON for import and data storage in my CMS. The resulting generic_json library is currently a prototype, but a very interesting idea: uniting several json libraries into one interface. This way my own code is not hard wired to a specific JSON library.<br>— <br>Jens Weller<br>Meeting C&#43;&#43;<br>C&#43;&#43; Evangelist<br>Jens Weller is the organizer and founder of Meeting C&#43;&#43;. Doing C&#43;&#43; since 1998, he is an active member of the C&#43;&#43; Community. From being a moderator at c-plusplus.de and organizer of his own C&#43;&#43; User Group since 2011 in Düsseldorf, his roots are in the C&#43;&#43; Community. Today his main work is running the Meeting C&#43;&#43; Platform (conference, website, social media and recruiting). His main role has become being a C&#43;&#43; evengalist, as this he speaks and travels to other conferences and user groups around the world.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:84fef599ceb443e3915ca69b013172e9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jens-Weller-Writing-applications-in-modern-C-and-Qt</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jens-Weller-Writing-applications-in-modern-C-and-Qt</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—I started writing my own Content Managment System for Meeting C&amp;#43;&amp;#43; last year. One of the goals for this project is to seperate the Qt GUI code from the layer that handles the logic and data storage, written in modern C&amp;#43;&amp;#43; and boost. This presentation will focus on my usage of modern C&amp;#43;&amp;#43; to implement the CMS.Today my CMS has a little bit more then 10k loc, uses boost extensively and has a Qt GUI as the user facing frontend. In this talk I will focus on how boost powers the application and where I had to find my own solutions. I knew that with boostache there is a library for text templates, which later also inspired me to write a generic layer to use JSON for import and data storage in my CMS. The resulting generic_json library is currently a prototype, but a very interesting idea: uniting several json libraries into one interface. This way my own code is not hard wired to a specific JSON library.— Jens WellerMeeting C&amp;#43;&amp;#43;C&amp;#43;&amp;#43; EvangelistJens Weller is the organizer and founder of Meeting C&amp;#43;&amp;#43;. Doing C&amp;#43;&amp;#43; since 1998, he is an active member of the C&amp;#43;&amp;#43; Community. From being a moderator at c-plusplus.de and organizer of his own C&amp;#43;&amp;#43; User Group since 2011 in D&#252;sseldorf, his roots are in the C&amp;#43;&amp;#43; Community. Today his main work is running the Meeting C&amp;#43;&amp;#43; Platform (conference, website, social media and recruiting). His main role has become being a C&amp;#43;&amp;#43; evengalist, as this he speaks and travels to other conferences and user groups around the world.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3383</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jens-Weller-Writing-applications-in-modern-C-and-Qt</guid>
    <dc:creator>Jens Weller</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_high.mp4" length="931349714" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/84fef599ceb443e3915ca69b013172e9/CPPConWellerWritingApplications.mp4" expression="full" duration="3383" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications.mp3" expression="full" duration="3383" fileSize="54140490" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications.mp4" expression="full" duration="3383" fileSize="93054122" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_high.mp4" expression="full" duration="3383" fileSize="931349714" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/80b4/34493e61-c52e-4603-9e22-2e115efa80b4/CPPConWellerWritingApplications_mid.mp4" expression="full" duration="3383" fileSize="281282442" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: John Lakos “Advanced Levelization Techniques (part 3 of 3)&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Developing a large-scale software system in C&#43;&#43; requires more than just a sound understanding of the logical design issues covered in most books on C&#43;&#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&#43;&#43; language has to offer.<br>— <br>John Lakos<br>Bloomberg LP<br>Software Infrastructure Manager<br>John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b84a9110b99f48418514a69b01314f62">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-3-of-3</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-3-of-3</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Developing a large-scale software system in C&amp;#43;&amp;#43; requires more than just a sound understanding of the logical design issues covered in most books on C&amp;#43;&amp;#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&amp;#43;&amp;#43; language has to offer.— John LakosBloomberg LPSoftware Infrastructure ManagerJohn Lakos, author of &amp;quot;Large Scale C&amp;#43;&amp;#43; Software Design.&amp;quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&amp;#43;&amp;#43; Software Development world-wide. He is also an active voting member of the C&amp;#43;&amp;#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science (&#39;97) and an Sc.D. in Electrical Engineering (&#39;89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics (&#39;82) and Computer Science (&#39;81). His next book, entitled &amp;quot;Large-Scale C&amp;#43;&amp;#43;, Volume I: Process and Architecture&amp;quot;, is anticipated in 2014.—Videos Filmed &amp;amp; Edited by Bash Films</itunes:summary>
    <itunes:duration>3588</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-3-of-3</guid>
    <dc:creator>John Lakos</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_high.mp4" length="1147755192" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b84a9110b99f48418514a69b01314f62/CPPConLakosAdvancedLevelizationTechniquesPart3.mp4" expression="full" duration="3588" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3.mp3" expression="full" duration="3588" fileSize="57416010" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3.mp4" expression="full" duration="3588" fileSize="91324737" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_high.mp4" expression="full" duration="3588" fileSize="1147755192" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d240/5cdb038c-61be-44bf-803c-7e3ea0ddd240/CPPConLakosAdvancedLevelizationTechniquesPart3_mid.mp4" expression="full" duration="3588" fileSize="290525393" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: John Lakos “Advanced Levelization Techniques (part 2 of 3)&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Developing a large-scale software system in C&#43;&#43; requires more than just a sound understanding of the logical design issues covered in most books on C&#43;&#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&#43;&#43; language has to offer.<br>— <br>John Lakos<br>Bloomberg LP<br>Software Infrastructure Manager<br>John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2eb47f1b1ea14ae3b761a69b01310b94">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-2-of-3</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-2-of-3</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Developing a large-scale software system in C&amp;#43;&amp;#43; requires more than just a sound understanding of the logical design issues covered in most books on C&amp;#43;&amp;#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&amp;#43;&amp;#43; language has to offer.— John LakosBloomberg LPSoftware Infrastructure ManagerJohn Lakos, author of &amp;quot;Large Scale C&amp;#43;&amp;#43; Software Design.&amp;quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&amp;#43;&amp;#43; Software Development world-wide. He is also an active voting member of the C&amp;#43;&amp;#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science (&#39;97) and an Sc.D. in Electrical Engineering (&#39;89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics (&#39;82) and Computer Science (&#39;81). His next book, entitled &amp;quot;Large-Scale C&amp;#43;&amp;#43;, Volume I: Process and Architecture&amp;quot;, is anticipated in 2014.—Videos Filmed &amp;amp; Edited by Bash Films</itunes:summary>
    <itunes:duration>3712</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-2-of-3</guid>
    <dc:creator>John Lakos</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_high.mp4" length="1394502623" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/2eb47f1b1ea14ae3b761a69b01310b94/CPPConLakosAdvancedLevelizationTechniquesPart2.mp4" expression="full" duration="3712" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2.mp3" expression="full" duration="3712" fileSize="59396298" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2.mp4" expression="full" duration="3712" fileSize="92312149" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_high.mp4" expression="full" duration="3712" fileSize="1394502623" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3914/79fc86cb-45b5-47f4-8a0e-9c74ac733914/CPPConLakosAdvancedLevelizationTechniquesPart2_mid.mp4" expression="full" duration="3712" fileSize="334615553" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: John Lakos “Advanced Levelization Techniques (part 1 of 3)&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Developing a large-scale software system in C&#43;&#43; requires more than just a sound understanding of the logical design issues covered in most books on C&#43;&#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&#43;&#43; language has to offer.<br>— <br>John Lakos<br>Bloomberg LP<br>Software Infrastructure Manager<br>John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f81bb2339df64f34893ba69b0130f141">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-1-of-3</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-1-of-3</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Developing a large-scale software system in C&amp;#43;&amp;#43; requires more than just a sound understanding of the logical design issues covered in most books on C&amp;#43;&amp;#43; programming. To be successful, one also needs a grasp of physical design concepts that, while closely tied to the technical aspects of development, include a dimension with which even expert software developers may have little or no experience. In this talk we begin by briefly reviewing the basics of physical design. We then present a variety of levelization and Insulation techniques, and apply them in present-day, real-word examples to avoid cyclic, excessive, or otherwise inappropriate dependencies. Along the way, we comment on how to make the best use of what the C&amp;#43;&amp;#43; language has to offer.— John LakosBloomberg LPSoftware Infrastructure ManagerJohn Lakos, author of &amp;quot;Large Scale C&amp;#43;&amp;#43; Software Design.&amp;quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&amp;#43;&amp;#43; Software Development world-wide. He is also an active voting member of the C&amp;#43;&amp;#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science (&#39;97) and an Sc.D. in Electrical Engineering (&#39;89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics (&#39;82) and Computer Science (&#39;81). His next book, entitled &amp;quot;Large-Scale C&amp;#43;&amp;#43;, Volume I: Process and Architecture&amp;quot;, is anticipated in 2014.—Videos Filmed &amp;amp; Edited by Bash Films</itunes:summary>
    <itunes:duration>3610</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Lakos-Advanced-Levelization-Techniques-part-1-of-3</guid>
    <dc:creator>John Lakos</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_high.mp4" length="1470226615" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f81bb2339df64f34893ba69b0130f141/CPPConLakosAdvancedLevelizationTechniquesPart1.mp4" expression="full" duration="3610" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1.mp3" expression="full" duration="3610" fileSize="57763530" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1.mp4" expression="full" duration="3610" fileSize="98747383" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_high.mp4" expression="full" duration="3610" fileSize="1470226615" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b1a6/0f50221f-8565-48d6-8a87-a8bfc81cb1a6/CPPConLakosAdvancedLevelizationTechniquesPart1_mid.mp4" expression="full" duration="3610" fileSize="370093227" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Joel Falcou “Designing C++ portable SIMD support&quot; </title>
    <description><![CDATA[<div>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>SIMD extensions have been a feature of choice for processor manufacturers for a couple of decades. Designed to exploit data parallelism in applications at the instruction level, these extensions still require a high level of expertise or the use of potentially fragile compiler support or vendor-specific libraries. While a large fraction of their theoretical accelerations can be obtained using such tools, exploiting such hardware becomes tedious as soon as application portability across hardware is required.</div><div>Accessing such capabilities directly from C&#43;&#43; code could be a major improvements in a lot of use cases. Different take on this has been proposed either by the community or as an actual standard proposal. Solutions include pragma based annotations, standard algorithms policies, full blown compiler support and libraries. <br>In this talk we will present one such solution - the Boost.SIMD library (currently being proposed as such) which takes a library approach to this issues.</div><div>We will go over the basic notion required to grasp SIMD programming in general. Then, we'll discuss the different existing approaches. We will describe Boost.SIMD API and API design to demonstrate how it solves issues raised by the actual idiomatic way of writting SIMD enabled code. Design issues like standard algorithm integration, memory handling and how to fill the gaps in SIMD instructions sets will be discussed. Finally, we show its performances with respect to a subset of well known benchmarks.<br>— <br>Joel Falcou<br>CTO, NUMSCALE<br>Joel Falcou is NumScale CTO. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. | | He is also an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d'Informatique in Orsay, France.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d969a3adf8374c2db976a69b0130d340">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Joel-Falcou-Designing-C-portable-SIMD-support</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Joel-Falcou-Designing-C-portable-SIMD-support</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—SIMD extensions have been a feature of choice for processor manufacturers for a couple of decades. Designed to exploit data parallelism in applications at the instruction level, these extensions still require a high level of expertise or the use of potentially fragile compiler support or vendor-specific libraries. While a large fraction of their theoretical accelerations can be obtained using such tools, exploiting such hardware becomes tedious as soon as application portability across hardware is required.Accessing such capabilities directly from C&amp;#43;&amp;#43; code could be a major improvements in a lot of use cases. Different take on this has been proposed either by the community or as an actual standard proposal. Solutions include pragma based annotations, standard algorithms policies, full blown compiler support and libraries. In this talk we will present one such solution - the Boost.SIMD library (currently being proposed as such) which takes a library approach to this issues.We will go over the basic notion required to grasp SIMD programming in general. Then, we&#39;ll discuss the different existing approaches. We will describe Boost.SIMD API and API design to demonstrate how it solves issues raised by the actual idiomatic way of writting SIMD enabled code. Design issues like standard algorithm integration, memory handling and how to fill the gaps in SIMD instructions sets will be discussed. Finally, we show its performances with respect to a subset of well known benchmarks.— Joel FalcouCTO, NUMSCALEJoel Falcou is NumScale CTO. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. | | He is also an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d&#39;Informatique in Orsay, France.—Videos</itunes:summary>
    <itunes:duration>3760</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Joel-Falcou-Designing-C-portable-SIMD-support</guid>
    <dc:creator>Joel Falcou</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_high.mp4" length="1055884403" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/d969a3adf8374c2db976a69b0130d340/CPPConFalcouDesigningCppPortableSIMD.mp4" expression="full" duration="3760" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD.mp3" expression="full" duration="3760" fileSize="60162762" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD.mp4" expression="full" duration="3760" fileSize="118862654" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_high.mp4" expression="full" duration="3760" fileSize="1055884403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21d/9fadf8bc-269d-44ef-8c9c-c08fba5cd21d/CPPConFalcouDesigningCppPortableSIMD_mid.mp4" expression="full" duration="3760" fileSize="347974567" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: John McFarlane “fixed_point&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This presentation describes the necessity, utility and usage for a library of safe integer types. These types function in all respects the same way as built-in integers, but guarantee that no integer expression will return an incorrect result. The library can be reviewed at the boost library incubator.<br>— <br>John McFarlane<br>Programmer<br>John McFarlane has used C&#43;&#43; for twenty years, specializing in simulation, AI and interactivity. He is a contributor to Study Groups 6 and 14 and is involved in standardizing fixed-point arithmetic.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3ab4f6d5267140478f69a69b0130b488">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-McFarlane-fixedpoint</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-McFarlane-fixedpoint</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This presentation describes the necessity, utility and usage for a library of safe integer types. These types function in all respects the same way as built-in integers, but guarantee that no integer expression will return an incorrect result. The library can be reviewed at the boost library incubator.— John McFarlaneProgrammerJohn McFarlane has used C&amp;#43;&amp;#43; for twenty years, specializing in simulation, AI and interactivity. He is a contributor to Study Groups 6 and 14 and is involved in standardizing fixed-point arithmetic.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2535</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-McFarlane-fixedpoint</guid>
    <dc:creator>John McFarlane</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_high.mp4" length="1128601242" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/3ab4f6d5267140478f69a69b0130b488/CPPConMcFarlaneFixedPoint.mp4" expression="full" duration="2535" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint.mp3" expression="full" duration="2535" fileSize="40568010" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint.mp4" expression="full" duration="2535" fileSize="81726702" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_high.mp4" expression="full" duration="2535" fileSize="1128601242" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45af/8fe5ca5a-8a33-42ff-8c9f-a03f39fa45af/CPPConMcFarlaneFixedPoint_mid.mp4" expression="full" duration="2535" fileSize="322094058" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Robert Ramey “Safe Numerics Library&quot; </title>
    <description><![CDATA[<p>Published on Oct 7, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This presentation describes the necessity, utility and usage for a library of safe integer types. These types function in all respects the same way as built-in integers, but guarantee that no integer expression will return an incorrect result. The library can be reviewed at the boost library incubator.<br>— <br>Robert Ramey<br>Robert Ramey Software Development<br>Proprietor<br>Santa Barbara, CA<br>Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&#43;&#43; library development. Lately, he has been mostly interested in C&#43;&#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ebbf1cc3fcc84f109c1ea69b013092d5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-Safe-Numerics-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-Safe-Numerics-Library</link>
    <itunes:summary>Published on Oct 7, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This presentation describes the necessity, utility and usage for a library of safe integer types. These types function in all respects the same way as built-in integers, but guarantee that no integer expression will return an incorrect result. The library can be reviewed at the boost library incubator.— Robert RameyRobert Ramey Software DevelopmentProprietorSanta Barbara, CARobert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&amp;#43;&amp;#43; library development. Lately, he has been mostly interested in C&amp;#43;&amp;#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>1279</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-Safe-Numerics-Library</guid>
    <dc:creator>Robert Ramey</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_high.mp4" length="920629342" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/ebbf1cc3fcc84f109c1ea69b013092d5/CPPConRameySafeNumbersLibrary.mp4" expression="full" duration="1279" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary.mp3" expression="full" duration="1279" fileSize="20468682" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary.mp4" expression="full" duration="1279" fileSize="58371680" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_high.mp4" expression="full" duration="1279" fileSize="920629342" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1eb6/1d30ec67-e92a-48b0-904e-598ca43c1eb6/CPPConRameySafeNumbersLibrary_mid.mp4" expression="full" duration="1279" fileSize="280737884" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Nicolas Fleury “Rainbow Six Siege: Quest for Performance&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>While 2014 CppCon talk &quot;C&#43;&#43; in Huge AAA Games&quot; focused on reality for a lot of games developed at Ubisoft Montreal, this talk with focus on what was done to ship Rainbow Six Siege at 60 frames per second. Delivering a game with 5 versus 5 multi-player with heavy procedural environment destruction at 60 FPS was a constant challenge. From memory usage to lock-free solutions, a lot of developed C&#43;&#43; solutions are reusable outside of games. Some interesting analysis tools were also developed to find issues, and their concepts could be reused by any C&#43;&#43; developer caring about performance. <br>— <br>Nicolas Fleury<br>Technical Architect, Ubisoft Montreal<br>Nicolas has 13 years of experience in the video game industry, more years in the software industry in telecoms, in speech recognition and in computer assisted surgery. Technical Architect on Tom Clancy's: Rainbow Six Siege, he is one of the key Architects behind some collaboration initiatives at Ubisoft and was also Technical Architect on games like Prince of Persia. He presented at CppCon 2014 &quot;C&#43;&#43; in Huge AAA Games&quot;.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:70a93bd8f9a946bd95d0a69b012ffb72">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Fleury-Rainbow-Six-Siege-Quest-for-Performance</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Fleury-Rainbow-Six-Siege-Quest-for-Performance</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—While 2014 CppCon talk &amp;quot;C&amp;#43;&amp;#43; in Huge AAA Games&amp;quot; focused on reality for a lot of games developed at Ubisoft Montreal, this talk with focus on what was done to ship Rainbow Six Siege at 60 frames per second. Delivering a game with 5 versus 5 multi-player with heavy procedural environment destruction at 60 FPS was a constant challenge. From memory usage to lock-free solutions, a lot of developed C&amp;#43;&amp;#43; solutions are reusable outside of games. Some interesting analysis tools were also developed to find issues, and their concepts could be reused by any C&amp;#43;&amp;#43; developer caring about performance. — Nicolas FleuryTechnical Architect, Ubisoft MontrealNicolas has 13 years of experience in the video game industry, more years in the software industry in telecoms, in speech recognition and in computer assisted surgery. Technical Architect on Tom Clancy&#39;s: Rainbow Six Siege, he is one of the key Architects behind some collaboration initiatives at Ubisoft and was also Technical Architect on games like Prince of Persia. He presented at CppCon 2014 &amp;quot;C&amp;#43;&amp;#43; in Huge AAA Games&amp;quot;.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3008</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Fleury-Rainbow-Six-Siege-Quest-for-Performance</guid>
    <dc:creator>Nicolas Fleury</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_high.mp4" length="1875327276" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/70a93bd8f9a946bd95d0a69b012ffb72/CPPConFleuryRainbowSixSiege.mp4" expression="full" duration="3008" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege.mp3" expression="full" duration="3008" fileSize="48132810" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege.mp4" expression="full" duration="3008" fileSize="81131482" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_high.mp4" expression="full" duration="3008" fileSize="1875327276" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1064/0e9f6bc4-b1d3-44fb-8810-ee6388e11064/CPPConFleuryRainbowSixSiege_mid.mp4" expression="full" duration="3008" fileSize="428767385" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Mark Isaacson “Developing C++ @ Facebook Scale&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Writing correct C&#43;&#43; is hard. Period. Full stop. Even if a small change to a simple 2,000-line program compiles, has tests, and passes the tests, the code might still be broken. When the code spans hundreds of thousands of files across many different projects, making sure your change is safe is orders of magnitude harder. This talk is about all of the things that make that problem manageable for a Facebook engineer to tackle.<br>— <br>Mark Isaacson<br>Facebook<br>Software Engineer<br>Mark Isaacson is a Software Engineer at Facebook, where he works on improving the developer experience for all C&#43;&#43; programmers at Facebook. Mark is the author of the tech blog &quot;Modern Maintainable Code&quot; that tries to educate folks about properties of maintainable code and effective program design. Mark has a background in teaching and has been giving tech talks for several years now, most of which can be found on his blog. Website: http://modernmaintainablecode.com<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:65b57988dd824045823fa69b012fd4cc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Mark-Isaacson-Developing-C--Facebook-Scale</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Mark-Isaacson-Developing-C--Facebook-Scale</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Writing correct C&amp;#43;&amp;#43; is hard. Period. Full stop. Even if a small change to a simple 2,000-line program compiles, has tests, and passes the tests, the code might still be broken. When the code spans hundreds of thousands of files across many different projects, making sure your change is safe is orders of magnitude harder. This talk is about all of the things that make that problem manageable for a Facebook engineer to tackle.— Mark IsaacsonFacebookSoftware EngineerMark Isaacson is a Software Engineer at Facebook, where he works on improving the developer experience for all C&amp;#43;&amp;#43; programmers at Facebook. Mark is the author of the tech blog &amp;quot;Modern Maintainable Code&amp;quot; that tries to educate folks about properties of maintainable code and effective program design. Mark has a background in teaching and has been giving tech talks for several years now, most of which can be found on his blog. Website: http://modernmaintainablecode.com—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3787</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Mark-Isaacson-Developing-C--Facebook-Scale</guid>
    <dc:creator>Mark Isaacson</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_high.mp4" length="2667700232" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/65b57988dd824045823fa69b012fd4cc/CPPConIsaacsonDevelopingCpp.mp4" expression="full" duration="3787" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp.mp3" expression="full" duration="3787" fileSize="60593610" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp.mp4" expression="full" duration="3787" fileSize="141736889" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_high.mp4" expression="full" duration="3787" fileSize="2667700232" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5873/b940e125-1017-498d-ac4d-c19a64c45873/CPPConIsaacsonDevelopingCpp_mid.mp4" expression="full" duration="3787" fileSize="824930945" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: John Dubchak “A C++ MQTT Message Broker for the Enterprise&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Description</div><div>Modern applications in enterprise software comprise a complex web of streaming data sources and sinks. Data is constantly flowing across the network generated by a disparate set of clients, written in a multitude of programming languages, intended for local and/or remote resources. From the smallest devices in the Internet of Things (IoT) to the largest mainframes or connected subnets in Banking and Finance systems, the core abstraction used at the heart of all of this technology has been the message. However, messaging is an overloaded term with many meanings depending on the connotation and context. But we are going to focus on how C&#43;&#43; and the MQTT protocol can participate in the polyglot programming languages of the modern Enterprise Messaging landscape. Our focus will be on a scalable server-side framework that can provide messaging in any context from an IoT device all the way up to a large Banking mainframe.</div><div>Abstract</div><div>In the context of Enterprise Messaging the MQTT protocol and the design of a C&#43;&#43; MQTT Message Broker provide a perfect mixture of language support and features to build a scalable, extensible, high-quality Enterprise Messaging solution. In order to demonstrate how this is possible I will introduce Enterprise Messaging Systems and enough of the concepts of Enterprise Messaging to be able to create a shared understanding of the role and features needed to implement a basic Message Broker using modern advanced C&#43;&#43; idioms. I will then demonstrate how data integration using a Message Broker, with specific messaging models, can support several message integration use-cases.</div><div>The talk will focus on demonstrating how C&#43;&#43; fits into the context of Event Driven-Architecture (EDA) at the enterprise-level and how the language's newer idioms allow it to excel at the task. The talk will utilize C&#43;&#43; 14 making extensive use of Template Metaprogramming, multi-threading, asynchronous I/O, correct usage of move semantics and examples of cross-platform networking abstractions. It is geared to the intermediate to advanced developer wanting to learn more about messaging and EDA, MQTT, and extending C&#43;&#43; deeper into the enterprise as a serious language addition to the polyglot movement in enterprise development today.</div><div>The talk piggy-backs on another MQTT talk about a client-side framework for an IoT project being proposed by Michael Caisse. The two are not dependent upon each other as Michael's talk covers client-side programming and mine covers server-side though the two can be used as endpoints for the other's demo portion.<br>— <br>John Dubchak<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:76ef58db458741ed85bea69b012fb2a1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Dubchak-A-C-MQTT-Message-Broker-for-the-Enterprise</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Dubchak-A-C-MQTT-Message-Broker-for-the-Enterprise</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—DescriptionModern applications in enterprise software comprise a complex web of streaming data sources and sinks. Data is constantly flowing across the network generated by a disparate set of clients, written in a multitude of programming languages, intended for local and/or remote resources. From the smallest devices in the Internet of Things (IoT) to the largest mainframes or connected subnets in Banking and Finance systems, the core abstraction used at the heart of all of this technology has been the message. However, messaging is an overloaded term with many meanings depending on the connotation and context. But we are going to focus on how C&amp;#43;&amp;#43; and the MQTT protocol can participate in the polyglot programming languages of the modern Enterprise Messaging landscape. Our focus will be on a scalable server-side framework that can provide messaging in any context from an IoT device all the way up to a large Banking mainframe.AbstractIn the context of Enterprise Messaging the MQTT protocol and the design of a C&amp;#43;&amp;#43; MQTT Message Broker provide a perfect mixture of language support and features to build a scalable, extensible, high-quality Enterprise Messaging solution. In order to demonstrate how this is possible I will introduce Enterprise Messaging Systems and enough of the concepts of Enterprise Messaging to be able to create a shared understanding of the role and features needed to implement a basic Message Broker using modern advanced C&amp;#43;&amp;#43; idioms. I will then demonstrate how data integration using a Message Broker, with specific messaging models, can support several message integration use-cases.The talk will focus on demonstrating how C&amp;#43;&amp;#43; fits into the context of Event Driven-Architecture (EDA) at the enterprise-level and how the language&#39;s newer idioms allow it to excel </itunes:summary>
    <itunes:duration>3092</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-John-Dubchak-A-C-MQTT-Message-Broker-for-the-Enterprise</guid>
    <dc:creator>John Dubchak</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_high.mp4" length="1364027628" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/76ef58db458741ed85bea69b012fb2a1/CPPConDubchakACppMQTT.mp4" expression="full" duration="3092" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT.mp3" expression="full" duration="3092" fileSize="49475274" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT.mp4" expression="full" duration="3092" fileSize="101039063" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_high.mp4" expression="full" duration="3092" fileSize="1364027628" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0e2a/e85a6e6b-f1ec-409f-a5a5-ad68ecda0e2a/CPPConDubchakACppMQTT_mid.mp4" expression="full" duration="3092" fileSize="377363897" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Michael Caisse “Implementing a Modern C++ MQTT Client for Embedded Devices&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Many IoT (Internet of Things) devices have adopted MQTT (Message Queueing Telemetry Transport) as an efficient protocol for communication. Few IoT devices have embraced modern C&#43;&#43; as a viable language for implementations. MQTT is a reliable publish-subscriber based messaging protocol that can be found in diverse ecosystems such as servers, cell phones, and light bulbs. Unfortunately, existing open source libraries leave much to be desired and many are a rich source of bad practices when compared to modern techniques. This session will explore maqiatto, CiereLab's open source MQTT client library written for embedded systems in modern C&#43;&#43; . There will be a brief demonstration of the library followed by digging into the design and implementation while providing the resource &quot;cost&quot; of various solutions. As we explore the C&#43;&#43;14 code base to illustrate useful idioms and techniques for your own code we will answer the questions, what does is take to put modern C&#43;&#43; on a small OS-less device or a cell phone? Are there features to avoid? Join us and see how libraries can be elegantly designed and implemented for big or small targets alike.<br>— <br>Michael Caisse<br>Ciere, Inc.<br>Michael Caisse has been crafting code in C&#43;&#43; for 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn't fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a6a57a46caad4cb3bca6a69b012f89f1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Implementing-a-Modern-C-MQTT-Client-for-Embedded-Devices</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Implementing-a-Modern-C-MQTT-Client-for-Embedded-Devices</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Many IoT (Internet of Things) devices have adopted MQTT (Message Queueing Telemetry Transport) as an efficient protocol for communication. Few IoT devices have embraced modern C&amp;#43;&amp;#43; as a viable language for implementations. MQTT is a reliable publish-subscriber based messaging protocol that can be found in diverse ecosystems such as servers, cell phones, and light bulbs. Unfortunately, existing open source libraries leave much to be desired and many are a rich source of bad practices when compared to modern techniques. This session will explore maqiatto, CiereLab&#39;s open source MQTT client library written for embedded systems in modern C&amp;#43;&amp;#43; . There will be a brief demonstration of the library followed by digging into the design and implementation while providing the resource &amp;quot;cost&amp;quot; of various solutions. As we explore the C&amp;#43;&amp;#43;14 code base to illustrate useful idioms and techniques for your own code we will answer the questions, what does is take to put modern C&amp;#43;&amp;#43; on a small OS-less device or a cell phone? Are there features to avoid? Join us and see how libraries can be elegantly designed and implemented for big or small targets alike.— Michael CaisseCiere, Inc.Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn&#39;t fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3458</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Implementing-a-Modern-C-MQTT-Client-for-Embedded-Devices</guid>
    <dc:creator>Michael Caisse</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_high.mp4" length="1090358617" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a6a57a46caad4cb3bca6a69b012f89f1/CPPConCaiseeModernCppMQTT.mp4" expression="full" duration="3458" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT.mp3" expression="full" duration="3458" fileSize="55334730" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT.mp4" expression="full" duration="3458" fileSize="103069074" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_high.mp4" expression="full" duration="3458" fileSize="1090358617" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec56/8b4f9dc9-e13c-46a8-996e-c5da7472ec56/CPPConCaiseeModernCppMQTT_mid.mp4" expression="full" duration="3458" fileSize="339621395" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Pablo Halpern “Introduction to Vector Parallelism&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Parallel programming is a hot topic, and everybody knows that multicore processors and GPUs can be used to speed up calculations. What many people don't realize, however, is that CPUs provide another way to exploit parallelism -- one that predates recent multicore processors, has less overhead, requires no runtime scheduler, and can be used in combination with multicore processing to achieve even more speedup. It's called vector parallelism, and the hardware that implements it goes by brand names like SSE, AVX, NEON, and Altivec. If your parallel program does not use vectorization, you could be leaving a factor of 4 to 16 in performance on the floor.</div><div>In some ways, Vector programming is easier than thread-based parallel programming because it provides ordering guarantees that more closely resemble serial programming. Without an intuitive framework by which to interpret them, the ordering rules can be confusing, however, and restrictions on vector code that don't apply to thread-parallel code must be kept in mind. In this talk, we'll introduce you to the common elements of most vector hardware, show what kind of C&#43;&#43; code can be automatically vectorized by a smart compiler, and talk about programmer-specified vectorization in OpenMP as well as proposals making their way through the C&#43;&#43; standards committee. You'll understand the rules of vectorization, so that you can begin to take advantage of the vector units already in your CPU.</div><div>A basic understanding of C&#43;&#43;11 lambda expressions is helpful.<br>— <br>Pablo Halpern<br>Intel Corp.<br>Software Engineer<br>Greater Boston Area<br>Pablo Halpern has been programming in C&#43;&#43; since 1989 and has been a member of the C&#43;&#43; Standards Committee since 2007. He is currently an enginneer at Intel Corp., where he works on high-performance computing. As the former chairman of the Parallel Programming Models Working Group at Intel, he coordinated the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&#43;&#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &quot;Reducers and other Cilk&#43;&#43; Hyperobjects&quot;, which won best paper at the SPAA 2009 conference. His current work is focused on providing compiler support for a new generation of high-performance computing architectures as well aspromoting adoption of parallelism and vectorization constructs into the C&#43;&#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpern<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bb1b9f6860a64f1d89c5a69b012f6911">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Pablo-Halpern-Introduction-to-Vector-Parallelism</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Pablo-Halpern-Introduction-to-Vector-Parallelism</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Parallel programming is a hot topic, and everybody knows that multicore processors and GPUs can be used to speed up calculations. What many people don&#39;t realize, however, is that CPUs provide another way to exploit parallelism -- one that predates recent multicore processors, has less overhead, requires no runtime scheduler, and can be used in combination with multicore processing to achieve even more speedup. It&#39;s called vector parallelism, and the hardware that implements it goes by brand names like SSE, AVX, NEON, and Altivec. If your parallel program does not use vectorization, you could be leaving a factor of 4 to 16 in performance on the floor.In some ways, Vector programming is easier than thread-based parallel programming because it provides ordering guarantees that more closely resemble serial programming. Without an intuitive framework by which to interpret them, the ordering rules can be confusing, however, and restrictions on vector code that don&#39;t apply to thread-parallel code must be kept in mind. In this talk, we&#39;ll introduce you to the common elements of most vector hardware, show what kind of C&amp;#43;&amp;#43; code can be automatically vectorized by a smart compiler, and talk about programmer-specified vectorization in OpenMP as well as proposals making their way through the C&amp;#43;&amp;#43; standards committee. You&#39;ll understand the rules of vectorization, so that you can begin to take advantage of the vector units already in your CPU.A basic understanding of C&amp;#43;&amp;#43;11 lambda expressions is helpful.— Pablo HalpernIntel Corp.Software EngineerGreater Boston AreaPablo Halpern has been programming in C&amp;#43;&amp;#43; since 1989 and has been a member of the C&amp;#43;&amp;#43; Standards Committee since 2007. He is currently an enginneer at Intel Corp., where he works on high-performance computing. As the forme</itunes:summary>
    <itunes:duration>3648</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Pablo-Halpern-Introduction-to-Vector-Parallelism</guid>
    <dc:creator>Pablo Halpern</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_high.mp4" length="1148273988" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/bb1b9f6860a64f1d89c5a69b012f6911/CPPConHalpernIntroductionToVectorParallelism.mp4" expression="full" duration="3648" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism.mp3" expression="full" duration="3648" fileSize="58382154" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism.mp4" expression="full" duration="3648" fileSize="122109215" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_high.mp4" expression="full" duration="3648" fileSize="1148273988" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c20a/6b5bbc71-5cca-4c5c-81cb-75bd088cc20a/CPPConHalpernIntroductionToVectorParallelism_mid.mp4" expression="full" duration="3648" fileSize="373616101" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Hans Boehm “Using weakly ordered C++ atomics correctly&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Most programmers should usually avoid C&#43;&#43; atomics altogether and use mutexes instead. If that's not possible, perhaps because the code must be usable in interrupt handlers, I recommend that you consider limiting yourself to sequentially consistent atomics, which provide a more subtle, but still reasonably unsurprising programming model. This talk will target those who choose to ignore both of those pieces of advice, for either good or bad reasons.</div><div>I will start by trying to distinguish the good and bad reasons for using weakly ordered atomics, and then follow with guidelines for using them correctly.</div><div>I will discuss why it is often incorrect to think of atomics in terms of fence-based implementations, and about some common errors I've seen, including some really convincing looking, but still incorrect, code. I will also try to go through some of the common idioms for which weakly ordered atomics are actually safe. In my experience, the latter are also reasonably common, but not always easy to distinguish from the subtly erroneous examples.<br>— <br>Hans Boehm<br>Google<br>Hans is the WG21 SG1 (Concurrency) Chair, and co-led the design of the C&#43;&#43; memory model and atomic operations. He now mostly works on concurrency-related issues in Android, and occasionally on teaching calculators to calculate correctly. In the past, he mostly focused on garbage collection. He is the original primary author of bdwgc, a conservative garbage collector for C and C&#43;&#43;. http://hboehm.info<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c6d1ec3319fc47e39e66a69b012f0086">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hans-Boehm-Using-weakly-ordered-C-atomics-correctly</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hans-Boehm-Using-weakly-ordered-C-atomics-correctly</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Most programmers should usually avoid C&amp;#43;&amp;#43; atomics altogether and use mutexes instead. If that&#39;s not possible, perhaps because the code must be usable in interrupt handlers, I recommend that you consider limiting yourself to sequentially consistent atomics, which provide a more subtle, but still reasonably unsurprising programming model. This talk will target those who choose to ignore both of those pieces of advice, for either good or bad reasons.I will start by trying to distinguish the good and bad reasons for using weakly ordered atomics, and then follow with guidelines for using them correctly.I will discuss why it is often incorrect to think of atomics in terms of fence-based implementations, and about some common errors I&#39;ve seen, including some really convincing looking, but still incorrect, code. I will also try to go through some of the common idioms for which weakly ordered atomics are actually safe. In my experience, the latter are also reasonably common, but not always easy to distinguish from the subtly erroneous examples.— Hans BoehmGoogleHans is the WG21 SG1 (Concurrency) Chair, and co-led the design of the C&amp;#43;&amp;#43; memory model and atomic operations. He now mostly works on concurrency-related issues in Android, and occasionally on teaching calculators to calculate correctly. In the past, he mostly focused on garbage collection. He is the original primary author of bdwgc, a conservative garbage collector for C and C&amp;#43;&amp;#43;. http://hboehm.info—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3804</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hans-Boehm-Using-weakly-ordered-C-atomics-correctly</guid>
    <dc:creator>Hans Boehm</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_high.mp4" length="622957073" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/c6d1ec3319fc47e39e66a69b012f0086/CPPConBoehmUsingWeaklyOrderedCpp.mp4" expression="full" duration="3804" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp.mp3" expression="full" duration="3804" fileSize="60880074" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp.mp4" expression="full" duration="3804" fileSize="81113494" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_high.mp4" expression="full" duration="3804" fileSize="622957073" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9fc0/8f109b5e-6c95-46b1-acf0-677bc0eb9fc0/CPPConBoehmUsingWeaklyOrderedCpp_mid.mp4" expression="full" duration="3804" fileSize="187355191" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Robert Ramey “C++, Abstract Algebra and Practical Applications&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Modern C&#43;&#43; includes ample facilities for manipulating types a compile time. These facilities have evolved from a small bag of miscellaneous tricks to an large bag of miscellaneous tricks. It turns out we can select a subset of these tricks to build a representation of abstract algebra within the C&#43;&#43; type system. This methodology will help programmers select and exploit the C&#43;&#43; type manipulation facilities to create more transparently correct, efficient and maintainable programs.</div><div>This session does not presuppose and particular mathematical background. It depends upon only the most basic and key ideas of abstract algebra which will be explained as part of the presentation.</div><div>This work was initially inspired by work by Barton and Nackman as well as some ideas from Denotational Semantics.<br>— <br>Robert Ramey<br>Robert Ramey Software Development<br>Proprietor<br>Santa Barbara, CA<br>Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&#43;&#43; library development. Lately, he has been mostly interested in C&#43;&#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e9ab24381d754fd0b76da69b012ec7c8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-C-Abstract-Algebra-and-Practical-Applications</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-C-Abstract-Algebra-and-Practical-Applications</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Modern C&amp;#43;&amp;#43; includes ample facilities for manipulating types a compile time. These facilities have evolved from a small bag of miscellaneous tricks to an large bag of miscellaneous tricks. It turns out we can select a subset of these tricks to build a representation of abstract algebra within the C&amp;#43;&amp;#43; type system. This methodology will help programmers select and exploit the C&amp;#43;&amp;#43; type manipulation facilities to create more transparently correct, efficient and maintainable programs.This session does not presuppose and particular mathematical background. It depends upon only the most basic and key ideas of abstract algebra which will be explained as part of the presentation.This work was initially inspired by work by Barton and Nackman as well as some ideas from Denotational Semantics.— Robert RameyRobert Ramey Software DevelopmentProprietorSanta Barbara, CARobert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&amp;#43;&amp;#43; library development. Lately, he has been mostly interested in C&amp;#43;&amp;#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3475</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Ramey-C-Abstract-Algebra-and-Practical-Applications</guid>
    <dc:creator>Robert Ramey</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_high.mp4" length="1190305499" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/e9ab24381d754fd0b76da69b012ec7c8/CPPConRameyCpp.mp4" expression="full" duration="3475" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp.mp3" expression="full" duration="3475" fileSize="55609674" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp.mp4" expression="full" duration="3475" fileSize="110311364" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_high.mp4" expression="full" duration="3475" fileSize="1190305499" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0295/f6b2abbb-0837-4b9f-abb9-46a858570295/CPPConRameyCpp_mid.mp4" expression="full" duration="3475" fileSize="367284724" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Marshall Clow “STL Algorithms - why you should use them, and how to write your own&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>One of the most powerful features of the C&#43;&#43; standard library is the collection of basic algorithms. Everyone knows about sort and copy, but there are is a lot of powerful capabilities in the other algorithms as well. In this talk, I will explore some of the algorithms in the library, and give a rationale for writing your own, along with examples.</div><div>The motivation for writing your own algorithms is that you can create generic building blocks that can be used over and over again in your library or application, and which will allow your to program at a higher level of abstraction. Instead of thinking, &quot;how do I sort this vector&quot;, you just call std::sort. The same should apply to the algorithms that are specific to your domain - once you write them. <br>— <br>Marshall Clow<br>Principal Engineer, Qualcomm, Inc.<br>Marshall is a long-time LLVM and Boost participant. He is a principal engineer at Qualcomm, Inc. in San Diego, and the code owner for libc&#43;&#43;, the LLVM standard library implementation. He is the author of the Boost.Algorithm library and maintains several other Boost libraries.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:73efd066c3184775a721a69b012ea322">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marshall-Clow-STL-Algorithms-why-you-should-use-them-and-how-to-write-your-own</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marshall-Clow-STL-Algorithms-why-you-should-use-them-and-how-to-write-your-own</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—One of the most powerful features of the C&amp;#43;&amp;#43; standard library is the collection of basic algorithms. Everyone knows about sort and copy, but there are is a lot of powerful capabilities in the other algorithms as well. In this talk, I will explore some of the algorithms in the library, and give a rationale for writing your own, along with examples.The motivation for writing your own algorithms is that you can create generic building blocks that can be used over and over again in your library or application, and which will allow your to program at a higher level of abstraction. Instead of thinking, &amp;quot;how do I sort this vector&amp;quot;, you just call std::sort. The same should apply to the algorithms that are specific to your domain - once you write them. — Marshall ClowPrincipal Engineer, Qualcomm, Inc.Marshall is a long-time LLVM and Boost participant. He is a principal engineer at Qualcomm, Inc. in San Diego, and the code owner for libc&amp;#43;&amp;#43;, the LLVM standard library implementation. He is the author of the Boost.Algorithm library and maintains several other Boost libraries.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3572</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marshall-Clow-STL-Algorithms-why-you-should-use-them-and-how-to-write-your-own</guid>
    <dc:creator>Marshall Clow</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_high.mp4" length="1392880746" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/73efd066c3184775a721a69b012ea322/CPPConClowSTLAlgorithms.mp4" expression="full" duration="3572" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms.mp3" expression="full" duration="3572" fileSize="57169098" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms.mp4" expression="full" duration="3572" fileSize="95418036" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_high.mp4" expression="full" duration="3572" fileSize="1392880746" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e46a/02e1ce86-b919-4900-ab85-2b60b3f2e46a/CPPConClowSTLAlgorithms_mid.mp4" expression="full" duration="3572" fileSize="332260073" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Gor Nishanov “C++ Coroutines: Under the covers&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Coroutines feel like magic. Functions that can suspend and resume in the middle of the execution without blocking a thread! We will look under the covers to see what transformations compilers perform on coroutines, what happens when a coroutine is started, suspended, resumed or cancelled. We will look at optimizations that can make a coroutine disappear into thin air.<br>— <br>Gor Nishanov<br>Principal Software Engineer, Microsoft<br>Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&#43;&#43; team. He works on the 'await' feature. Prior to joining C&#43;&#43; team, Gor was working on distributed systems in Windows Clustering team.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7d508e44f2b04d57b509a69b012e7f16">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gor-Nishanov-C-Coroutines-Under-the-covers</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gor-Nishanov-C-Coroutines-Under-the-covers</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Coroutines feel like magic. Functions that can suspend and resume in the middle of the execution without blocking a thread! We will look under the covers to see what transformations compilers perform on coroutines, what happens when a coroutine is started, suspended, resumed or cancelled. We will look at optimizations that can make a coroutine disappear into thin air.— Gor NishanovPrincipal Software Engineer, MicrosoftGor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&amp;#43;&amp;#43; team. He works on the &#39;await&#39; feature. Prior to joining C&amp;#43;&amp;#43; team, Gor was working on distributed systems in Windows Clustering team.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3406</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gor-Nishanov-C-Coroutines-Under-the-covers</guid>
    <dc:creator>Gor Nishanov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_high.mp4" length="1041435583" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/7d508e44f2b04d57b509a69b012e7f16/CPPConNishanovCppCoroutines.mp4" expression="full" duration="3406" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines.mp3" expression="full" duration="3406" fileSize="54505674" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines.mp4" expression="full" duration="3406" fileSize="105518614" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_high.mp4" expression="full" duration="3406" fileSize="1041435583" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f7bd/b1d401f7-9ca5-4e9c-8bfd-1125e368f7bd/CPPConNishanovCppCoroutines_mid.mp4" expression="full" duration="3406" fileSize="316198509" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Kirk Shoop “Algorithm Design For Values Distributed In Time&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Algorithms and the Concepts that enable them (Range and Iterator) are designed to work over values distributed in space (VDiS). The algorithms in std and the rangev3 proposal and the parallel algorithm are all focused on efficiently utilizing every resource assigned to them to process values distributed in space. Whenever values are distributed in space, these are the tools to use.</div><div>Values distributed in time (VDiT) require different Concepts and Algorithms. This talk will explore some of these Algorithms and the requirements that they impose on the Concepts. The result is a library that composes algorithms the same way that the rangev3 proposal does and in a way that allows knowledge of one to transfer to the other.<br>— <br>Kirk Shoop<br>Principal Software Engineer, Microsoft<br>Rx Cpp, Asynchronous Algorithms, catching code errors at compile time.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c7acecb3373b4b098c2ea69b012e62a3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kirk-Shoop-Algorithm-Design-For-Values-Distributed-In-Time</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kirk-Shoop-Algorithm-Design-For-Values-Distributed-In-Time</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Algorithms and the Concepts that enable them (Range and Iterator) are designed to work over values distributed in space (VDiS). The algorithms in std and the rangev3 proposal and the parallel algorithm are all focused on efficiently utilizing every resource assigned to them to process values distributed in space. Whenever values are distributed in space, these are the tools to use.Values distributed in time (VDiT) require different Concepts and Algorithms. This talk will explore some of these Algorithms and the requirements that they impose on the Concepts. The result is a library that composes algorithms the same way that the rangev3 proposal does and in a way that allows knowledge of one to transfer to the other.— Kirk ShoopPrincipal Software Engineer, MicrosoftRx Cpp, Asynchronous Algorithms, catching code errors at compile time.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3336</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kirk-Shoop-Algorithm-Design-For-Values-Distributed-In-Time</guid>
    <dc:creator>Kirk Shoop</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_high.mp4" length="1336181192" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/c7acecb3373b4b098c2ea69b012e62a3/CPPConShoopAlgorithmDesign.mp4" expression="full" duration="3336" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign.mp3" expression="full" duration="3336" fileSize="53382474" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign.mp4" expression="full" duration="3336" fileSize="92685667" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_high.mp4" expression="full" duration="3336" fileSize="1336181192" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/098a/b344d600-e254-4760-b73f-a516142e098a/CPPConShoopAlgorithmDesign_mid.mp4" expression="full" duration="3336" fileSize="335566378" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Rian Quinn “Making C++ and the STL Work in the Linux / Windows Kernels&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This presentation will describe how we bootstrapped a C&#43;&#43;11/C&#43;&#43;14 environment from the ground up, to essentially provide the ability to execute &quot;user-space&quot; like applications inside the Linux and Windows kernel. We leveraged this C&#43;&#43; environment and the Standard Template Library (STL) to create the first open source, cross platform, cross architecture, hypervisor that can support both baremetal (i.e. type 1) and late launch (i.e. type 2) virtualization models. Topics include the benefits of using C&#43;&#43; over C when creating a hypervisor as well as how we handled compilation, module loading, global constructor / destructor support, and of course, full exception support. If you have ever wondered how C&#43;&#43; works under the hood, or are interested in learning more about C&#43;&#43;, this presentation is for you.<br>— <br>Rian Quinn<br>Assured Information Security, Inc.<br>Principal Investigator<br>Denver, CO<br>Dr. Rian Quinn is a Senior Principal Investigator in the Trusted Information Systems Group at Assured Information Security, Inc. were he has focused on trusted computing and hypervisor related technologies for nearly 10 years. He holds a Ph.D. in Computer Engineering with specializations in Information Assurance and Computer Architectures from Binghamton University. He is a lead developer and co-founder of the Bareflank Hypervisor, and is an active member of several open source projects including OpenXT. Specialties: computer architectures, virtualization, operating systems, kernel programming, cyber security, and open source.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com<br>Category <br>Science &amp; Technology <br>License <br>Standard YouTube License</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:87d0bffce27d4479960fa69b012e06ea">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Rian-Quinn-Making-C-and-the-STL-Work-in-the-Linux--Windows-Kernels</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Rian-Quinn-Making-C-and-the-STL-Work-in-the-Linux--Windows-Kernels</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This presentation will describe how we bootstrapped a C&amp;#43;&amp;#43;11/C&amp;#43;&amp;#43;14 environment from the ground up, to essentially provide the ability to execute &amp;quot;user-space&amp;quot; like applications inside the Linux and Windows kernel. We leveraged this C&amp;#43;&amp;#43; environment and the Standard Template Library (STL) to create the first open source, cross platform, cross architecture, hypervisor that can support both baremetal (i.e. type 1) and late launch (i.e. type 2) virtualization models. Topics include the benefits of using C&amp;#43;&amp;#43; over C when creating a hypervisor as well as how we handled compilation, module loading, global constructor / destructor support, and of course, full exception support. If you have ever wondered how C&amp;#43;&amp;#43; works under the hood, or are interested in learning more about C&amp;#43;&amp;#43;, this presentation is for you.— Rian QuinnAssured Information Security, Inc.Principal InvestigatorDenver, CODr. Rian Quinn is a Senior Principal Investigator in the Trusted Information Systems Group at Assured Information Security, Inc. were he has focused on trusted computing and hypervisor related technologies for nearly 10 years. He holds a Ph.D. in Computer Engineering with specializations in Information Assurance and Computer Architectures from Binghamton University. He is a lead developer and co-founder of the Bareflank Hypervisor, and is an active member of several open source projects including OpenXT. Specialties: computer architectures, virtualization, operating systems, kernel programming, cyber security, and open source.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.comCategory Science &amp;amp; Technology License Standard YouTube License </itunes:summary>
    <itunes:duration>3812</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Rian-Quinn-Making-C-and-the-STL-Work-in-the-Linux--Windows-Kernels</guid>
    <dc:creator>Rian Quinn</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_high.mp4" length="1854741777" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/87d0bffce27d4479960fa69b012e06ea/CPPConQuinnCppAndTheSTL.mp4" expression="full" duration="3812" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL.mp3" expression="full" duration="3812" fileSize="61007946" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL.mp4" expression="full" duration="3812" fileSize="98624322" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_high.mp4" expression="full" duration="3812" fileSize="1854741777" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/951e/53e37df6-5ae0-4ecd-ae23-8b85168b951e/CPPConQuinnCppAndTheSTL_mid.mp4" expression="full" duration="3812" fileSize="397794334" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Chandler Carruth “Garbage In, Garbage Out: Arguing about Undefined Behavior...&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>There has been an overwhelming amount of tension in the programming world over the last year due to something that has become an expletive, a cursed and despised term, both obscene and profane: **undefined behavior**. All too often, this issue and the discussions surrounding it descend into unproductive territory without actually resolving anything.</div><div>In this talk, I'm going to try something very bold. I will try to utterly and completely do away with the use of the term &quot;undefined behavior&quot; in these discussions. And I will unquestionably fail. But in the process of failing, I will outline a framework for understanding the actual root issues that the software industry faces here, and try to give constructive and clear paths forward, both for programmers and the programming language.</div><div>And, with luck, I will avoid being joined on stage by any unruly nasal demons.<br>— <br>Chandler Carruth<br>Google<br>C&#43;&#43; Lead<br>San Francisco Bay Area<br>Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google's distributed build system. He makes guest appearances helping to maintain a few core C&#43;&#43; libraries across Google's codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master's thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:130465b0307845138080a69b012ddb01">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-Garbage-In-Garbage-Out-Arguing-about-Undefined-Behavior</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-Garbage-In-Garbage-Out-Arguing-about-Undefined-Behavior</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—There has been an overwhelming amount of tension in the programming world over the last year due to something that has become an expletive, a cursed and despised term, both obscene and profane: **undefined behavior**. All too often, this issue and the discussions surrounding it descend into unproductive territory without actually resolving anything.In this talk, I&#39;m going to try something very bold. I will try to utterly and completely do away with the use of the term &amp;quot;undefined behavior&amp;quot; in these discussions. And I will unquestionably fail. But in the process of failing, I will outline a framework for understanding the actual root issues that the software industry faces here, and try to give constructive and clear paths forward, both for programmers and the programming language.And, with luck, I will avoid being joined on stage by any unruly nasal demons.— Chandler CarruthGoogleC&amp;#43;&amp;#43; LeadSan Francisco Bay AreaChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google&#39;s distributed build system. He makes guest appearances helping to maintain a few core C&amp;#43;&amp;#43; libraries across Google&#39;s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master&#39;s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3458</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-Garbage-In-Garbage-Out-Arguing-about-Undefined-Behavior</guid>
    <dc:creator>Chandler Carruth</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_high.mp4" length="978656753" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/130465b0307845138080a69b012ddb01/CPPConCarruthGarbageInGarbageOut.mp4" expression="full" duration="3458" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut.mp3" expression="full" duration="3458" fileSize="55336650" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut.mp4" expression="full" duration="3458" fileSize="102093861" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_high.mp4" expression="full" duration="3458" fileSize="978656753" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7dad/63a4249b-0a48-403e-a48e-b480a90e7dad/CPPConCarruthGarbageInGarbageOut_mid.mp4" expression="full" duration="3458" fileSize="290037448" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Alexandru Voicu “Optimally Shooting Furry Balls out of Vulkanoes&quot; </title>
    <description><![CDATA[<p>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Real-time 3D graphics rendering is commonly agreed upon as one of the more interesting haunting grounds for a programmer. Similarly, whether by way of presentations or canonical books, experts in the field talk about using C&#43;&#43; for rendering beautiful scenes. It is just that when looking at the &quot;C&#43;&#43;&quot; bits they don't quite seem...right. In effect, they frequently look like anything but what has come to be accepted as idiomatic, modern, good quality C&#43;&#43;. And this was before the advent of a new generation of graphics APIs whose claim to fame is being &quot;low-level&quot;, and thus, in some sense, even more abstraction adverse. One must wonder, is this the only way to get pixels on our HiDPI screens to light up in pleasing patterns? <br>Having been on the receiving end of more than one &quot;this uses modern C&#43;&#43;, and no function-like macros, how can it possibly work for what we do?&quot; tirades, the talk's author thinks that a better way exists. Attendees will see that it is possible to write beautiful, clean, portable C&#43;&#43; that yields beautiful graphics by leveraging the recently released Vulkan API. Using bottoms-up design, a minimal yet sufficient set of generic abstractions emerges, freeing programmers from the burden of dealing with API idiosyncrasies. The best part? These abstractions will be derived live, by the audience and the presenter, and we will see that the essence of things is straightforward, and not some mysterious ineffable quantity only known to a handful of gurus.<br>— <br>Alexandru Voicu<br>Watford, United Kingdom<br>Until recently, I was a Senior Software Engineer at Imagination Technologies, where I did my best to drive GPUs towards painting the prettiest pixels imaginable in no more than 16.6 milliseconds per masterpiece. A large part of my work concerned itself with obtaining generic C&#43;&#43; abstractions that optimally map to modern APIs, such as Vulkan or DirectX 12. Before joining Imagination Technologies, I spent a fair amount of time breaking things in Microsoft's Visual C&#43;&#43; libraries team, mostly in relation with C&#43;&#43; AMP.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e42e610998174926baf0a69b012db6b9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alexandru-Voicu-Optimally-Shooting-Furry-Balls-out-of-Vulkanoes</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alexandru-Voicu-Optimally-Shooting-Furry-Balls-out-of-Vulkanoes</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Real-time 3D graphics rendering is commonly agreed upon as one of the more interesting haunting grounds for a programmer. Similarly, whether by way of presentations or canonical books, experts in the field talk about using C&amp;#43;&amp;#43; for rendering beautiful scenes. It is just that when looking at the &amp;quot;C&amp;#43;&amp;#43;&amp;quot; bits they don&#39;t quite seem...right. In effect, they frequently look like anything but what has come to be accepted as idiomatic, modern, good quality C&amp;#43;&amp;#43;. And this was before the advent of a new generation of graphics APIs whose claim to fame is being &amp;quot;low-level&amp;quot;, and thus, in some sense, even more abstraction adverse. One must wonder, is this the only way to get pixels on our HiDPI screens to light up in pleasing patterns? Having been on the receiving end of more than one &amp;quot;this uses modern C&amp;#43;&amp;#43;, and no function-like macros, how can it possibly work for what we do?&amp;quot; tirades, the talk&#39;s author thinks that a better way exists. Attendees will see that it is possible to write beautiful, clean, portable C&amp;#43;&amp;#43; that yields beautiful graphics by leveraging the recently released Vulkan API. Using bottoms-up design, a minimal yet sufficient set of generic abstractions emerges, freeing programmers from the burden of dealing with API idiosyncrasies. The best part? These abstractions will be derived live, by the audience and the presenter, and we will see that the essence of things is straightforward, and not some mysterious ineffable quantity only known to a handful of gurus.— Alexandru VoicuWatford, United KingdomUntil recently, I was a Senior Software Engineer at Imagination Technologies, where I did my best to drive GPUs towards painting the prettiest pixels imaginable in no more than 16.6 milliseconds per masterpiece. A large part of my work concerne</itunes:summary>
    <itunes:duration>3685</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alexandru-Voicu-Optimally-Shooting-Furry-Balls-out-of-Vulkanoes</guid>
    <dc:creator>Alexandru Voicu</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_high.mp4" length="1513618473" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/e42e610998174926baf0a69b012db6b9/CPPConVoicuOptimallyShootingFurryBalls.mp4" expression="full" duration="3685" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls.mp3" expression="full" duration="3685" fileSize="58972362" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls.mp4" expression="full" duration="3685" fileSize="113101832" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_high.mp4" expression="full" duration="3685" fileSize="1513618473" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/17bf/4578da1b-afd3-4a44-b07c-7e09c05b17bf/CPPConVoicuOptimallyShootingFurryBalls_mid.mp4" expression="full" duration="3685" fileSize="390547949" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “Building and Extending the Iterator Hierarchy in a Modern, Multicore World&quot; </title>
    <description><![CDATA[<div>Published on Oct 6, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>You've likely used the STL before, and you are probably comfortable using std::vector some algorithms, but you may not be quite so comfortable with STL iterators. What even are &quot;single pass writable iterators&quot;? What does that mean to me as a user of the STL?</div><div>In this talk, we will motivate the iterator concept hierarchy as it exists in the STL today by looking at useful algorithms and how they traverse their input and output ranges. We will take these concrete examples and slowly begin to abstract, building up the STL iterator concepts, step-by-step.</div><div>After presenting the iterator concepts that exist in the STL today, we will build up to two further iterator concepts by looking at useful algorithms and then generalizing from them. First, we will motivate contiguous iterators, which have been voted into the C&#43;&#43;17 working draft. Then, we will motivate a less-commonly known iterator concept, segmented iterators, and show how they can help us write parallel and cache-aware algorithms.</div><div>You should come away from this talk with an appreciation for generic programming, experience with the syntax in the Concepts Lite Technical Specification, and a better understanding of why iterators are fundamental to the algorithms you write every day.<br>— <br>Patrick Niedzielski<br>Ithaca, NY<br>Patrick is a Senior at Cornell University, pursuing a BA in Linguistics and Computer Science. In particular, he is interested in compiler technologies and building high-level, easy-to-use abstractions that maintain well-defined performance characteristics. With over ten years experience in C&#43;&#43; through open source, academic, and industry work, Patrick is enthusiastic about pushing the our understanding of C&#43;&#43; forward. To that end, Patrick teaches an informal C&#43;&#43; course that focuses on introducing students to idiomatic, modern C&#43;&#43; style and producing clean code. When not working at a computer, Patrick spends his time studying ancient languages and playing jazz harmonica.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:48f2ed61365c48c7b092a69b012d877a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Building-and-Extending-the-Iterator-Hierarchy-in-a-Modern-Multicore-World</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Building-and-Extending-the-Iterator-Hierarchy-in-a-Modern-Multicore-World</link>
    <itunes:summary>Published on Oct 6, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—You&#39;ve likely used the STL before, and you are probably comfortable using std::vector some algorithms, but you may not be quite so comfortable with STL iterators. What even are &amp;quot;single pass writable iterators&amp;quot;? What does that mean to me as a user of the STL?In this talk, we will motivate the iterator concept hierarchy as it exists in the STL today by looking at useful algorithms and how they traverse their input and output ranges. We will take these concrete examples and slowly begin to abstract, building up the STL iterator concepts, step-by-step.After presenting the iterator concepts that exist in the STL today, we will build up to two further iterator concepts by looking at useful algorithms and then generalizing from them. First, we will motivate contiguous iterators, which have been voted into the C&amp;#43;&amp;#43;17 working draft. Then, we will motivate a less-commonly known iterator concept, segmented iterators, and show how they can help us write parallel and cache-aware algorithms.You should come away from this talk with an appreciation for generic programming, experience with the syntax in the Concepts Lite Technical Specification, and a better understanding of why iterators are fundamental to the algorithms you write every day.— Patrick NiedzielskiIthaca, NYPatrick is a Senior at Cornell University, pursuing a BA in Linguistics and Computer Science. In particular, he is interested in compiler technologies and building high-level, easy-to-use abstractions that maintain well-defined performance characteristics. With over ten years experience in C&amp;#43;&amp;#43; through open source, academic, and industry work, Patrick is enthusiastic about pushing the our understanding of C&amp;#43;&amp;#43; forward. To that end, Patrick teaches an informal C&amp;#43;&amp;#43; course that focuses on introducing students to idio</itunes:summary>
    <itunes:duration>3579</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Building-and-Extending-the-Iterator-Hierarchy-in-a-Modern-Multicore-World</guid>
    <dc:creator>Patrick Niedzielski</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_high.mp4" length="1066015295" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/48f2ed61365c48c7b092a69b012d877a/CPPConBuildingandExtending.mp4" expression="full" duration="3579" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending.mp3" expression="full" duration="3579" fileSize="57270090" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending.mp4" expression="full" duration="3579" fileSize="120857328" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_high.mp4" expression="full" duration="3579" fileSize="1066015295" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fb64/af8d43d0-1042-41cc-a0dc-884678bffb64/CPPConBuildingandExtending_mid.mp4" expression="full" duration="3579" fileSize="339802428" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Cheinan Marks “I Just Wanted a Random Integer!&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>I just wanted to generate a random integer between 1 and 100 for my unit tests.</div><div>An hour later I was down the rabbit hole of the C&#43;&#43; ＜random＞ header wondering why it was so complicated, weren't rand() and modulo good enough and was ＜random＞ overkill, genius or both?</div><div>Several hours later I had watched STLs 2013 Going Native talk on ＜ random＞ (go watch it!), read some blogs and had even more questions: does the mt19937 generator go on the heap? Just how cheap are uniform distributions to construct? Were there even better generators out there and were they easier to use? Oh and what is entropy? How do you put it in a pool and how can it be exhausted?</div><div>The story took a few unexpected twists and turns, but in the end I got my random integers, and answers to almost all my questions which I will share. Whether ＜random＞ is genius or overkill though, you will have to decide for yourself. <br>— <br>Cheinan Marks<br>Spiral Genetics<br>As an engineer with a chemical engineering background, Cheinan is interested in practical code and wants to take the latest advances both in science and programming and use them in real life working code along with applying engineering principles to software development. Cheinan is a senior developer at Spiral Genetics, Inc. in Seattle.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b9137c086f5742328449a69b012d6a06">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Cheinan-Marks-I-Just-Wanted-a-Random-Integer</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Cheinan-Marks-I-Just-Wanted-a-Random-Integer</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—I just wanted to generate a random integer between 1 and 100 for my unit tests.An hour later I was down the rabbit hole of the C&amp;#43;&amp;#43; ＜random＞ header wondering why it was so complicated, weren&#39;t rand() and modulo good enough and was ＜random＞ overkill, genius or both?Several hours later I had watched STLs 2013 Going Native talk on ＜ random＞ (go watch it!), read some blogs and had even more questions: does the mt19937 generator go on the heap? Just how cheap are uniform distributions to construct? Were there even better generators out there and were they easier to use? Oh and what is entropy? How do you put it in a pool and how can it be exhausted?The story took a few unexpected twists and turns, but in the end I got my random integers, and answers to almost all my questions which I will share. Whether ＜random＞ is genius or overkill though, you will have to decide for yourself. — Cheinan MarksSpiral GeneticsAs an engineer with a chemical engineering background, Cheinan is interested in practical code and wants to take the latest advances both in science and programming and use them in real life working code along with applying engineering principles to software development. Cheinan is a senior developer at Spiral Genetics, Inc. in Seattle.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3236</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Cheinan-Marks-I-Just-Wanted-a-Random-Integer</guid>
    <dc:creator>Cheinan Marks</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_high.mp4" length="1005687120" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b9137c086f5742328449a69b012d6a06/CPPConMarksRandomInteger.mp4" expression="full" duration="3236" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger.mp3" expression="full" duration="3236" fileSize="51786570" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger.mp4" expression="full" duration="3236" fileSize="100937974" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_high.mp4" expression="full" duration="3236" fileSize="1005687120" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1895/887d267e-d054-452c-90d0-b4ba8b981895/CPPConMarksRandomInteger_mid.mp4" expression="full" duration="3236" fileSize="306897279" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: David Sankel “Building Software Capital: How to write the highest quality code and why&quot; </title>
    <description><![CDATA[<p>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This talk discusses the ins and outs of how to write software that is at such a high standard that it gets reused everywhere. It covers organization, design, infrastructure, testing, documentation, reviews, and general suggestions based on my experience in the industry.<br>— <br>David Sankel<br>Bloomberg<br>New York, New York<br>David Sankel is a professional software developer/architect based in the USA and an active member of the C&#43;&#43; Standardization Committee. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&#43;&#43;Now conferences and is especially well known for his advanced functional programming in C&#43;&#43; talks. David's interests include large-scale development, dependently typed languages, semantic domains, EDSLs, and functional reactive programming. David's current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for Bloomberg.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3d0a966d5734488a9c41a69b012d126d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Building-Software-Capital-How-to-write-the-highest-quality-code-and-why</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Building-Software-Capital-How-to-write-the-highest-quality-code-and-why</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This talk discusses the ins and outs of how to write software that is at such a high standard that it gets reused everywhere. It covers organization, design, infrastructure, testing, documentation, reviews, and general suggestions based on my experience in the industry.— David SankelBloombergNew York, New YorkDavid Sankel is a professional software developer/architect based in the USA and an active member of the C&amp;#43;&amp;#43; Standardization Committee. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&amp;#43;&amp;#43;Now conferences and is especially well known for his advanced functional programming in C&amp;#43;&amp;#43; talks. David&#39;s interests include large-scale development, dependently typed languages, semantic domains, EDSLs, and functional reactive programming. David&#39;s current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for Bloomberg.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3578</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Building-Software-Capital-How-to-write-the-highest-quality-code-and-why</guid>
    <dc:creator>David Sankel</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_high.mp4" length="1771438056" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/3d0a966d5734488a9c41a69b012d126d/CPPConSankelBuildingSoftwareCapital.mp4" expression="full" duration="3578" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital.mp3" expression="full" duration="3578" fileSize="57256650" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital.mp4" expression="full" duration="3578" fileSize="108313315" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_high.mp4" expression="full" duration="3578" fileSize="1771438056" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4479/8b0689d8-5e97-4591-901f-83c3800b4479/CPPConSankelBuildingSoftwareCapital_mid.mp4" expression="full" duration="3578" fileSize="412711955" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Klaus Iglberger “The Blaze High Performance Math Library&quot;</title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In this presentation we introduce the Blaze C&#43;&#43; math library, a hot contender for the linear algebra performance throne. Blaze is an open-source, high-performance library for dense and sparse arithmetic. It combines elegance and ease of use with HPC-grade performance, making it one of the most intuitive and at the same time fastest C&#43;&#43; math libraries available.</div><div>We demonstrate its basic linear algebra functionality by means of several BLAS level 1 to 3 operations and explain why Blaze outperforms even well established linear algebra libraries. Additionally, we present some advanced features that enable users to adapt Blaze to special circumstances: custom data structures, custom operations, and the customizable error reporting mechanism.</div><div>Homepage: https://bitbucket.org/blaze-lib/blaze<br>Benchmarks: https://bitbucket.org/blaze-lib/blaze...<br>— <br>Klaus Iglberger<br>CD-adapco<br>Senior Software Engineer<br>Nürnberg Area, Germany<br>Klaus Iglberger has finished his PhD in computer science in 2010. Back then, he contributed to several massively parallel simulation frameworks and was active researcher in the high performance computing community. From 2011 to 2012, he was the managing director of the central institute for scientific computing in Erlangen. Currently he is on the payroll at CD-adapco in Nuremberg, Germany, as a senior software engineer. Additionally, he is the initiator and lead designer of the Blaze C&#43;&#43; math library (https://bitbucket.org/blaze-lib/blaze).<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1f0d5b49d1364bea8b80a69b012cecfc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Klaus-Iglberger-The-Blaze-High-Performance-Math-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Klaus-Iglberger-The-Blaze-High-Performance-Math-Library</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In this presentation we introduce the Blaze C&amp;#43;&amp;#43; math library, a hot contender for the linear algebra performance throne. Blaze is an open-source, high-performance library for dense and sparse arithmetic. It combines elegance and ease of use with HPC-grade performance, making it one of the most intuitive and at the same time fastest C&amp;#43;&amp;#43; math libraries available.We demonstrate its basic linear algebra functionality by means of several BLAS level 1 to 3 operations and explain why Blaze outperforms even well established linear algebra libraries. Additionally, we present some advanced features that enable users to adapt Blaze to special circumstances: custom data structures, custom operations, and the customizable error reporting mechanism.Homepage: https://bitbucket.org/blaze-lib/blazeBenchmarks: https://bitbucket.org/blaze-lib/blaze...— Klaus IglbergerCD-adapcoSenior Software EngineerN&#252;rnberg Area, GermanyKlaus Iglberger has finished his PhD in computer science in 2010. Back then, he contributed to several massively parallel simulation frameworks and was active researcher in the high performance computing community. From 2011 to 2012, he was the managing director of the central institute for scientific computing in Erlangen. Currently he is on the payroll at CD-adapco in Nuremberg, Germany, as a senior software engineer. Additionally, he is the initiator and lead designer of the Blaze C&amp;#43;&amp;#43; math library (https://bitbucket.org/blaze-lib/blaze).—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3601</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Klaus-Iglberger-The-Blaze-High-Performance-Math-Library</guid>
    <dc:creator>Klaus Iglberger</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_high.mp4" length="1125253503" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1f0d5b49d1364bea8b80a69b012cecfc/CPPConIglbergerTheBlazeHighPerformance.mp4" expression="full" duration="3601" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance.mp3" expression="full" duration="3601" fileSize="57631818" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance.mp4" expression="full" duration="3601" fileSize="114267809" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_high.mp4" expression="full" duration="3601" fileSize="1125253503" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4d96/cf09c4e6-6110-46f1-83ef-67cbf53c4d96/CPPConIglbergerTheBlazeHighPerformance_mid.mp4" expression="full" duration="3601" fileSize="345416367" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Michael Caisse “Asynchronous IO with Boost.Asio&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Reactive systems are found everywhere. The temptation to implement them with legions of waiting threads can be strong; however, the result is nearly always disappointing. The Boost.Asio library provides a framework to handle asynchronous resources with specific classes directed toward networking, serial port I/O, timers and more. In this session we will introduce Asio and some best practices while implementing a simple TCP client and server.</div><div>Asio has been submitted to the C&#43;&#43; Standards Committee for inclusion and can be found in the Boost library collection or as a stand-alone version. Come and learn a better way to implement reactive systems with the Asynchronous I/O library. <br>— <br>Michael Caisse<br>Ciere, Inc.<br>Michael Caisse has been crafting code in C&#43;&#43; for 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn't fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:188d570fffeb40ad877ba69b012ccad1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Asynchronous-IO-with-BoostAsio</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Asynchronous-IO-with-BoostAsio</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Reactive systems are found everywhere. The temptation to implement them with legions of waiting threads can be strong; however, the result is nearly always disappointing. The Boost.Asio library provides a framework to handle asynchronous resources with specific classes directed toward networking, serial port I/O, timers and more. In this session we will introduce Asio and some best practices while implementing a simple TCP client and server.Asio has been submitted to the C&amp;#43;&amp;#43; Standards Committee for inclusion and can be found in the Boost library collection or as a stand-alone version. Come and learn a better way to implement reactive systems with the Asynchronous I/O library. — Michael CaisseCiere, Inc.Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn&#39;t fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3671</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Caisse-Asynchronous-IO-with-BoostAsio</guid>
    <dc:creator>Michael Caisse</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_high.mp4" length="2075688300" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/188d570fffeb40ad877ba69b012ccad1/CPPConCaisseAsynchronousIOwithBoostAsio.mp4" expression="full" duration="3671" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio.mp3" expression="full" duration="3671" fileSize="58746186" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio.mp4" expression="full" duration="3671" fileSize="111900338" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_high.mp4" expression="full" duration="3671" fileSize="2075688300" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e418/4b49c74c-eb2c-4161-bd24-79897ff4e418/CPPConCaisseAsynchronousIOwithBoostAsio_mid.mp4" expression="full" duration="3671" fileSize="450333740" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Fedor Pikus “The speed of concurrency (is lock-free faster?)&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This talk takes the &quot;ultimately practical&quot; approach to concurrent programming, with a focus on lock-free programs: after all, in reality such programs are almost always written in the hopes of getting better performance. We're going to measure performance of the individual concurrent primitives and their effect on the overall performance of the whole program.</div><div>The goal of the talk is two-fold. On one hand, I will show a set of tools and practices that can be used to get quantitative measurements of the performance of different implementations under various load conditions. Mastering these techniques will allow the attendees to choose their concurrent algorithms and implementations based on solid data instead of guesswork or &quot;common knowledge&quot; (which is often wrong or outdated). On the other hand, even with the focus on real-life applications we can learn a few things about the fundamental nature of concurrent programs. This understanding comes especially useful when dealing with the &quot;common knowledge&quot; and &quot;simple logic&quot;. For example, it's &quot;common knowledge&quot; that lock-free programs are faster than lock-based (not always). It's also a &quot;simple logic&quot; that the hardware must protect shared memory access in a multi-core system, so ultimately locking is always present (sometimes true, sometimes true but misleading, and sometimes false). It is both &quot;common knowledge&quot; and &quot;simple logic&quot; that a wait-free program does not wait (but if your definition of wait is &quot;will I have to wait for the results after I finish my coffee?&quot; then it definitely does).</div><div>We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying assumptions used in this talk do not apply to your problem, the key point to take away is how to find such assumptions and take advantage of them in your specific application: after all, in reality it's almost always about performance.<br>— <br>Fedor Pikus<br>Mentor Graphics<br>Chief Engineering Scientist<br>Portland, Oregon Area<br>Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a38190dfbe3b431a9bafa69b012ca65f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Fedor-Pikus-The-speed-of-concurrency-is-lock-free-faster</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Fedor-Pikus-The-speed-of-concurrency-is-lock-free-faster</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This talk takes the &amp;quot;ultimately practical&amp;quot; approach to concurrent programming, with a focus on lock-free programs: after all, in reality such programs are almost always written in the hopes of getting better performance. We&#39;re going to measure performance of the individual concurrent primitives and their effect on the overall performance of the whole program.The goal of the talk is two-fold. On one hand, I will show a set of tools and practices that can be used to get quantitative measurements of the performance of different implementations under various load conditions. Mastering these techniques will allow the attendees to choose their concurrent algorithms and implementations based on solid data instead of guesswork or &amp;quot;common knowledge&amp;quot; (which is often wrong or outdated). On the other hand, even with the focus on real-life applications we can learn a few things about the fundamental nature of concurrent programs. This understanding comes especially useful when dealing with the &amp;quot;common knowledge&amp;quot; and &amp;quot;simple logic&amp;quot;. For example, it&#39;s &amp;quot;common knowledge&amp;quot; that lock-free programs are faster than lock-based (not always). It&#39;s also a &amp;quot;simple logic&amp;quot; that the hardware must protect shared memory access in a multi-core system, so ultimately locking is always present (sometimes true, sometimes true but misleading, and sometimes false). It is both &amp;quot;common knowledge&amp;quot; and &amp;quot;simple logic&amp;quot; that a wait-free program does not wait (but if your definition of wait is &amp;quot;will I have to wait for the results after I finish my coffee?&amp;quot; then it definitely does).We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying a</itunes:summary>
    <itunes:duration>4323</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Fedor-Pikus-The-speed-of-concurrency-is-lock-free-faster</guid>
    <dc:creator>Fedor Pikus</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_high.mp4" length="1818558979" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a38190dfbe3b431a9bafa69b012ca65f/CPPConPikusTheSpeedOfConcurrency.mp4" expression="full" duration="4323" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency.mp3" expression="full" duration="4323" fileSize="69172938" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency.mp4" expression="full" duration="4323" fileSize="106158653" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_high.mp4" expression="full" duration="4323" fileSize="1818558979" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2f66/68cd74d4-f6d0-48b7-86d5-1708b6aa2f66/CPPConPikusTheSpeedOfConcurrency_mid.mp4" expression="full" duration="4323" fileSize="397924817" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Stephan T. Lavavej “tuple＜＞: What&#39;s New and How it Works&quot; </title>
    <description><![CDATA[<p>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>std::tuple＜＞has been gaining new abilities, like get-by-type in C&#43;&#43;14 and conditionally-explicit constructors in C&#43;&#43;17. This talk will begin by briefly summarizing what you can do with tuples in C&#43;&#43;11 and C&#43;&#43;14. Next, we'll explore what's new in C&#43;&#43;17, and how it can improve your code. We'll also delve into how this magic is implemented, with new metaprogramming tools like std::conjunction＜＞. Finally, we'll look at active issues in tuple's design, and what the Library Working Group is doing about them.<br>— <br>Stephan T. Lavavej<br>Principal Software Engineer, Microsoft<br>Stephan T. Lavavej is a Principal Software Engineer at Microsoft, maintaining Visual C&#43;&#43;'s implementation of the C&#43;&#43; Standard Library since 2007. He also designed a couple of C&#43;&#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn't own any).<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a5b4d5b02a6343f49829a69b012c8415">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Stephan-T-Lavavej-tuple-Whats-New-and-How-it-Works</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Stephan-T-Lavavej-tuple-Whats-New-and-How-it-Works</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—std::tuple＜＞has been gaining new abilities, like get-by-type in C&amp;#43;&amp;#43;14 and conditionally-explicit constructors in C&amp;#43;&amp;#43;17. This talk will begin by briefly summarizing what you can do with tuples in C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14. Next, we&#39;ll explore what&#39;s new in C&amp;#43;&amp;#43;17, and how it can improve your code. We&#39;ll also delve into how this magic is implemented, with new metaprogramming tools like std::conjunction＜＞. Finally, we&#39;ll look at active issues in tuple&#39;s design, and what the Library Working Group is doing about them.— Stephan T. LavavejPrincipal Software Engineer, MicrosoftStephan T. Lavavej is a Principal Software Engineer at Microsoft, maintaining Visual C&amp;#43;&amp;#43;&#39;s implementation of the C&amp;#43;&amp;#43; Standard Library since 2007. He also designed a couple of C&amp;#43;&amp;#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn&#39;t own any).—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3641</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Stephan-T-Lavavej-tuple-Whats-New-and-How-it-Works</guid>
    <dc:creator>Stephan T. Lavavej</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_high.mp4" length="975482292" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a5b4d5b02a6343f49829a69b012c8415/CPPConLavavejTuple.mp4" expression="full" duration="3641" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple.mp3" expression="full" duration="3641" fileSize="58261962" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple.mp4" expression="full" duration="3641" fileSize="105463285" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_high.mp4" expression="full" duration="3641" fileSize="975482292" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bafb/89984fde-6fe6-4786-af1e-8601d6b1bafb/CPPConLavavejTuple_mid.mp4" expression="full" duration="3641" fileSize="291241960" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Roland Bock &quot;How To Test static_assert&quot;</title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>static_assert gives us the ability to assert conditions at compile time and provide custom error messages in case the conditions are not met. Cool! But how can you be sure that your precious static_asserts actually fire when you need them? There is only one way to know for sure:</div><div>You need to test your static_assert!</div><div>That is easier said than done, though, as static_assert produces a hard, unrecoverable compile-time error. For instance, you cannot test one static_assert with another.</div><div>This talk will demonstrate several options for testing static_assert, ranging from the build system, over the compiler features to template meta programming. It will include real-life examples from sqlpp11. <br>— <br>Roland Bock<br>PPRO Financial Ltd<br>Principal Software Engineer<br>Munich Area, Germany<br>From my days at the university, I hold a PHD in physics (although that was in the previous century and seems like a different life by now). Ever since then I have been developing software and/or managing engineering teams. In 2008, I started to learn C&#43;&#43; because I could not believe that it was as difficult as some people claimed. Turns out they were totally wrong and totally right at the same time.</div><div>Today, I am still learning and I hope to continue to do so for a very long time!</div><div>I am the author of the libraries sqlpp11 and kiss-templates.</div><div>Apart from C&#43;&#43; itself, I'd be particularly interested in talking about strategies for hiring C&#43;&#43; engineers.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cb65586969344f61a0b9a69b012c3680">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Roland-Bock-How-To-Test-staticassert</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Roland-Bock-How-To-Test-staticassert</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—static_assert gives us the ability to assert conditions at compile time and provide custom error messages in case the conditions are not met. Cool! But how can you be sure that your precious static_asserts actually fire when you need them? There is only one way to know for sure:You need to test your static_assert!That is easier said than done, though, as static_assert produces a hard, unrecoverable compile-time error. For instance, you cannot test one static_assert with another.This talk will demonstrate several options for testing static_assert, ranging from the build system, over the compiler features to template meta programming. It will include real-life examples from sqlpp11. — Roland BockPPRO Financial LtdPrincipal Software EngineerMunich Area, GermanyFrom my days at the university, I hold a PHD in physics (although that was in the previous century and seems like a different life by now). Ever since then I have been developing software and/or managing engineering teams. In 2008, I started to learn C&amp;#43;&amp;#43; because I could not believe that it was as difficult as some people claimed. Turns out they were totally wrong and totally right at the same time.Today, I am still learning and I hope to continue to do so for a very long time!I am the author of the libraries sqlpp11 and kiss-templates.Apart from C&amp;#43;&amp;#43; itself, I&#39;d be particularly interested in talking about strategies for hiring C&amp;#43;&amp;#43; engineers.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3472</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Roland-Bock-How-To-Test-staticassert</guid>
    <dc:creator>Roland Bock</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_high.mp4" length="1299213722" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/cb65586969344f61a0b9a69b012c3680/CPPConBockHowToTeststaticassert.mp4" expression="full" duration="3472" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert.mp3" expression="full" duration="3472" fileSize="55555146" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert.mp4" expression="full" duration="3472" fileSize="79274198" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_high.mp4" expression="full" duration="3472" fileSize="1299213722" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ce4/61800e20-fcd6-44f3-bc96-08d6fca86ce4/CPPConBockHowToTeststaticassert_mid.mp4" expression="full" duration="3472" fileSize="290696877" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Jason Jurecka “Game engine using STD C++ 11&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This session is going to give an account of the process and features used to create a game engine focusing on using std C&#43;&#43;11 features and concurrency. We will go through the architecture of the engine design and the specifics of the C&#43;&#43;11 features being used. We will also go through optimization choices and design mentalities that are being used to keep the code base simple, but powerful in game usage. The engine architecture we will be going through will be using parallelism as a way to distribute work and get performance out of the available hardware that can scale into the future.</div><div>While completing a full engine with cutting edge graphics techniques and a game to push the engine to its limits will take a while this session will go over the current state of the project and lessons learned. The ultimate goal of the project is to show the validity of using C&#43;&#43;11 (and beyond) features in game engines to simplify code and improve stability while maintaining the performance and memory usage games demand.<br>— <br>Jason Jurecka<br>Blizzard Entertainment<br>Senior Software Engineer<br>Jason Jurecka is a 12&#43; year engineering veteran of the game industry that has worked on titles in the full range of platforms from PC to next-gen consoles. He has done a wide range of tasks that include engine architecture, asset management, asset pipelines, gameplay features, task automation, tools/plugins/scripts for content creators, automated testing, game/toolchain optimizations, and many other generalist engineering tasks. Jason has contributed to titles such as Rise of Nations: Rise of Legends, Catan, Red Dead Redemption, Max Payne 3, Grand Theft Auto 5, Battlefield 4, Battlefield: Hardline, Call of Duty Black Ops 3, and Amazon's Lumberyard Game Engine/Editor.</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:087a80f906c1455ca0b9a69b012c111e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Jurecka-Game-engine-using-STD-C-11</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Jurecka-Game-engine-using-STD-C-11</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This session is going to give an account of the process and features used to create a game engine focusing on using std C&amp;#43;&amp;#43;11 features and concurrency. We will go through the architecture of the engine design and the specifics of the C&amp;#43;&amp;#43;11 features being used. We will also go through optimization choices and design mentalities that are being used to keep the code base simple, but powerful in game usage. The engine architecture we will be going through will be using parallelism as a way to distribute work and get performance out of the available hardware that can scale into the future.While completing a full engine with cutting edge graphics techniques and a game to push the engine to its limits will take a while this session will go over the current state of the project and lessons learned. The ultimate goal of the project is to show the validity of using C&amp;#43;&amp;#43;11 (and beyond) features in game engines to simplify code and improve stability while maintaining the performance and memory usage games demand.— Jason JureckaBlizzard EntertainmentSenior Software EngineerJason Jurecka is a 12&amp;#43; year engineering veteran of the game industry that has worked on titles in the full range of platforms from PC to next-gen consoles. He has done a wide range of tasks that include engine architecture, asset management, asset pipelines, gameplay features, task automation, tools/plugins/scripts for content creators, automated testing, game/toolchain optimizations, and many other generalist engineering tasks. Jason has contributed to titles such as Rise of Nations: Rise of Legends, Catan, Red Dead Redemption, Max Payne 3, Grand Theft Auto 5, Battlefield 4, Battlefield: Hardline, Call of Duty Black Ops 3, and Amazon&#39;s Lumberyard Game Engine/Editor.</itunes:summary>
    <itunes:duration>3660</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Jurecka-Game-engine-using-STD-C-11</guid>
    <dc:creator>Jason Jurecka</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_high.mp4" length="1236018097" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/087a80f906c1455ca0b9a69b012c111e/CPPConJureckaGameEngine.mp4" expression="full" duration="3660" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine.mp3" expression="full" duration="3660" fileSize="58571466" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine.mp4" expression="full" duration="3660" fileSize="115518966" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_high.mp4" expression="full" duration="3660" fileSize="1236018097" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/95da/77e3d144-48a5-4b32-8de1-9691a67395da/CPPConJureckaGameEngine_mid.mp4" expression="full" duration="3660" fileSize="359850830" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Howard Hinnant “Welcome To The Time Zone&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This talk builds on the date/time library presented last year and shows how one can handle conversions among multiple time zones in a type-safe manner.</div><div>The entire library is very much chrono-centric, and so inherits desirable features from chrono such as type safety and arbitrary precision.</div><div>This time zone libraries have divided themselves by structure and concepts such as absolute time and civil time. While these concepts are useful, and found in this library, this library cuts in other dimensions.</div><div>This library draws a clear distinction between calendars and times. Thus this library has been designed from the ground up to not only work well with the Gregorian calendar, but with other calendars as well. Even with calendars written by you. It accomplishes this by using the chrono library as its chief communication channel with the calendar.</div><div>This talk is a sequel to my Cppcon 2015 talk a date/time library: https://www.youtube.com/watch?v=tzyGj...</div><div>If you can, see my talk earlier this week about chrono, and my talk about an example calendar from last year: https://www.youtube.com/watch?v=tzyGj.... This talk builds upon these foundational tools.<br>— <br>Howard Hinnant<br>Senior Software Engineer, Ripple<br>Lead author of several C&#43;&#43;11 features including: move semantics, unique_ptr and . | | Lead author on three open source projects: A std::lib implementation: http://libcxx.llvm.org | An Itanium ABI implementation: http://libcxxabi.llvm.org | A date/time/timezone library: https://github.com/HowardHinnant/date<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c9a7e760ab6047bf9515a69b012bcb61">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-Welcome-To-The-Time-Zone</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-Welcome-To-The-Time-Zone</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This talk builds on the date/time library presented last year and shows how one can handle conversions among multiple time zones in a type-safe manner.The entire library is very much chrono-centric, and so inherits desirable features from chrono such as type safety and arbitrary precision.This time zone libraries have divided themselves by structure and concepts such as absolute time and civil time. While these concepts are useful, and found in this library, this library cuts in other dimensions.This library draws a clear distinction between calendars and times. Thus this library has been designed from the ground up to not only work well with the Gregorian calendar, but with other calendars as well. Even with calendars written by you. It accomplishes this by using the chrono library as its chief communication channel with the calendar.This talk is a sequel to my Cppcon 2015 talk a date/time library: https://www.youtube.com/watch?v=tzyGj...If you can, see my talk earlier this week about chrono, and my talk about an example calendar from last year: https://www.youtube.com/watch?v=tzyGj.... This talk builds upon these foundational tools.— Howard HinnantSenior Software Engineer, RippleLead author of several C&amp;#43;&amp;#43;11 features including: move semantics, unique_ptr and . | | Lead author on three open source projects: A std::lib implementation: http://libcxx.llvm.org | An Itanium ABI implementation: http://libcxxabi.llvm.org | A date/time/timezone library: https://github.com/HowardHinnant/date—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3869</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-Welcome-To-The-Time-Zone</guid>
    <dc:creator>Howard Hinnant</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_high.mp4" length="1772038260" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/c9a7e760ab6047bf9515a69b012bcb61/CPPConHinnantWelcomeToTheTimeZone.mp4" expression="full" duration="3869" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone.mp3" expression="full" duration="3869" fileSize="61919946" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone.mp4" expression="full" duration="3869" fileSize="124926860" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_high.mp4" expression="full" duration="3869" fileSize="1772038260" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ec53/676e069c-952b-48d2-b43a-df3d7e21ec53/CPPConHinnantWelcomeToTheTimeZone_mid.mp4" expression="full" duration="3869" fileSize="476535918" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Sergey Zubkov “Examining applications that do not terminate on std::bad_alloc&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>System memory holds a special place in the hierarchy of program resources; its availability is the implied precondition for many innocuous lines of code, from std::string::substr() to passing std::function＜＞ by value. The ability to always create another object is ingrained in the OOP mindset so much that it is often said that immediate termination is the cleanest way to handle memory allocation failures in most situations. Nevertheless, C&#43;&#43;, when consistently applying RAII, makes it possible to treat memory allocation exactly as any other resource acquisition.</div><div>To what degree do actual applications take advantage of that possibility and what responses to allocation failures are there in the wild? This presentation will examine over 300 open source projects that incorporate explicit handling for std::bad_alloc, examine the causes (it's not always &quot;out of memory&quot;), response strategies (it's more than just rollback), and related practical considerations.<br>— <br>Sergey Zubkov<br>Morgan Stanley<br>Sergey is a former biochemistry researcher and OS developer, who now works in finance and spends his free time editing cppreference.com<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e99b2261702e45aa9f69a69b012baf15">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Sergey-Zubkov-Examining-applications-that-do-not-terminate-on-stdbadalloc</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Sergey-Zubkov-Examining-applications-that-do-not-terminate-on-stdbadalloc</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—System memory holds a special place in the hierarchy of program resources; its availability is the implied precondition for many innocuous lines of code, from std::string::substr() to passing std::function＜＞ by value. The ability to always create another object is ingrained in the OOP mindset so much that it is often said that immediate termination is the cleanest way to handle memory allocation failures in most situations. Nevertheless, C&amp;#43;&amp;#43;, when consistently applying RAII, makes it possible to treat memory allocation exactly as any other resource acquisition.To what degree do actual applications take advantage of that possibility and what responses to allocation failures are there in the wild? This presentation will examine over 300 open source projects that incorporate explicit handling for std::bad_alloc, examine the causes (it&#39;s not always &amp;quot;out of memory&amp;quot;), response strategies (it&#39;s more than just rollback), and related practical considerations.— Sergey ZubkovMorgan StanleySergey is a former biochemistry researcher and OS developer, who now works in finance and spends his free time editing cppreference.com—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1705</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Sergey-Zubkov-Examining-applications-that-do-not-terminate-on-stdbadalloc</guid>
    <dc:creator>Sergey Zubkov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_high.mp4" length="772805174" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/e99b2261702e45aa9f69a69b012baf15/CPPConZubkovExaminingApplications.mp4" expression="full" duration="1705" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications.mp3" expression="full" duration="1705" fileSize="27292362" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications.mp4" expression="full" duration="1705" fileSize="53805097" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_high.mp4" expression="full" duration="1705" fileSize="772805174" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e98c/2eef3a3f-750d-406f-bcda-b3bafb05e98c/CPPConZubkovExaminingApplications_mid.mp4" expression="full" duration="1705" fileSize="211425986" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “Introduction to C++ python extensions and embedding Python in C++ Apps&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>C and C&#43;&#43; languages are the best for high performance, and probably have the largest quota among programming languages, implementing the backbone of all of the existing computing infrastructure, including those other programming languages. On the other hand, python usage is also very popular and growing, with its amazing simplicity, and it is being adopted as the generic language for learning and many other tasks ranging from BigData and systems to web sites. Python is also being widely used in development and systems automation &quot;devops&quot;, being the language of choice for many scripting tasks (build systems as SCons are written in python) or as glue between subsystems.</div><div>This talk will introduce how both C&#43;&#43; and Python languages can work together. As many of the methods to write python extensions typically use a raw C API, we'll focus on how to use C&#43;&#43; in such extensions, and the C&#43;&#43; code itself.</div><div>First, I'll briefly present the canonical python C API, and how different aspects of C&#43;&#43; (as Exceptions) have to be handled. Then, I will describe and compare a couple of pure C&#43;&#43; ways to build extensions: the reference Boost.Python and the modern, but very active and popular successor, Pybind11.</div><div>Finally, I will conclude explaining how to embed a python interpreter in a C&#43;&#43; application. This allows C&#43;&#43; programs to introduce a powerful and known language to let the users define extensions or configuration of our C&#43;&#43; application without requiring them to build anything.</div><div>All presented examples will be complete and working, with build scripts included, in a public repository.<br>— <br>Diego Rodriguez-Losada<br>SW Engineer, Freelance<br>Diego's passions are robotics and SW development. He has developed many years in C and C&#43;&#43; in the Industrial, Robotics and AI fields. He was also a University (tenure track) professor till 2012, when he quit academia to try to build a C/C&#43;&#43; dependency manager, co-founded startup biicode, since then mostly developing in Python. Now he is working as freelance and having fun with conan.io.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:eb32660e215642e9ab40a69b012b5e92">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Introduction-to-C-python-extensions-and-embedding-Python-in-C-Apps</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Introduction-to-C-python-extensions-and-embedding-Python-in-C-Apps</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—C and C&amp;#43;&amp;#43; languages are the best for high performance, and probably have the largest quota among programming languages, implementing the backbone of all of the existing computing infrastructure, including those other programming languages. On the other hand, python usage is also very popular and growing, with its amazing simplicity, and it is being adopted as the generic language for learning and many other tasks ranging from BigData and systems to web sites. Python is also being widely used in development and systems automation &amp;quot;devops&amp;quot;, being the language of choice for many scripting tasks (build systems as SCons are written in python) or as glue between subsystems.This talk will introduce how both C&amp;#43;&amp;#43; and Python languages can work together. As many of the methods to write python extensions typically use a raw C API, we&#39;ll focus on how to use C&amp;#43;&amp;#43; in such extensions, and the C&amp;#43;&amp;#43; code itself.First, I&#39;ll briefly present the canonical python C API, and how different aspects of C&amp;#43;&amp;#43; (as Exceptions) have to be handled. Then, I will describe and compare a couple of pure C&amp;#43;&amp;#43; ways to build extensions: the reference Boost.Python and the modern, but very active and popular successor, Pybind11.Finally, I will conclude explaining how to embed a python interpreter in a C&amp;#43;&amp;#43; application. This allows C&amp;#43;&amp;#43; programs to introduce a powerful and known language to let the users define extensions or configuration of our C&amp;#43;&amp;#43; application without requiring them to build anything.All presented examples will be complete and working, with build scripts included, in a public repository.— Diego Rodriguez-LosadaSW Engineer, FreelanceDiego&#39;s passions are robotics and SW development. He has developed many years in C and C&amp;#43;&amp;#43; in the Industrial, Robot</itunes:summary>
    <itunes:duration>2142</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Introduction-to-C-python-extensions-and-embedding-Python-in-C-Apps</guid>
    <dc:creator>Diego Rodriguez-Losada</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_high.mp4" length="1496730354" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/eb32660e215642e9ab40a69b012b5e92/CPPConIntroductionToCppPython.mp4" expression="full" duration="2142" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython.mp3" expression="full" duration="2142" fileSize="34276170" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython.mp4" expression="full" duration="2142" fileSize="61747400" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_high.mp4" expression="full" duration="2142" fileSize="1496730354" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0f7/9e9a3f4a-db1c-4724-b434-51b4f09ed0f7/CPPConIntroductionToCppPython_mid.mp4" expression="full" duration="2142" fileSize="422626672" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Nicholas Ormrod “The strange details of std::string at Facebook&quot; </title>
    <description><![CDATA[<p>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Standard strings are slowing you down. Strings are everywhere. Changing the performance of std::string has a measurable impact on the speed of real-world C&#43;&#43; programs. But how can you make strings better? In this talk, we'll explore how Facebook optimizes strings, especially with our open-source std::string replacement, fbstring. We'll dive into implementation tradeoffs, especially the storage of data in the struct; examine which standard rules can and cannot be flouted, such as copy-on-write semantics; and share some of the things we've learned along the way, like how hard it is to abolish the null-terminator. War stories will be provided.<br>— <br>Nicholas Ormrod<br>Software Engineer, Facebook<br>Nicholas is a developer efficiency engineer at Facebook. If he talks too much, disable him with a well-placed nerd snipe.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1e45332f96214a5e92dda69b012b41a6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicholas-Ormrod-The-strange-details-of-stdstring-at-Facebook</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicholas-Ormrod-The-strange-details-of-stdstring-at-Facebook</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Standard strings are slowing you down. Strings are everywhere. Changing the performance of std::string has a measurable impact on the speed of real-world C&amp;#43;&amp;#43; programs. But how can you make strings better? In this talk, we&#39;ll explore how Facebook optimizes strings, especially with our open-source std::string replacement, fbstring. We&#39;ll dive into implementation tradeoffs, especially the storage of data in the struct; examine which standard rules can and cannot be flouted, such as copy-on-write semantics; and share some of the things we&#39;ve learned along the way, like how hard it is to abolish the null-terminator. War stories will be provided.— Nicholas OrmrodSoftware Engineer, FacebookNicholas is a developer efficiency engineer at Facebook. If he talks too much, disable him with a well-placed nerd snipe.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>1878</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicholas-Ormrod-The-strange-details-of-stdstring-at-Facebook</guid>
    <dc:creator>Nicholas Ormrod</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_high.mp4" length="607236834" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1e45332f96214a5e92dda69b012b41a6/CPPConOrmrodTheStrangeDetailsOfSTD.mp4" expression="full" duration="1878" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD.mp3" expression="full" duration="1878" fileSize="30052938" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD.mp4" expression="full" duration="1878" fileSize="51170695" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_high.mp4" expression="full" duration="1878" fileSize="607236834" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4dc5/825024ea-4cbd-44d2-9b7a-fde3d7dc4dc5/CPPConOrmrodTheStrangeDetailsOfSTD_mid.mp4" expression="full" duration="1878" fileSize="160759814" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Diego Rodriguez-Losada “Conan, a C and C++ package manager for developers&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Conan is a FOSS (MIT license) and portable C and C&#43;&#43; package manager for developers:</div><div>Decentralized, git-like, the server is also released OSS, so it can be hosted in-house, and use conan totally behind the firewall, or just for your private packages. Using local caches, allows full offline usage, also for creating and testing packages.</div><div>Handles both binary packages and building them from source. Packages defined with simple yet powerful python recipes. Build system agnostic, so any build system can be wrapped while creating packages. Generators also allow to consume packages directly from many environments: CMake, Visual Studio, XCode, etc.</div><div>Growing and Involved community, contributing in Github repositories with code and feedback, and actively using conan.</div><div>This talk will give a brief technical introduction to conan, showing first how to consume existing packages, defining dependencies, using generators for different build systems (e.g. cmake), using package options (e.g. shared/static linkage) and settings (compiler, version, architecture, libstdc&#43;&#43;/libc&#43;&#43;/libstdc&#43;&#43;11, build type, etc) to install or build the right packages. Also, different handling of paths for shared libraries in different OS will be summarized, and how conan approaches them.</div><div>Then, how to create packages will be introduced by example. How to retrieve source code from external sources (github, sourceforge, or any other origin), or integrating the recipe in the same source project, how to build the packages from sources, considering the different inputs (as compiler, architecture, etc. settings and options), how to package artifacts and how to define package information. A short discussion about how upstream dependencies affect your own package depending on linkage, visibility, versions, etc, will be done.<br>— <br>Diego Rodriguez-Losada<br>SW Engineer, Freelance<br>Diego's passions are robotics and SW development. He has developed many years in C and C&#43;&#43; in the Industrial, Robotics and AI fields. He was also a University (tenure track) professor till 2012, when he quit academia to try to build a C/C&#43;&#43; dependency manager, co-founded startup biicode, since then mostly developing in Python. Now he is working as freelance and having fun with conan.io.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:09973b6b17ee4bc98f1ca69b012b27d6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Diego-Rodriguez-Losada-Conan-a-C-and-C-package-manager-for-developers</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Diego-Rodriguez-Losada-Conan-a-C-and-C-package-manager-for-developers</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Conan is a FOSS (MIT license) and portable C and C&amp;#43;&amp;#43; package manager for developers:Decentralized, git-like, the server is also released OSS, so it can be hosted in-house, and use conan totally behind the firewall, or just for your private packages. Using local caches, allows full offline usage, also for creating and testing packages.Handles both binary packages and building them from source. Packages defined with simple yet powerful python recipes. Build system agnostic, so any build system can be wrapped while creating packages. Generators also allow to consume packages directly from many environments: CMake, Visual Studio, XCode, etc.Growing and Involved community, contributing in Github repositories with code and feedback, and actively using conan.This talk will give a brief technical introduction to conan, showing first how to consume existing packages, defining dependencies, using generators for different build systems (e.g. cmake), using package options (e.g. shared/static linkage) and settings (compiler, version, architecture, libstdc&amp;#43;&amp;#43;/libc&amp;#43;&amp;#43;/libstdc&amp;#43;&amp;#43;11, build type, etc) to install or build the right packages. Also, different handling of paths for shared libraries in different OS will be summarized, and how conan approaches them.Then, how to create packages will be introduced by example. How to retrieve source code from external sources (github, sourceforge, or any other origin), or integrating the recipe in the same source project, how to build the packages from sources, considering the different inputs (as compiler, architecture, etc. settings and options), how to package artifacts and how to define package information. A short discussion about how upstream dependencies affect your own package depending on linkage, visibility, versions, etc, will be done.— Die</itunes:summary>
    <itunes:duration>1663</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Diego-Rodriguez-Losada-Conan-a-C-and-C-package-manager-for-developers</guid>
    <dc:creator>Diego Rodriguez-Losada</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_high.mp4" length="1086943045" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/09973b6b17ee4bc98f1ca69b012b27d6/CPPConRodriguezLosadaConan.mp4" expression="full" duration="1663" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan.mp3" expression="full" duration="1663" fileSize="26613450" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan.mp4" expression="full" duration="1663" fileSize="49026561" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_high.mp4" expression="full" duration="1663" fileSize="1086943045" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e588/597d558a-0008-4dfd-9dd0-8aeb083fe588/CPPConRodriguezLosadaConan_mid.mp4" expression="full" duration="1663" fileSize="275076850" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “Bringing Clang and C++ to GPUs: An Open-Source, CUDA-Compatible GPU C++ Compiler&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>GPU computing has gone mainstream. It is a dominant part of the performance landscape, providing the initial 10x performance lift to a wide variety of applications. However, programing for GPUs can be extremely challenging. C&#43;&#43; is rarely available in an unmodified form, and there are few portable and open source approaches available. One of the most popular platforms, CUDA, has no production quality open source implementation. As a consequence, its C&#43;&#43; support has lagged behind and it has been a less appealing area for researchers and others that weren't comfortable relying on NVIDIA's tooling.</div><div>However, today things are different. Clang is now a fully functional open-source GPU compiler. It provides a CUDA-compatible programming model and can compile most of the awesome CUDA libraries out there ranging from Thrust (the CUDA-enabled parallel algorithms library that gave rise to the new parallelism technical specification) to Eigen and TensorFlow.</div><div>In this talk we will give an overview of how LLVM and Clang support targeting C&#43;&#43; to GPUs, how they work to be compatible with existing CUDA code, and how you can build your code today to run on GPUs with this open source compiler.<br>— <br>Justin Lebar<br>Software Engineer, Google<br>I lead the GPU compilers team at Google. (We work on CUDA/GPU support in Clang and LLVM.)<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1f40df6abbd148b4b4d1a69b012b045d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bringing-Clang-and-C-to-GPUs-An-Open-Source-CUDA-Compatible-GPU-C-Compiler</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bringing-Clang-and-C-to-GPUs-An-Open-Source-CUDA-Compatible-GPU-C-Compiler</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—GPU computing has gone mainstream. It is a dominant part of the performance landscape, providing the initial 10x performance lift to a wide variety of applications. However, programing for GPUs can be extremely challenging. C&amp;#43;&amp;#43; is rarely available in an unmodified form, and there are few portable and open source approaches available. One of the most popular platforms, CUDA, has no production quality open source implementation. As a consequence, its C&amp;#43;&amp;#43; support has lagged behind and it has been a less appealing area for researchers and others that weren&#39;t comfortable relying on NVIDIA&#39;s tooling.However, today things are different. Clang is now a fully functional open-source GPU compiler. It provides a CUDA-compatible programming model and can compile most of the awesome CUDA libraries out there ranging from Thrust (the CUDA-enabled parallel algorithms library that gave rise to the new parallelism technical specification) to Eigen and TensorFlow.In this talk we will give an overview of how LLVM and Clang support targeting C&amp;#43;&amp;#43; to GPUs, how they work to be compatible with existing CUDA code, and how you can build your code today to run on GPUs with this open source compiler.— Justin LebarSoftware Engineer, GoogleI lead the GPU compilers team at Google. (We work on CUDA/GPU support in Clang and LLVM.)—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3573</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bringing-Clang-and-C-to-GPUs-An-Open-Source-CUDA-Compatible-GPU-C-Compiler</guid>
    <dc:creator>Justin Lebar</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_high.mp4" length="2198867706" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1f40df6abbd148b4b4d1a69b012b045d/CPPConLebarBringingClang.mp4" expression="full" duration="3573" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang.mp3" expression="full" duration="3573" fileSize="57178698" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang.mp4" expression="full" duration="3573" fileSize="143729154" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_high.mp4" expression="full" duration="3573" fileSize="2198867706" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d2a3/db1e1451-86e7-4619-bf45-ccf1da30d2a3/CPPConLebarBringingClang_mid.mp4" expression="full" duration="3573" fileSize="600426669" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Robert Irving &amp; Jason Turner “What We&#39;ve Learned From the C++ Community&quot; </title>
    <description><![CDATA[<div>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>For over a year and a half Rob and Jason have been engaging with the speakers, library authors, bloggers and luminaries of the C&#43;&#43; community for their podcast, CppCast. In this talk they'll share the most interesting tools, insights and lessons they have learned from interviewing and interacting with the C&#43;&#43; community<br>— <br>Robert Irving<br>Senior Software Engineer, PAR Government Systems Corporation</div><div>Jason Turner<br>Developer, Trainer, Speaker<br>Host of C&#43;&#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&#43;&#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. | | I'm available for contracting and onsite training.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0dd02c7c615b4376a797a69b012ae13c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Irving--Jason-Turner-What-Weve-Learned-From-the-C-Community</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Irving--Jason-Turner-What-Weve-Learned-From-the-C-Community</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—For over a year and a half Rob and Jason have been engaging with the speakers, library authors, bloggers and luminaries of the C&amp;#43;&amp;#43; community for their podcast, CppCast. In this talk they&#39;ll share the most interesting tools, insights and lessons they have learned from interviewing and interacting with the C&amp;#43;&amp;#43; community— Robert IrvingSenior Software Engineer, PAR Government Systems CorporationJason TurnerDeveloper, Trainer, SpeakerHost of C&amp;#43;&amp;#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&amp;#43;&amp;#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. | | I&#39;m available for contracting and onsite training.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1407</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Robert-Irving--Jason-Turner-What-Weve-Learned-From-the-C-Community</guid>
    <dc:creator>Robert Irving</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_high.mp4" length="740234297" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/0dd02c7c615b4376a797a69b012ae13c/CPPConIrvingTurnerWhatWeveLearned.mp4" expression="full" duration="1407" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned.mp3" expression="full" duration="1407" fileSize="22525386" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned.mp4" expression="full" duration="1407" fileSize="38799044" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_high.mp4" expression="full" duration="1407" fileSize="740234297" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1ba7/9078f31b-8310-40e9-bef4-857003a01ba7/CPPConIrvingTurnerWhatWeveLearned_mid.mp4" expression="full" duration="1407" fileSize="180699237" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Billy Baker “What happened to...: Deprecated and Removed Features of C++&quot; </title>
    <description><![CDATA[<p>Published on Oct 5, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Removing a feature from a programming language can be difficult. The amount of code that will no longer compile is always weighed against whether the language provides a better alternative with an easy migration path. For the next C&#43;&#43; standard, quite a few features have been removed or deprecated. From auto_ptr and binary_function to register and trigraphs, this talk will present the motivation for removing and deprecating features in C&#43;&#43; as well as the alternatives that may be used.<br>— <br>Billy Baker<br>FlightSafety International<br>Senior Staff Engineer<br>Broken Arrow, OK<br>Billy Baker has developed deterministic real-time flight simulation software using C&#43;&#43; for FlightSafety International, Evans and Sutherland and Boeing since 1997. At C&#43;&#43; committee meetings, he can most likely be found in LWG. He received his B.S. and M.S in Applied Mathematics from the University of Tulsa and is currently working on a Ph.D. in Computer Science. If asked, he will tell stories from his research semester at NCSA when web browsers did not yet have forms support.Website: http://www.flightsafety.com<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aa7ef425a4224a11ae89a69b012a8e72">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Billy-Baker-What-happened-to-Deprecated-and-Removed-Features-of-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Billy-Baker-What-happened-to-Deprecated-and-Removed-Features-of-C</link>
    <itunes:summary>Published on Oct 5, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Removing a feature from a programming language can be difficult. The amount of code that will no longer compile is always weighed against whether the language provides a better alternative with an easy migration path. For the next C&amp;#43;&amp;#43; standard, quite a few features have been removed or deprecated. From auto_ptr and binary_function to register and trigraphs, this talk will present the motivation for removing and deprecating features in C&amp;#43;&amp;#43; as well as the alternatives that may be used.— Billy BakerFlightSafety InternationalSenior Staff EngineerBroken Arrow, OKBilly Baker has developed deterministic real-time flight simulation software using C&amp;#43;&amp;#43; for FlightSafety International, Evans and Sutherland and Boeing since 1997. At C&amp;#43;&amp;#43; committee meetings, he can most likely be found in LWG. He received his B.S. and M.S in Applied Mathematics from the University of Tulsa and is currently working on a Ph.D. in Computer Science. If asked, he will tell stories from his research semester at NCSA when web browsers did not yet have forms support.Website: http://www.flightsafety.com—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>1293</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Billy-Baker-What-happened-to-Deprecated-and-Removed-Features-of-C</guid>
    <dc:creator>Billy Baker</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_high.mp4" length="478319605" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/aa7ef425a4224a11ae89a69b012a8e72/CPPConBakerWhatHappenedTo.mp4" expression="full" duration="1293" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo.mp3" expression="full" duration="1293" fileSize="20696778" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo.mp4" expression="full" duration="1293" fileSize="40290788" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_high.mp4" expression="full" duration="1293" fileSize="478319605" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6763/252f2a57-f1af-42ce-8a53-4dd69f9c6763/CPPConBakerWhatHappenedTo_mid.mp4" expression="full" duration="1293" fileSize="144155548" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Howard Hinnant “A ＜chrono＞ Tutorial&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This talk starts very simple: with seconds. It explains exactly what a second is: what is under the hood, what it can do, and most importantly how and why it fails at compile time. Failing at compile time, instead of at run time is the critical design philosophy that runs through chrono.</div><div>Slowly the talk adds complexity: other units of time duration, custom time durations, conversions among durations, points in time, etc. With each addition, another layer of the chrono onion is peeled away.</div><div>By the end of the talk, you will understand both the importance of the simplicity of chrono, and the power available to you if you avoid the typical mistakes beginners make when first learning chrono. Even experts will find at least one undiscovered gem in this talk to take back to their own code. And you may see ways to transfer some of the chrono design principles into your own designs.</div><div>People who attend this talk will be especially well prepared for my later talk about time zones.</div><div>This talk is a prequel to my CppCon 2015 talk: https://www.youtube.com/watch?v=tzyGj...<br>— <br>Howard Hinnant<br>Senior Software Engineer, Ripple<br>Lead author of several C&#43;&#43;11 features including: move semantics, unique_ptr and . | | Lead author on three open source projects: A std::lib implementation: http://libcxx.llvm.org | An Itanium ABI implementation: http://libcxxabi.llvm.org | A date/time/timezone library: https://github.com/HowardHinnant/date<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:937a41b744074c808810a69b012a54fb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-A-chrono-Tutorial</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-A-chrono-Tutorial</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This talk starts very simple: with seconds. It explains exactly what a second is: what is under the hood, what it can do, and most importantly how and why it fails at compile time. Failing at compile time, instead of at run time is the critical design philosophy that runs through chrono.Slowly the talk adds complexity: other units of time duration, custom time durations, conversions among durations, points in time, etc. With each addition, another layer of the chrono onion is peeled away.By the end of the talk, you will understand both the importance of the simplicity of chrono, and the power available to you if you avoid the typical mistakes beginners make when first learning chrono. Even experts will find at least one undiscovered gem in this talk to take back to their own code. And you may see ways to transfer some of the chrono design principles into your own designs.People who attend this talk will be especially well prepared for my later talk about time zones.This talk is a prequel to my CppCon 2015 talk: https://www.youtube.com/watch?v=tzyGj...— Howard HinnantSenior Software Engineer, RippleLead author of several C&amp;#43;&amp;#43;11 features including: move semantics, unique_ptr and . | | Lead author on three open source projects: A std::lib implementation: http://libcxx.llvm.org | An Itanium ABI implementation: http://libcxxabi.llvm.org | A date/time/timezone library: https://github.com/HowardHinnant/date—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3631</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Howard-Hinnant-A-chrono-Tutorial</guid>
    <dc:creator>Howard Hinnant</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_high.mp4" length="1139778564" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/937a41b744074c808810a69b012a54fb/CPPConHinnantAChronoTutorial.mp4" expression="full" duration="3631" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial.mp3" expression="full" duration="3631" fileSize="58109130" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial.mp4" expression="full" duration="3631" fileSize="95900737" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_high.mp4" expression="full" duration="3631" fileSize="1139778564" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5e62/c58030d3-0c0d-44da-bbde-135e80305e62/CPPConHinnantAChronoTutorial_mid.mp4" expression="full" duration="3631" fileSize="298242380" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Matt P. Dziubinski “Computer Architecture, C++, and High Performance&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>With the increase in the available computational power, the Nathan Myhrvold's Laws of Software continue to apply: New opportunities enable new applications with increased needs, which subsequently become constrained by the hardware that used to be &quot;modern&quot; at adoption time. C&#43;&#43; itself opens the access to high-quality optimizing compilers and a wide ecosystem of high-performance tooling and libraries. At the same time, simply turning on the highest optimization flags and hoping for the best is not going to automagically yield the highest performance -- i.e., the lowest execution time. The reasons are twofold: Algorithms' performance can differ in theory -- and that of their implementations can differ even more so in practice.</div><div>Modern CPU architecture has continued to yield increases in performance through the advances in microarchitecture, such as pipelining, multiple issue (superscalar) out-of-order execution, branch prediction, SIMD-within-a-register (SWAR) vector units, and chip multi-processor (CMP, also known as multi-core) architecture. All of these developments have provided us with the opportunities associated with a higher peak performance -- while at the same time raising new optimization challenges when actually trying to reach that peak.</div><div>In this talk we'll consider the properties of code which can make it either friendly -- or hostile -- to a modern microprocessor. We will offer advice on achieving higher performance, from the ways of analyzing it beyond algorithmic complexity, recognizing the aspects we can entrust to the compiler, to practical optimization of the existing code. Instead of stopping at the &quot;you should measure it&quot; advice (which is correct, but incomplete), the talk will be focused on providing practical, hands-on examples on _how_ to actually perform the measurements (presenting tools -- including perf and likwid -- simplifying the access to CPU performance monitoring counters) and how to reason about the resulting measurements (informed by the understanding of the modern CPU architecture, generated assembly code, as well as an in-depth look at how the CPU cycles are spent using modern microarchitectural simulation tools) to improve the performance of C&#43;&#43; applications.</div><div>Slides: https://speakerdeck.com/mattpd/comput...<br>Resources: https://github.com/MattPD/cpplinks<br>— <br>Matt P. Dziubinski<br>Aalborg University<br>Research &amp; Development<br>Denmark<br>Matt P. Dziubinski is affiliated with the Department of Mathematical Sciences, Aalborg University, Denmark and a Junior Fellow at Center for Research in Econometric Analysis of Time Series (CREATES). His fascination with computers started in the late 1980s with an 8-bit Atari. His current research interests include Quantitative Finance and High Performance Scientific Computing, with a focus on applied cross-platform parallel computing -- targeting multi-core CPUs as well as many-core GPGPUs. Practical implementation of these research ideas is made easier, more accessible, and even fun thanks to modern C&#43;&#43;. Since 2008 Matt has also been sharing his passion introducing modern C&#43;&#43; to his students -- with computational applications in math, finance, statistics, and economics. C&#43;&#43; interests include generic programming, numerics, networking, and performance optimization -- while also enjoying learning about computer architecture in his spare time <span class="c9emoticon c9emoticon_smiley">:)</span><br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ed685e4ca8714b8fa123a69b012a23cc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matt-P-Dziubinski-Computer-Architecture-C-and-High-Performance</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matt-P-Dziubinski-Computer-Architecture-C-and-High-Performance</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—With the increase in the available computational power, the Nathan Myhrvold&#39;s Laws of Software continue to apply: New opportunities enable new applications with increased needs, which subsequently become constrained by the hardware that used to be &amp;quot;modern&amp;quot; at adoption time. C&amp;#43;&amp;#43; itself opens the access to high-quality optimizing compilers and a wide ecosystem of high-performance tooling and libraries. At the same time, simply turning on the highest optimization flags and hoping for the best is not going to automagically yield the highest performance -- i.e., the lowest execution time. The reasons are twofold: Algorithms&#39; performance can differ in theory -- and that of their implementations can differ even more so in practice.Modern CPU architecture has continued to yield increases in performance through the advances in microarchitecture, such as pipelining, multiple issue (superscalar) out-of-order execution, branch prediction, SIMD-within-a-register (SWAR) vector units, and chip multi-processor (CMP, also known as multi-core) architecture. All of these developments have provided us with the opportunities associated with a higher peak performance -- while at the same time raising new optimization challenges when actually trying to reach that peak.In this talk we&#39;ll consider the properties of code which can make it either friendly -- or hostile -- to a modern microprocessor. We will offer advice on achieving higher performance, from the ways of analyzing it beyond algorithmic complexity, recognizing the aspects we can entrust to the compiler, to practical optimization of the existing code. Instead of stopping at the &amp;quot;you should measure it&amp;quot; advice (which is correct, but incomplete), the talk will be focused on providing practical, hands-on examples on _how_ to actually perform t</itunes:summary>
    <itunes:duration>3328</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matt-P-Dziubinski-Computer-Architecture-C-and-High-Performance</guid>
    <dc:creator>Matt P. Dziubinski</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_high.mp4" length="1677683592" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/ed685e4ca8714b8fa123a69b012a23cc/CPPConDziubinskiComputerArchitecture.mp4" expression="full" duration="3328" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture.mp3" expression="full" duration="3328" fileSize="53264970" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture.mp4" expression="full" duration="3328" fileSize="79766188" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_high.mp4" expression="full" duration="3328" fileSize="1677683592" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b0a6/81ffa259-1a69-4280-8b8d-29317644b0a6/CPPConDziubinskiComputerArchitecture_mid.mp4" expression="full" duration="3328" fileSize="274646716" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Tim Shen “Regular Expressions in C++, Present and Future&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Regular expressions are widely used in application development and data processing, yet it is challenging to design and implement a regular expression library that is expressive, efficient and safe.</div><div>In this talk, Tim Shen, the current maintainer of libstdc&#43;&#43;'s ＜regex＞, will introduce the basics of implementing regular expressions in C&#43;&#43;, the status of existing implementations, and what is expected from the standardization process.</div><div>For the implementation, several data structures and algorithms will be introduced, with pros and cons listed; we will show how several popular implementations (Boost.Regex, Boost.Xpressive, ＜regex＞ from standard library implementations, RE2, etc) pick their algorithms. Several popular features/patterns that hurt performance will be explained, with a &quot;safe&quot; regex usage suggested. Finally a wishlist of features will be presented, in order to deliver a more efficient and usable regex library.<br>— <br>Tim Shen<br>Software Engineer, Google<br>Tim Shen is a compiler engineer in Google LLVM team. His major focus is the performance of C&#43;&#43; on various LLVM backends. He also maintains libstdc&#43;&#43;'s ＜regex＞.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:823cd2c05c1f44359682a69b0129fae8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Shen-Regular-Expressions-in-C-Present-and-Future</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Shen-Regular-Expressions-in-C-Present-and-Future</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Regular expressions are widely used in application development and data processing, yet it is challenging to design and implement a regular expression library that is expressive, efficient and safe.In this talk, Tim Shen, the current maintainer of libstdc&amp;#43;&amp;#43;&#39;s ＜regex＞, will introduce the basics of implementing regular expressions in C&amp;#43;&amp;#43;, the status of existing implementations, and what is expected from the standardization process.For the implementation, several data structures and algorithms will be introduced, with pros and cons listed; we will show how several popular implementations (Boost.Regex, Boost.Xpressive, ＜regex＞ from standard library implementations, RE2, etc) pick their algorithms. Several popular features/patterns that hurt performance will be explained, with a &amp;quot;safe&amp;quot; regex usage suggested. Finally a wishlist of features will be presented, in order to deliver a more efficient and usable regex library.— Tim ShenSoftware Engineer, GoogleTim Shen is a compiler engineer in Google LLVM team. His major focus is the performance of C&amp;#43;&amp;#43; on various LLVM backends. He also maintains libstdc&amp;#43;&amp;#43;&#39;s ＜regex＞.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3080</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Shen-Regular-Expressions-in-C-Present-and-Future</guid>
    <dc:creator>Tim Shen</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_high.mp4" length="925348351" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/823cd2c05c1f44359682a69b0129fae8/CPPConShenRegularExpressionsInCpp.mp4" expression="full" duration="3080" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp.mp3" expression="full" duration="3080" fileSize="49289034" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp.mp4" expression="full" duration="3080" fileSize="69308132" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_high.mp4" expression="full" duration="3080" fileSize="925348351" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0dfa/086c7478-32ff-4123-9434-204f95060dfa/CPPConShenRegularExpressionsInCpp_mid.mp4" expression="full" duration="3080" fileSize="213609634" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Kenny Kerr &amp; James McNellis “Putting Coroutines to Work with the Windows Runtime&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Coroutines are one of the hot new features that are being proposed for C&#43;&#43; standardization. They have the potential to revolutionize how we C&#43;&#43; developers work with asynchronous operations, both in terms of consuming long-running operations and in formalizing the way in which asynchronous operations are described by the developer and implemented by the compiler.</div><div>The theory is interesting, and &quot;Hello, World&quot; examples are fun, but how does the proposed coroutines feature fare when applied to a major library or operating system? How well does the coroutines feature work in practice with real-world user interface code and background tasks?</div><div>In this session, we'll explore the application of the C&#43;&#43; coroutines feature to C&#43;&#43; for the Windows Runtime. We'll look at the coroutine types that we designed for the &quot;C&#43;&#43;/WinRT&quot; language projection, with a focus on their usability and performance. Most importantly, we'll look at how coroutines can be used with a sophisticated platform library and discover how various problems are greatly simplified in the face of real platform complexities like UI and threading models.<br>— <br>Kenny Kerr<br>Microsoft<br>Kenny Kerr is an engineer on the Windows team at Microsoft, an MSDN Magazine contributing editor, Pluralsight author, and creator of moderncpp.com (C&#43;&#43;/WinRT). He writes at kennykerr.ca and you can find him on Twitter at @kennykerr.</div><div>James McNellis<br>Senior Software Engineer, Microsoft Visual C&#43;&#43;<br>James McNellis is a senior engineer on the Visual C&#43;&#43; team at Microsoft, where he works on C&#43;&#43; library design and is responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. He can be found on Twitter at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f4502be257794acba5d0a69b0129e0ad">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Putting-Coroutines-to-Work-with-the-Windows-Runtime</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Putting-Coroutines-to-Work-with-the-Windows-Runtime</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Coroutines are one of the hot new features that are being proposed for C&amp;#43;&amp;#43; standardization. They have the potential to revolutionize how we C&amp;#43;&amp;#43; developers work with asynchronous operations, both in terms of consuming long-running operations and in formalizing the way in which asynchronous operations are described by the developer and implemented by the compiler.The theory is interesting, and &amp;quot;Hello, World&amp;quot; examples are fun, but how does the proposed coroutines feature fare when applied to a major library or operating system? How well does the coroutines feature work in practice with real-world user interface code and background tasks?In this session, we&#39;ll explore the application of the C&amp;#43;&amp;#43; coroutines feature to C&amp;#43;&amp;#43; for the Windows Runtime. We&#39;ll look at the coroutine types that we designed for the &amp;quot;C&amp;#43;&amp;#43;/WinRT&amp;quot; language projection, with a focus on their usability and performance. Most importantly, we&#39;ll look at how coroutines can be used with a sophisticated platform library and discover how various problems are greatly simplified in the face of real platform complexities like UI and threading models.— Kenny KerrMicrosoftKenny Kerr is an engineer on the Windows team at Microsoft, an MSDN Magazine contributing editor, Pluralsight author, and creator of moderncpp.com (C&amp;#43;&amp;#43;/WinRT). He writes at kennykerr.ca and you can find him on Twitter at @kennykerr.James McNellisSenior Software Engineer, Microsoft Visual C&amp;#43;&amp;#43;James McNellis is a senior engineer on the Visual C&amp;#43;&amp;#43; team at Microsoft, where he works on C&amp;#43;&amp;#43; library design and is responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. He can be found on Twitter at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.co</itunes:summary>
    <itunes:duration>3279</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Putting-Coroutines-to-Work-with-the-Windows-Runtime</guid>
    <dc:creator>James McNellis, Kenny Kerr</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_high.mp4" length="1230330853" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f4502be257794acba5d0a69b0129e0ad/CPPConKerrMcNellisPuttingCoroutinesToWork.mp4" expression="full" duration="3279" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork.mp3" expression="full" duration="3279" fileSize="52475850" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork.mp4" expression="full" duration="3279" fileSize="105923281" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_high.mp4" expression="full" duration="3279" fileSize="1230330853" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3665/d77cab1c-e9bc-4b90-b78f-0ed2e1ae3665/CPPConKerrMcNellisPuttingCoroutinesToWork_mid.mp4" expression="full" duration="3279" fileSize="365012237" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Kenny Kerr &amp; James McNellis “Embracing Standard C++ for the Windows Runtime&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Believe it or not, avoiding language extensions and embracing modern C&#43;&#43; will make it easier for you to write code for Windows. The Universal Windows Platform in Windows 10 provides the ability for developers to write apps for many devices in many languages. To achieve this goal, it uses the Windows Runtime platform technology to expose functionality from the operating system into languages, including C&#43;&#43;. Microsoft wants to make the Windows Runtime naturally and easily available to standard C&#43;&#43; developers. &quot;C&#43;&#43;/WinRT&quot; (formerly moderncpp.com) is a standard C&#43;&#43; library and toolset currently under development at Microsoft. It includes a standalone compiler, which converts Windows Runtime metadata into a header-only library. The source code uses standard syntax consumable by any C&#43;&#43; compiler, making it easier for developers to use Windows Runtime APIs from C&#43;&#43;.</div><div>We will begin this session with the goals of the &quot;C&#43;&#43;/WinRT&quot; project. We'll look at the primitives of the Windows Runtime ABI and how this C&#43;&#43; library provides a natural projection of those primitives. We'll look at how C&#43;&#43;11 and C&#43;&#43;14 language features make it easier to encapsulate the COM infrastructure that underpins the Windows Runtime. Finally, we'll look at how we've optimized the implementation and discuss how a handful of compiler optimizations can make this C&#43;&#43; library efficient and effective for building a wide range of applications.<br>— <br>Kenny Kerr<br>Microsoft<br>Kenny Kerr is an engineer on the Windows team at Microsoft, an MSDN Magazine contributing editor, Pluralsight author, and creator of moderncpp.com (C&#43;&#43;/WinRT). He writes at kennykerr.ca and you can find him on Twitter at @kennykerr.</div><div>James McNellis<br>Senior Software Engineer, Microsoft Visual C&#43;&#43;<br>James McNellis is a senior engineer on the Visual C&#43;&#43; team at Microsoft, where he works on C&#43;&#43; library design and is responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. He can be found on Twitter at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:25ca10ed90da47bd8ce7a69b01298caf">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Embracing-Standard-C-for-the-Windows-Runtime</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Embracing-Standard-C-for-the-Windows-Runtime</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Believe it or not, avoiding language extensions and embracing modern C&amp;#43;&amp;#43; will make it easier for you to write code for Windows. The Universal Windows Platform in Windows 10 provides the ability for developers to write apps for many devices in many languages. To achieve this goal, it uses the Windows Runtime platform technology to expose functionality from the operating system into languages, including C&amp;#43;&amp;#43;. Microsoft wants to make the Windows Runtime naturally and easily available to standard C&amp;#43;&amp;#43; developers. &amp;quot;C&amp;#43;&amp;#43;/WinRT&amp;quot; (formerly moderncpp.com) is a standard C&amp;#43;&amp;#43; library and toolset currently under development at Microsoft. It includes a standalone compiler, which converts Windows Runtime metadata into a header-only library. The source code uses standard syntax consumable by any C&amp;#43;&amp;#43; compiler, making it easier for developers to use Windows Runtime APIs from C&amp;#43;&amp;#43;.We will begin this session with the goals of the &amp;quot;C&amp;#43;&amp;#43;/WinRT&amp;quot; project. We&#39;ll look at the primitives of the Windows Runtime ABI and how this C&amp;#43;&amp;#43; library provides a natural projection of those primitives. We&#39;ll look at how C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 language features make it easier to encapsulate the COM infrastructure that underpins the Windows Runtime. Finally, we&#39;ll look at how we&#39;ve optimized the implementation and discuss how a handful of compiler optimizations can make this C&amp;#43;&amp;#43; library efficient and effective for building a wide range of applications.— Kenny KerrMicrosoftKenny Kerr is an engineer on the Windows team at Microsoft, an MSDN Magazine contributing editor, Pluralsight author, and creator of moderncpp.com (C&amp;#43;&amp;#43;/WinRT). He writes at kennykerr.ca and you can find him on Twitter at @kennykerr.James McNellisSenior Software Enginee</itunes:summary>
    <itunes:duration>3456</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Kenny-Kerr--James-McNellis-Embracing-Standard-C-for-the-Windows-Runtime</guid>
    <dc:creator>James McNellis, Kenny Kerr</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_high.mp4" length="1091425298" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/25ca10ed90da47bd8ce7a69b01298caf/CPPConKerrMcNellisEmbracingStandardCpp.mp4" expression="full" duration="3456" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp.mp3" expression="full" duration="3456" fileSize="55313226" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp.mp4" expression="full" duration="3456" fileSize="92396046" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_high.mp4" expression="full" duration="3456" fileSize="1091425298" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7142/9a5bf063-2c5b-44cc-b96c-33cea1e77142/CPPConKerrMcNellisEmbracingStandardCpp_mid.mp4" expression="full" duration="3456" fileSize="296747065" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Ben Deane “Using Types Effectively&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>C&#43;&#43; has a pretty good type system, and modern C&#43;&#43; gives us a greater ability than ever before to use that type system for good: to make APIs easier to use and harder to misuse, to make our datatypes more closely express our intent, and generally to make code safer, more obvious in function and perhaps even faster.</div><div>This is an interactive session - incorporating games played between presenter and audience, even - taking a look at choices available to us as datatype and API designers, and examining how a little knowledge about the algebra of algebraic datatypes can help. We'll see why std::optional and (hopefully soon) std::variant will quickly become an essential part of everyone's toolbox, and also explore how types can be used to express not just the structure of data, but also the behaviour of objects and functions.<br>— <br>Ben Deane<br>Principal Software Engineer, Blizzard Entertainment<br>Ben has been writing games for almost 20 years, and in C&#43;&#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He's always looking for useful new techniques in C&#43;&#43;, and he likes functional programming.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b7d1ac154685409fbd78a69b012960a9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-Using-Types-Effectively</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-Using-Types-Effectively</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—C&amp;#43;&amp;#43; has a pretty good type system, and modern C&amp;#43;&amp;#43; gives us a greater ability than ever before to use that type system for good: to make APIs easier to use and harder to misuse, to make our datatypes more closely express our intent, and generally to make code safer, more obvious in function and perhaps even faster.This is an interactive session - incorporating games played between presenter and audience, even - taking a look at choices available to us as datatype and API designers, and examining how a little knowledge about the algebra of algebraic datatypes can help. We&#39;ll see why std::optional and (hopefully soon) std::variant will quickly become an essential part of everyone&#39;s toolbox, and also explore how types can be used to express not just the structure of data, but also the behaviour of objects and functions.— Ben DeanePrincipal Software Engineer, Blizzard EntertainmentBen has been writing games for almost 20 years, and in C&amp;#43;&amp;#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He&#39;s always looking for useful new techniques in C&amp;#43;&amp;#43;, and he likes functional programming.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3319</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-Using-Types-Effectively</guid>
    <dc:creator>Ben Deane</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_high.mp4" length="1584447452" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b7d1ac154685409fbd78a69b012960a9/CPPConDeaneUsingTypesEffectively.mp4" expression="full" duration="3319" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively.mp3" expression="full" duration="3319" fileSize="53112522" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively.mp4" expression="full" duration="3319" fileSize="84674715" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_high.mp4" expression="full" duration="3319" fileSize="1584447452" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/778a/787d6dba-86c2-4ca0-be2e-0e009aa5778a/CPPConDeaneUsingTypesEffectively_mid.mp4" expression="full" duration="3319" fileSize="340658242" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: &quot;WG21-SG14 – Making C++ better for games, embedded and financial developers&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>SG14 is the ISO C&#43;&#43; study group dedicated to programmers in the games, embedded and financial domain, focusing on a particular subset of use-cases: low-latency, real-time requirements and performance/efficiency. Convened in June 2015, it is the newest addition to the WG21 Study Group family, and it is the first to focus on an industrial domain rather than on a particular aspect of software development. We need your input: learn why and how at this talk.</div><div>With a thriving google group and regular, well attended teleconferences, several areas of investigation are subject to research. Expect discussion on cache-coherent containers, fixed-point representation, heterogeneous programming, and of course exception handling, as well as one or two diversions into the history of game development.</div><div>You may even come away with a desire to join this or any of the other study groups, and contribute ideas and papers to improve the language.<br>— <br>Guy Davidson<br>Creative Assembly<br>Coding Manager<br>Horsham, UK<br>Coding Manager of Creative Assembly, makers of the Total War franchise, Alien:Isolation and the upcoming Halo Wars sequel, Guy has been writing games since the early 1980s. He is now also a contributor to SG14, the study group devoted to low latency, real time requirements, and performance/efficiency especially for Games, Financial/Banking, and Simulations. He speaks at schools, colleges and universities about programming and likes to help good programmers become better programmers.</div><div>Nicolas Guillemot<br>MSc Student, University of Victoria<br>Hi, nice to meet you! My name is Nicolas, and my main interests are game development, real-time rendering, graphics hardware and graphics APIs. I tackle problems at the intersection of designing efficient computer algorithms and leveraging the strengths of hardware. My favorite thing about C&#43;&#43; is that it lets me write detailed systems-level code and high-level GUI code together in a single robust language.</div><div>Sean Middleditch<br>Lead Engineer, Wargaming Seattle<br>I make games.</div><div>Michael Wong<br>Codeplay Software/ISOCPP<br>VP of R&amp;D/Director<br>Michael Wong is the CEO of OpenMP. He is the Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. He is also a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, it's a wonder he can get anything done.<br>He chairs the WG21 SG5 Transactional Memory and SG14 Games Development/Low Latency, and is the co-author of a number C&#43;&#43;11/OpenMP/Transactional Memory features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBM's XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo.</div><div>He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, ADC&#43;&#43;, CASCON, Bloomberg, CERN, and many Universities, research centers and companies.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1817906dd51442289c3ba69b01293dfa">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-WG21-SG14--Making-C-better-for-games-embedded-and-financial-developers</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-WG21-SG14--Making-C-better-for-games-embedded-and-financial-developers</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—SG14 is the ISO C&amp;#43;&amp;#43; study group dedicated to programmers in the games, embedded and financial domain, focusing on a particular subset of use-cases: low-latency, real-time requirements and performance/efficiency. Convened in June 2015, it is the newest addition to the WG21 Study Group family, and it is the first to focus on an industrial domain rather than on a particular aspect of software development. We need your input: learn why and how at this talk.With a thriving google group and regular, well attended teleconferences, several areas of investigation are subject to research. Expect discussion on cache-coherent containers, fixed-point representation, heterogeneous programming, and of course exception handling, as well as one or two diversions into the history of game development.You may even come away with a desire to join this or any of the other study groups, and contribute ideas and papers to improve the language.— Guy DavidsonCreative AssemblyCoding ManagerHorsham, UKCoding Manager of Creative Assembly, makers of the Total War franchise, Alien:Isolation and the upcoming Halo Wars sequel, Guy has been writing games since the early 1980s. He is now also a contributor to SG14, the study group devoted to low latency, real time requirements, and performance/efficiency especially for Games, Financial/Banking, and Simulations. He speaks at schools, colleges and universities about programming and likes to help good programmers become better programmers.Nicolas GuillemotMSc Student, University of VictoriaHi, nice to meet you! My name is Nicolas, and my main interests are game development, real-time rendering, graphics hardware and graphics APIs. I tackle problems at the intersection of designing efficient computer algorithms and leveraging the strengths of hardware. My favorite thing about C&amp;#43;&amp;</itunes:summary>
    <itunes:duration>3507</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-WG21-SG14--Making-C-better-for-games-embedded-and-financial-developers</guid>
    <dc:creator>Michael Wong, Nicolas Guillemot, Sean Middleditch, Guy Davidson</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_high.mp4" length="1722000062" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1817906dd51442289c3ba69b01293dfa/CPPConSG14.mp4" expression="full" duration="3507" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14.mp3" expression="full" duration="3507" fileSize="56124234" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14.mp4" expression="full" duration="3507" fileSize="100243198" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_high.mp4" expression="full" duration="3507" fileSize="1722000062" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/aadb/38a93ea9-ce4e-44a3-a07b-9702a172aadb/CPPConSG14_mid.mp4" expression="full" duration="3507" fileSize="370250752" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “Instruction Re-ordering Everywhere: The C++ &#39;As-If&#39; Rule and the Role of Sequence&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This is an introductory (i.e., &quot;First Principles&quot;) dive into instruction re-ordering (at compile-time, and at run-time) due to conspiring by the compiler and CPU to make most efficient use of execution units and resources within the CPU processor core. Discussion is made of the role for sequence, for tracing of data flows and control flows, how &quot;out-of-order&quot; execution occurs within the compiler and CPU, and why that's a &quot;good thing&quot;. The importance of the C&#43;&#43; &quot;As-If&quot; rule that allows these optimizations is explained.</div><div>Exploration is made of imperative versus sequential devices, physical versus logical sequences, and the role of the CPU cache line. At the end of this talk, it will be obvious for how and why instruction re-ordering occurs, and the programmer's need to consider logical dependencies (and not instruction order) when defining algorithms.</div><div>This talk is ideal for any programmer confused after observing instruction reordering in their running systems, and provides a solid basis to begin reasoning about how to leverage parallelism and be concerned with concurrency.<br>— <br>Charles Bay<br>Senior Software Engineer, F5 Networks<br>Software developer with 25&#43; years experience in large-scale and distributed systems in performance-sensitive environments including real-time processing, performance visualization, embedded systems, time-sensitive processing of large data sets, hardware status-and-control, and instrument/process/sub-assembly monitoring.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b8b43a1c7fca4e379de1a69b0128f6a0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Instruction-Re-ordering-Everywhere-The-C-As-If-Rule-and-the-Role-of-Sequence</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Instruction-Re-ordering-Everywhere-The-C-As-If-Rule-and-the-Role-of-Sequence</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This is an introductory (i.e., &amp;quot;First Principles&amp;quot;) dive into instruction re-ordering (at compile-time, and at run-time) due to conspiring by the compiler and CPU to make most efficient use of execution units and resources within the CPU processor core. Discussion is made of the role for sequence, for tracing of data flows and control flows, how &amp;quot;out-of-order&amp;quot; execution occurs within the compiler and CPU, and why that&#39;s a &amp;quot;good thing&amp;quot;. The importance of the C&amp;#43;&amp;#43; &amp;quot;As-If&amp;quot; rule that allows these optimizations is explained.Exploration is made of imperative versus sequential devices, physical versus logical sequences, and the role of the CPU cache line. At the end of this talk, it will be obvious for how and why instruction re-ordering occurs, and the programmer&#39;s need to consider logical dependencies (and not instruction order) when defining algorithms.This talk is ideal for any programmer confused after observing instruction reordering in their running systems, and provides a solid basis to begin reasoning about how to leverage parallelism and be concerned with concurrency.— Charles BaySenior Software Engineer, F5 NetworksSoftware developer with 25&amp;#43; years experience in large-scale and distributed systems in performance-sensitive environments including real-time processing, performance visualization, embedded systems, time-sensitive processing of large data sets, hardware status-and-control, and instrument/process/sub-assembly monitoring.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3435</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Instruction-Re-ordering-Everywhere-The-C-As-If-Rule-and-the-Role-of-Sequence</guid>
    <dc:creator>Charles Bay</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_high.mp4" length="1915671915" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b8b43a1c7fca4e379de1a69b0128f6a0/CPPConBayInstructionReorderingEverywhere.mp4" expression="full" duration="3435" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere.mp3" expression="full" duration="3435" fileSize="54970314" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere.mp4" expression="full" duration="3435" fileSize="129960304" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_high.mp4" expression="full" duration="3435" fileSize="1915671915" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/610f/c93b5b91-e010-4f1b-bd8a-65d65e3d610f/CPPConBayInstructionReorderingEverywhere_mid.mp4" expression="full" duration="3435" fileSize="574884523" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Lisa Lippincott “What is the basic interface? (part 1 of 2)&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>When we read a function declaration, what expectations do we have of the function? What requirements and limitations do we take for granted? Our unspoken assumptions about function interfaces present an obstacle to precise reasoning about programs.</div><div>Here, I will delve into the nitty-gritty procedural logic of function calls in C&#43;&#43;, with particular emphasis on the things that often go without saying. I will present some suggestions about how we can make these implicit expectations precise, and how we can express deviation from these expectations in current and future versions of C&#43;&#43;.</div><div>This material was previously presented at C&#43;&#43;Now 2016, where it was named best presentation. It is a companion to my C&#43;&#43;Now 2015 talk, &quot;How we reason about procedural programs,&quot; but no knowledge of that material will be necessary.<br>— <br>Lisa Lippincott<br>Tanium<br>Chief Software Architect<br>Lisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&#43;&#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a2031d0c663a4303b6ada69b0128c7e4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-1-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-1-of-2</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—When we read a function declaration, what expectations do we have of the function? What requirements and limitations do we take for granted? Our unspoken assumptions about function interfaces present an obstacle to precise reasoning about programs.Here, I will delve into the nitty-gritty procedural logic of function calls in C&amp;#43;&amp;#43;, with particular emphasis on the things that often go without saying. I will present some suggestions about how we can make these implicit expectations precise, and how we can express deviation from these expectations in current and future versions of C&amp;#43;&amp;#43;.This material was previously presented at C&amp;#43;&amp;#43;Now 2016, where it was named best presentation. It is a companion to my C&amp;#43;&amp;#43;Now 2015 talk, &amp;quot;How we reason about procedural programs,&amp;quot; but no knowledge of that material will be necessary.— Lisa LippincottTaniumChief Software ArchitectLisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&amp;#43;&amp;#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3479</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-1-of-2</guid>
    <dc:creator>Lisa Lippincott</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_high.mp4" length="1236544789" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a2031d0c663a4303b6ada69b0128c7e4/ippincottWhatIsTheBasicInterfacePart1.mp4" expression="full" duration="3479" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1.mp3" expression="full" duration="3479" fileSize="55678026" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1.mp4" expression="full" duration="3479" fileSize="116526201" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_high.mp4" expression="full" duration="3479" fileSize="1236544789" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8490/25c1304c-164e-4911-be96-1fc6cfe18490/ippincottWhatIsTheBasicInterfacePart1_mid.mp4" expression="full" duration="3479" fileSize="396317678" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Lisa Lippincott “What is the basic interface? (part 2 of 2)&quot; </title>
    <description><![CDATA[<div>Published on Oct 4, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>When we read a function declaration, what expectations do we have of the function? What requirements and limitations do we take for granted? Our unspoken assumptions about function interfaces present an obstacle to precise reasoning about programs.</div><div>Here, I will delve into the nitty-gritty procedural logic of function calls in C&#43;&#43;, with particular emphasis on the things that often go without saying. I will present some suggestions about how we can make these implicit expectations precise, and how we can express deviation from these expectations in current and future versions of C&#43;&#43;.</div><div>This material was previously presented at C&#43;&#43;Now 2016, where it was named best presentation. It is a companion to my C&#43;&#43;Now 2015 talk, &quot;How we reason about procedural programs,&quot; but no knowledge of that material will be necessary.<br>— <br>Lisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&#43;&#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d3fb44062be54bb4bbbba69b0128911b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-2-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-2-of-2</link>
    <itunes:summary>Published on Oct 4, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—When we read a function declaration, what expectations do we have of the function? What requirements and limitations do we take for granted? Our unspoken assumptions about function interfaces present an obstacle to precise reasoning about programs.Here, I will delve into the nitty-gritty procedural logic of function calls in C&amp;#43;&amp;#43;, with particular emphasis on the things that often go without saying. I will present some suggestions about how we can make these implicit expectations precise, and how we can express deviation from these expectations in current and future versions of C&amp;#43;&amp;#43;.This material was previously presented at C&amp;#43;&amp;#43;Now 2016, where it was named best presentation. It is a companion to my C&amp;#43;&amp;#43;Now 2015 talk, &amp;quot;How we reason about procedural programs,&amp;quot; but no knowledge of that material will be necessary.— Lisa Lippincott is Chief Software Architect at Tanium, a bay-area startup. Her claim to fame is writing one phrase appearing in the C&amp;#43;&amp;#43; standard. In her spare time, she studies mathematical logic with a category-theoretic approach.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3528</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Lisa-Lippincott-What-is-the-basic-interface-part-2-of-2</guid>
    <dc:creator>Lisa Lippincott</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_high.mp4" length="1156377204" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/d3fb44062be54bb4bbbba69b0128911b/CPPConLippincottWhatIsTheBasicInterfacePart2.mp4" expression="full" duration="3528" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2.mp3" expression="full" duration="3528" fileSize="56450634" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2.mp4" expression="full" duration="3528" fileSize="112736339" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_high.mp4" expression="full" duration="3528" fileSize="1156377204" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/73b5/522a8dcb-4af5-49e7-80ba-a13f433e73b5/CPPConLippincottWhatIsTheBasicInterfacePart2_mid.mp4" expression="full" duration="3528" fileSize="367022757" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Richard Smith “There and Back Again: An Incremental C++ Modules Design&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>The Clang project has been working on Modules in one form or another for many years. It started off with C and Objective-C many years ago. Today, we have a C&#43;&#43; compiler that can transparently use C&#43;&#43; Modules with existing C&#43;&#43; code, and we have deployed that at scale. However, this is very separate from the question of how to integrate a modular compilation model into the language itself. That is an issue that several groups working on C&#43;&#43; have been trying to tackle over the last few years.</div><div>Based on our experience deploying the core technology behind Modules, we have learned a tremendous amount about how they interact with existing code. This has informed the particular design we would like to see for C&#43;&#43; Modules, and it centers around incremental adoption. In essence, how do we take the C&#43;&#43; code we have today, and migrate it to directly leverage C&#43;&#43; Modules in its very syntax, while still interacting cleanly with C&#43;&#43; code that will always and forever be stuck in a legacy mode without Modules.</div><div>In this talk we will present our ideas on how C&#43;&#43; Modules should be designed in order to interoperate seamlessly with existing patterns, libraries, and codebases. However, these are still early days for C&#43;&#43; Modules. We are all still experimenting and learning about what the best design is likely to be. Here, we simply want to present a possible and still very early design direction for this feature.<br>— <br>Richard Smith<br>Clang hacker, Google<br>Richard is the code owner of the Clang C&#43;&#43; frontend, to which he has been contributing for over five years. He implemented most of the C&#43;&#43;11, C&#43;&#43;14, and C&#43;&#43;17 features that Clang supports, and brought Clang's modules support up to production quality. | Richard is also the Project Editor of the ISO C&#43;&#43; committee, in which he is an active participant. He proposed or contributed to more than half of the language features added in C&#43;&#43;14 and C&#43;&#43;17.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ca4b933b7714458fbafba69b012869d1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Richard-Smith-There-and-Back-Again-An-Incremental-C-Modules-Design</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Richard-Smith-There-and-Back-Again-An-Incremental-C-Modules-Design</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—The Clang project has been working on Modules in one form or another for many years. It started off with C and Objective-C many years ago. Today, we have a C&amp;#43;&amp;#43; compiler that can transparently use C&amp;#43;&amp;#43; Modules with existing C&amp;#43;&amp;#43; code, and we have deployed that at scale. However, this is very separate from the question of how to integrate a modular compilation model into the language itself. That is an issue that several groups working on C&amp;#43;&amp;#43; have been trying to tackle over the last few years.Based on our experience deploying the core technology behind Modules, we have learned a tremendous amount about how they interact with existing code. This has informed the particular design we would like to see for C&amp;#43;&amp;#43; Modules, and it centers around incremental adoption. In essence, how do we take the C&amp;#43;&amp;#43; code we have today, and migrate it to directly leverage C&amp;#43;&amp;#43; Modules in its very syntax, while still interacting cleanly with C&amp;#43;&amp;#43; code that will always and forever be stuck in a legacy mode without Modules.In this talk we will present our ideas on how C&amp;#43;&amp;#43; Modules should be designed in order to interoperate seamlessly with existing patterns, libraries, and codebases. However, these are still early days for C&amp;#43;&amp;#43; Modules. We are all still experimenting and learning about what the best design is likely to be. Here, we simply want to present a possible and still very early design direction for this feature.— Richard SmithClang hacker, GoogleRichard is the code owner of the Clang C&amp;#43;&amp;#43; frontend, to which he has been contributing for over five years. He implemented most of the C&amp;#43;&amp;#43;11, C&amp;#43;&amp;#43;14, and C&amp;#43;&amp;#43;17 features that Clang supports, and brought Clang&#39;s modules support up to production quality. | Richard is also the Projec</itunes:summary>
    <itunes:duration>3577</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Richard-Smith-There-and-Back-Again-An-Incremental-C-Modules-Design</guid>
    <dc:creator>Richard Smith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_high.mp4" length="1580557467" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/ca4b933b7714458fbafba69b012869d1/CPPConSmithThereAndBackAgain.mp4" expression="full" duration="3577" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain.mp3" expression="full" duration="3577" fileSize="57247434" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain.mp4" expression="full" duration="3577" fileSize="109347666" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_high.mp4" expression="full" duration="3577" fileSize="1580557467" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8116/6f4aaab5-c682-4068-af0a-b668da868116/CPPConSmithThereAndBackAgain_mid.mp4" expression="full" duration="3577" fileSize="394145487" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Peter Gottschling “How bad is Meta-Programming still today?&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>When innovation-hungry programmers discovered by accident that C&#43;&#43; allows us to calculate and transform programs at compile time, an humongous hype was triggered: gigantic research projects were launched to develop self-optimizing software. Unfortunately, such software also had gigantic compile times of up to several days on parallel machines. And the syntax of template meta-programming can drive the toughest geeks into insanity. Despite this disillusion, the compiler support improved over the years and constexpr brought us a much simpler syntax.</div><div>In this light we like to ask the questions: What can, <br>should, and must we compute at compile time? Which new opportunities offer constexpr and their extension in C&#43;&#43;14? What have to be done in the classical manner still? We will discover the different techniques of meta-programming with examples of simple examples, type information, expression templates and meta-tuning. Without becoming unbearably theoretical, we will show the equivalence of constexpr in C&#43;&#43;11 and C&#43;&#43;14 and their Turing completeness.<br>— <br>Peter Gottschling<br>CEO, SimuNova<br>Peter Gottschling is founder of SimuNova, a company that works on developing the Matrix Template Library (MTL4) and offers C&#43;&#43; training. He is a member of the ISO C&#43;&#43; standards committee, vice-chair of Germany s programming language standards committee, and founder of the C&#43;&#43; User Group in Dresden. He earned his Ph.D. in computer science at Technische Universitat Dresden in 2002.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a24fec69ce364a9989d0a69b01284af3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Peter-Gottschling-How-bad-is-Meta-Programming-still-today</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Peter-Gottschling-How-bad-is-Meta-Programming-still-today</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—When innovation-hungry programmers discovered by accident that C&amp;#43;&amp;#43; allows us to calculate and transform programs at compile time, an humongous hype was triggered: gigantic research projects were launched to develop self-optimizing software. Unfortunately, such software also had gigantic compile times of up to several days on parallel machines. And the syntax of template meta-programming can drive the toughest geeks into insanity. Despite this disillusion, the compiler support improved over the years and constexpr brought us a much simpler syntax.In this light we like to ask the questions: What can, should, and must we compute at compile time? Which new opportunities offer constexpr and their extension in C&amp;#43;&amp;#43;14? What have to be done in the classical manner still? We will discover the different techniques of meta-programming with examples of simple examples, type information, expression templates and meta-tuning. Without becoming unbearably theoretical, we will show the equivalence of constexpr in C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 and their Turing completeness.— Peter GottschlingCEO, SimuNovaPeter Gottschling is founder of SimuNova, a company that works on developing the Matrix Template Library (MTL4) and offers C&amp;#43;&amp;#43; training. He is a member of the ISO C&amp;#43;&amp;#43; standards committee, vice-chair of Germany s programming language standards committee, and founder of the C&amp;#43;&amp;#43; User Group in Dresden. He earned his Ph.D. in computer science at Technische Universitat Dresden in 2002.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3655</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Peter-Gottschling-How-bad-is-Meta-Programming-still-today</guid>
    <dc:creator>Peter Gottschling</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_high.mp4" length="1550415521" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a24fec69ce364a9989d0a69b01284af3/CPPConGottschlingHowBadIsMetaProgramming.mp4" expression="full" duration="3655" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming.mp3" expression="full" duration="3655" fileSize="58489290" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming.mp4" expression="full" duration="3655" fileSize="141870008" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_high.mp4" expression="full" duration="3655" fileSize="1550415521" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a83a/81cc8bb1-59e1-473f-83fc-8842d906a83a/CPPConGottschlingHowBadIsMetaProgramming_mid.mp4" expression="full" duration="3655" fileSize="499924481" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Gabriel Dos Reis “C++ Modules: The State of The Union&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>I give a report on the progress we have made since last year on specification, standardization, implementation experience, deployment, and user experience with C&#43;&#43; modules. Looking forward, I will give a glimpse into the world of semantics-aware developer tools, including runtime reflection, made possible by C&#43;&#43; module implementation.<br>— <br>Gabriel Dos Reis<br>Principal Software Engineer, Microsoft<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0365cb7dabf5453f93fea69b012826c6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gabriel-Dos-Reis-C-Modules-The-State-of-The-Union</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gabriel-Dos-Reis-C-Modules-The-State-of-The-Union</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—I give a report on the progress we have made since last year on specification, standardization, implementation experience, deployment, and user experience with C&amp;#43;&amp;#43; modules. Looking forward, I will give a glimpse into the world of semantics-aware developer tools, including runtime reflection, made possible by C&amp;#43;&amp;#43; module implementation.— Gabriel Dos ReisPrincipal Software Engineer, Microsoft—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4175</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gabriel-Dos-Reis-C-Modules-The-State-of-The-Union</guid>
    <dc:creator>Gabriel Dos Reis</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_high.mp4" length="1705531956" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/0365cb7dabf5453f93fea69b012826c6/CPPConReisCppModules.mp4" expression="full" duration="4175" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules.mp3" expression="full" duration="4175" fileSize="66814794" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules.mp4" expression="full" duration="4175" fileSize="155104380" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_high.mp4" expression="full" duration="4175" fileSize="1705531956" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2cd/35f7a89c-c8aa-4ea2-997d-ebada43db2cd/CPPConReisCppModules_mid.mp4" expression="full" duration="4175" fileSize="518448085" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Boris Kolpackov “Using build2, C++ Build Toolchain&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>It all started with a CppCon 2014 lightning talk where I tried to convince the audience we needed a C&#43;&#43; package manager. Turned out, no convincing was necessary. Fast forward two years and we have a new build system, a package manager, and cppget.org, a repository of open source C&#43;&#43; packages. In this talk I would like to give a practical overview of what it's all about.</div><div>We start with a brief discussion of what exactly are we trying to achieve, how it is &quot;better&quot; than other solutions, and why we need yet another build system.</div><div>Then, we put on the &quot;consumer&quot; hat and see how to find packages that we are interested in and use the package manager to build/upgrade/downgrade them and their dependencies using multiple build configurations.</div><div>In the second half we look into more interesting features of the build system: out-of-source, persistent build configurations (don't you wish you could just edit them with a text editor), high-fidelity builds (what happens if I upgrade my compiler or change compile options), command-line configuration overrides (what if I want to quickly rebuild my project with clang&#43;&#43; instead of g&#43;&#43;), cross-compilation (something is wrong if it's harder to cross-compile than to build natively on Windows), subprojects and amalgamation (what if I really don't like external dependencies).</div><div>Build systems also rarely handle just building. There is testing, installation (do we really have to run the whole process as sudo), and preparation of distributions (no, shipping your .gitignore files is not cool).</div><div>We finish with a brief discussion of cppget.org: what's its future, who should control it, and what should its policies be (acceptable licenses, name disputes, etc)? <br>— <br>Boris Kolpackov<br>Code Synthesis<br>Chief Hacking Officer<br>South Africa<br>Boris Kolpackov is a founder and CHO (Chief Hacking Officer) at Code<br>Synthesis, a company focusing on the development of open-source<br>tools and libraries for C&#43;&#43;. For the past 10 years Boris has been<br>working on solving interesting problems in the context of C&#43;&#43; using<br>domain-specific languages (DSL), C&#43;&#43; parsing, source-to-source<br>translation, and code generation. His notable projects to date<br>include ODB (ORM for C&#43;&#43;), XSD and XSD/e (XML Schema to C&#43;&#43; compilers), as well as libstudxml (XML parser/serializer library for C&#43;&#43;).<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f22132a2e80947c393f0a69b0128018d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Boris-Kolpackov-Using-build2-C-Build-Toolchain</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Boris-Kolpackov-Using-build2-C-Build-Toolchain</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—It all started with a CppCon 2014 lightning talk where I tried to convince the audience we needed a C&amp;#43;&amp;#43; package manager. Turned out, no convincing was necessary. Fast forward two years and we have a new build system, a package manager, and cppget.org, a repository of open source C&amp;#43;&amp;#43; packages. In this talk I would like to give a practical overview of what it&#39;s all about.We start with a brief discussion of what exactly are we trying to achieve, how it is &amp;quot;better&amp;quot; than other solutions, and why we need yet another build system.Then, we put on the &amp;quot;consumer&amp;quot; hat and see how to find packages that we are interested in and use the package manager to build/upgrade/downgrade them and their dependencies using multiple build configurations.In the second half we look into more interesting features of the build system: out-of-source, persistent build configurations (don&#39;t you wish you could just edit them with a text editor), high-fidelity builds (what happens if I upgrade my compiler or change compile options), command-line configuration overrides (what if I want to quickly rebuild my project with clang&amp;#43;&amp;#43; instead of g&amp;#43;&amp;#43;), cross-compilation (something is wrong if it&#39;s harder to cross-compile than to build natively on Windows), subprojects and amalgamation (what if I really don&#39;t like external dependencies).Build systems also rarely handle just building. There is testing, installation (do we really have to run the whole process as sudo), and preparation of distributions (no, shipping your .gitignore files is not cool).We finish with a brief discussion of cppget.org: what&#39;s its future, who should control it, and what should its policies be (acceptable licenses, name disputes, etc)? — Boris KolpackovCode SynthesisChief Hacking OfficerSouth AfricaBoris Kolpackov is a fo</itunes:summary>
    <itunes:duration>4464</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Boris-Kolpackov-Using-build2-C-Build-Toolchain</guid>
    <dc:creator>Boris Kolpackov</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_high.mp4" length="2920378620" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f22132a2e80947c393f0a69b0128018d/CPPConKolpackovUsingBuild2.mp4" expression="full" duration="4464" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2.mp3" expression="full" duration="4464" fileSize="71427786" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2.mp4" expression="full" duration="4464" fileSize="121040511" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_high.mp4" expression="full" duration="4464" fileSize="2920378620" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5b76/093df0ee-267c-4a55-9fca-bd8d1d635b76/CPPConKolpackovUsingBuild2_mid.mp4" expression="full" duration="4464" fileSize="718611958" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Anthony Williams “The Continuing Future of C++ Concurrency&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>An overview of the additions to the standard C&#43;&#43; concurrency libraries in the Technical Specifications for Concurrency and Parallelism and the C&#43;&#43;14 and C&#43;&#43;17 standards. These additions include: continuations, latches, barriers, atomic smart pointers, shared ownership mutexes, executors, concurrent queues, distributed counters, coroutines, parallel algorithms and more.<br>— <br>Anthony Williams<br>Just Software Solutions Ltd<br>Anthony Williams is the author of C&#43;&#43; Concurrency in Action.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:99686b5ab27245daadeaa69b0127a81f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Anthony-Williams-The-Continuing-Future-of-C-Concurrency</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Anthony-Williams-The-Continuing-Future-of-C-Concurrency</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—An overview of the additions to the standard C&amp;#43;&amp;#43; concurrency libraries in the Technical Specifications for Concurrency and Parallelism and the C&amp;#43;&amp;#43;14 and C&amp;#43;&amp;#43;17 standards. These additions include: continuations, latches, barriers, atomic smart pointers, shared ownership mutexes, executors, concurrent queues, distributed counters, coroutines, parallel algorithms and more.— Anthony WilliamsJust Software Solutions LtdAnthony Williams is the author of C&amp;#43;&amp;#43; Concurrency in Action.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3908</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Anthony-Williams-The-Continuing-Future-of-C-Concurrency</guid>
    <dc:creator>Anthony Williams</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_high.mp4" length="1436210483" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/99686b5ab27245daadeaa69b0127a81f/CPPConWilliamsTheContinuingFutureOfCppConcurrency.mp4" expression="full" duration="3908" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency.mp3" expression="full" duration="3908" fileSize="62544714" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency.mp4" expression="full" duration="3908" fileSize="112437363" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_high.mp4" expression="full" duration="3908" fileSize="1436210483" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86d9/89ca604f-4ac4-4f07-8bad-fe66d2ac86d9/CPPConWilliamsTheContinuingFutureOfCppConcurrency_mid.mp4" expression="full" duration="3908" fileSize="373870744" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Timur Doumler “Want fast C++? Know your hardware!&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>As C&#43;&#43; evolves, it provides us with better and more powerful tools for optimal performance. But often, knowing the language very well is not enough. It is just as important to know your hardware. Modern computer architectures have many properties that can impact the performance of C&#43;&#43; code, such as cache locality, cache associativity, true and false sharing between cores, memory alignment, the branch predictor, the instruction pipeline, denormals, and SIMD. In this talk, I will give an overview over these properties, using C&#43;&#43; code. I will present a series of code examples, highlighting different effects, and benchmark their performance on different machines with different compilers, sometimes with surprising results. The talk will draw a picture of what every C&#43;&#43; developer needs to know about hardware architecture, provide guidelines on how to write modern C&#43;&#43; code that is cache-friendly, pipeline-friendly, and well-vectorisable, and highlight what to look for when profiling it.<br>— <br>Timur Doumler<br>ROLI Ltd.<br>JUCE Senior Software Engineer<br>London, UK<br>Timur Doumler is Senior Software Developer at London-based technology company ROLI. He is currently working on JUCE, the leading cross-platform framework for creating audio applications used by hundreds of companies in the audio industry. After five years of writing high-performance code in Fortran, C, and C&#43;&#43; for numerical simulations of the cosmic structure formation, Timur became committed to audio and music production software. Before joining ROLI, he worked on various projects at market-leading company Native Instruments, such as KONTAKT, the industry standard sampling platform used by the majority of music producers and composers for film score, games, and contemporary popular music. Timur holds a PhD in astrophysics and is passionate about well-written code, modern C&#43;&#43; techniques, science-fiction, learning languages, and progressive rock music.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ef9a08ba17fa4585ac7ea69b01277f5c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Timur-Doumler-Want-fast-C-Know-your-hardware</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Timur-Doumler-Want-fast-C-Know-your-hardware</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—As C&amp;#43;&amp;#43; evolves, it provides us with better and more powerful tools for optimal performance. But often, knowing the language very well is not enough. It is just as important to know your hardware. Modern computer architectures have many properties that can impact the performance of C&amp;#43;&amp;#43; code, such as cache locality, cache associativity, true and false sharing between cores, memory alignment, the branch predictor, the instruction pipeline, denormals, and SIMD. In this talk, I will give an overview over these properties, using C&amp;#43;&amp;#43; code. I will present a series of code examples, highlighting different effects, and benchmark their performance on different machines with different compilers, sometimes with surprising results. The talk will draw a picture of what every C&amp;#43;&amp;#43; developer needs to know about hardware architecture, provide guidelines on how to write modern C&amp;#43;&amp;#43; code that is cache-friendly, pipeline-friendly, and well-vectorisable, and highlight what to look for when profiling it.— Timur DoumlerROLI Ltd.JUCE Senior Software EngineerLondon, UKTimur Doumler is Senior Software Developer at London-based technology company ROLI. He is currently working on JUCE, the leading cross-platform framework for creating audio applications used by hundreds of companies in the audio industry. After five years of writing high-performance code in Fortran, C, and C&amp;#43;&amp;#43; for numerical simulations of the cosmic structure formation, Timur became committed to audio and music production software. Before joining ROLI, he worked on various projects at market-leading company Native Instruments, such as KONTAKT, the industry standard sampling platform used by the majority of music producers and composers for film score, games, and contemporary popular music. Timur holds a PhD in astrophys</itunes:summary>
    <itunes:duration>3583</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Timur-Doumler-Want-fast-C-Know-your-hardware</guid>
    <dc:creator>Timur Doumler</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_high.mp4" length="1759785711" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/ef9a08ba17fa4585ac7ea69b01277f5c/CPPConDoumlerWantFastCpp.mp4" expression="full" duration="3583" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp.mp3" expression="full" duration="3583" fileSize="57339594" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp.mp4" expression="full" duration="3583" fileSize="86178764" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_high.mp4" expression="full" duration="3583" fileSize="1759785711" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4848/2157968b-9220-43da-9ad2-f4d1acdf4848/CPPConDoumlerWantFastCpp_mid.mp4" expression="full" duration="3583" fileSize="285748908" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Marc Gregoire “Mobile App Development for Multiple Platforms with Visual C++, 2016&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Visual C&#43;&#43; supports mobile app development for Windows, Android, and iOS from a single code base, optionally with a thin platform-specific UI layer. The resulting binaries can be deployed to an emulator or to a real device and debugged on both, all from within Visual C&#43;&#43; . This presentation is a follow up to my session given at CppCon 2015, and as such the session will only briefly cover the basics of cross-platform mobile app development. Please view https://www.youtube.com/watch?v=2Y47g... or https://channel9.msdn.com/events/CPP/... for this material in depth. In this follow up, we go over the new features added for cross-platform development since last year. Additionally, we continue where last year's session ended, and will go deeper on how to write your applications to have a native look-and-feel UI on each of the different platforms.<br>— <br>Marc Gregoire<br>Nikon Metrology<br>Software Architect<br>Belgium<br>Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&#43;&#43;, and specifically Microsoft VC&#43;&#43; and the MFC framework. Next to C/C&#43;&#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&#43;&#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&#43;&#43; expertise. Marc is the author of &quot;Professional C&#43;&#43;, Second and Third Edition&quot;, published by Wiley/Wrox, is the founder of the Belgian C&#43;&#43; Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blog. He also creates freeware and shareware programs that are distributed through his website at www.nuonsoft.com, and maintains a blog on www.nuonsoft.com/blog/. He is also passionate about traveling and gastronomic restaurants.m<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d9f89f82004a43368117a69b0127488f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marc-Gregoire-Mobile-App-Development-for-Multiple-Platforms-with-Visual-C-2016</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marc-Gregoire-Mobile-App-Development-for-Multiple-Platforms-with-Visual-C-2016</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Visual C&amp;#43;&amp;#43; supports mobile app development for Windows, Android, and iOS from a single code base, optionally with a thin platform-specific UI layer. The resulting binaries can be deployed to an emulator or to a real device and debugged on both, all from within Visual C&amp;#43;&amp;#43; . This presentation is a follow up to my session given at CppCon 2015, and as such the session will only briefly cover the basics of cross-platform mobile app development. Please view https://www.youtube.com/watch?v=2Y47g... or https://channel9.msdn.com/events/CPP/... for this material in depth. In this follow up, we go over the new features added for cross-platform development since last year. Additionally, we continue where last year&#39;s session ended, and will go deeper on how to write your applications to have a native look-and-feel UI on each of the different platforms.— Marc GregoireNikon MetrologySoftware ArchitectBelgiumMarc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&amp;#43;&amp;#43;, and specifically Microsoft VC&amp;#43;&amp;#43; and the MFC framework. Next to C/C&amp;#43;&amp;#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&amp;#43;&amp;#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&amp;#43;&amp;#43; expertise. Marc is the author of &amp;quot;Prof</itunes:summary>
    <itunes:duration>3824</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marc-Gregoire-Mobile-App-Development-for-Multiple-Platforms-with-Visual-C-2016</guid>
    <dc:creator>Marc Gregoire</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_high.mp4" length="1303297380" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/d9f89f82004a43368117a69b0127488f/CPPConGregoireMobileAppDevelopment.mp4" expression="full" duration="3824" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment.mp3" expression="full" duration="3824" fileSize="61201098" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment.mp4" expression="full" duration="3824" fileSize="98081246" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_high.mp4" expression="full" duration="3824" fileSize="1303297380" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe35/488678c0-ac52-4434-913f-a43dbb9bfe35/CPPConGregoireMobileAppDevelopment_mid.mp4" expression="full" duration="3824" fileSize="344472534" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Michał Dominiak “Variadic expansion in examples&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Templates - and variadic templates - are an important aspect of writing a successful library in C&#43;&#43;; libraries that can deal with custom types the user creates greatly eases their use. Variadic templates specifically are still a new, relatively unknown and at the same time quite a buggy (in the sense of bugs in their implementations) tool, but nevertheless, they offer much easier ways of creating truly generic types and functions.</div><div>This talk will focus slightly less on variadic templates in general; the common pitfalls will be discussed, but more attention will be given to the tool of parameter pack expansion and all the contexts where it can be used, especially as a code generation tool.</div><div>The talk will start mostly from scratch, assuming the audience's general knowledge about templates. It'll introduce the idea of variadic templates and general syntax and typical techniques for their use. Next, it will head into the (mostly) unknown and buggy lands of the interesting uses of variadic packs, like unpacking a tuple into a function call using `std::integer_sequence`, the use of empty packs for a slightly easier way to work with `enable_if`. The final examples will explain the way of invoking an expression per every argument in a pack, and dispatch to appropriate version of code for each of the argument types based on runtime values, which will be used to more easily create variant visitors. <br>— <br>Michał Dominiak<br>Software Engineer, Nokia Networks<br>Bachelor of Engineering in Computer Science, studied at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f94fc0b8574143659e3da69b0126766d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Micha-Dominiak-Variadic-expansion-in-examples</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Micha-Dominiak-Variadic-expansion-in-examples</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Templates - and variadic templates - are an important aspect of writing a successful library in C&amp;#43;&amp;#43;; libraries that can deal with custom types the user creates greatly eases their use. Variadic templates specifically are still a new, relatively unknown and at the same time quite a buggy (in the sense of bugs in their implementations) tool, but nevertheless, they offer much easier ways of creating truly generic types and functions.This talk will focus slightly less on variadic templates in general; the common pitfalls will be discussed, but more attention will be given to the tool of parameter pack expansion and all the contexts where it can be used, especially as a code generation tool.The talk will start mostly from scratch, assuming the audience&#39;s general knowledge about templates. It&#39;ll introduce the idea of variadic templates and general syntax and typical techniques for their use. Next, it will head into the (mostly) unknown and buggy lands of the interesting uses of variadic packs, like unpacking a tuple into a function call using `std::integer_sequence`, the use of empty packs for a slightly easier way to work with `enable_if`. The final examples will explain the way of invoking an expression per every argument in a pack, and dispatch to appropriate version of code for each of the argument types based on runtime values, which will be used to more easily create variant visitors. — Michał DominiakSoftware Engineer, Nokia NetworksBachelor of Engineering in Computer Science, studied at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2586</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Micha-Dominiak-Variadic-expansion-in-examples</guid>
    <dc:creator>Michał Dominiak</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_high.mp4" length="472258185" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f94fc0b8574143659e3da69b0126766d/CPPConDominiakVariadicExpansionInExamples.mp4" expression="full" duration="2586" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples.mp3" expression="full" duration="2586" fileSize="41387466" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples.mp4" expression="full" duration="2586" fileSize="55446998" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_high.mp4" expression="full" duration="2586" fileSize="472258185" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f32e/9ae94aa8-fb95-4de0-909a-cb85ed32f32e/CPPConDominiakVariadicExpansionInExamples_mid.mp4" expression="full" duration="2586" fileSize="145443015" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Steven Breitstein “BDE Libraries, An Orientation&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>The BDE libraries, https://github.com/bloomberg/bde, provide a wide range of <br>useful functionality and also showcase the design and testing principles long <br>advocated by John Lakos (see Lakos '96, CppCpon 201[456]): <br>Fine-grained, hierarchical reusable (physical) components <br>Focused component purposes based on well-defined class categories. <br>Use of library facilities to implement effective Defensive Programming. <br>Ubiquitous support for a user-supplied memory--allocation mechanisms. <br>Design by (appropriately narrow) contracts. <br>After an outline of the functionality provided (e.g., date/time classes, <br>logging), this talk recaps the above Lakosian ideas, and shows, through BDE <br>documentation and code examples, how the ideas above influence the use of BDE libraries in applications.<br>— <br>Steven Breitstein<br>Engineer, Bloomberg LP<br>Professional Experience | Bloomberg, 10 years | Bell Labs, 20 years | Education | Graduate: M.I.T. | Undergraduate: City College of New York<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7d2410be01ed49cba1b7a69b012656ec">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Steven-Breitstein-BDE-Libraries-An-Orientation</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Steven-Breitstein-BDE-Libraries-An-Orientation</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—The BDE libraries, https://github.com/bloomberg/bde, provide a wide range of useful functionality and also showcase the design and testing principles long advocated by John Lakos (see Lakos &#39;96, CppCpon 201[456]): Fine-grained, hierarchical reusable (physical) components Focused component purposes based on well-defined class categories. Use of library facilities to implement effective Defensive Programming. Ubiquitous support for a user-supplied memory--allocation mechanisms. Design by (appropriately narrow) contracts. After an outline of the functionality provided (e.g., date/time classes, logging), this talk recaps the above Lakosian ideas, and shows, through BDE documentation and code examples, how the ideas above influence the use of BDE libraries in applications.— Steven BreitsteinEngineer, Bloomberg LPProfessional Experience | Bloomberg, 10 years | Bell Labs, 20 years | Education | Graduate: M.I.T. | Undergraduate: City College of New York—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3750</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Steven-Breitstein-BDE-Libraries-An-Orientation</guid>
    <dc:creator>Steven Breitstein</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_high.mp4" length="1175857091" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/7d2410be01ed49cba1b7a69b012656ec/CPPConBreitsteinBDELibrariesAnOrientation.mp4" expression="full" duration="3750" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation.mp3" expression="full" duration="3750" fileSize="60008778" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation.mp4" expression="full" duration="3750" fileSize="89369745" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_high.mp4" expression="full" duration="3750" fileSize="1175857091" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acf3/58400a24-6e6a-4088-9291-73d70822acf3/CPPConBreitsteinBDELibrariesAnOrientation_mid.mp4" expression="full" duration="3750" fileSize="274475373" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Jason Turner “Practical Performance Practices&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In the past 6 years ChaiScript's performance has been improved by nearly 100x. This was not accomplished by adding a virtual machine or performing dynamic recompilation. Instead, these increases have been accomplished by moving to more simple, cleaner, idiomatic C&#43;&#43; and by following some simple rules. We will outline these concepts with examples for how they both simplified code while improving performance. <br>— <br>Jason Turner<br>Developer, Trainer, Speaker<br>Host of C&#43;&#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&#43;&#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. I'm available for contracting and onsite training.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3a2110cbf0b647e3a698a69b0125989c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Practical-Performance-Practices</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Practical-Performance-Practices</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In the past 6 years ChaiScript&#39;s performance has been improved by nearly 100x. This was not accomplished by adding a virtual machine or performing dynamic recompilation. Instead, these increases have been accomplished by moving to more simple, cleaner, idiomatic C&amp;#43;&amp;#43; and by following some simple rules. We will outline these concepts with examples for how they both simplified code while improving performance. — Jason TurnerDeveloper, Trainer, SpeakerHost of C&amp;#43;&amp;#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&amp;#43;&amp;#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. I&#39;m available for contracting and onsite training.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3628</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Practical-Performance-Practices</guid>
    <dc:creator>Jason Turner</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_high.mp4" length="1385013419" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/3a2110cbf0b647e3a698a69b0125989c/CPPConTurnerPracticalPerformancePractices.mp4" expression="full" duration="3628" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices.mp3" expression="full" duration="3628" fileSize="58061514" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices.mp4" expression="full" duration="3628" fileSize="105619139" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_high.mp4" expression="full" duration="3628" fileSize="1385013419" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d546/ade84ebc-19ef-475e-a9b5-13ae5b53d546/CPPConTurnerPracticalPerformancePractices_mid.mp4" expression="full" duration="3628" fileSize="332160639" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Erik Smith “A modern database interface for C++&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>C&#43;&#43; has historically had many options for database connectivity but has lacked a standard interface that other languages, such as Java, have had for a long time. This talk will present a standards grade interface along with experience with a reference implementation that includes support for at least 6 databases. A key aspect of the design is to show how modern C&#43;&#43; features can be used to achieve a high degree of both efficiency and ease-of-use. Specific features to be covered will include type conversion, connection pooling, I/O binding for scalars and arrays, row sets, direct/polymorphic interfaces, policy based design, the driver interface, and details on the implementation. Forward looking standards proposals, such as ranges and variants, will also be included in the discussion. <br>— <br>Erik Smith<br>Engineering Manager, TranscendInsights<br>Erik Smith is a member of the clinical analytics team at Transcend Insights in San Diego. Erik is a specialist in building high performance full stack applications. He is a co-founder of AppFluent, a maker of database caching technology and analytic monitoring software. He has a diverse background in the development of C&#43;&#43; applications involving database interfaces and in the implementation of database engines.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:093e376f25e2432d9d3da69b012577d7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Erik-Smith-A-modern-database-interface-for-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Erik-Smith-A-modern-database-interface-for-C</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—C&amp;#43;&amp;#43; has historically had many options for database connectivity but has lacked a standard interface that other languages, such as Java, have had for a long time. This talk will present a standards grade interface along with experience with a reference implementation that includes support for at least 6 databases. A key aspect of the design is to show how modern C&amp;#43;&amp;#43; features can be used to achieve a high degree of both efficiency and ease-of-use. Specific features to be covered will include type conversion, connection pooling, I/O binding for scalars and arrays, row sets, direct/polymorphic interfaces, policy based design, the driver interface, and details on the implementation. Forward looking standards proposals, such as ranges and variants, will also be included in the discussion. — Erik SmithEngineering Manager, TranscendInsightsErik Smith is a member of the clinical analytics team at Transcend Insights in San Diego. Erik is a specialist in building high performance full stack applications. He is a co-founder of AppFluent, a maker of database caching technology and analytic monitoring software. He has a diverse background in the development of C&amp;#43;&amp;#43; applications involving database interfaces and in the implementation of database engines.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3922</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Erik-Smith-A-modern-database-interface-for-C</guid>
    <dc:creator>Erik Smith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/cf5a/98339214-cfec-4972-a93a-8ed33dfdcf5a/CPPConSmithAModernDatabaseInterfaceForCpp.mp4" length="90593051" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/cf5a/98339214-cfec-4972-a93a-8ed33dfdcf5a/CPPConSmithAModernDatabaseInterfaceForCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cf5a/98339214-cfec-4972-a93a-8ed33dfdcf5a/CPPConSmithAModernDatabaseInterfaceForCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cf5a/98339214-cfec-4972-a93a-8ed33dfdcf5a/CPPConSmithAModernDatabaseInterfaceForCpp_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/093e376f25e2432d9d3da69b012577d7/CPPConSmithAModernDatabaseInterfaceForCpp.mp4" expression="full" duration="3922" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf5a/98339214-cfec-4972-a93a-8ed33dfdcf5a/CPPConSmithAModernDatabaseInterfaceForCpp.mp4" expression="full" duration="3922" fileSize="90593051" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Alex Olivas “Turning Particle-Astro-Physicist-Hackers into Software Engineers&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Want to increase software literacy in your organization? In this talk I'll present programs I've developed over the last year to teach C&#43;&#43; software engineering principles to graduate students and postdocs on the IceCube South Pole Neutrino Observatory. I believe similar programs could be beneficial to all types of organizations, from scientific collaborations to professional software shops.</div><div>IceCube is a kilometer-scale high energy neutrino observatory located deep in the Antarctic ice at the geographic South Pole. IceCube studies physics in energy regimes ranging from the most energetic processes in the visible universe (several orders of magnitude greater than the collision energies at the Large Hadron Collider), to dark matter detection at the 100 GeV scale. It is a relatively large collaboration, consisting of roughly 300 physicists and engineers from 48 institutions from a dozen different countries. IceCube has been collecting data for over 11 years (going into our 6th season with the fully completed detector) and is expected to run for at least another decade.</div><div>Many large scientific projects, which often run for decades, rely on code developed by hackers, who's focus and passion is rarely software engineering. Their primary passion, understandably, is the field for which they found themselves writing code. To make matters worse, the amount of work and focus required to secure a career in their chosen field often leaves little time and energy to devote to honing the skills needed to develop production quality code. Many students and postdocs often have, at best, a cursory understanding of the programming language(s) that comprise the experiment's codebase.</div><div>C&#43;&#43; has become the primary programming language for High Energy Physics (HEP) and will likely continue to be for decades to come. Consider, for example, that ROOT, GEANT, and Pythia to name a few critical HEP libraries are written in C&#43;&#43;. Over the last year on IceCube, I've developed several comprehensive internal training programs in an attempt to bridge the gap between the scientist-hacker and the professional C&#43;&#43; software engineer. In this session I'd like to present the challenges I've encountered over the last year and my plans for extending these programs to the High Energy Physics community through the HEP Software Foundation.<br>— <br>Alex Olivas<br>IceCube Software Coordinator, U. Maryland/IceCube<br>I've been working for the University of Maryland at College Park for over 10 years on the IceCube project (a neutrino telescope at the South Pole), but am lucky enough to be able to work from the Rocky Mountains of Colorado. Though my background is in High Energy Physics, these days I focus mostly on software development as the head of IceCube's simulation group.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:538f3a9853c44a42a9d8a69b01255b41">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alex-Olivas-Turning-Particle-Astro-Physicist-Hackers-into-Software-Engineers</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alex-Olivas-Turning-Particle-Astro-Physicist-Hackers-into-Software-Engineers</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Want to increase software literacy in your organization? In this talk I&#39;ll present programs I&#39;ve developed over the last year to teach C&amp;#43;&amp;#43; software engineering principles to graduate students and postdocs on the IceCube South Pole Neutrino Observatory. I believe similar programs could be beneficial to all types of organizations, from scientific collaborations to professional software shops.IceCube is a kilometer-scale high energy neutrino observatory located deep in the Antarctic ice at the geographic South Pole. IceCube studies physics in energy regimes ranging from the most energetic processes in the visible universe (several orders of magnitude greater than the collision energies at the Large Hadron Collider), to dark matter detection at the 100 GeV scale. It is a relatively large collaboration, consisting of roughly 300 physicists and engineers from 48 institutions from a dozen different countries. IceCube has been collecting data for over 11 years (going into our 6th season with the fully completed detector) and is expected to run for at least another decade.Many large scientific projects, which often run for decades, rely on code developed by hackers, who&#39;s focus and passion is rarely software engineering. Their primary passion, understandably, is the field for which they found themselves writing code. To make matters worse, the amount of work and focus required to secure a career in their chosen field often leaves little time and energy to devote to honing the skills needed to develop production quality code. Many students and postdocs often have, at best, a cursory understanding of the programming language(s) that comprise the experiment&#39;s codebase.C&amp;#43;&amp;#43; has become the primary programming language for High Energy Physics (HEP) and will likely continue to be for decades to come. Con</itunes:summary>
    <itunes:duration>3958</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alex-Olivas-Turning-Particle-Astro-Physicist-Hackers-into-Software-Engineers</guid>
    <dc:creator>Alex Olivas</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_high.mp4" length="933364267" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/538f3a9853c44a42a9d8a69b01255b41/CPPConOlivasCppAtTheSouthPole.mp4" expression="full" duration="3958" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole.mp3" expression="full" duration="3958" fileSize="63343818" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole.mp4" expression="full" duration="3958" fileSize="99391759" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_high.mp4" expression="full" duration="3958" fileSize="933364267" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/be6c/69f353d5-b819-4a6c-b32d-d2b5735fbe6c/CPPConOlivasCppAtTheSouthPole_mid.mp4" expression="full" duration="3958" fileSize="267146616" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Patrice Roy “The Exception Situation&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Exceptions have been a part of C&#43;&#43; for a long time now, and they are not going away. They allow programmers to concentrate on the meaningful parts of their code and treat the things that happen infrequently as... well, exceptional situations, to be dealt with when and where the context makes it reasonable or useful.</div><div>On the other hand, some significant parts of the C&#43;&#43; programming community either dislike this mechanism or outright reject it, for a number of reasons. Work in SG14 has raised performance issues in some cases; there are those who dislike the additional execution paths introduced in programs that rely on exceptions; some programmers raised issues with respect to exceptions and tooling, integration with older codebases, writing robust generic code, etc.</div><div>This talk will be neither for not against exceptions. It will present a perspective on cases where they make sense, cases where they are less appropriate, alternative disappointment handling techniques presented along with client code in order to show how the various approaches influence the way code is written. Performance measurements will be given along the way. Some creative uses of exceptions will also be presented in order to spark ideas and discussions in the room.<br>— <br>Patrice Roy<br>Université de Sherbrooke<br>Professor<br>Sherbrooke (Québec), Canada<br>Patrice Roy has been playing with C&#43;&#43;, either professionally, for pleasure or (most of the time) both for over 20 years. After a few years doing R&amp;D and working on military flight simulators, he moved on to academics and has been teaching computer science since 1998. Since 2005, he's been involved more specifically in helping graduate students and professionals from the fields of real-time systems and game programming develop the skills they need to face today's challenges. The rapid evolution of C&#43;&#43; in recent years has made his job even more enjoyable. He's been a participating member in the ISO C&#43;&#43; Standards Committee since late 2014 and has been involved with the ISO Programming Language Vulnerabilities since late 2015. He has five kids, and his wife ensures their house is home to a continuously changing number of cats, dogs and other animals.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6068e944d1dd47dcbb60a69b01252e5a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Patrice-Roy-The-Exception-Situation</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Patrice-Roy-The-Exception-Situation</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Exceptions have been a part of C&amp;#43;&amp;#43; for a long time now, and they are not going away. They allow programmers to concentrate on the meaningful parts of their code and treat the things that happen infrequently as... well, exceptional situations, to be dealt with when and where the context makes it reasonable or useful.On the other hand, some significant parts of the C&amp;#43;&amp;#43; programming community either dislike this mechanism or outright reject it, for a number of reasons. Work in SG14 has raised performance issues in some cases; there are those who dislike the additional execution paths introduced in programs that rely on exceptions; some programmers raised issues with respect to exceptions and tooling, integration with older codebases, writing robust generic code, etc.This talk will be neither for not against exceptions. It will present a perspective on cases where they make sense, cases where they are less appropriate, alternative disappointment handling techniques presented along with client code in order to show how the various approaches influence the way code is written. Performance measurements will be given along the way. Some creative uses of exceptions will also be presented in order to spark ideas and discussions in the room.— Patrice RoyUniversit&#233; de SherbrookeProfessorSherbrooke (Qu&#233;bec), CanadaPatrice Roy has been playing with C&amp;#43;&amp;#43;, either professionally, for pleasure or (most of the time) both for over 20 years. After a few years doing R&amp;amp;D and working on military flight simulators, he moved on to academics and has been teaching computer science since 1998. Since 2005, he&#39;s been involved more specifically in helping graduate students and professionals from the fields of real-time systems and game programming develop the skills they need to face today&#39;s challenges. The r</itunes:summary>
    <itunes:duration>3521</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Patrice-Roy-The-Exception-Situation</guid>
    <dc:creator>Patrice Roy</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_high.mp4" length="1386906948" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/6068e944d1dd47dcbb60a69b01252e5a/CPPConRoyTheExceptionSituation.mp4" expression="full" duration="3521" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation.mp3" expression="full" duration="3521" fileSize="56339274" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation.mp4" expression="full" duration="3521" fileSize="113557237" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_high.mp4" expression="full" duration="3521" fileSize="1386906948" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3dee/bd4891ad-aeaa-45cf-8f6c-8dd15b0e3dee/CPPConRoyTheExceptionSituation_mid.mp4" expression="full" duration="3521" fileSize="402587670" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: James McNellis “Introduction to C++ Coroutines&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>One of the most interesting new features being proposed for C&#43;&#43; standardization is coroutines, formerly known as &quot;resumable functions&quot;. C&#43;&#43; coroutines are designed to be highly scalable, highly efficient (no overhead), and highly extensible, while still interacting seamlessly with the rest of the C&#43;&#43; language.</div><div>This session will consist of an in-depth introduction to C&#43;&#43; coroutines. We will begin by looking at the rationale for adding coroutines to the C&#43;&#43; language. We will then demonstrate and explain a sequence of coroutines that gradually introduce the features of C&#43;&#43; coroutines. This part of the talk will show both how to write various forms of coroutines and also how the coroutines extensibility model enables existing libraries to be non-invasively adapted to work with C&#43;&#43; coroutines.<br>— <br>James McNellis<br>Senior Software Engineer, Microsoft Visual C&#43;&#43;<br>James McNellis is a senior engineer on the Visual C&#43;&#43; team at Microsoft, where he works on C&#43;&#43; library design and is responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. He can be found on Twitter at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1924ffc8ca1143e08168a69b0124e4fe">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-James-McNellis-Introduction-to-C-Coroutines</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-James-McNellis-Introduction-to-C-Coroutines</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—One of the most interesting new features being proposed for C&amp;#43;&amp;#43; standardization is coroutines, formerly known as &amp;quot;resumable functions&amp;quot;. C&amp;#43;&amp;#43; coroutines are designed to be highly scalable, highly efficient (no overhead), and highly extensible, while still interacting seamlessly with the rest of the C&amp;#43;&amp;#43; language.This session will consist of an in-depth introduction to C&amp;#43;&amp;#43; coroutines. We will begin by looking at the rationale for adding coroutines to the C&amp;#43;&amp;#43; language. We will then demonstrate and explain a sequence of coroutines that gradually introduce the features of C&amp;#43;&amp;#43; coroutines. This part of the talk will show both how to write various forms of coroutines and also how the coroutines extensibility model enables existing libraries to be non-invasively adapted to work with C&amp;#43;&amp;#43; coroutines.— James McNellisSenior Software Engineer, Microsoft Visual C&amp;#43;&amp;#43;James McNellis is a senior engineer on the Visual C&amp;#43;&amp;#43; team at Microsoft, where he works on C&amp;#43;&amp;#43; library design and is responsible for the Microsoft C Runtime (CRT) and C Standard Library implementation. He can be found on Twitter at @JamesMcNellis and can be found elsewhere online via http://www.jamesmcnellis.com.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3482</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-James-McNellis-Introduction-to-C-Coroutines</guid>
    <dc:creator>James McNellis</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_high.mp4" length="1427452259" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1924ffc8ca1143e08168a69b0124e4fe/CPPConMcNellisIntroductionToCppCoroutines.mp4" expression="full" duration="3482" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines.mp3" expression="full" duration="3482" fileSize="55717578" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines.mp4" expression="full" duration="3482" fileSize="92909403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_high.mp4" expression="full" duration="3482" fileSize="1427452259" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/02a9/77ce9d8d-9c01-436e-88fc-b9f2d88002a9/CPPConMcNellisIntroductionToCppCoroutines_mid.mp4" expression="full" duration="3482" fileSize="346856713" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Greg Law “GDB - A Lot More Than You Knew&quot; </title>
    <description><![CDATA[<p>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>If you're writing C&#43;&#43; for anything other than Windows, chances are that you occasionally break out GDB. This session presents some of the lesser known features of GDB that can change the way you debug. GDB has come a long way in the last few years and now does so much more than break, print, step and continue. Reversible debugging; Non-Stop Mode; Multi-process Debugging; and Dynamic Printf are but some of its best features, and its built-in Python scripting is particularly powerful. Join Undo co-founder and CEO, Greg Law, as he takes you through a series of demos to show some amazing tricks with GDB and some of its powerful new (and not-so-new) features that you may not have heard of.<br>— <br>Greg Law<br>CEO, Undo Ltd<br>Greg is a software geek at heart, but likes to keep one foot in the software world and one foot in the business world. He finds it particularly rewarding to turn innovative software technology into &quot;real&quot; business development. Greg has over 20 years of experience in both academia and innovative start-up software companies. In 2005 he co-founded Undo Software, which he now runs.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a46ea7fce5cb48d98619a69b01249589">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Greg-Law-GDB-A-Lot-More-Than-You-Knew</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Greg-Law-GDB-A-Lot-More-Than-You-Knew</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—If you&#39;re writing C&amp;#43;&amp;#43; for anything other than Windows, chances are that you occasionally break out GDB. This session presents some of the lesser known features of GDB that can change the way you debug. GDB has come a long way in the last few years and now does so much more than break, print, step and continue. Reversible debugging; Non-Stop Mode; Multi-process Debugging; and Dynamic Printf are but some of its best features, and its built-in Python scripting is particularly powerful. Join Undo co-founder and CEO, Greg Law, as he takes you through a series of demos to show some amazing tricks with GDB and some of its powerful new (and not-so-new) features that you may not have heard of.— Greg LawCEO, Undo LtdGreg is a software geek at heart, but likes to keep one foot in the software world and one foot in the business world. He finds it particularly rewarding to turn innovative software technology into &amp;quot;real&amp;quot; business development. Greg has over 20 years of experience in both academia and innovative start-up software companies. In 2005 he co-founded Undo Software, which he now runs.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3548</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Greg-Law-GDB-A-Lot-More-Than-You-Knew</guid>
    <dc:creator>Greg Law</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_high.mp4" length="1797217581" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a46ea7fce5cb48d98619a69b01249589/CPPConLawGDB.mp4" expression="full" duration="3548" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB.mp3" expression="full" duration="3548" fileSize="56770506" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB.mp4" expression="full" duration="3548" fileSize="90696546" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_high.mp4" expression="full" duration="3548" fileSize="1797217581" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cf56/6b870c18-f64e-4e55-931d-d798a751cf56/CPPConLawGDB_mid.mp4" expression="full" duration="3548" fileSize="329086130" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Nicolas Guillemot “SPMD Programming Using C++ and ISPC&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Love writing blazing fast SIMD code on CPU? Tired of dealing with ugly intrinsics and clumsy SIMD float4 classes? Has your compiler's auto-vectorization ever stopped working, causing unpredictable performance regressions? Wish you could write efficient SIMD code without locking yourself into a specific instruction set, while still taking advantage of a range of hardware from old desktops to new Intel Xeon Phi rigs?</div><div>The solution is here, and it's called SPMD!</div><div>SPMD is an elegant parallel programming technique for writing SIMD code, which automates the tedious constructions normally required when using intrinsics or assembly, breaks free of ties to specific instruction sets, and still allows you to work at the granularity of SIMD vectors when necessary.</div><div>This talk will first review the underlying theory of SPMD, then introduce the ISPC programming language as an example of what SPMD code looks like. We'll also look at how SPMD is used on GPUs like AMD's GCN. Finally, we will see how SPMD code can be written in unextended C&#43;&#43;.<br>— <br>Nicolas Guillemot<br>MSc Student, University of Victoria<br>Hi, nice to meet you! My name is Nicolas, and my main interests are game development, real-time rendering, graphics hardware and graphics APIs. I tackle problems at the intersection of designing efficient computer algorithms and leveraging the strengths of hardware. My favorite thing about C&#43;&#43; is that it lets me write detailed systems-level code and high-level GUI code together in a single robust language.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:01ee7cd7088a4ab1883aa69b0124754f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Guillemot-SPMD-Programming-Using-C-and-ISPC</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Guillemot-SPMD-Programming-Using-C-and-ISPC</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Love writing blazing fast SIMD code on CPU? Tired of dealing with ugly intrinsics and clumsy SIMD float4 classes? Has your compiler&#39;s auto-vectorization ever stopped working, causing unpredictable performance regressions? Wish you could write efficient SIMD code without locking yourself into a specific instruction set, while still taking advantage of a range of hardware from old desktops to new Intel Xeon Phi rigs?The solution is here, and it&#39;s called SPMD!SPMD is an elegant parallel programming technique for writing SIMD code, which automates the tedious constructions normally required when using intrinsics or assembly, breaks free of ties to specific instruction sets, and still allows you to work at the granularity of SIMD vectors when necessary.This talk will first review the underlying theory of SPMD, then introduce the ISPC programming language as an example of what SPMD code looks like. We&#39;ll also look at how SPMD is used on GPUs like AMD&#39;s GCN. Finally, we will see how SPMD code can be written in unextended C&amp;#43;&amp;#43;.— Nicolas GuillemotMSc Student, University of VictoriaHi, nice to meet you! My name is Nicolas, and my main interests are game development, real-time rendering, graphics hardware and graphics APIs. I tackle problems at the intersection of designing efficient computer algorithms and leveraging the strengths of hardware. My favorite thing about C&amp;#43;&amp;#43; is that it lets me write detailed systems-level code and high-level GUI code together in a single robust language.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3491</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Nicolas-Guillemot-SPMD-Programming-Using-C-and-ISPC</guid>
    <dc:creator>Nicolas Guillemot</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_high.mp4" length="1036796341" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/01ee7cd7088a4ab1883aa69b0124754f/CPPConGuillemotSPMDProgrammingUsingCpp.mp4" expression="full" duration="3491" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp.mp3" expression="full" duration="3491" fileSize="55858890" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp.mp4" expression="full" duration="3491" fileSize="77525413" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_high.mp4" expression="full" duration="3491" fileSize="1036796341" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9022/fa9c08e7-3cd9-407e-938f-0e95c1d09022/CPPConGuillemotSPMDProgrammingUsingCpp_mid.mp4" expression="full" duration="3491" fileSize="249368099" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: “A lock-free concurrency toolkit for deferred reclamation and optimistic speculation&quot; </title>
    <description><![CDATA[<div>Published on Oct 2, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Paul E. McKenney, Maged Michael, &amp; Michael Wong</div><div>This talk introduces the concept of a Concurrency Toolkit that contains the proposed lock-free algorithms on Hazard Pointers and Read-Copy_Update and analyzes their motivation, while showing where they can be useful and their performance differences. <br>Under optimistic concurrency, threads may use shared resources concurrently with other threads that may make such resources unavailable for further use. Care must be taken to reclaim such resources only after it is guaranteed that no threads are concurrently using them or will subsequently use them.</div><div>More specifically, concurrent dynamic data structures that employ optimistic concurrency allow threads to access dynamic objects concurrently with threads that may remove such objects. Without proper precautions, it is generally unsafe to reclaim the removed objects, as they may yet be accessed by threads that hold references to them. Solutions for the safe reclamation problem can also be used to prevent the ABA problem, a common problem under optimistic concurrency.</div><div>There are several methods for safe deferred reclamation. The main methods are garbage collection, reference counting, RCU (read-copy-update), and hazard pointers. Each method has its pros and cons and none of the methods provides the best features in all cases. Therefore, it is desirable to offer users the opportunity to choose the most suitable methods for their use cases.</div><div>This talk will show why we are considering their inclusion (with the exception of garbage collection) in future C&#43;&#43; Standards under SG14/SG1 into the Concurrency TS.<br>— <br>Paul E. McKenney<br>IBM Linux Technology Center<br>Distinguished Engineer<br>Hillsboro, OR, USA<br>Websiterdrop.com/~paulmck<br>Paul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware, where his work has earned him a reputation among some as a flaming heretic. Over the past decade, Paul has been an IBM Distinguished Engineer at the IBM Linux Technology Center. Paul maintains the RCU implementation within the Linux kernel, where the variety of workloads present highly entertaining performance, scalability, real-time response, and energy-efficiency challenges. Prior to that, he worked on the DYNIX/ptx kernel at Sequent, and prior to that on packet-radio and Internet protocols (but long before it was polite to mention Internet at cocktail parties), system administration, business applications, and real-time systems. His hobbies include what passes for running at his age along with the usual house-wife-and-kids habit.</div><div>Maged Michael<br>Facebook<br>New York<br>Maged Michael is a software engineer at Facebook. He is the inventor of hazard pointers, lock-free malloc and several algorithms for concurrent data structures. His work is included in several IBM products where he was a Research Staff Member at the IBM T.J. Watson Research Center. He received a Ph.D. in computer science from the University of Rochester. He is an ACM Distinguished Scientist and an ACM Distinguished Speaker. He is an elected member of the Connecticut Academy of Science and Engineering. He received the 2014 ACM SIGPLAN Most Influential PLDI Paper Award for his paper on Scalable Lock-Free Dynamic Memory Allocation.</div><div>Michael Wong<br>Codeplay Software/ISOCPP<br>VP of R&amp;D/Director<br>Michael Wong is the CEO of OpenMP. He is the Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. He is also a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, it's a wonder he can get anything done.<br>He chairs the WG21 SG5 Transactional Memory and SG14 Games Development/Low Latency, and is the co-author of a number C&#43;&#43;11/OpenMP/Transactional Memory features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBM's XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo.</div><div>He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, ADC&#43;&#43;, CASCON, Bloomberg, CERN, and many Universities, research centers and companies.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7f87a2be696641ac82cba69b01244b6d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-A-lock-free-concurrency-toolkit-for-deferred-reclamation-and-optimistic-speculation</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-A-lock-free-concurrency-toolkit-for-deferred-reclamation-and-optimistic-speculation</link>
    <itunes:summary>Published on Oct 2, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Paul E. McKenney, Maged Michael, &amp;amp; Michael WongThis talk introduces the concept of a Concurrency Toolkit that contains the proposed lock-free algorithms on Hazard Pointers and Read-Copy_Update and analyzes their motivation, while showing where they can be useful and their performance differences. Under optimistic concurrency, threads may use shared resources concurrently with other threads that may make such resources unavailable for further use. Care must be taken to reclaim such resources only after it is guaranteed that no threads are concurrently using them or will subsequently use them.More specifically, concurrent dynamic data structures that employ optimistic concurrency allow threads to access dynamic objects concurrently with threads that may remove such objects. Without proper precautions, it is generally unsafe to reclaim the removed objects, as they may yet be accessed by threads that hold references to them. Solutions for the safe reclamation problem can also be used to prevent the ABA problem, a common problem under optimistic concurrency.There are several methods for safe deferred reclamation. The main methods are garbage collection, reference counting, RCU (read-copy-update), and hazard pointers. Each method has its pros and cons and none of the methods provides the best features in all cases. Therefore, it is desirable to offer users the opportunity to choose the most suitable methods for their use cases.This talk will show why we are considering their inclusion (with the exception of garbage collection) in future C&amp;#43;&amp;#43; Standards under SG14/SG1 into the Concurrency TS.— Paul E. McKenneyIBM Linux Technology CenterDistinguished EngineerHillsboro, OR, USAWebsiterdrop.com/~paulmckPaul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware,</itunes:summary>
    <itunes:duration>3289</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-A-lock-free-concurrency-toolkit-for-deferred-reclamation-and-optimistic-speculation</guid>
    <dc:creator>Michael Wong, Paul E. McKenney, Maged Michael</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_high.mp4" length="1931800132" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/7f87a2be696641ac82cba69b01244b6d/CPPConALockFreeConcurrencyToolkit.mp4" expression="full" duration="3289" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit.mp3" expression="full" duration="3289" fileSize="52626378" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit.mp4" expression="full" duration="3289" fileSize="85520269" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_high.mp4" expression="full" duration="3289" fileSize="1931800132" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e4e/cecf5884-9657-4de7-9d41-7eb1c2e54e4e/CPPConALockFreeConcurrencyToolkit_mid.mp4" expression="full" duration="3289" fileSize="392371363" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Ben Deane &quot;std::accumulate: Exploring an Algorithmic Empire&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>What is the most powerful algorithm in the STL? In the world? There are many cases to be made. But this talk explores what I think is a pretty good candidate, which C&#43;&#43; calls std::accumulate(). Tucked away in ＜numeric＞, perhaps relatively unregarded when compared with workhorses like std::find_if() and std::partition(); nevertheless, std::accumulate() is in some sense the ur-algorithm on sequences.</div><div>Let's explore the result of looking at code through an accumulate-shaped lens, how tweaking the algorithm for better composability can unlock many more uses, and how it can be further genericized with applications to parallelism, tree structures, and heterogeneous sequences.</div><div>std::accumulate(): it's not just for adding things up!<br>— <br>Ben Deane<br>Principal Software Engineer, Blizzard Entertainment<br>Ben has been writing games for almost 20 years, and in C&#43;&#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He's always looking for useful new techniques in C&#43;&#43;, and he likes functional programming.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:0297bb1c105c4a59905fa69b0124032a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-stdaccumulate-Exploring-an-Algorithmic-Empire</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-stdaccumulate-Exploring-an-Algorithmic-Empire</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—What is the most powerful algorithm in the STL? In the world? There are many cases to be made. But this talk explores what I think is a pretty good candidate, which C&amp;#43;&amp;#43; calls std::accumulate(). Tucked away in ＜numeric＞, perhaps relatively unregarded when compared with workhorses like std::find_if() and std::partition(); nevertheless, std::accumulate() is in some sense the ur-algorithm on sequences.Let&#39;s explore the result of looking at code through an accumulate-shaped lens, how tweaking the algorithm for better composability can unlock many more uses, and how it can be further genericized with applications to parallelism, tree structures, and heterogeneous sequences.std::accumulate(): it&#39;s not just for adding things up!— Ben DeanePrincipal Software Engineer, Blizzard EntertainmentBen has been writing games for almost 20 years, and in C&amp;#43;&amp;#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He&#39;s always looking for useful new techniques in C&amp;#43;&amp;#43;, and he likes functional programming.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3253</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Ben-Deane-stdaccumulate-Exploring-an-Algorithmic-Empire</guid>
    <dc:creator>Ben Deane</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_high.mp4" length="1342612062" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/0297bb1c105c4a59905fa69b0124032a/CPPConDeaneSTDAccumulate.mp4" expression="full" duration="3253" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate.mp3" expression="full" duration="3253" fileSize="52062666" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate.mp4" expression="full" duration="3253" fileSize="79696543" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_high.mp4" expression="full" duration="3253" fileSize="1342612062" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1c13/9560faee-1aaa-4e29-8d15-a70f93b71c13/CPPConDeaneSTDAccumulate_mid.mp4" expression="full" duration="3253" fileSize="294297421" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Edouard Alligand &amp; Joel Falcou “Two practical applications of the Brigand TMP library&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Metaprogramming isn't always easy to apprehend and the purpose of this talk is to show through the resolution of two real life problems where it can be applied to increase productivity and reliability. The first case study will exhibit how we can use TMP to allocate at compile time the required memory for serializing simple structures such as a pair of integers. The second case study will be about generating a memory layout for array of structures perfectly fit for the targeted platform. The examples are based on the Brigand TMP library and will be an opportunity to see how MP constructs such as collection of types and compile time algorithms are made and when they should be used. The talk might contain obscure jokes related to pastries naming.<br>— <br>Edouard Alligand<br>quasardb<br>CEO<br>Paris, France<br>Edouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France.</div><div>Joel Falcou<br>CTO, NUMSCALE<br>Joel Falcou is NumScale CTO. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. | | He is also an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d'Informatique in Orsay, France.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f80a3c462bcf44c6bed9a69b0123d4bc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Edouard-Alligand--Joel-Falcou-Two-practical-applications-of-the-Brigand-TMP-library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Edouard-Alligand--Joel-Falcou-Two-practical-applications-of-the-Brigand-TMP-library</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Metaprogramming isn&#39;t always easy to apprehend and the purpose of this talk is to show through the resolution of two real life problems where it can be applied to increase productivity and reliability. The first case study will exhibit how we can use TMP to allocate at compile time the required memory for serializing simple structures such as a pair of integers. The second case study will be about generating a memory layout for array of structures perfectly fit for the targeted platform. The examples are based on the Brigand TMP library and will be an opportunity to see how MP constructs such as collection of types and compile time algorithms are made and when they should be used. The talk might contain obscure jokes related to pastries naming.— Edouard AlligandquasardbCEOParis, FranceEdouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France.Joel FalcouCTO, NUMSCALEJoel Falcou is NumScale CTO. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. | | He is also an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d&#39;Informatique in Orsay, France.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3112</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Edouard-Alligand--Joel-Falcou-Two-practical-applications-of-the-Brigand-TMP-library</guid>
    <dc:creator>Joel Falcou, Edouard Alligand</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_high.mp4" length="815740100" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/f80a3c462bcf44c6bed9a69b0123d4bc/CPPConAlligandFalcouTwoPracticalApplications.mp4" expression="full" duration="3112" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications.mp3" expression="full" duration="3112" fileSize="49797450" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications.mp4" expression="full" duration="3112" fileSize="85871867" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_high.mp4" expression="full" duration="3112" fileSize="815740100" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1975/a8a8225a-79bd-43b0-8a83-2cd5bf681975/CPPConAlligandFalcouTwoPracticalApplications_mid.mp4" expression="full" duration="3112" fileSize="243732059" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Chandler Carruth “High Performance Code 201: Hybrid Data Structures&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Modern programs' performance characteristics are often dictated by their data. Whether the cache locality of data access, the size of working set, or avoiding costly memory allocation overhead. Unfortunately, the standard C&#43;&#43; library data structures range from adequate to terrible at controlling these aspects, and they don't provide any of the core mechanisms needed for extremely efficient data structure design.</div><div>This talk will present the core concepts of designing high performance data structures in C&#43;&#43;. It is based on years of experience in the LLVM compiler as well as several other large code bases. From these principles, the talk will propose a suite of data structures that provide performance without loss of generality or functionality. As much as this talk will present specific data structure designs, its primary intent will be to give an understanding of what makes these structures have greater performance than more naive approaches.<br>— <br>Chandler Carruth<br>Google<br>C&#43;&#43; Lead<br>San Francisco Bay Area<br>Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google's distributed build system. He makes guest appearances helping to maintain a few core C&#43;&#43; libraries across Google's codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master's thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:29a5486ab479454dbd78a69b01237c09">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-High-Performance-Code-201-Hybrid-Data-Structures</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-High-Performance-Code-201-Hybrid-Data-Structures</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Modern programs&#39; performance characteristics are often dictated by their data. Whether the cache locality of data access, the size of working set, or avoiding costly memory allocation overhead. Unfortunately, the standard C&amp;#43;&amp;#43; library data structures range from adequate to terrible at controlling these aspects, and they don&#39;t provide any of the core mechanisms needed for extremely efficient data structure design.This talk will present the core concepts of designing high performance data structures in C&amp;#43;&amp;#43;. It is based on years of experience in the LLVM compiler as well as several other large code bases. From these principles, the talk will propose a suite of data structures that provide performance without loss of generality or functionality. As much as this talk will present specific data structure designs, its primary intent will be to give an understanding of what makes these structures have greater performance than more naive approaches.— Chandler CarruthGoogleC&amp;#43;&amp;#43; LeadSan Francisco Bay AreaChandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google&#39;s distributed build system. He makes guest appearances helping to maintain a few core C&amp;#43;&amp;#43; libraries across Google&#39;s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master&#39;s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3348</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Chandler-Carruth-High-Performance-Code-201-Hybrid-Data-Structures</guid>
    <dc:creator>Chandler Carruth</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_high.mp4" length="850592295" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/29a5486ab479454dbd78a69b01237c09/CPPConCarruthHighPerformanceCode201.mp4" expression="full" duration="3348" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201.mp3" expression="full" duration="3348" fileSize="53584074" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201.mp4" expression="full" duration="3348" fileSize="98511419" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_high.mp4" expression="full" duration="3348" fileSize="850592295" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb9b/2b25f12d-d498-4676-88ed-49a4aff2bb9b/CPPConCarruthHighPerformanceCode201_mid.mp4" expression="full" duration="3348" fileSize="292213248" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Michael Spencer “My Little Optimizer: Undefined Behavior is Magic&quot; </title>
    <description><![CDATA[<p>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Compiler exploitation of undefined behavior has been a topic of recent discussion in the programming community. This talk will explore the magic of Undefined Behavior, Covering how and why modern optimizers exploit undefined behavior in C&#43;&#43; programs.<br>— <br>Michael Spencer<br>Compiler Engineer, Sony Playstation<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2bed198510ad4e61a0daa69b012351b2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Spencer-My-Little-Optimizer-Undefined-Behavior-is-Magic</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Spencer-My-Little-Optimizer-Undefined-Behavior-is-Magic</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Compiler exploitation of undefined behavior has been a topic of recent discussion in the programming community. This talk will explore the magic of Undefined Behavior, Covering how and why modern optimizers exploit undefined behavior in C&amp;#43;&amp;#43; programs.— Michael SpencerCompiler Engineer, Sony Playstation—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2787</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Michael-Spencer-My-Little-Optimizer-Undefined-Behavior-is-Magic</guid>
    <dc:creator>Michael Spencer</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_high.mp4" length="1005948059" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/2bed198510ad4e61a0daa69b012351b2/CPPConSpencerMyLittleOptimizer.mp4" expression="full" duration="2787" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer.mp3" expression="full" duration="2787" fileSize="44593866" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer.mp4" expression="full" duration="2787" fileSize="69754246" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_high.mp4" expression="full" duration="2787" fileSize="1005948059" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8b7b/a637b357-ba2c-4052-b921-b9b893028b7b/CPPConSpencerMyLittleOptimizer_mid.mp4" expression="full" duration="2787" fileSize="262228604" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: David Sankel “Variants: Past, Present, and Future&quot; </title>
    <description><![CDATA[<p>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>What are variants, why are they important, and how I use them? Once available to a developer, variants become one of the most commonly used tools in everyday programming. This talk will explore the venerable Boost.Variant library, discuss the improvements made by C&#43;&#43;17's std::variant＜＞, and close with a discussion of the exciting new language-based variant and pattern matching papers (proposed for C&#43;&#43;20). This talk aims to be of practical utility in variant library usage and informative as to where things are heading.<br>— <br>David Sankel<br>Bloomberg<br>New York, New York<br>David Sankel is a professional software developer/architect based in the USA and an active member of the C&#43;&#43; Standardization Committee. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&#43;&#43;Now conferences and is especially well known for his advanced functional programming in C&#43;&#43; talks. David's interests include large-scale development, dependently typed languages, semantic domains, EDSLs, and functional reactive programming. David's current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for Bloomberg.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:63eee5cdf3244a748017a69b01233721">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Variants-Past-Present-and-Future</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Variants-Past-Present-and-Future</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—What are variants, why are they important, and how I use them? Once available to a developer, variants become one of the most commonly used tools in everyday programming. This talk will explore the venerable Boost.Variant library, discuss the improvements made by C&amp;#43;&amp;#43;17&#39;s std::variant＜＞, and close with a discussion of the exciting new language-based variant and pattern matching papers (proposed for C&amp;#43;&amp;#43;20). This talk aims to be of practical utility in variant library usage and informative as to where things are heading.— David SankelBloombergNew York, New YorkDavid Sankel is a professional software developer/architect based in the USA and an active member of the C&amp;#43;&amp;#43; Standardization Committee. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&amp;#43;&amp;#43;Now conferences and is especially well known for his advanced functional programming in C&amp;#43;&amp;#43; talks. David&#39;s interests include large-scale development, dependently typed languages, semantic domains, EDSLs, and functional reactive programming. David&#39;s current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for Bloomberg.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3281</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Sankel-Variants-Past-Present-and-Future</guid>
    <dc:creator>David Sankel</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_high.mp4" length="2274414917" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/63eee5cdf3244a748017a69b01233721/CPPConSankelVariants.mp4" expression="full" duration="3281" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants.mp3" expression="full" duration="3281" fileSize="52503114" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants.mp4" expression="full" duration="3281" fileSize="111196710" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_high.mp4" expression="full" duration="3281" fileSize="2274414917" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/68d4/98071568-b37e-46c2-8c01-c05334e368d4/CPPConSankelVariants_mid.mp4" expression="full" duration="3281" fileSize="629949997" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: McKenney “Beyond the Issaquah Challenge: High-Performance Scalable Complex Updates&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Highly performant and scalable techniques such as RCU have been quite successful in read-mostly situations. However, there do come times when updates are necessary. It would be convenient if there was some general update-side counterpart to RCU, but sadly there is not yet any such thing. Nevertheless, there are a number of specialized update-side techniques whose performance and scalability rival that of RCU. This talk will discuss several of them and provide an outlook into the future of low-overhead scalable updates.</div><div>One technique is the solution to the Issaquah Challenge, which was put forward at the C&#43;&#43; standards committee meeting in early 2014 at Issaquah, WA, USA. This challenge requires a performant and scalable technique to atomically move elements back and forth between a pair of search trees, but without using transactional memory. This talk will give an overview of a solution to a more general problem, that of atomically moving groups of elements among a group of several different types of linked data structures, including simple linked lists, hash tables, and skiplists, while still permitting lockless searches before, during, and after this atomic move.<br>— <br>Paul E. McKenney<br>IBM Linux Technology Center<br>Distinguished Engineer<br>Hillsboro, OR, USA<br>Paul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware, where his work has earned him a reputation among some as a flaming heretic. Over the past decade, Paul has been an IBM Distinguished Engineer at the IBM Linux Technology Center. Paul maintains the RCU implementation within the Linux kernel, where the variety of workloads present highly entertaining performance, scalability, real-time response, and energy-efficiency challenges. Prior to that, he worked on the DYNIX/ptx kernel at Sequent, and prior to that on packet-radio and Internet protocols (but long before it was polite to mention Internet at cocktail parties), system administration, business applications, and real-time systems. His hobbies include what passes for running at his age along with the usual house-wife-and-kids habit.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a880bf986e59409d8157a69b01230990">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-McKenney-Beyond-the-Issaquah-Challenge-High-Performance-Scalable-Complex-Updates</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-McKenney-Beyond-the-Issaquah-Challenge-High-Performance-Scalable-Complex-Updates</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Highly performant and scalable techniques such as RCU have been quite successful in read-mostly situations. However, there do come times when updates are necessary. It would be convenient if there was some general update-side counterpart to RCU, but sadly there is not yet any such thing. Nevertheless, there are a number of specialized update-side techniques whose performance and scalability rival that of RCU. This talk will discuss several of them and provide an outlook into the future of low-overhead scalable updates.One technique is the solution to the Issaquah Challenge, which was put forward at the C&amp;#43;&amp;#43; standards committee meeting in early 2014 at Issaquah, WA, USA. This challenge requires a performant and scalable technique to atomically move elements back and forth between a pair of search trees, but without using transactional memory. This talk will give an overview of a solution to a more general problem, that of atomically moving groups of elements among a group of several different types of linked data structures, including simple linked lists, hash tables, and skiplists, while still permitting lockless searches before, during, and after this atomic move.— Paul E. McKenneyIBM Linux Technology CenterDistinguished EngineerHillsboro, OR, USAPaul E. McKenney has been coding for almost four decades, more than half of that on parallel hardware, where his work has earned him a reputation among some as a flaming heretic. Over the past decade, Paul has been an IBM Distinguished Engineer at the IBM Linux Technology Center. Paul maintains the RCU implementation within the Linux kernel, where the variety of workloads present highly entertaining performance, scalability, real-time response, and energy-efficiency challenges. Prior to that, he worked on the DYNIX/ptx kernel at Sequent, and prior to th</itunes:summary>
    <itunes:duration>3709</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-McKenney-Beyond-the-Issaquah-Challenge-High-Performance-Scalable-Complex-Updates</guid>
    <dc:creator>Paul E. McKenney</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_high.mp4" length="920392529" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a880bf986e59409d8157a69b01230990/CPPConMcKenneyBeyondtheIssaquahChallenge.mp4" expression="full" duration="3709" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge.mp3" expression="full" duration="3709" fileSize="59360970" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge.mp4" expression="full" duration="3709" fileSize="85505142" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_high.mp4" expression="full" duration="3709" fileSize="920392529" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2e26/3aad294c-f6f7-46b7-80da-8982586a2e26/CPPConMcKenneyBeyondtheIssaquahChallenge_mid.mp4" expression="full" duration="3709" fileSize="246826101" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Hartmut Kaiser “Parallelism in Modern C++&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>The traditionally used and well established parallel programming models OpenMP and MPI are both targeting lower level parallelism and are meant to be as language agnostic as possible. For a long time, those models were the only widely available portable options for developing parallel C&#43;&#43; applications beyond using plain threads. This has strongly limited the optimization capabilities of compilers, has inhibited extensibility and genericity, and has restricted the use of those models together with other, modern higher level abstractions introduced by the C&#43;&#43;11 and C&#43;&#43;14 standards. <br>The recent revival of interest in the industry and wider community for the C&#43;&#43; language has also spurred a remarkable amount of standardization proposals and technical specifications being developed. Those efforts however have so far failed to build a vision on how to seamlessly integrate various types of parallelism, such as iterative parallel execution, task-based parallelism, asynchronous many-task execution flows, continuation style computation, or explicit fork-join control flow of independent and non-homogeneous code paths.</div><div>In this talk we present the results of developing higher level parallelization facilities in HPX, a general purpose C&#43;&#43; runtime system for applications of any scale. The developed higher-level parallelization APIs have been designed aiming at overcoming the limitations of today's prevalently used programming models in C&#43;&#43; codes. <br>HPX exposes a uniform higher-level API which gives the application programmer syntactic and semantic equivalence of various types of on-node and off-node parallelism, all of which are well integrated into the C&#43;&#43; type system. We show that these higher level facilities are fully aligned with modern C&#43;&#43; programming concepts, they are easily extensible, fully generic, and enable highly efficient parallelization on par with or better than what existing equivalent applications based on OpenMP and/or MPI can achieve. <br>— <br>Hartmut Kaiser<br>Hartmut is a member of the faculty at the CS department at Louisiana State University (LSU) and a senior research scientist at LSU's Center for Computation and Technology (CCT). He received his doctorate from the Technical University of Chemnitz (Germany) in 1988. He is probably best known through his involvement in open source software projects, mainly as the author of several C&#43;&#43; libraries he has contributed to Boost, which are in use by thousands of developers worldwide. His current research is focused on leading the STE||AR group at CCT working on the practical design and implementation of future execution models and programming methods. His research interests are focused on the complex interaction of compiler technologies, runtime systems, active libraries, and modern system's architectures. His goal is to enable the creation of a new generation of scientific applications in powerful, though complex environments, such as high performance computing, distributed and grid computing, spatial information systems, and compiler technologies.</div><div>Website: https://www.cct.lsu.edu/~hkaiser/<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9436c6591ae6470bb09ba69b0122e34f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hartmut-Kaiser-Parallelism-in-Modern-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hartmut-Kaiser-Parallelism-in-Modern-C</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—The traditionally used and well established parallel programming models OpenMP and MPI are both targeting lower level parallelism and are meant to be as language agnostic as possible. For a long time, those models were the only widely available portable options for developing parallel C&amp;#43;&amp;#43; applications beyond using plain threads. This has strongly limited the optimization capabilities of compilers, has inhibited extensibility and genericity, and has restricted the use of those models together with other, modern higher level abstractions introduced by the C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 standards. The recent revival of interest in the industry and wider community for the C&amp;#43;&amp;#43; language has also spurred a remarkable amount of standardization proposals and technical specifications being developed. Those efforts however have so far failed to build a vision on how to seamlessly integrate various types of parallelism, such as iterative parallel execution, task-based parallelism, asynchronous many-task execution flows, continuation style computation, or explicit fork-join control flow of independent and non-homogeneous code paths.In this talk we present the results of developing higher level parallelization facilities in HPX, a general purpose C&amp;#43;&amp;#43; runtime system for applications of any scale. The developed higher-level parallelization APIs have been designed aiming at overcoming the limitations of today&#39;s prevalently used programming models in C&amp;#43;&amp;#43; codes. HPX exposes a uniform higher-level API which gives the application programmer syntactic and semantic equivalence of various types of on-node and off-node parallelism, all of which are well integrated into the C&amp;#43;&amp;#43; type system. We show that these higher level facilities are fully aligned with modern C&amp;#43;&amp;#43; programming co</itunes:summary>
    <itunes:duration>3691</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Hartmut-Kaiser-Parallelism-in-Modern-C</guid>
    <dc:creator>Hartmut Kaiser</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_high.mp4" length="1989095049" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/9436c6591ae6470bb09ba69b0122e34f/CPPConKaiserParallelismInModernCpp.mp4" expression="full" duration="3691" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp.mp3" expression="full" duration="3691" fileSize="59059530" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp.mp4" expression="full" duration="3691" fileSize="102582674" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_high.mp4" expression="full" duration="3691" fileSize="1989095049" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6ac5/ad64181c-b4be-4c37-a048-28c6a2a76ac5/CPPConKaiserParallelismInModernCpp_mid.mp4" expression="full" duration="3691" fileSize="368879089" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Carroll &amp; Moth “Latest and Greatest from the Visual Studio Family for C++ Developers&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In this session, we'll cover what's new in the last year in the Visual Studio updates and our cross platform editor and debugger, VS Code. We'll talk about and demo the features that are coming in the next version of Visual Studio and VS Code. This will include our ongoing roadmap for compiler and library conformance, major (and massive) improvements in performance and code quality and how to get the most out of it. We'll also cover cross platform development including Linux, Mac, iOS, and Android, and demo all the latest productivity features for C&#43;&#43; developers.<br>— <br>Steve Carroll<br>Visual C&#43;&#43; Development Manager, Microsoft Corporation<br>Steve Carroll is the dev manager for the Visual C&#43;&#43; team and previously the dev manager for the Visual Studio debuggers and profilers.</div><div>Daniel Moth<br>Program Manager, Microsoft<br>Visual Studio<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:be9fa74fa4f54db6b925a69b0122a121">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Carroll--Moth-Latest-and-Greatest-from-the-Visual-Studio-Family-for-C-Developers</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Carroll--Moth-Latest-and-Greatest-from-the-Visual-Studio-Family-for-C-Developers</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In this session, we&#39;ll cover what&#39;s new in the last year in the Visual Studio updates and our cross platform editor and debugger, VS Code. We&#39;ll talk about and demo the features that are coming in the next version of Visual Studio and VS Code. This will include our ongoing roadmap for compiler and library conformance, major (and massive) improvements in performance and code quality and how to get the most out of it. We&#39;ll also cover cross platform development including Linux, Mac, iOS, and Android, and demo all the latest productivity features for C&amp;#43;&amp;#43; developers.— Steve CarrollVisual C&amp;#43;&amp;#43; Development Manager, Microsoft CorporationSteve Carroll is the dev manager for the Visual C&amp;#43;&amp;#43; team and previously the dev manager for the Visual Studio debuggers and profilers.Daniel MothProgram Manager, MicrosoftVisual Studio—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3623</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Carroll--Moth-Latest-and-Greatest-from-the-Visual-Studio-Family-for-C-Developers</guid>
    <dc:creator>Steve Carroll</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_high.mp4" length="1121362396" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/be9fa74fa4f54db6b925a69b0122a121/CPPConCarrollMothLatestGreatestVisualStudio.mp4" expression="full" duration="3623" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio.mp3" expression="full" duration="3623" fileSize="57985098" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio.mp4" expression="full" duration="3623" fileSize="104328731" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_high.mp4" expression="full" duration="3623" fileSize="1121362396" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/900b/da26cdcf-0538-4c69-aeff-bfed0c76900b/CPPConCarrollMothLatestGreatestVisualStudio_mid.mp4" expression="full" duration="3623" fileSize="336343481" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Bob Steagall “Lightweight Object Persistence With Relocatable Heaps in Modern C++&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Modern C&#43;&#43; brings many exciting and powerful advances to both the core language and the standard C&#43;&#43; library. Among these are changes to the standard allocator requirements that now permit allocators to allocate and deallocate blocks of memory that are addressable by generalized (i.e., non-native) pointers, as well as requirements for allocator-aware containers to employ such pointers.</div><div>This talk will describe a slightly different way of thinking about memory allocation, decomposing the idea into four distinct structural concepts – addressing model, storage model, pointer interface, and allocation strategy. To illustrate this new mental framework, we'll examine the design of a standard-conformant allocator that uses shared memory as its storage model, and show how it can be used to construct data structures based on standard C&#43;&#43; containers directly in shared memory. We'll then explore how this particular allocator's address-independent storage model supports a form of lightweight object persistence (with some constraints). Along the way we'll compare and contrast the old C&#43;&#43;03 allocator requirements with those of C&#43;&#43;14, and we'll also see at least one way to implement a generalized pointer. Finally, if time permits, we'll touch on other storage models and possible applications. <br>—</div><div>Bob Steagall<br>I've been working in C&#43;&#43; for the last 24 years. The majority of my career has been spent in medical imaging, where I led teams building applications for functional MRI and CT-based cardiac visualization. After a brief journey through the world of DNS, I'm now trying my hand at analytics.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:39501661f3764cc2b665a69b01227b93">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bob-Steagall-Lightweight-Object-Persistence-With-Relocatable-Heaps-in-Modern-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bob-Steagall-Lightweight-Object-Persistence-With-Relocatable-Heaps-in-Modern-C</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Modern C&amp;#43;&amp;#43; brings many exciting and powerful advances to both the core language and the standard C&amp;#43;&amp;#43; library. Among these are changes to the standard allocator requirements that now permit allocators to allocate and deallocate blocks of memory that are addressable by generalized (i.e., non-native) pointers, as well as requirements for allocator-aware containers to employ such pointers.This talk will describe a slightly different way of thinking about memory allocation, decomposing the idea into four distinct structural concepts – addressing model, storage model, pointer interface, and allocation strategy. To illustrate this new mental framework, we&#39;ll examine the design of a standard-conformant allocator that uses shared memory as its storage model, and show how it can be used to construct data structures based on standard C&amp;#43;&amp;#43; containers directly in shared memory. We&#39;ll then explore how this particular allocator&#39;s address-independent storage model supports a form of lightweight object persistence (with some constraints). Along the way we&#39;ll compare and contrast the old C&amp;#43;&amp;#43;03 allocator requirements with those of C&amp;#43;&amp;#43;14, and we&#39;ll also see at least one way to implement a generalized pointer. Finally, if time permits, we&#39;ll touch on other storage models and possible applications. —Bob SteagallI&#39;ve been working in C&amp;#43;&amp;#43; for the last 24 years. The majority of my career has been spent in medical imaging, where I led teams building applications for functional MRI and CT-based cardiac visualization. After a brief journey through the world of DNS, I&#39;m now trying my hand at analytics.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3691</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bob-Steagall-Lightweight-Object-Persistence-With-Relocatable-Heaps-in-Modern-C</guid>
    <dc:creator>Bob Steagall</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_high.mp4" length="1246678200" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/39501661f3764cc2b665a69b01227b93/CPPConSteagallLightweightObjectPersistence.mp4" expression="full" duration="3691" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence.mp3" expression="full" duration="3691" fileSize="59059914" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence.mp4" expression="full" duration="3691" fileSize="101582363" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_high.mp4" expression="full" duration="3691" fileSize="1246678200" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5aed/64c4448a-8dd9-4586-aa5b-18b8e3955aed/CPPConSteagallLightweightObjectPersistence_mid.mp4" expression="full" duration="3691" fileSize="315628324" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Jackie Kay “Lessons Learned From An Embedded RTPS in Modern C++&quot; </title>
    <description><![CDATA[<p>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Software for embedded systems means writing code for a microprocessor with specs straight out of the 80s. But that doesn't mean that embedded developers should be afraid of using the best tools that modern languages have to offer. This talk will explore embedded development through the source code of a modern C&#43;&#43; implementation of the RTPS (Real-Time Publish/Subscribe) wire protocol. Our targeting ARM STM32 microcontrollers (but generalizable to many platforms). We will put zero-cost abstractions to the test as we attempt to fit a system conforming to a 200-page OMG specification document onto an MCU with 384 KB of RAM and 2048 KB of flash. At a higher level, we will discuss the philosophy of using high-level abstractions in a low-level environment, and seek to settle the score with old-school C microcontroller hackers.<br>— <br>Jackie Kay<br>Software Engineer, Marble Robotics<br>I write FOSS tools for the robotics community.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8d618d642ee3421d8c6ea69b01223e44">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jackie-Kay-Lessons-Learned-From-An-Embedded-RTPS-in-Modern-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jackie-Kay-Lessons-Learned-From-An-Embedded-RTPS-in-Modern-C</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Software for embedded systems means writing code for a microprocessor with specs straight out of the 80s. But that doesn&#39;t mean that embedded developers should be afraid of using the best tools that modern languages have to offer. This talk will explore embedded development through the source code of a modern C&amp;#43;&amp;#43; implementation of the RTPS (Real-Time Publish/Subscribe) wire protocol. Our targeting ARM STM32 microcontrollers (but generalizable to many platforms). We will put zero-cost abstractions to the test as we attempt to fit a system conforming to a 200-page OMG specification document onto an MCU with 384 KB of RAM and 2048 KB of flash. At a higher level, we will discuss the philosophy of using high-level abstractions in a low-level environment, and seek to settle the score with old-school C microcontroller hackers.— Jackie KaySoftware Engineer, Marble RoboticsI write FOSS tools for the robotics community.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>3793</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jackie-Kay-Lessons-Learned-From-An-Embedded-RTPS-in-Modern-C</guid>
    <dc:creator>Jackie Kay</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_high.mp4" length="1542709197" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/8d618d642ee3421d8c6ea69b01223e44/CPPConKayLessonsLearned.mp4" expression="full" duration="3793" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned.mp3" expression="full" duration="3793" fileSize="60702282" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned.mp4" expression="full" duration="3793" fileSize="115429471" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_high.mp4" expression="full" duration="3793" fileSize="1542709197" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a56a/c123a9ab-5788-43ad-8490-143c14eba56a/CPPConKayLessonsLearned_mid.mp4" expression="full" duration="3793" fileSize="388085970" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Marcelo Juchem “The Power of Reflection with Facebook&#39;s Thrift&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>At Facebook we use C&#43;&#43; extensively in our backend and core infrastructure. We've recently added static reflection support for C&#43;&#43; to Thrift, in expectation of a first class standardized solution.</div><div>This talk demonstrates the power of reflection as a productivity enhancer, an enabler for features and an aid in managing complexity. It shows some useful functionalities that can be easily achieved through reflection in a portable and elegant way, which weren't possible before without code repetition, complex DSLs or non-portable pre-processors.</div><div>We'll cover things like pretty printers, data converters, migration to typed APIs, serialization and compilation times.</div><div>REQUIREMENTS: intermediate to advanced knowledge of template meta-programming. This talk is not aimed at people who want to learn meta-programming.<br>— <br>Marcelo Juchem<br>Software Engineer, Facebook<br>Marcelo is a Software Engineer working with core infrastructure at Facebook.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a7e510a71db04dbaaa83a69b01220ca6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marcelo-Juchem-The-Power-of-Reflection-with-Facebooks-Thrift</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marcelo-Juchem-The-Power-of-Reflection-with-Facebooks-Thrift</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—At Facebook we use C&amp;#43;&amp;#43; extensively in our backend and core infrastructure. We&#39;ve recently added static reflection support for C&amp;#43;&amp;#43; to Thrift, in expectation of a first class standardized solution.This talk demonstrates the power of reflection as a productivity enhancer, an enabler for features and an aid in managing complexity. It shows some useful functionalities that can be easily achieved through reflection in a portable and elegant way, which weren&#39;t possible before without code repetition, complex DSLs or non-portable pre-processors.We&#39;ll cover things like pretty printers, data converters, migration to typed APIs, serialization and compilation times.REQUIREMENTS: intermediate to advanced knowledge of template meta-programming. This talk is not aimed at people who want to learn meta-programming.— Marcelo JuchemSoftware Engineer, FacebookMarcelo is a Software Engineer working with core infrastructure at Facebook.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3222</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Marcelo-Juchem-The-Power-of-Reflection-with-Facebooks-Thrift</guid>
    <dc:creator>Marcelo Juchem</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_high.mp4" length="1090333171" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a7e510a71db04dbaaa83a69b01220ca6/CPPConJuchemThePowerOfReflection.mp4" expression="full" duration="3222" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection.mp3" expression="full" duration="3222" fileSize="51565002" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection.mp4" expression="full" duration="3222" fileSize="91723511" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_high.mp4" expression="full" duration="3222" fileSize="1090333171" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bd37/e3bdf1d0-7c9f-45a2-9767-392df439bd37/CPPConJuchemThePowerOfReflection_mid.mp4" expression="full" duration="3222" fileSize="273555668" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Dietmar K&#252;hl “Constant Fun&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This presentation discusses why it is useful to move some of the processing to compile time and shows some applications of doing so. In particular it shows how to create associative containers created at compile time and what is needed from the types involved to make it possible. The presentation also does some analysis to estimate the costs in terms for compile-time and object file size.</div><div>Specifically, the presentation discusses: <br>- implications of static and dynamic initialization – the C&#43;&#43; language rules for implementing constexpr functions and classes supporting constexpr objects. <br>- differences in error handling with constant expressions. <br>- sorting sequences at compile time and the needed infrastructure – creating constant associative containers with compile-time and run-time look-up. <br>— <br>Dietmar Kühl<br>Software Developer, Bloomberg LP<br>Dietmar Kühl is a senior software developer at Bloomberg L.P. working on the data distrubtion environment used both internally and by enterprise installations at clients. In the past, he has done mainly consulting for software projects in the finance area. He is a regular attendee of the ANSI/ISO C&#43;&#43; standards committee, frequent presenter at the ACCU conference, and a moderator of the newsgroup comp.lang.c&#43;&#43;.moderated.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5444e02968284874bfd1a69b0121efd5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dietmar-Khl-Constant-Fun</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dietmar-Khl-Constant-Fun</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This presentation discusses why it is useful to move some of the processing to compile time and shows some applications of doing so. In particular it shows how to create associative containers created at compile time and what is needed from the types involved to make it possible. The presentation also does some analysis to estimate the costs in terms for compile-time and object file size.Specifically, the presentation discusses: - implications of static and dynamic initialization – the C&amp;#43;&amp;#43; language rules for implementing constexpr functions and classes supporting constexpr objects. - differences in error handling with constant expressions. - sorting sequences at compile time and the needed infrastructure – creating constant associative containers with compile-time and run-time look-up. — Dietmar K&#252;hlSoftware Developer, Bloomberg LPDietmar K&#252;hl is a senior software developer at Bloomberg L.P. working on the data distrubtion environment used both internally and by enterprise installations at clients. In the past, he has done mainly consulting for software projects in the finance area. He is a regular attendee of the ANSI/ISO C&amp;#43;&amp;#43; standards committee, frequent presenter at the ACCU conference, and a moderator of the newsgroup comp.lang.c&amp;#43;&amp;#43;.moderated.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3816</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dietmar-Khl-Constant-Fun</guid>
    <dc:creator>Dietmar K&#252;hl</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_high.mp4" length="1627476633" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/5444e02968284874bfd1a69b0121efd5/CPPConKuhlConstantFun.mp4" expression="full" duration="3816" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun.mp3" expression="full" duration="3816" fileSize="61060938" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun.mp4" expression="full" duration="3816" fileSize="127560874" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_high.mp4" expression="full" duration="3816" fileSize="1627476633" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60c1/b53d0c23-05ff-40ad-ac02-325c450d60c1/CPPConKuhlConstantFun_mid.mp4" expression="full" duration="3816" fileSize="493791282" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Gordon Brown &amp; Michael Wong “Towards Heterogeneous Programming in C++&quot; </title>
    <description><![CDATA[<div>Published on Oct 1, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Current semiconductor trends show a major shift in computer system architectures towards heterogeneous systems that combine a CPU with other processors such as GPUs, DSPs and FPGAs; that work together, performing different tasks in parallel. This shift has brought a dramatic change in programming paradigms in the pursuit of a common language that will provide efficiency and performance portability across these systems. A wide range of programming languages and models has emerged over the last decade, all with this goal in their sights, and the trend is converging on C&#43;&#43; as the language of choice.</div><div>This new world of heterogeneous systems brings with it many new challenges for the C&#43;&#43; community and for the language itself, and if these were to be overcome then C&#43;&#43; would have the potential to standardize the future of heterogeneous programming. In fact this work has already begun in SG14 in form of a mandate to support massive parallel dispatch for heterogeneous devices in the C&#43;&#43; standard using recent models such as SYCL and HPX. A recent approach to solving these challenges comes in the form of SYCL, a shared-source C&#43;&#43; programming model for OpenCL. SYCL takes a very different approach from many before it, in that it is specifically designed to be standard C&#43;&#43; without any extensions to the language.</div><div>This talk will present the recent rise in demand for heterogeneous programming in C&#43;&#43; and the new challenges that this brings to the C&#43;&#43; community. It will then take a look at some of the different programming languages and models that have arrived in the heterogeneous landscape, the motivations behind them, how they have attempted to solve those challenges and what we can learn from them. Finally it will take a look at the future of heterogeneous programming in C&#43;&#43; and what that might look like.<br>— <br>Gordon Brown<br>Staff Software Engineer, SYCL, Codeplay Software<br>Gordon Brown is a software engineer specializing in SYCL technologies and has been involved in the standardization of the Khronos standard and the development of Codeplay's implementation from it's inception.</div><div>Michael Wong<br>Codeplay Software/ISOCPP<br>VP of R&amp;D/Director<br>Michael Wong is the CEO of OpenMP. He is the Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. He is also a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada's Standard Council. He has so many titles, it's a wonder he can get anything done.<br>He chairs the WG21 SG5 Transactional Memory and SG14 Games Development/Low Latency, and is the co-author of a number C&#43;&#43;11/OpenMP/Transactional Memory features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBM's XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo.</div><div>He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, ADC&#43;&#43;, CASCON, Bloomberg, CERN, and many Universities, research centers and companies.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d3d2e5e5f22d48f99864a69b0121a2bb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gordon-Brown--Michael-Wong-Towards-Heterogeneous-Programming-in-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gordon-Brown--Michael-Wong-Towards-Heterogeneous-Programming-in-C</link>
    <itunes:summary>Published on Oct 1, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Current semiconductor trends show a major shift in computer system architectures towards heterogeneous systems that combine a CPU with other processors such as GPUs, DSPs and FPGAs; that work together, performing different tasks in parallel. This shift has brought a dramatic change in programming paradigms in the pursuit of a common language that will provide efficiency and performance portability across these systems. A wide range of programming languages and models has emerged over the last decade, all with this goal in their sights, and the trend is converging on C&amp;#43;&amp;#43; as the language of choice.This new world of heterogeneous systems brings with it many new challenges for the C&amp;#43;&amp;#43; community and for the language itself, and if these were to be overcome then C&amp;#43;&amp;#43; would have the potential to standardize the future of heterogeneous programming. In fact this work has already begun in SG14 in form of a mandate to support massive parallel dispatch for heterogeneous devices in the C&amp;#43;&amp;#43; standard using recent models such as SYCL and HPX. A recent approach to solving these challenges comes in the form of SYCL, a shared-source C&amp;#43;&amp;#43; programming model for OpenCL. SYCL takes a very different approach from many before it, in that it is specifically designed to be standard C&amp;#43;&amp;#43; without any extensions to the language.This talk will present the recent rise in demand for heterogeneous programming in C&amp;#43;&amp;#43; and the new challenges that this brings to the C&amp;#43;&amp;#43; community. It will then take a look at some of the different programming languages and models that have arrived in the heterogeneous landscape, the motivations behind them, how they have attempted to solve those challenges and what we can learn from them. Finally it will take a look at the future of heterogeneous p</itunes:summary>
    <itunes:duration>3348</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Gordon-Brown--Michael-Wong-Towards-Heterogeneous-Programming-in-C</guid>
    <dc:creator>Gordon Brown</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_high.mp4" length="1145390011" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/d3d2e5e5f22d48f99864a69b0121a2bb/CPPConBrownWongTowardsHeterogeneousProgramming.mp4" expression="full" duration="3348" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming.mp3" expression="full" duration="3348" fileSize="53572938" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming.mp4" expression="full" duration="3348" fileSize="98898014" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_high.mp4" expression="full" duration="3348" fileSize="1145390011" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c136/238c9b75-334d-4e64-a3c4-b953f2dac136/CPPConBrownWongTowardsHeterogeneousProgramming_mid.mp4" expression="full" duration="3348" fileSize="328108014" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Alfred Bratterud “#include ＜os＞: from bootloader to REST API with the new C++&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>IncludeOS is a brand new open source library operating system that turns your modern C&#43;&#43; source code into a minimal, self contained virtual machine. No Linux inside, just your service and whatever your service needs from the operating system library. Creating the virtual machine is just as fast as compiling a binary and the resulting virtual machine image can run unchanged on Linux, Windows or Mac.</div><div>Early in the design process we made a hard choice; no C interfaces and no blocking POSIX calls. We've done everything from scratch with modern C&#43;&#43; 11/14 - Including device drivers and the complete network stack all the way through ethernet, IP and ARP, up to and including UDP, TCP and recently also an http / REST API framework. To achieve maximum efficiency we decided to do everything event based and async, so there's plenty of opportunities to use lambdas and delegates.</div><div>In this talk you'll get the first overview of our first feature-complete release and the first application built with IncludeOS. We'll show you what we're proud of and what we'd like your help to improve. And of course, we'll show you how to write an application for IncludeOS, deploy it locally on your PC or in an IaaS cloud such as OpenStack, and then hook it up to the internet.<br>— <br>Alfred Bratterud<br>IncludeOS<br>CEO<br>Oslo Area, Norway<br>Websiteincludeos.org<br>MSc. in mathematical logic from the dept. of Informatics, University of Oslo. Employed since 2011 as Assistant professor at Oslo and Akershus University College of Applied science, the largest institution for engineering education in Norway , where I taught an undergrad course in C&#43;&#43; for 5 years. I'm working on a PhD in the area of cloud computing under the working title &quot;Resource efficient Cloud Computing using minimal virtual machines&quot; and IncludeOS is the result of that work. We have recently received a grant from the Norwegian research council to further develop IncludeOS into a commercially viable product and leading this work (as CEO of the startup IncludeOS AS) is currently my main focus.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a83c9b68d9364f60a709a69b01217d42">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alfred-Bratterud-include-os-from-bootloader-to-REST-API-with-the-new-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alfred-Bratterud-include-os-from-bootloader-to-REST-API-with-the-new-C</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—IncludeOS is a brand new open source library operating system that turns your modern C&amp;#43;&amp;#43; source code into a minimal, self contained virtual machine. No Linux inside, just your service and whatever your service needs from the operating system library. Creating the virtual machine is just as fast as compiling a binary and the resulting virtual machine image can run unchanged on Linux, Windows or Mac.Early in the design process we made a hard choice; no C interfaces and no blocking POSIX calls. We&#39;ve done everything from scratch with modern C&amp;#43;&amp;#43; 11/14 - Including device drivers and the complete network stack all the way through ethernet, IP and ARP, up to and including UDP, TCP and recently also an http / REST API framework. To achieve maximum efficiency we decided to do everything event based and async, so there&#39;s plenty of opportunities to use lambdas and delegates.In this talk you&#39;ll get the first overview of our first feature-complete release and the first application built with IncludeOS. We&#39;ll show you what we&#39;re proud of and what we&#39;d like your help to improve. And of course, we&#39;ll show you how to write an application for IncludeOS, deploy it locally on your PC or in an IaaS cloud such as OpenStack, and then hook it up to the internet.— Alfred BratterudIncludeOSCEOOslo Area, NorwayWebsiteincludeos.orgMSc. in mathematical logic from the dept. of Informatics, University of Oslo. Employed since 2011 as Assistant professor at Oslo and Akershus University College of Applied science, the largest institution for engineering education in Norway , where I taught an undergrad course in C&amp;#43;&amp;#43; for 5 years. I&#39;m working on a PhD in the area of cloud computing under the working title &amp;quot;Resource efficient Cloud Computing using minimal virtual machines&amp;quot; and IncludeOS is the result of t</itunes:summary>
    <itunes:duration>3523</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alfred-Bratterud-include-os-from-bootloader-to-REST-API-with-the-new-C</guid>
    <dc:creator>Alfred Bratterud</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_high.mp4" length="1497426350" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a83c9b68d9364f60a709a69b01217d42/CCPConBratterudbootloadertoRESTAPI.mp4" expression="full" duration="3523" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI.mp3" expression="full" duration="3523" fileSize="56380746" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI.mp4" expression="full" duration="3523" fileSize="128891213" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_high.mp4" expression="full" duration="3523" fileSize="1497426350" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bf7/8b7d1148-f525-4ce3-a70b-c85586611bf7/CCPConBratterudbootloadertoRESTAPI_mid.mp4" expression="full" duration="3523" fileSize="475683846" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Niall Douglas “Better mutual exclusion on the filesystem using Boost.AFIO&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This is the third and likely final part of a surprisingly popular &quot;from first principles&quot; series of beginner's workshops based on developing the v2 post-peer-review rewrite of proposed Boost.AFIO, a C&#43;&#43; library wrapping the advanced features of the filesystem intended for eventual ISO C&#43;&#43; standardisation. If you're the kind of library developer who likes building unusual low level concurrent algorithms using the very latest C&#43;&#43; 14-17 (proposed) features and testing them for time and space complexities, this is definitely your kind of talk.</div><div>At CppCon 2015 we studied the concurrency fundamentals of the filing system, and how it can have the acquire/release semantics of memory atomics but also differs in many ways from memory. At ACCU 2016, using those fundamentals we built from first principles a novel distributed mutual exclusion implementation boost::afio::algorithm::atomic_append which doesn't suffer from the &quot;scalability holes&quot; found in the OS kernel provided facilities boost::afio::algorithm::byte_ranges and boost::afio::algorithm::lock_files. At this third workshop we shall continue the &quot;from first principles&quot; theme by building a fourth and probably last distributed mutual exclusion algorithm for the AFIO algorithms library boost::afio::algorithm, with this one making use of shared memory maps for superior performance when only a single machine is doing the locking.</div><div>Is it possible to portably detect the arrival of a networked drive user (SMB, NFS) and safely disable using shared memory maps such that we can automatically race free downgrade our implementation to a networked drive compatible technique?</div><div>It turns out that the answer is yes. It has superb performance and scalability, but also comes with many interesting preconditions, tradeoffs and caveats, the most important being that this is an anti-social mutual exclusion algorithm.</div><div>Slides: This is a live link to the slides in progress. Expect them to change up right up until the workshop is given.</div><div>These are the slides and video for the ACCU 2016 workshop on the atomic append locking algorithm, and the slides and video for the CppCon 2015 workshop on the concurrency fundamentals of the file system. Both were surprisingly well attended, indeed the former was the most attended talk of its track for some reason where it received 18 green votes, zero yellow and zero red votes.<br>— <br>Niall Douglas<br>ned Productions Ltd<br>Consultant<br>Cork, Ireland<br>Niall Douglas is a lead author of WiP Boost.AFIO v2, Boost.Outcome, Boost.KernelTest and Boost-lite. He has been the lead Google Summer of Code administrator for Boost since 2014. He is an Affiliate Researcher with the Waterloo Research Institute for Complexity and Innovation at the University of Waterloo, Canada, and holds postgraduate qualifications in Business Information Systems and Educational and Social Research as well as a second undergraduate degree double majoring in Economics and Management. He has been using Boost since 2002 and was the ISO SC22 (Programming Languages) mirror convener for the Republic of Ireland 2011-2012. He formerly worked for BlackBerry 2012-2013 in their Platform Development group, and was formerly the Chief Software Architect of the Fuel and Hydraulic Test Benches of the EuroFighter defense aircraft. He is presently contracted to DTS Inc. as an expert C&#43;&#43; libraries consultant.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1f664b35c3f44ee4826ea69b0121447d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Niall-Douglas-Better-mutual-exclusion-on-the-filesystem-using-BoostAFIO</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Niall-Douglas-Better-mutual-exclusion-on-the-filesystem-using-BoostAFIO</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This is the third and likely final part of a surprisingly popular &amp;quot;from first principles&amp;quot; series of beginner&#39;s workshops based on developing the v2 post-peer-review rewrite of proposed Boost.AFIO, a C&amp;#43;&amp;#43; library wrapping the advanced features of the filesystem intended for eventual ISO C&amp;#43;&amp;#43; standardisation. If you&#39;re the kind of library developer who likes building unusual low level concurrent algorithms using the very latest C&amp;#43;&amp;#43; 14-17 (proposed) features and testing them for time and space complexities, this is definitely your kind of talk.At CppCon 2015 we studied the concurrency fundamentals of the filing system, and how it can have the acquire/release semantics of memory atomics but also differs in many ways from memory. At ACCU 2016, using those fundamentals we built from first principles a novel distributed mutual exclusion implementation boost::afio::algorithm::atomic_append which doesn&#39;t suffer from the &amp;quot;scalability holes&amp;quot; found in the OS kernel provided facilities boost::afio::algorithm::byte_ranges and boost::afio::algorithm::lock_files. At this third workshop we shall continue the &amp;quot;from first principles&amp;quot; theme by building a fourth and probably last distributed mutual exclusion algorithm for the AFIO algorithms library boost::afio::algorithm, with this one making use of shared memory maps for superior performance when only a single machine is doing the locking.Is it possible to portably detect the arrival of a networked drive user (SMB, NFS) and safely disable using shared memory maps such that we can automatically race free downgrade our implementation to a networked drive compatible technique?It turns out that the answer is yes. It has superb performance and scalability, but also comes with many interesting preconditions, tradeoffs and cav</itunes:summary>
    <itunes:duration>3811</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Niall-Douglas-Better-mutual-exclusion-on-the-filesystem-using-BoostAFIO</guid>
    <dc:creator>Niall Douglas</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_high.mp4" length="1326982952" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/1f664b35c3f44ee4826ea69b0121447d/CPPConDouglasBetterMutualExclusion.mp4" expression="full" duration="3811" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion.mp3" expression="full" duration="3811" fileSize="60985674" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion.mp4" expression="full" duration="3811" fileSize="125938921" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_high.mp4" expression="full" duration="3811" fileSize="1326982952" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8262/7f584d53-628e-40c0-b20d-b0fbd0fc8262/CPPConDouglasBetterMutualExclusion_mid.mp4" expression="full" duration="3811" fileSize="407529394" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Walter E. Brown “What C++ Programmers Need to Know about Header ＜random＞&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>The generation of pseudo-random numbers has been an important computing application ever since the pioneering work of John von Neumann and others during the World War II era. It remains an important application for gaming, statistical sampling, and simulation, to name but a few areas of its continuing utility.</div><div>Obtaining a random number (technically, a variate) is widely believed to be a simple task. Alas, it usually isn't, and programmers often have little or no training to help them make important decisions that can have subtle effects on the correctness and reliability of their programs' results.</div><div>In this talk by the principal author of the C&#43;&#43; -random- facility, we will describe the header's conceptual underpinnings, demonstrate its most common correct usage pattern, exhibit and explain what's wrong with its most common usage anti-pattern, and discuss the merits of a number of possible toolkits based on the header's facilities. <br>— <br>Walter E. Brown<br>With broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C&#43;&#43; programmer for over thirty-five years, joining the C&#43;&#43; standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C&#43;&#43; library features as cbegin/cend, common_type, gcd, and void_t, as well as headers ＜ random ＞ and ＜ ratio ＞. He has also significantly impacted such core language features as alias templates, contextual conversions, variable templates, and static_assert. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C&#43;&#43;, now part of the forthcoming C&#43;&#43;17.</div><div>When not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C&#43;&#43; standards process, with several more core and library proposals under consideration.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aff44efb29174ff3a014a69b012119a6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Walter-E-Brown-What-C-Programmers-Need-to-Know-about-Header-random</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Walter-E-Brown-What-C-Programmers-Need-to-Know-about-Header-random</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—The generation of pseudo-random numbers has been an important computing application ever since the pioneering work of John von Neumann and others during the World War II era. It remains an important application for gaming, statistical sampling, and simulation, to name but a few areas of its continuing utility.Obtaining a random number (technically, a variate) is widely believed to be a simple task. Alas, it usually isn&#39;t, and programmers often have little or no training to help them make important decisions that can have subtle effects on the correctness and reliability of their programs&#39; results.In this talk by the principal author of the C&amp;#43;&amp;#43; -random- facility, we will describe the header&#39;s conceptual underpinnings, demonstrate its most common correct usage pattern, exhibit and explain what&#39;s wrong with its most common usage anti-pattern, and discuss the merits of a number of possible toolkits based on the header&#39;s facilities. — Walter E. BrownWith broad experience in industry, academia, consulting, and research, Dr. Walter E. Brown has been a C&amp;#43;&amp;#43; programmer for over thirty-five years, joining the C&amp;#43;&amp;#43; standards effort in 2000. Among numerous other contributions, he is responsible for introducing such now-standard C&amp;#43;&amp;#43; library features as cbegin/cend, common_type, gcd, and void_t, as well as headers ＜ random ＞ and ＜ ratio ＞. He has also significantly impacted such core language features as alias templates, contextual conversions, variable templates, and static_assert. He conceived and served as project editor for the International Standard on Special Mathematical Functions in C&amp;#43;&amp;#43;, now part of the forthcoming C&amp;#43;&amp;#43;17.When not playing with his grandchildren, Dr. Brown is an Emeritus participant in the C&amp;#43;&amp;#43; standards process, with several more core and l</itunes:summary>
    <itunes:duration>4097</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Walter-E-Brown-What-C-Programmers-Need-to-Know-about-Header-random</guid>
    <dc:creator>Walter E. Brown</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_high.mp4" length="1250390209" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/aff44efb29174ff3a014a69b012119a6/CPPConBrownWhatCppProgrammersNeedtoKnow.mp4" expression="full" duration="4097" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow.mp3" expression="full" duration="4097" fileSize="65561034" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow.mp4" expression="full" duration="4097" fileSize="92620304" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_high.mp4" expression="full" duration="4097" fileSize="1250390209" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ae79/0ecfe710-746d-4f65-bfa0-5c12f223ae79/CPPConBrownWhatCppProgrammersNeedtoKnow_mid.mp4" expression="full" duration="4097" fileSize="267077661" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Andy Bond “AAAARGH!? Adopting Almost Always Auto Reinforces Good Habits!?&quot; </title>
    <description><![CDATA[<p>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Prominent members of the C&#43;&#43; community are advocating the &quot;almost-always-auto&quot; idiom, but there are understandable concerns from many about its implications. This case study will demonstrate how it may be applied in different situations, suggest ways to avoid performance penalties, introduce algorithms to minimize the &quot;almost&quot; part, and discuss the overall impact.<br>— <br>Andy Bond<br>Lead Software Engineer, Blizzard Entertainment<br>I've been programming professionally at Blizzard for over 16 years and am currently a Lead Software Engineer for Heroes of the Storm. While my day-to-day focus is on providing the best gameplay experience for our players, in my spare time I enjoy tinkering with the latest C&#43;&#43; features to discover better ways to implement whatever our designers dream up next.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:756acd4d445e4fa3b949a69b0120d8a1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Andy-Bond-AAAARGH-Adopting-Almost-Always-Auto-Reinforces-Good-Habits</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Andy-Bond-AAAARGH-Adopting-Almost-Always-Auto-Reinforces-Good-Habits</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Prominent members of the C&amp;#43;&amp;#43; community are advocating the &amp;quot;almost-always-auto&amp;quot; idiom, but there are understandable concerns from many about its implications. This case study will demonstrate how it may be applied in different situations, suggest ways to avoid performance penalties, introduce algorithms to minimize the &amp;quot;almost&amp;quot; part, and discuss the overall impact.— Andy BondLead Software Engineer, Blizzard EntertainmentI&#39;ve been programming professionally at Blizzard for over 16 years and am currently a Lead Software Engineer for Heroes of the Storm. While my day-to-day focus is on providing the best gameplay experience for our players, in my spare time I enjoy tinkering with the latest C&amp;#43;&amp;#43; features to discover better ways to implement whatever our designers dream up next.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>2862</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Andy-Bond-AAAARGH-Adopting-Almost-Always-Auto-Reinforces-Good-Habits</guid>
    <dc:creator>Andy Bond</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_high.mp4" length="806567648" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/756acd4d445e4fa3b949a69b0120d8a1/CPPConBondAdopting.mp4" expression="full" duration="2862" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting.mp3" expression="full" duration="2862" fileSize="45801162" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting.mp4" expression="full" duration="2862" fileSize="90010945" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_high.mp4" expression="full" duration="2862" fileSize="806567648" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/acc9/7ac0b762-5da3-45dc-80f6-6769dd57acc9/CPPConBondAdopting_mid.mp4" expression="full" duration="2862" fileSize="264024373" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Bryce Adelstein Lelbach “The C++17 Parallel Algorithms Library and Beyond&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>One of the major library features in C&#43;&#43;17 is a parallel algorithms library (formerly the Parallelism Technical Specification v1). The parallel algorithms library has both parallel versions of the existing algorithms in the standard library and a handful of new algorithms inspired by common patterns from parallel programming (such as std::reduce() and std::transform_reduce()).</div><div>We'll talk about what's in the parallel algorithms library, and how to utilize it in your code today. Also, we'll discuss some exciting future developments relating to the parallel algorithms library which are targeted for the second version of the Parallelism Technical Specification – executors, and asynchronous parallel algorithms.<br>— <br>Bryce Adelstein Lelbach<br>Lawrence Berkeley National Laboratory<br>Berkeley, California<br>Bryce Adelstein Lelbach is a researcher at Lawrence Berkeley National Laboratory (LBNL), a US Department of Energy research facility. Working alongside a team of hardware engineers and scientists, he develops and analyzes new parallel programming models for exascale and post-Moore architectures. Bryce is one of the developers of the HPX C&#43;&#43; runtime system. He spent five years working on HPX while he was at Louisiana State University's Center for Computation and Technology. He also helped start the LLVMLinux initiative, and has occasionally contributed to the Boost C&#43;&#43; libraries. Bryce is an organizer for the C&#43;&#43;Now and CppCon conferences as well as the Bay Area C&#43;&#43; user group, and he is passionate about C&#43;&#43; community development. He serves as LBNL's representative to the ISO committee for programming languages and the ISO C&#43;&#43; standard committee.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:201ae76072a74b4f8151a69b011dca32">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bryce-Adelstein-Lelbach-The-C17-Parallel-Algorithms-Library-and-Beyond</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bryce-Adelstein-Lelbach-The-C17-Parallel-Algorithms-Library-and-Beyond</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—One of the major library features in C&amp;#43;&amp;#43;17 is a parallel algorithms library (formerly the Parallelism Technical Specification v1). The parallel algorithms library has both parallel versions of the existing algorithms in the standard library and a handful of new algorithms inspired by common patterns from parallel programming (such as std::reduce() and std::transform_reduce()).We&#39;ll talk about what&#39;s in the parallel algorithms library, and how to utilize it in your code today. Also, we&#39;ll discuss some exciting future developments relating to the parallel algorithms library which are targeted for the second version of the Parallelism Technical Specification – executors, and asynchronous parallel algorithms.— Bryce Adelstein LelbachLawrence Berkeley National LaboratoryBerkeley, CaliforniaBryce Adelstein Lelbach is a researcher at Lawrence Berkeley National Laboratory (LBNL), a US Department of Energy research facility. Working alongside a team of hardware engineers and scientists, he develops and analyzes new parallel programming models for exascale and post-Moore architectures. Bryce is one of the developers of the HPX C&amp;#43;&amp;#43; runtime system. He spent five years working on HPX while he was at Louisiana State University&#39;s Center for Computation and Technology. He also helped start the LLVMLinux initiative, and has occasionally contributed to the Boost C&amp;#43;&amp;#43; libraries. Bryce is an organizer for the C&amp;#43;&amp;#43;Now and CppCon conferences as well as the Bay Area C&amp;#43;&amp;#43; user group, and he is passionate about C&amp;#43;&amp;#43; community development. He serves as LBNL&#39;s representative to the ISO committee for programming languages and the ISO C&amp;#43;&amp;#43; standard committee.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3400</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bryce-Adelstein-Lelbach-The-C17-Parallel-Algorithms-Library-and-Beyond</guid>
    <dc:creator>Bryce Adelstein-Lelbach</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_high.mp4" length="1673189159" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/201ae76072a74b4f8151a69b011dca32/CPPConLelbachCpp17ParallelAlgorithmsLibrary.mp4" expression="full" duration="3400" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary.mp3" expression="full" duration="3400" fileSize="54407370" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary.mp4" expression="full" duration="3400" fileSize="103356955" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_high.mp4" expression="full" duration="3400" fileSize="1673189159" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3701/b32d1843-6459-4ca9-9d2e-d8819be03701/CPPConLelbachCpp17ParallelAlgorithmsLibrary_mid.mp4" expression="full" duration="3400" fileSize="343496848" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: D. Dechev &amp; D. Zhang “High Performance C++ Concurrent Transactional Data Structures&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In the session, we will discuss two strategies for implementing scalable transactional data structures using both locks and lock-free synchronizations. The locking strategy employs MRLock, which is a novel shared-memory resource allocation lock for multi-core processors. It uses a lock-free FIFO queue to manage locking requests in batches, which minimizes memory contention among threads. It is fast and designed as a drop-in replacement for the two-phase locking methods in C&#43;&#43;11 and Boost library (std::lock() and boost::lock()). When combined with existing lock-based transaction synchronization techniques such as semantic locking and transaction boosting, it can be used by programmers who prefer lock-based code to implement high-performance transactional data structures on familiar grounds. The lock-free strategy is based on lock-free transactional transformation (LFTT), which uses transaction descriptor object to announce the transaction globally so that delayed threads can be helped. It is applicable to linked data structures such as linked lists and skip lists. The logical status of any node in the data structure depends on the status of the transaction descriptor that was embedded in it. Conflict transactions do not need to revert their operations as required in some of the existing methodologies. We will demonstrate the application of this strategy to existing lock-free lists and skip lists.</div><div>We will also introduce a lock-free logarithmic search data structure based on multi-dimensional linked list. This brand new data structure is designed from ground up to achieve full potential for concurrent accesses. It has a distributed memory layout which alleviates contention. Write operations modify at most two nodes so interference among operations are brought down to a minimum. This data structure implements the collection/dictionary abstract data type, which is ubiquitous in modern applications. When combined with the above mentioned transactional strategies, this work could greatly benefit application developers who deal with data intensive scenarios such as in memory databases.</div><div><br>Preliminary version of source code can be accessed from https://ucf-cs.github.io/tlds/. The research work mentioned in this presentation can be accessed from http://cse.eecs.ucf.edu/bios/delizhan....<br>— <br>Damian Dechev<br>Associate Professor, University of Central Florida<br>Dr. Damian Dechev is an Assistant Professor at the EECS Department at the University of Central Florida and the founder of the Computer Software Engineering - Scalable and Secure Systems Lab at UCF. He specializes in the design of scalable multiprocessor data structures and algorithms and has applied them in the design of real-time embedded space systems at NASA JPL and the HPC data-intensive applications at Sandia National Labs.</div><div>Deli Zhang<br>Software Development Engineer, Microsoft<br>Deli Zhang received his Ph.D. in Computer Science at the University of Central Florida. He worked as a research assistant under the guidance of Dr. Damian Dechev. Deli specializes in developing non-blocking data structures and algorithms, applying non-blocking synchronization in existing performance critical applications. He has also collaborated with Sandia National Laboratory on large scale performance monitoring and simulation analysis.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3382b80c3c954022a5e6a69b011c6838">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-D-Dechev--D-Zhang-High-Performance-C-Concurrent-Transactional-Data-Structures</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-D-Dechev--D-Zhang-High-Performance-C-Concurrent-Transactional-Data-Structures</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In the session, we will discuss two strategies for implementing scalable transactional data structures using both locks and lock-free synchronizations. The locking strategy employs MRLock, which is a novel shared-memory resource allocation lock for multi-core processors. It uses a lock-free FIFO queue to manage locking requests in batches, which minimizes memory contention among threads. It is fast and designed as a drop-in replacement for the two-phase locking methods in C&amp;#43;&amp;#43;11 and Boost library (std::lock() and boost::lock()). When combined with existing lock-based transaction synchronization techniques such as semantic locking and transaction boosting, it can be used by programmers who prefer lock-based code to implement high-performance transactional data structures on familiar grounds. The lock-free strategy is based on lock-free transactional transformation (LFTT), which uses transaction descriptor object to announce the transaction globally so that delayed threads can be helped. It is applicable to linked data structures such as linked lists and skip lists. The logical status of any node in the data structure depends on the status of the transaction descriptor that was embedded in it. Conflict transactions do not need to revert their operations as required in some of the existing methodologies. We will demonstrate the application of this strategy to existing lock-free lists and skip lists.We will also introduce a lock-free logarithmic search data structure based on multi-dimensional linked list. This brand new data structure is designed from ground up to achieve full potential for concurrent accesses. It has a distributed memory layout which alleviates contention. Write operations modify at most two nodes so interference among operations are brought down to a minimum. This data structure </itunes:summary>
    <itunes:duration>3300</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-D-Dechev--D-Zhang-High-Performance-C-Concurrent-Transactional-Data-Structures</guid>
    <dc:creator>Damian Dechev</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_high.mp4" length="869329905" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/3382b80c3c954022a5e6a69b011c6838/CPPConDechevZhangHighPerformanceCpp.mp4" expression="full" duration="3300" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp.mp3" expression="full" duration="3300" fileSize="52804170" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp.mp4" expression="full" duration="3300" fileSize="72790274" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_high.mp4" expression="full" duration="3300" fileSize="869329905" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a079/bceb1cd9-e9b5-418d-b4e8-4ba25b8da079/CPPConDechevZhangHighPerformanceCpp_mid.mp4" expression="full" duration="3300" fileSize="196272754" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: JF Bastien “No Sane Compiler Would Optimize Atomics&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>False.</div><div>Compilers do optimize atomics, memory accesses around atomics, and utilize architecture-specific knowledge. My hobby is to encourage compilers to do more of this, programmers to rely on it, and hardware vendors to give us new atomic toys to optimize with. Oh, and standardize yet more close-to-the-metal concurrency and parallelism tools.</div><div>But, you say, surely volatile always means volatile, there's nothing wrong with my benign races, nothing could even go wrong with non-temporal accesses, and who needs 6 memory orderings anyways‽ I'm glad you asked, let me tell you about my hobby...<br>— <br>JF Bastien<br>Jest-in-Time Compiler, template<br>JF Bastien is a compiler engineer, currently focusing on performance and security to bring portable, fast and secure code to the Web. JF is a member of the C&#43;&#43; standards committee, where his mechanical engineering degree serves little purpose. He's worked on startup incubators, business jets, flight simulators, CPUs, dynamic binary translation, systems, and compilers.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:64bfc19cb4bf40719f18a69b011c29c5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-JF-Bastien-No-Sane-Compiler-Would-Optimize-Atomics</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-JF-Bastien-No-Sane-Compiler-Would-Optimize-Atomics</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—False.Compilers do optimize atomics, memory accesses around atomics, and utilize architecture-specific knowledge. My hobby is to encourage compilers to do more of this, programmers to rely on it, and hardware vendors to give us new atomic toys to optimize with. Oh, and standardize yet more close-to-the-metal concurrency and parallelism tools.But, you say, surely volatile always means volatile, there&#39;s nothing wrong with my benign races, nothing could even go wrong with non-temporal accesses, and who needs 6 memory orderings anyways‽ I&#39;m glad you asked, let me tell you about my hobby...— JF BastienJest-in-Time Compiler, templateJF Bastien is a compiler engineer, currently focusing on performance and security to bring portable, fast and secure code to the Web. JF is a member of the C&amp;#43;&amp;#43; standards committee, where his mechanical engineering degree serves little purpose. He&#39;s worked on startup incubators, business jets, flight simulators, CPUs, dynamic binary translation, systems, and compilers.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3465</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-JF-Bastien-No-Sane-Compiler-Would-Optimize-Atomics</guid>
    <dc:creator>JF Bastien</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_high.mp4" length="984482459" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/64bfc19cb4bf40719f18a69b011c29c5/CPPConBastienNoSaneCompilerWouldOptimizeAtomics.mp4" expression="full" duration="3465" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics.mp3" expression="full" duration="3465" fileSize="55455306" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics.mp4" expression="full" duration="3465" fileSize="87028403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_high.mp4" expression="full" duration="3465" fileSize="984482459" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6d58/d9945c16-3582-4ec5-9762-99b9eb1f6d58/CPPConBastienNoSaneCompilerWouldOptimizeAtomics_mid.mp4" expression="full" duration="3465" fileSize="254926378" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Vittorio Romeo “Implementing `static` control flow in C++14&quot; </title>
    <description><![CDATA[<div>Published on Sep 30, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>There has always been great interest in imperative compile-time control flow: as an example, consider all the existing `static_if` proposals and the recently accepted `constexpr_if` construct for C&#43;&#43;17.</div><div>What if you were told that it is actually possible to implement imperative control flow in C&#43;&#43;14?</div><div>In this tutorial, the implementation and design of a compile-time `static_if` branching construct and of a compile-time `static_for` iteration construct will be shown and analyzed. These constructs will then be compared to traditional solutions and upcoming C&#43;&#43;17 features, examining advantages and drawbacks.<br>— <br>Vittorio Romeo<br>Bloomberg LP<br>Software Engineer<br>London, UK<br>Vittorio Romeo is an Italian 21 year old Computer Science student at &quot;Università degli Studi di Messina&quot;. He began programming at a very young age and is now a C&#43;&#43; enthusiast. While following the evolution of the C&#43;&#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. Vittorio is an active member of the C&#43;&#43; community: he participated as a speaker at CppCon 2014/2015, &#43;&#43;it Florence 2015 and at his local Linux Day 2013/2014 events, as a Student/Volunteer at C&#43;&#43;Now 2015, and as part of Meeting C&#43;&#43; 2015's student program. He currently maintains a YouTube channel featuring well-received modern C&#43;&#43;11 and C&#43;&#43;14 tutorials. When he's not writing code, Vittorio enjoys weightlifting and fitness-related activities, competitive/challenging computer gaming and good scifi movies/TV-series.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:24fb9eaf91ec43499cdaa69b011beed8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Vittorio-Romeo-Implementing-static-control-flow-in-C14</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Vittorio-Romeo-Implementing-static-control-flow-in-C14</link>
    <itunes:summary>Published on Sep 30, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—There has always been great interest in imperative compile-time control flow: as an example, consider all the existing `static_if` proposals and the recently accepted `constexpr_if` construct for C&amp;#43;&amp;#43;17.What if you were told that it is actually possible to implement imperative control flow in C&amp;#43;&amp;#43;14?In this tutorial, the implementation and design of a compile-time `static_if` branching construct and of a compile-time `static_for` iteration construct will be shown and analyzed. These constructs will then be compared to traditional solutions and upcoming C&amp;#43;&amp;#43;17 features, examining advantages and drawbacks.— Vittorio RomeoBloomberg LPSoftware EngineerLondon, UKVittorio Romeo is an Italian 21 year old Computer Science student at &amp;quot;Universit&#224; degli Studi di Messina&amp;quot;. He began programming at a very young age and is now a C&amp;#43;&amp;#43; enthusiast. While following the evolution of the C&amp;#43;&amp;#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. Vittorio is an active member of the C&amp;#43;&amp;#43; community: he participated as a speaker at CppCon 2014/2015, &amp;#43;&amp;#43;it Florence 2015 and at his local Linux Day 2013/2014 events, as a Student/Volunteer at C&amp;#43;&amp;#43;Now 2015, and as part of Meeting C&amp;#43;&amp;#43; 2015&#39;s student program. He currently maintains a YouTube channel featuring well-received modern C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 tutorials. When he&#39;s not writing code, Vittorio enjoys weightlifting and fitness-related activities, competitive/challenging computer gaming and good scifi movies/TV-series.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3782</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Vittorio-Romeo-Implementing-static-control-flow-in-C14</guid>
    <dc:creator>Vittorio Romeo</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_high.mp4" length="1289825218" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/24fb9eaf91ec43499cdaa69b011beed8/CPPConRomeoImplementingStaticControl.mp4" expression="full" duration="3782" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl.mp3" expression="full" duration="3782" fileSize="60528330" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl.mp4" expression="full" duration="3782" fileSize="106205551" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_high.mp4" expression="full" duration="3782" fileSize="1289825218" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/810b/e450558a-dbab-4f6f-8211-8e9d61e2810b/CPPConRomeoImplementingStaticControl_mid.mp4" expression="full" duration="3782" fileSize="343570787" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Arthur O&#39;Dwyer “Template Normal Programming (part 2 of 2)&quot; </title>
    <description><![CDATA[<div>Published on Sep 29, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>What is &quot;template normal programming&quot;? It's template metaprogramming without so much of the &quot;meta&quot; part! During this talk, I promise not to mention SFINAE, or recursion, or standard type traits. We'll focus on the common scenarios &quot;I think this code could benefit from templates, but I don't understand how to organize it;&quot; &quot;I can't get anything to compile without errors;&quot; and &quot;My coworker wrote some template code and I don't understand any of it.&quot;</div><div>In Part I of the talk, we'll start with function templates and class templates, then explain variable templates (new in C&#43;&#43;14) and template aliases (new in C&#43;&#43;11). We'll do a deep dive into template type deduction; then talk about full and partial specialization; and finish up with an example that motivates the final feature of C&#43;&#43;11 template syntax, explicit instantiation.</div><div>In Part II of the talk, we'll begin by demystifying tag dispatch and traits classes; discuss situations in which you have to add disambiguating &quot;template&quot; or &quot;typename&quot; keywords (and why); and do a deep dive into the rules of what gets instantiated when and where. We'll revisit template type deduction just long enough to explain how it works for variadic templates; and explain two common template idioms — the Curiously Recurring Template Pattern and the Mixin Pattern.<br>Time permitting, we'll finish by exploring the big new features of templates according to the C&#43;&#43;17 Draft Standard:<br>- template<br>- type deduction for class template constructors<br>- explicit deduction guides<br>— <br>Arthur O'Dwyer<br>Software Engineer, Mixpanel<br>Arthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C&#43;&#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&#43;&#43; meetup.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c63f36aa8adc4a898af0a69b011b63e3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-2-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-2-of-2</link>
    <itunes:summary>Published on Sep 29, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—What is &amp;quot;template normal programming&amp;quot;? It&#39;s template metaprogramming without so much of the &amp;quot;meta&amp;quot; part! During this talk, I promise not to mention SFINAE, or recursion, or standard type traits. We&#39;ll focus on the common scenarios &amp;quot;I think this code could benefit from templates, but I don&#39;t understand how to organize it;&amp;quot; &amp;quot;I can&#39;t get anything to compile without errors;&amp;quot; and &amp;quot;My coworker wrote some template code and I don&#39;t understand any of it.&amp;quot;In Part I of the talk, we&#39;ll start with function templates and class templates, then explain variable templates (new in C&amp;#43;&amp;#43;14) and template aliases (new in C&amp;#43;&amp;#43;11). We&#39;ll do a deep dive into template type deduction; then talk about full and partial specialization; and finish up with an example that motivates the final feature of C&amp;#43;&amp;#43;11 template syntax, explicit instantiation.In Part II of the talk, we&#39;ll begin by demystifying tag dispatch and traits classes; discuss situations in which you have to add disambiguating &amp;quot;template&amp;quot; or &amp;quot;typename&amp;quot; keywords (and why); and do a deep dive into the rules of what gets instantiated when and where. We&#39;ll revisit template type deduction just long enough to explain how it works for variadic templates; and explain two common template idioms — the Curiously Recurring Template Pattern and the Mixin Pattern.Time permitting, we&#39;ll finish by exploring the big new features of templates according to the C&amp;#43;&amp;#43;17 Draft Standard:- template- type deduction for class template constructors- explicit deduction guides— Arthur O&#39;DwyerSoftware Engineer, MixpanelArthur O&#39;Dwyer worked for many years at Green Hills Software, making the world&#39;s most optimizing C and C&amp;#43;&amp;#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a </itunes:summary>
    <itunes:duration>3649</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-2-of-2</guid>
    <dc:creator>arthur o&#39;dwyer</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_high.mp4" length="2128317096" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/c63f36aa8adc4a898af0a69b011b63e3/CPPConODwyerTemplateNormalProgrammingPart2.mp4" expression="full" duration="3649" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2.mp3" expression="full" duration="3649" fileSize="58395978" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2.mp4" expression="full" duration="3649" fileSize="90361045" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_high.mp4" expression="full" duration="3649" fileSize="2128317096" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f98/bf1be4e2-3019-4866-835c-bd360b010f98/CPPConODwyerTemplateNormalProgrammingPart2_mid.mp4" expression="full" duration="3649" fileSize="390894673" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Alisdair Meredith “C++17 in Breadth (part 2 of 2)&quot; </title>
    <description><![CDATA[<div>Published on Sep 29, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>This talk will cover every feature addition, removal, and change in the next version of the C&#43;&#43; standard, provisionally going by the name C&#43;&#43;17. Covering both the language and the library, the coverage of any given feature must necessarily brief. The goal is to come away with an understanding of what each feature is, and why you might want to use it, with an overall impression of how the new language might fit together. It is not intended to be an detailed tutorial on any individual feature, but rather, a jumping off point for further sessions on the topics that seem most interesting.<br>— <br>Alisdair Meredith<br>Bloomberg LP<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.</div><div>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.</div><div>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b26e92776a7a407ba23da69b011b2088">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-2-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-2-of-2</link>
    <itunes:summary>Published on Sep 29, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—This talk will cover every feature addition, removal, and change in the next version of the C&amp;#43;&amp;#43; standard, provisionally going by the name C&amp;#43;&amp;#43;17. Covering both the language and the library, the coverage of any given feature must necessarily brief. The goal is to come away with an understanding of what each feature is, and why you might want to use it, with an overall impression of how the new language might fit together. It is not intended to be an detailed tutorial on any individual feature, but rather, a jumping off point for further sessions on the topics that seem most interesting.— Alisdair MeredithBloomberg LPAlisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3574</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-2-of-2</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_high.mp4" length="987018904" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b26e92776a7a407ba23da69b011b2088/CPPConMeredithCpp17InBreadthpart2.mp4" expression="full" duration="3574" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2.mp3" expression="full" duration="3574" fileSize="57185994" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2.mp4" expression="full" duration="3574" fileSize="99396579" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_high.mp4" expression="full" duration="3574" fileSize="987018904" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bca6/a1d297be-8478-4968-96d1-707eb85abca6/CPPConMeredithCpp17InBreadthpart2_mid.mp4" expression="full" duration="3574" fileSize="269074529" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Matthew Bentley “Colonies, performance and why you should care&quot; </title>
    <description><![CDATA[<div>Published on Sep 29, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In game development and many other high-performance, highly-modular development architectures, maintaining valid references to container elements regardless of erasure and insertion is often crucial. While there are many workarounds for this, typically using std::vector with various methods to avoid invalidation, to date there exist no generalized solutions to the problem which also provide strong cache performance.</div><div>plf::colony, a proposed unordered container class from the SG14 working group, is one attempt to remedy this situation: it provides fast insertion, erasure and iteration performance while maintaining pointer stability to non-erased elements, which is unaffected by both insertion and erasure.</div><div>In this talk we'll explore both the structure and comparative performance of plf::colony, contrasting it with other standard library containers and their potential modifications, showing how it can outperform many typical alternatives where large amounts of insertions and erasures are concerned. This will include details on:</div><div>The &quot;jump-counting&quot; skipfield pattern, a new numeric pattern which has better performance than its boolean counterpart.</div><div>plf::stack, a replacement for std::stack with stronger stack performance than other standard library containers.</div><div>The chained-group allocation pattern, common to both containers.</div><div>If you're not interested in new containers, you may still pick up a few concepts to help you with improving your own implementations and high-performance C&#43;&#43; code. If you are interested in better containers, or better container usage, you should definitely attend this talk.<br>— <br>Matthew Bentley<br>Computer Engineer<br>Matt Bentley was born in 1978 and never recovered from the experience. He started programming in 1986, completing a BSc Computer Science 1999, before spending three years working for a legal publishing firm, getting chronic fatigue syndrone, quitting, building a music studio, recovering, getting interested in programming again, building a game engine, and stumbling across some generalized solutions to some old problems.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b337d86a099140b1b2aca69b011aef15">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matthew-Bentley-Colonies-performance-and-why-you-should-care</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matthew-Bentley-Colonies-performance-and-why-you-should-care</link>
    <itunes:summary>Published on Sep 29, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In game development and many other high-performance, highly-modular development architectures, maintaining valid references to container elements regardless of erasure and insertion is often crucial. While there are many workarounds for this, typically using std::vector with various methods to avoid invalidation, to date there exist no generalized solutions to the problem which also provide strong cache performance.plf::colony, a proposed unordered container class from the SG14 working group, is one attempt to remedy this situation: it provides fast insertion, erasure and iteration performance while maintaining pointer stability to non-erased elements, which is unaffected by both insertion and erasure.In this talk we&#39;ll explore both the structure and comparative performance of plf::colony, contrasting it with other standard library containers and their potential modifications, showing how it can outperform many typical alternatives where large amounts of insertions and erasures are concerned. This will include details on:The &amp;quot;jump-counting&amp;quot; skipfield pattern, a new numeric pattern which has better performance than its boolean counterpart.plf::stack, a replacement for std::stack with stronger stack performance than other standard library containers.The chained-group allocation pattern, common to both containers.If you&#39;re not interested in new containers, you may still pick up a few concepts to help you with improving your own implementations and high-performance C&amp;#43;&amp;#43; code. If you are interested in better containers, or better container usage, you should definitely attend this talk.— Matthew BentleyComputer EngineerMatt Bentley was born in 1978 and never recovered from the experience. He started programming in 1986, completing a BSc Computer Science 1999, before spending three years work</itunes:summary>
    <itunes:duration>3062</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Matthew-Bentley-Colonies-performance-and-why-you-should-care</guid>
    <dc:creator>Matthew Bentley</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_high.mp4" length="1313948714" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/b337d86a099140b1b2aca69b011aef15/CPPConBentleyColoniesPerformance.mp4" expression="full" duration="3062" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance.mp3" expression="full" duration="3062" fileSize="49005642" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance.mp4" expression="full" duration="3062" fileSize="103224019" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_high.mp4" expression="full" duration="3062" fileSize="1313948714" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d21b/d56b4345-3735-417f-a803-9827f3c5d21b/CPPConBentleyColoniesPerformance_mid.mp4" expression="full" duration="3062" fileSize="376786030" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Miodrag Milanović “The MAME story: From C to Modern C++&quot; </title>
    <description><![CDATA[<div>Published on Sep 28, 2016<br>http://www.Cppcon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>In 1997, the MAME project was started as a DOS application written in C. Initially it could emulate a single arcade game, but today we have over 30,000 games. During the years, the code base grew but until 2009, there were no big steps. Then we started using C&#43;&#43;.</div><div>This case study will show how moving from C and plain C&#43;&#43; to modern C&#43;&#43; benefited both developers and end users, how we got better compatibility and portability, and better code. We will also discuss libraries that we feel are missing from the standard and the libraries that we are sharing with the community. <br>— <br>Miodrag Milanović<br>Software Architect, Levi9<br>Born in 1978. Bachelor of Computer Science, work as wide-range developer in local company, for some years as C&#43;&#43; development for various international customers. From 2012 coordinator of MAME emulation project, pushing hard in modernization of two decade old code.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:00f48ead06254148ae8ea69b011a9e12">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Miodrag-Milanovi-The-MAME-story-From-C-to-Modern-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Miodrag-Milanovi-The-MAME-story-From-C-to-Modern-C</link>
    <itunes:summary>Published on Sep 28, 2016http://www.Cppcon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—In 1997, the MAME project was started as a DOS application written in C. Initially it could emulate a single arcade game, but today we have over 30,000 games. During the years, the code base grew but until 2009, there were no big steps. Then we started using C&amp;#43;&amp;#43;.This case study will show how moving from C and plain C&amp;#43;&amp;#43; to modern C&amp;#43;&amp;#43; benefited both developers and end users, how we got better compatibility and portability, and better code. We will also discuss libraries that we feel are missing from the standard and the libraries that we are sharing with the community. — Miodrag MilanovićSoftware Architect, Levi9Born in 1978. Bachelor of Computer Science, work as wide-range developer in local company, for some years as C&amp;#43;&amp;#43; development for various international customers. From 2012 coordinator of MAME emulation project, pushing hard in modernization of two decade old code.—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3804</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Miodrag-Milanovi-The-MAME-story-From-C-to-Modern-C</guid>
    <dc:creator>Miodrag Milanović</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_high.mp4" length="1396656742" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/00f48ead06254148ae8ea69b011a9e12/CPPConMilanovicTheMAMEstory.mp4" expression="full" duration="3804" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory.mp3" expression="full" duration="3804" fileSize="60870858" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory.mp4" expression="full" duration="3804" fileSize="92411264" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_high.mp4" expression="full" duration="3804" fileSize="1396656742" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ad4e/9e308ec6-7ca1-454b-8a7d-3f182a85ad4e/CPPConMilanovicTheMAMEstory_mid.mp4" expression="full" duration="3804" fileSize="313088426" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Christiaan Pretorius “Cache Optimized Hash Tables” </title>
    <description><![CDATA[<div>Published on Sep 28, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Hashes and caches, why another hash library ? <br>Problems,shortcomings and advantages of current open source hash libraries. Includes split between open and closed addressing methods and how these can be combined to give a better solution without much trade off by exploiting the strengths of each.</div><div>Benchmarks <br>Benchmarks of the library with high and medium entropy data, mostly pictures.</div><div>Analogies <br>A short description of the algorithms employed and why they work. This will include a short history of the library and why certain design decisions where made. Use of the birthday problem to model the low memory use evident from the benchmarks.</div><div>Practical uses <br>Demonstrate use cases of the library in treestore MySQL storage engine. Uses include concurrent version control algorithms and a mostly lock free allocation pool. This will include a short session with facebook link bench to illuminate possible advantages.<br>— <br>Christiaan Pretorius<br>Technical Lead, Retro Rabbit<br>Writer maintainer of treestore MySQL storage Engine and Rabbit hash table library. https://github.com/tjizep/treestore \rabbit<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9cb84778976e4427bedca69b011a42c9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Christiaan-Pretorius-Cache-Optimized-Hash-Tables</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Christiaan-Pretorius-Cache-Optimized-Hash-Tables</link>
    <itunes:summary>Published on Sep 28, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Hashes and caches, why another hash library ? Problems,shortcomings and advantages of current open source hash libraries. Includes split between open and closed addressing methods and how these can be combined to give a better solution without much trade off by exploiting the strengths of each.Benchmarks Benchmarks of the library with high and medium entropy data, mostly pictures.Analogies A short description of the algorithms employed and why they work. This will include a short history of the library and why certain design decisions where made. Use of the birthday problem to model the low memory use evident from the benchmarks.Practical uses Demonstrate use cases of the library in treestore MySQL storage engine. Uses include concurrent version control algorithms and a mostly lock free allocation pool. This will include a short session with facebook link bench to illuminate possible advantages.— Christiaan PretoriusTechnical Lead, Retro RabbitWriter maintainer of treestore MySQL storage Engine and Rabbit hash table library. https://github.com/tjizep/treestore \rabbit—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3075</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Christiaan-Pretorius-Cache-Optimized-Hash-Tables</guid>
    <dc:creator>Christiaan Pretorius</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_high.mp4" length="917657585" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/9cb84778976e4427bedca69b011a42c9/CPPconPretoriusCacheOptimizedHashTables.mp4" expression="full" duration="3075" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables.mp3" expression="full" duration="3075" fileSize="49211082" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables.mp4" expression="full" duration="3075" fileSize="67535141" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_high.mp4" expression="full" duration="3075" fileSize="917657585" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe7e/cbc0ae7b-44e0-4873-97da-2c6c6518fe7e/CPPconPretoriusCacheOptimizedHashTables_mid.mp4" expression="full" duration="3075" fileSize="196643672" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Arthur O&#39;Dwyer “Template Normal Programming (part 1 of 2)” </title>
    <description><![CDATA[<div id="watch-uploader-info"><strong class="watch-time-text">Published on Sep 28, 2016</strong></div><div id="watch-description-text"><p id="eow-description"><a class="yt-uix-servicelink" href="http://cppcon.org/" target="_blank" rel="nofollow">http://CppCon.org</a><br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-servicelink" href="https://github.com/cppcon/cppcon2016" target="_blank" rel="nofollow">https://github.com/cppcon/cppcon2016</a><br>—<br>What is &quot;template normal programming&quot;? It's template metaprogramming without so much of the &quot;meta&quot; part! During this talk, I promise not to mention SFINAE, or recursion, or standard type traits. We'll focus on the common scenarios &quot;I think this code could benefit from templates, but I don't understand how to organize it;&quot; &quot;I can't get anything to compile without errors;&quot; and &quot;My coworker wrote some template code and I don't understand any of it.&quot; <br><br>In Part I of the talk, we'll start with function templates and class templates, then explain variable templates (new in C&#43;&#43;14) and template aliases (new in C&#43;&#43;11). We'll do a deep dive into template type deduction; then talk about full and partial specialization; and finish up with an example that motivates the final feature of C&#43;&#43;11 template syntax, explicit instantiation.<br><br>In Part II of the talk, we'll begin by demystifying tag dispatch and traits classes; discuss situations in which you have to add disambiguating &quot;template&quot; or &quot;typename&quot; keywords (and why); and do a deep dive into the rules of what gets instantiated when and where. We'll revisit template type deduction just long enough to explain how it works for variadic templates; and explain two common template idioms — the Curiously Recurring Template Pattern and the Mixin Pattern.<br>Time permitting, we'll finish by exploring the big new features of templates according to the C&#43;&#43;17 Draft Standard:<br>- template<br>- type deduction for class template constructors<br>- explicit deduction guides<br>--<br>Arthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C&#43;&#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&#43;&#43; meetup.<br>--<br>Videos Filmed &amp; Edited by Bash Films: <a class="yt-uix-servicelink" href="http://www.bashfilms.com/" target="_blank" rel="nofollow">http://www.BashFilms.com</a></p></div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:841f1f322b654622bc16a69b0119e996">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-1-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-1-of-2</link>
    <itunes:summary>Published on Sep 28, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—What is &amp;quot;template normal programming&amp;quot;? It&#39;s template metaprogramming without so much of the &amp;quot;meta&amp;quot; part! During this talk, I promise not to mention SFINAE, or recursion, or standard type traits. We&#39;ll focus on the common scenarios &amp;quot;I think this code could benefit from templates, but I don&#39;t understand how to organize it;&amp;quot; &amp;quot;I can&#39;t get anything to compile without errors;&amp;quot; and &amp;quot;My coworker wrote some template code and I don&#39;t understand any of it.&amp;quot; In Part I of the talk, we&#39;ll start with function templates and class templates, then explain variable templates (new in C&amp;#43;&amp;#43;14) and template aliases (new in C&amp;#43;&amp;#43;11). We&#39;ll do a deep dive into template type deduction; then talk about full and partial specialization; and finish up with an example that motivates the final feature of C&amp;#43;&amp;#43;11 template syntax, explicit instantiation.In Part II of the talk, we&#39;ll begin by demystifying tag dispatch and traits classes; discuss situations in which you have to add disambiguating &amp;quot;template&amp;quot; or &amp;quot;typename&amp;quot; keywords (and why); and do a deep dive into the rules of what gets instantiated when and where. We&#39;ll revisit template type deduction just long enough to explain how it works for variadic templates; and explain two common template idioms — the Curiously Recurring Template Pattern and the Mixin Pattern.Time permitting, we&#39;ll finish by exploring the big new features of templates according to the C&amp;#43;&amp;#43;17 Draft Standard:- template- type deduction for class template constructors- explicit deduction guides--Arthur O&#39;Dwyer worked for many years at Green Hills Software, making the world&#39;s most optimizing C and C&amp;#43;&amp;#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&amp;#43;&amp;#43; meetup.--Videos Film</itunes:summary>
    <itunes:duration>3464</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Arthur-ODwyer-Template-Normal-Programming-part-1-of-2</guid>
    <dc:creator>Arthur O&#39;Dwyer </dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_high.mp4" length="2156871259" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/841f1f322b654622bc16a69b0119e996/CPPconODwyerTemplateNormalProgrammingPart1.mp4" expression="full" duration="3464" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1.mp3" expression="full" duration="3464" fileSize="55437258" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1.mp4" expression="full" duration="3464" fileSize="85460480" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_high.mp4" expression="full" duration="3464" fileSize="2156871259" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c5a0/5d3613b7-ae0c-408e-b472-ffb90fd1c5a0/CPPconODwyerTemplateNormalProgrammingPart1_mid.mp4" expression="full" duration="3464" fileSize="387053994" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Manuel Klimek “Deploying C++ modules to 100s of millions of lines of code&quot; </title>
    <description><![CDATA[<div>Published on Sep 27, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Compile times are a pain point for C&#43;&#43; programmers all over the world. Google is no exception.. We have a single unified codebase with hundreds of millions of lines of C&#43;&#43; code, all of it built from source. As the size of the codebase and the depth of interrelated interfaces exposed through textually included headers grew, the scaling of compiles became a critical issue.</div><div>Years ago we started working to build technology in the Clang compiler that could help scale builds more effectively than textual inclusion. This is the core of C&#43;&#43; Modules: moving away from the model of textual inclusion. We also started preparing our codebase to migrate to this technology en masse, and through a highly automated process. It's been a long time and a tremendous effort, but we'd like to share where we are as well as what comes next.</div><div>In this talk, we will outline the core C&#43;&#43; Modules technology in Clang. This is just raw technology at this stage, not an integrated part of the C&#43;&#43; programming language. That part is being worked on by a large group of people in the ISO C&#43;&#43; standards committee. But we want to share how Google is using this raw technology internally to make today's C&#43;&#43; compiles faster, what it took to get there, and how you too can take advantage of these features. We will cover everything from the details of migrating a codebase of this size to use a novel compilation model to the ramifications for both local and distributed build systems. We hope to give insight into the kinds of benefits that technology like C&#43;&#43; Modules can bring to a large scale C&#43;&#43; development environment. <br>— <br>Manuel Klimek<br>Google<br>Software Engineer<br>Manuel Klimek is a software engineer at Google since 2008 and a professional code monkey since 2003. After developing embedded Linux terminals for the payment industry and distributed storage technology at Google in C&#43;&#43;, he decided that C&#43;&#43; productivity lags significantly behind other programming languages and set out to change this. He led the effort to grow Clang (http://clang.llvm.org) into a world class tooling platform for AST-based C&#43;&#43; tools and spearheaded large scale distributed semantic C&#43;&#43; code transformations both at Google and in the broader industry. Besides being sad that Germany lost against France in the Euro 2016, he is currently modularizing Google's internal C&#43;&#43; codebase and leading the development of the next generation of Clang-based C&#43;&#43; tools that range from editor based code completion to deep API refactorings.<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ed3b31df8d884372865aa69b0119a9b2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Manuel-Klimek-Deploying-C-modules-to-100s-of-millions-of-lines-of-code</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Manuel-Klimek-Deploying-C-modules-to-100s-of-millions-of-lines-of-code</link>
    <itunes:summary>Published on Sep 27, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Compile times are a pain point for C&amp;#43;&amp;#43; programmers all over the world. Google is no exception.. We have a single unified codebase with hundreds of millions of lines of C&amp;#43;&amp;#43; code, all of it built from source. As the size of the codebase and the depth of interrelated interfaces exposed through textually included headers grew, the scaling of compiles became a critical issue.Years ago we started working to build technology in the Clang compiler that could help scale builds more effectively than textual inclusion. This is the core of C&amp;#43;&amp;#43; Modules: moving away from the model of textual inclusion. We also started preparing our codebase to migrate to this technology en masse, and through a highly automated process. It&#39;s been a long time and a tremendous effort, but we&#39;d like to share where we are as well as what comes next.In this talk, we will outline the core C&amp;#43;&amp;#43; Modules technology in Clang. This is just raw technology at this stage, not an integrated part of the C&amp;#43;&amp;#43; programming language. That part is being worked on by a large group of people in the ISO C&amp;#43;&amp;#43; standards committee. But we want to share how Google is using this raw technology internally to make today&#39;s C&amp;#43;&amp;#43; compiles faster, what it took to get there, and how you too can take advantage of these features. We will cover everything from the details of migrating a codebase of this size to use a novel compilation model to the ramifications for both local and distributed build systems. We hope to give insight into the kinds of benefits that technology like C&amp;#43;&amp;#43; Modules can bring to a large scale C&amp;#43;&amp;#43; development environment. — Manuel KlimekGoogleSoftware EngineerManuel Klimek is a software engineer at Google since 2008 and a professional code monkey since 2003. After developing embedded</itunes:summary>
    <itunes:duration>3571</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Manuel-Klimek-Deploying-C-modules-to-100s-of-millions-of-lines-of-code</guid>
    <dc:creator>Manuel Klimek</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_high.mp4" length="1098347801" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/ed3b31df8d884372865aa69b0119a9b2/CPPConKlimekDeployingCppmodules.mp4" expression="full" duration="3571" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules.mp3" expression="full" duration="3571" fileSize="57151434" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules.mp4" expression="full" duration="3571" fileSize="87597797" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_high.mp4" expression="full" duration="3571" fileSize="1098347801" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3ea1/2ef4f613-a04c-4c6d-83ce-9e952db33ea1/CPPConKlimekDeployingCppmodules_mid.mp4" expression="full" duration="3571" fileSize="284005791" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Alisdair Meredith “C++17 in Breadth (part 1 of 2)&quot; </title>
    <description><![CDATA[<div>Published on Sep 27, 2016<br>http://CppCon.org<br><br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br><br>This talk will cover every feature addition, removal, and change in the next version of the C&#43;&#43; standard, provisionally going by the name C&#43;&#43;17. Covering both the language and the library, the coverage of any given feature must necessarily brief. The goal is to come away with an understanding of what each feature is, and why you might want to use it, with an overall impression of how the new language might fit together. It is not intended to be an detailed tutorial on any individual feature, but rather, a jumping off point for further sessions on the topics that seem most interesting.<br><br>Alisdair Meredith<br>Bloomberg LP<br>Alisdair Meredith is a software developer at BloombergLP in New York, and the C&#43;&#43; Standard Committee Library Working Group chair.</div><div>He has been an active member of the C&#43;&#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&#43;&#43;11, and also fixed the contents of the original library TR.</div><div>He is currently working on the BDE project, BloombergLP's open source libraries that offer a foundation for C&#43;&#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.<br><br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:393805b73163484180cfa69b01164bf9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-1-of-2</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-1-of-2</link>
    <itunes:summary>Published on Sep 27, 2016http://CppCon.orgPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016This talk will cover every feature addition, removal, and change in the next version of the C&amp;#43;&amp;#43; standard, provisionally going by the name C&amp;#43;&amp;#43;17. Covering both the language and the library, the coverage of any given feature must necessarily brief. The goal is to come away with an understanding of what each feature is, and why you might want to use it, with an overall impression of how the new language might fit together. It is not intended to be an detailed tutorial on any individual feature, but rather, a jumping off point for further sessions on the topics that seem most interesting.Alisdair MeredithBloomberg LPAlisdair Meredith is a software developer at BloombergLP in New York, and the C&amp;#43;&amp;#43; Standard Committee Library Working Group chair.He has been an active member of the C&amp;#43;&amp;#43; committee for just over a decade, and by a lucky co-incidence his first meeting was the kick-off meeting for the project that would become C&amp;#43;&amp;#43;11, and also fixed the contents of the original library TR.He is currently working on the BDE project, BloombergLP&#39;s open source libraries that offer a foundation for C&amp;#43;&amp;#43; development, including a standard library implementation supporting the polymorphic allocator model proposed for standardization.Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3540</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Alisdair-Meredith-C17-in-Breadth-part-1-of-2</guid>
    <dc:creator>Alisdair Meredith</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_high.mp4" length="1077055525" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/393805b73163484180cfa69b01164bf9/CPPconMeredithCPP17inBreadthPart1.mp4" expression="full" duration="3540" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1.mp3" expression="full" duration="3540" fileSize="56646858" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1.mp4" expression="full" duration="3540" fileSize="98928201" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_high.mp4" expression="full" duration="3540" fileSize="1077055525" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8ee/eca0da67-c73f-4dea-a43c-fab2c3d2f8ee/CPPconMeredithCPP17inBreadthPart1_mid.mp4" expression="full" duration="3540" fileSize="278848045" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Tim Haines “Improving Performance Through Compiler Switches...&quot; </title>
    <description><![CDATA[<div>Published on Sep 27, 2016<br>http://CppCon.org<br><br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br><br>Much attention has been given to what modern optimizing compilers can do with your code, but little is ever said as to how to make the compiler invoke these optimizations. Of course, the answer is compiler switches! But which ones are needed to generate the best code? How many switches does it take to get the best performance? How do different compilers compare when using the same set of switches? I explore all of these questions and more to shed light on the interplay between C&#43;&#43; compilers and modern hardware drawing on my work in high performance scientific computing.</div><div>Enabling modern optimizing compilers to exploit current-generation processor features is critical to success in this field. Yet, modernizing aging codebases to utilize these processor features is a daunting task that often results in non-portable code. Rather than relying on hand-tuned optimizations, I explore the ability of today's compilers to breathe new life into old code. In particular, I examine how industry-standard compilers like those from gcc, clang, and Intel perform when compiling operations common to scientific computing without any modifications to the source code. Specifically, I look at streaming data manipulations, reduction operations, compute-intensive loops, and selective array operations. By comparing the quality of the code generated and time to solution from these compilers with various optimization settings for several different C&#43;&#43; implementations, I am able to quantify the utility of each compiler switch in handling varying degrees of abstractions in C&#43;&#43; code. Finally, I measure the effects of these compiler settings on the up-and-coming industrial benchmark High Performance Conjugate Gradient that focuses more on the effects of the memory subsystem than current benchmarks like the traditional High Performance LinPACK suite. <br><br>Tim Haines<br>University of Wisconsin-Madison<br>PhD Candidate<br>Madison, WI<br>I am a third-year PhD candidate working in computational astrophysics. My undergraduate work was in computer science, physics, and mathematics, and I have an M.S. in physics. Fundamentally, my interests lie in developing software systems to try to answer difficult scientific questions combining modern parallel programming techniques in C&#43;&#43; with heterogeneous and massively parallel hardware. As such, I have a keen interest in the application of high performance computing to scientific problems (often called &quot;scientific computing&quot;). I spend most of my days attempting to design and build flexible, abstract software for parallel hardware in C&#43;&#43;. Currently, I am part of a collaboration including the University of Washington and the University of Illinois at Urbana-Champagne working on the development of the cosmological N-body code CHArm N-body GrAvity solver (ChaNGa). Although it has excellent scaling properties (up to 512K processors with 93% efficiency), the node-level performance is sub-optimal. I am now working with a CS PhD candidate at UIUC to replace much of the C&#43;&#43;98 codebase with C&#43;&#43;11 and incorporate GPU computing using the CUDA runtime.<br><br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6a74b6031bfa42e58b1ba69b01140d71">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Haines-Improving-Performance-Through-Compiler-Switches</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Haines-Improving-Performance-Through-Compiler-Switches</link>
    <itunes:summary>Published on Sep 27, 2016http://CppCon.orgPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016Much attention has been given to what modern optimizing compilers can do with your code, but little is ever said as to how to make the compiler invoke these optimizations. Of course, the answer is compiler switches! But which ones are needed to generate the best code? How many switches does it take to get the best performance? How do different compilers compare when using the same set of switches? I explore all of these questions and more to shed light on the interplay between C&amp;#43;&amp;#43; compilers and modern hardware drawing on my work in high performance scientific computing.Enabling modern optimizing compilers to exploit current-generation processor features is critical to success in this field. Yet, modernizing aging codebases to utilize these processor features is a daunting task that often results in non-portable code. Rather than relying on hand-tuned optimizations, I explore the ability of today&#39;s compilers to breathe new life into old code. In particular, I examine how industry-standard compilers like those from gcc, clang, and Intel perform when compiling operations common to scientific computing without any modifications to the source code. Specifically, I look at streaming data manipulations, reduction operations, compute-intensive loops, and selective array operations. By comparing the quality of the code generated and time to solution from these compilers with various optimization settings for several different C&amp;#43;&amp;#43; implementations, I am able to quantify the utility of each compiler switch in handling varying degrees of abstractions in C&amp;#43;&amp;#43; code. Finally, I measure the effects of these compiler settings on the up-and-coming industrial benchmark High Performance Conjugate Gradient that focuses more on the effects of the memory subsystem than current benchmarks like the traditio</itunes:summary>
    <itunes:duration>3981</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Tim-Haines-Improving-Performance-Through-Compiler-Switches</guid>
    <dc:creator>Tim Haines</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_high.mp4" length="2391083783" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/6a74b6031bfa42e58b1ba69b01140d71/CPPcpmHainesImprovingPerformanceThroughCompilerSwitches.mp4" expression="full" duration="3981" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw.mp3" expression="full" duration="3981" fileSize="63705162" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw.mp4" expression="full" duration="3981" fileSize="95947039" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_high.mp4" expression="full" duration="3981" fileSize="2391083783" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d622/7796cb61-9a43-4f34-b511-f0ad93c8d622/CPPcpmHainesImprovingPerformanceThroughCompilerSw_mid.mp4" expression="full" duration="3981" fileSize="400509608" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: &quot;C++ Standard Library Panel&quot; </title>
    <description><![CDATA[<p>Published on Sep 26, 2016<br>http://CppCon.org<br>—<br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br>—<br>Want to meet your standard library maintainer? Now's your chance! Join us for a panel discussion of the C&#43;&#43; standard library with the people who implement it! C&#43;&#43; standard library maintainers and members of the C&#43;&#43; Committee's Library Working Group will talk about the philosophy behind the specification and implementation of the C&#43;&#43; standard library. We'll talk about all the new library features coming in C&#43;&#43;17 (and beyond).<br>—<br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5720bd87ed3f4db183eba69b011291d4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C-Standard-Library-Panel</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C-Standard-Library-Panel</link>
    <itunes:summary>Published on Sep 26, 2016http://CppCon.org—Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016—Want to meet your standard library maintainer? Now&#39;s your chance! Join us for a panel discussion of the C&amp;#43;&amp;#43; standard library with the people who implement it! C&amp;#43;&amp;#43; standard library maintainers and members of the C&amp;#43;&amp;#43; Committee&#39;s Library Working Group will talk about the philosophy behind the specification and implementation of the C&amp;#43;&amp;#43; standard library. We&#39;ll talk about all the new library features coming in C&amp;#43;&amp;#43;17 (and beyond).—Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4167</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-C-Standard-Library-Panel</guid>
    <dc:creator></dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8c9b/22fe74ed-c5b9-4ff8-81ef-c7005f118c9b/CPPConStandardLibraryPanel.mp4" length="212591064" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8c9b/22fe74ed-c5b9-4ff8-81ef-c7005f118c9b/CPPConStandardLibraryPanel_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8c9b/22fe74ed-c5b9-4ff8-81ef-c7005f118c9b/CPPConStandardLibraryPanel_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8c9b/22fe74ed-c5b9-4ff8-81ef-c7005f118c9b/CPPConStandardLibraryPanel_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/5720bd87ed3f4db183eba69b011291d4/CPPConStandardLibraryPanel.mp4" expression="full" duration="4167" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8c9b/22fe74ed-c5b9-4ff8-81ef-c7005f118c9b/CPPConStandardLibraryPanel.mp4" expression="full" duration="4167" fileSize="212591064" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Herb Sutter “Leak-Freedom in C++... By Default.” </title>
    <description><![CDATA[<div>Published on Sep 26, 2016<br>http://CppCon.org<br><br>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016<br><br>Lifetime safety means writing code that, by construction, is guaranteed to eliminate two things: <span class="c9emoticon c9emoticon_angel">(a)</span> use of null/dangling pointers (including pointerlike things such as references, iterators, views, and ranges), and (b) leaks (including the rare 1% case where we're tempted to admit the possibility of an ownership cycle or need to support lock-free concurrent data structures).</div><div>Last year, my CppCon 2015 talk &quot;Writing Good C&#43;&#43;14... By Default&quot; focused on <span class="c9emoticon c9emoticon_angel">(a)</span>, null/dangling, because it's the more difficult and usually more serious problem. I gave an overview of a new approach of using static analysis rules to eliminate use of null and dangling in C&#43;&#43;. That work continues and we're in the process of writing down the formal rules for the approach that I showed last year.</div><div>This year, the focus will be on (b), leaks: The talk aims to begin with a set of simple rules, the &quot;5-minute talk&quot; to demonstrate that a handful of rules can be taught broadly to programmers of all levels, and results in code that is clean and free of leak bugs by construction.</div><div>But, since we'll still have 85 minutes left, we can use the time to spelunk through a series of &quot;Appendix&quot; code examples, in which we'll demonstrate &quot;why and how&quot; to apply those rules to a series of increasingly complex/difficult situations, and that are aimed at increasingly advanced and &quot;clever&quot; (note: not always a good thing) programs and programmers. We'll address questions such as: How should we represent Pimpl types? How should we represent trees – what should the child and parent pointer types be, and (when) should they be unique and when shared? How should we deal with &quot;intra-module&quot; or &quot;encapsulated&quot; cycles when you control all the objects in the cycle, such as all the nodes within a Graph? And what about &quot;inter-module&quot; or &quot;compositional&quot; cycles when you don't know in advance about all the objects that could be in the cycle, such as when combining libraries written by different people in a way that may or may not respect proper layering (notoriously, using callbacks can violate layering)? The answers focus on cases where we have solid guidance, and then move toward some more experimental approaches for potentially addressing the ~1% of cases that aren't yet well covered by unique_ptr, shared_ptr, and weak_ptr.<br><br>Herb Sutter<br>Software architect, Microsoft<br>Author, chair of the ISO C&#43;&#43; committee, software architect at Microsoft.<br><br>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</div> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5a935c4314a645f3abd6a69b0112422e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Herb-Sutter-Leak-Freedom-in-C-By-Default</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Herb-Sutter-Leak-Freedom-in-C-By-Default</link>
    <itunes:summary>Published on Sep 26, 2016http://CppCon.orgPresentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016Lifetime safety means writing code that, by construction, is guaranteed to eliminate two things: (a) use of null/dangling pointers (including pointerlike things such as references, iterators, views, and ranges), and (b) leaks (including the rare 1% case where we&#39;re tempted to admit the possibility of an ownership cycle or need to support lock-free concurrent data structures).Last year, my CppCon 2015 talk &amp;quot;Writing Good C&amp;#43;&amp;#43;14... By Default&amp;quot; focused on (a), null/dangling, because it&#39;s the more difficult and usually more serious problem. I gave an overview of a new approach of using static analysis rules to eliminate use of null and dangling in C&amp;#43;&amp;#43;. That work continues and we&#39;re in the process of writing down the formal rules for the approach that I showed last year.This year, the focus will be on (b), leaks: The talk aims to begin with a set of simple rules, the &amp;quot;5-minute talk&amp;quot; to demonstrate that a handful of rules can be taught broadly to programmers of all levels, and results in code that is clean and free of leak bugs by construction.But, since we&#39;ll still have 85 minutes left, we can use the time to spelunk through a series of &amp;quot;Appendix&amp;quot; code examples, in which we&#39;ll demonstrate &amp;quot;why and how&amp;quot; to apply those rules to a series of increasingly complex/difficult situations, and that are aimed at increasingly advanced and &amp;quot;clever&amp;quot; (note: not always a good thing) programs and programmers. We&#39;ll address questions such as: How should we represent Pimpl types? How should we represent trees – what should the child and parent pointer types be, and (when) should they be unique and when shared? How should we deal with &amp;quot;intra-module&amp;quot; or &amp;quot;encapsulated&amp;quot; cycles when you control all the objects in the cycle, such as all the nodes with</itunes:summary>
    <itunes:duration>5964</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Herb-Sutter-Leak-Freedom-in-C-By-Default</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_high.mp4" length="2755587825" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/5a935c4314a645f3abd6a69b0112422e/CPPConSutterLeakFreedominCpp.mp4" expression="full" duration="5964" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp.mp3" expression="full" duration="5964" fileSize="95437386" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp.mp4" expression="full" duration="5964" fileSize="239861999" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_high.mp4" expression="full" duration="5964" fileSize="2755587825" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1bbb/bf26f519-7ff8-4a9f-a8e4-771a003c1bbb/CPPConSutterLeakFreedominCpp_mid.mp4" expression="full" duration="5964" fileSize="903828870" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: David Schwartz “Developing Blockchain Software” </title>
    <description><![CDATA[<p>Published on Sep 25, 2016 http://CppCon.org</p><p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016</p><p>This talk will explain what public blockchain systems like Bitcoin and Ripple are, the unique challenges of developing software for them, and how C&#43;&#43; helps to meet these challenges.</p><p>Security issues are paramount. Blockchain systems are open source, have large attack surfaces, and can cause significant financial damage if they have exploitable defects. Performance and scalability are also major concerns.</p><p>C&#43;&#43; provides a unique balance that helps meet these challenges. The language's design makes it possible to catch bugs at compile time, write modular code that can be tested, develop flexible data structures and manage resources. Yet, where performance is critical, it does not obscure what your code is making the computer actually do.</p><p>The primary purpose of the talk is to explain what blockchains are, increase understanding of the unusual challenges developers of blockchain software experience, and to demonstrate why C&#43;&#43; is a good choice to address them.</p><p>David Schwartz is the Chief Cryptographer of Ripple, a distributed payment network. Also known as &quot;JoelKatz&quot;, he is a respected voice in the crypto-currency community. David has also developed secure messaging and cloud storage software for government and military applications.</p><p>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:050bb8cee7574f539beda69b0111b035">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Schwartz-Developing-Blockchain-Software</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Schwartz-Developing-Blockchain-Software</link>
    <itunes:summary>Published on Sep 25, 2016 http://CppCon.org Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016 This talk will explain what public blockchain systems like Bitcoin and Ripple are, the unique challenges of developing software for them, and how C&amp;#43;&amp;#43; helps to meet these challenges. Security issues are paramount. Blockchain systems are open source, have large attack surfaces, and can cause significant financial damage if they have exploitable defects. Performance and scalability are also major concerns. C&amp;#43;&amp;#43; provides a unique balance that helps meet these challenges. The language&#39;s design makes it possible to catch bugs at compile time, write modular code that can be tested, develop flexible data structures and manage resources. Yet, where performance is critical, it does not obscure what your code is making the computer actually do. The primary purpose of the talk is to explain what blockchains are, increase understanding of the unusual challenges developers of blockchain software experience, and to demonstrate why C&amp;#43;&amp;#43; is a good choice to address them. David Schwartz is the Chief Cryptographer of Ripple, a distributed payment network. Also known as &amp;quot;JoelKatz&amp;quot;, he is a respected voice in the crypto-currency community. David has also developed secure messaging and cloud storage software for government and military applications. Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4552</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-David-Schwartz-Developing-Blockchain-Software</guid>
    <dc:creator>David Schwartz </dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_high.mp4" length="1833762342" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/050bb8cee7574f539beda69b0111b035/CPPConSchwartzDevelopingBlockchainSoftware.mp4" expression="full" duration="4552" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware.mp3" expression="full" duration="4552" fileSize="72835146" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware.mp4" expression="full" duration="4552" fileSize="111449013" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_high.mp4" expression="full" duration="4552" fileSize="1833762342" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/296d/f812de23-c652-4f71-b596-293ba249296d/CPPConSchwartzDevelopingBlockchainSoftware_mid.mp4" expression="full" duration="4552" fileSize="463742181" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Jason Turner “Rich Code for Tiny Computers: A Simple Commodore 64 Game in C++17” </title>
    <description><![CDATA[<p>Published on Sep 24, 2016 http://CppCon.org</p><p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016</p><p>The Commodore 64 was released in 1982 and is the best selling computer model of all time. At 34 years old, even the most simple embedded processor today outperforms it. Join me on an exploration of how C&#43;&#43;17 techniques can be utilized to write expressive, high performance, high level code for simple computers. Together we will create a game for this aging system.</p><p>You'll leave the talk with a better understanding of what your compiler is capable of and be able to apply these ideas to create better code on modern systems.</p><p>Host of C&#43;&#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&#43;&#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. I'm available for contracting and onsite training.</p><p>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6481f9cbcc1a4ae5becda69b0110e93e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Rich-Code-for-Tiny-Computers-A-Simple-Commodore-64-Game-in-C17</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Rich-Code-for-Tiny-Computers-A-Simple-Commodore-64-Game-in-C17</link>
    <itunes:summary>Published on Sep 24, 2016 http://CppCon.org Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016 The Commodore 64 was released in 1982 and is the best selling computer model of all time. At 34 years old, even the most simple embedded processor today outperforms it. Join me on an exploration of how C&amp;#43;&amp;#43;17 techniques can be utilized to write expressive, high performance, high level code for simple computers. Together we will create a game for this aging system. You&#39;ll leave the talk with a better understanding of what your compiler is capable of and be able to apply these ideas to create better code on modern systems. Host of C&amp;#43;&amp;#43;Weekly https://www.youtube.com/c/JasonTurner..., Co-host of CppCast http://cppcast.com, Co-creator and maintainer of the embedded scripting language for C&amp;#43;&amp;#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. I&#39;m available for contracting and onsite training. Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>4791</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Jason-Turner-Rich-Code-for-Tiny-Computers-A-Simple-Commodore-64-Game-in-C17</guid>
    <dc:creator>Jason Turner</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_high.mp4" length="1920734502" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/6481f9cbcc1a4ae5becda69b0110e93e/CPPTurnerRichCodeforTinyComputers.mp4" expression="full" duration="4791" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers.mp3" expression="full" duration="4791" fileSize="76672074" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers.mp4" expression="full" duration="4791" fileSize="157697159" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_high.mp4" expression="full" duration="4791" fileSize="1920734502" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ccf5/8e2cc522-319b-481d-9e03-965e9883ccf5/CPPTurnerRichCodeforTinyComputers_mid.mp4" expression="full" duration="4791" fileSize="587269676" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Dan “extern c: Talking to C Programmers about C++” </title>
    <description><![CDATA[<p>Published on Sep 24, 2016 http://CppCon.org</p><p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016</p><p>Most of us have heard this story. We’ve even told it ourselves…</p><p>C&#43;&#43; is nearly all of C, plus a whole lot more. Migrating code from C to C&#43;&#43; is pretty easy. Moreover, the migration itself can yield immediate benefits by exposing questionable type conversions that can be sources of latent bugs. After migration, the code performs as well in C&#43;&#43; as in the original C. And now that it’s C&#43;&#43;, you have ready access to a wealth of advanced features you can (but don’t have to) use to implement enhancements.</p><p>Who wouldn’t want that?</p><p>Legions of C programmers, apparently. Despite the success of C&#43;&#43; in numerous application domains, C remains considerably more popular, especially in embedded, automotive, and aerospace applications. In many cases, projects resist C&#43;&#43; because their managers think the risks outweigh the benefits. In other cases, the resistance comes from programmers who persist in believing bad things about C&#43;&#43;, even when those things aren’t true. What can the C&#43;&#43; community do to overcome this resistance? Drawing on lessons from cognitive science, linguistics and psychology, and (of course) computer science, this talk offers suggestions about how to make the case for C&#43;&#43; more persuasive to C programmers.</p><p>Dan Saks is the president of Saks &amp; Associates, which offers training and consulting in C and C&#43;&#43; and their use in developing embedded systems. Dan used to write the “Programming Pointers” column for embedded.com online. He has also written columns for numerous print publications including The C/C&#43;&#43; Users Journal, The C&#43;&#43; Report, Software Development, and Embedded Systems Design. With Thomas Plum, he wrote C&#43;&#43; Programming Guidelines, which won a 1992 Computer Language Magazine Productivity Award. Dan has taught C and C&#43;&#43; to thousands of programmers around the world. He has presented at conferences such as Software Development, Embedded Systems, and C&#43;&#43; World. He has served on the advisory boards of the Embedded Systems and Software Development conferences. Dan served as secretary of the ANSI and ISO C&#43;&#43; Standards committees and as a member of the ANSI C Standards committee. More recently, he contributed to the CERT Secure C Coding Standard and the CERT Secure C&#43;&#43; Coding Standard.</p><p>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5ff8b00292fc4c719434a69b010c1123">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-extern-c-Talking-to-C-Programmers-about-C</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-extern-c-Talking-to-C-Programmers-about-C</link>
    <itunes:summary>Published on Sep 24, 2016 http://CppCon.org Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016 Most of us have heard this story. We’ve even told it ourselves… C&amp;#43;&amp;#43; is nearly all of C, plus a whole lot more. Migrating code from C to C&amp;#43;&amp;#43; is pretty easy. Moreover, the migration itself can yield immediate benefits by exposing questionable type conversions that can be sources of latent bugs. After migration, the code performs as well in C&amp;#43;&amp;#43; as in the original C. And now that it’s C&amp;#43;&amp;#43;, you have ready access to a wealth of advanced features you can (but don’t have to) use to implement enhancements. Who wouldn’t want that? Legions of C programmers, apparently. Despite the success of C&amp;#43;&amp;#43; in numerous application domains, C remains considerably more popular, especially in embedded, automotive, and aerospace applications. In many cases, projects resist C&amp;#43;&amp;#43; because their managers think the risks outweigh the benefits. In other cases, the resistance comes from programmers who persist in believing bad things about C&amp;#43;&amp;#43;, even when those things aren’t true. What can the C&amp;#43;&amp;#43; community do to overcome this resistance? Drawing on lessons from cognitive science, linguistics and psychology, and (of course) computer science, this talk offers suggestions about how to make the case for C&amp;#43;&amp;#43; more persuasive to C programmers. Dan Saks is the president of Saks &amp;amp; Associates, which offers training and consulting in C and C&amp;#43;&amp;#43; and their use in developing embedded systems. Dan used to write the “Programming Pointers” column for embedded.com online. He has also written columns for numerous print publications including The C/C&amp;#43;&amp;#43; Users Journal, The C&amp;#43;&amp;#43; Report, Software Development, and Embedded Systems Design. With Thomas Plum, he wrote C&amp;#43;&amp;#43; Programming Guidelines, which won a 1992 Computer Language Magazine Productivity Award. </itunes:summary>
    <itunes:duration>5786</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Dan-extern-c-Talking-to-C-Programmers-about-C</guid>
    <dc:creator>Dan Saks </dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_high.mp4" length="2826279960" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/5ff8b00292fc4c719434a69b010c1123/CPPConSaksTalkingToCProgrammersAboutCPP.mp4" expression="full" duration="5786" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP.mp3" expression="full" duration="5786" fileSize="92581578" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP.mp4" expression="full" duration="5786" fileSize="186854225" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_high.mp4" expression="full" duration="5786" fileSize="2826279960" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/83d0/0a99f815-0f5d-481b-994d-2046aa5c83d0/CPPConSaksTalkingToCProgrammersAboutCPP_mid.mp4" expression="full" duration="5786" fileSize="740459984" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CppCon 2016: Bjarne Stroustrup &quot;The Evolution of C++ Past, Present and Future&quot; </title>
    <description><![CDATA[<p>http://CppCon.org</p><p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016</p><p>This is a philosophical talk. It deals with ideals, aims, and ways of approximating those. It deals with practical constraints and risks. It gives short examples. It presents a perspective of what drives the evolution of C&#43;&#43;. What is C&#43;&#43; and what it must become over the next years for its success to continue? This involves both social and technical points. Towards the end, I discuss the direction of C&#43;&#43; future evolution, give some opinions, point to urgently needed new features, and discuss how to manage until they are part of the standard.</p><p>Bjarne Stroustrup MD, Morgan Stanley C&#43;&#43;: history, design, use, standardization, future; performance, reliability; software developer education; | distributed systems</p><p>Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2016/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:39840599a603423985fea69b010b45a1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bjarne-Stroustrup-The-Evolution-of-C-Past-Present-and-Future</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bjarne-Stroustrup-The-Evolution-of-C-Past-Present-and-Future</link>
    <itunes:summary>http://CppCon.org Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2016 This is a philosophical talk. It deals with ideals, aims, and ways of approximating those. It deals with practical constraints and risks. It gives short examples. It presents a perspective of what drives the evolution of C&amp;#43;&amp;#43;. What is C&amp;#43;&amp;#43; and what it must become over the next years for its success to continue? This involves both social and technical points. Towards the end, I discuss the direction of C&amp;#43;&amp;#43; future evolution, give some opinions, point to urgently needed new features, and discuss how to manage until they are part of the standard. Bjarne Stroustrup MD, Morgan Stanley C&amp;#43;&amp;#43;: history, design, use, standardization, future; performance, reliability; software developer education; | distributed systems Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com </itunes:summary>
    <itunes:duration>6230</itunes:duration>
    <pubDate>Thu, 03 Nov 2016 00:00:00 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2016/CppCon-2016-Bjarne-Stroustrup-The-Evolution-of-C-Past-Present-and-Future</guid>
    <dc:creator>Bjarne Stroustrup</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_high.mp4" length="2742414992" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/39840599a603423985fea69b010b45a1/CPPConStroustrupTheEvolutionofCPP.mp4" expression="full" duration="6230" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP.mp3" expression="full" duration="6230" fileSize="99690954" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP.mp4" expression="full" duration="6230" fileSize="218596582" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_high.mp4" expression="full" duration="6230" fileSize="2742414992" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eb4f/8fd2f48c-d114-4b14-ad9e-5894c001eb4f/CPPConStroustrupTheEvolutionofCPP_mid.mp4" expression="full" duration="6230" fileSize="820437542" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>    
</channel>
</rss>