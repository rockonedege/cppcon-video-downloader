<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/xsl" media="screen" href="/styles/xslt/rss.xslt"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" xmlns:c9="http://channel9.msdn.com">
<channel>
	<title>CppCon 2015 Sessions (HD)</title>
    <atom:link rel="self" type="application/rss+xml" href="https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high"></atom:link>
    <generator>Rev9</generator>
    <description>Sessions for CppCon 2015</description>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015</link>
    <language>en</language>
		<media:thumbnail url="https://f.ch9.ms/thumbnail/f62ea617-f539-4317-834b-2e13598ccfb4.png" height="165" width="220"></media:thumbnail><media:thumbnail url="https://f.ch9.ms/thumbnail/5d7c4e36-1507-41df-b641-127ee20e4a92.png" height="250" width="960"></media:thumbnail><media:thumbnail url="https://f.ch9.ms/thumbnail/ed18a125-caee-456f-b3bb-c280db8c597b.jpg" height="75" width="100"></media:thumbnail>
  <itunes:image href="https://f.ch9.ms/thumbnail/6b564ab0-bcdc-4ace-8972-32bb2c7ad28e.jpg"></itunes:image>
  <item>
    <title>Technical Specifications &amp; C++17</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The panel will discuss each of the Technical Specifications that the committee has either released or will release soon. We'll cover the File System, Library Fundamentals, Parallelism, Concepts, Transactional Memory, Concurrency, and Networking Technical Specifications. We'll discuss and take questions on the nature of each TS as well as its status in the committee, in implementations, and as a candidate for inclusion in C&#43;&#43;17. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5ce6a771c7c4432c82b1a572010062f0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V007</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V007</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The panel will discuss each of the Technical Specifications that the committee has either released or will release soon. We&#39;ll cover the File System, Library Fundamentals, Parallelism, Concepts, Transactional Memory, Concurrency, and Networking Technical Specifications. We&#39;ll discuss and take questions on the nature of each TS as well as its status in the committee, in implementations, and as a candidate for inclusion in C&amp;#43;&amp;#43;17. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4459</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V007</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-1400_Panel.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007.mp3" expression="full" duration="4459" fileSize="71354442" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007.mp4" expression="full" duration="4459" fileSize="195817791" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/85a3/15bbea58-18a7-491e-b725-cb0fb80785a3/CPPConD05V007_mid.mp4" expression="full" duration="4459" fileSize="962797918" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-1400_Panel.mp4" expression="full" duration="4459" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CopperSpice: A Pure C++ GUI Library</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — CopperSpice is a collection of cross platform GUI libraries derived from Qt 4.8. Our libraries use current C&#43;&#43;11 technology to implement Reflection, without requiring moc (a code generator) or any preprocessing. We will discuss what Reflection is, how this technology can be used, and why it can be difficult to implement. The focus of this presentation is to show the core implementation of CopperSpice. Source code from CopperSpice will be shown to explain how we implemented Reflection using pure C&#43;&#43;11. We will also demonstrate small samples of code which use the CopperSpice libraries. Technologies covered in this presentation will include templates, variadic templates, and template specialization. No prior knowledge of CopperSpice or Qt is required. A working knowledge of templates in C&#43;&#43;11 would be helpful. — Barbara Geller: I am an independent consultant with over twenty-five years of experience as a programmer and software developer. I have worked with numerous smaller companies developing in-house applications. I have also designed and developed Windows applications for several vertical markets including medical billing, transportation, and construction. My degree is in Electrical Engineering from Cal Poly Pomona with additional studies in Computer Science. I am a Co-founder of CopperSpice, a C&#43;&#43; library derived from the existing Qt framework. I designed the Diamond Editor, a cross-platform programmers editor using the CopperSpice libraries. I have programmed in C&#43;&#43;, Qt, Visual Objects, Clipper, PHP, and Java. Ansel Sermersheim: I have been working as a programmer for over fifteen years. My degree is in Computer Science from Cal Poly San Luis Obispo. Currently I work as a software engineer designing scalable, high performance, multi-threaded network daemons in C&#43;&#43;. The daemons I have developed are used at a Tier 1 carrier serving static and live content to customers around the world. I am a Co-founder of CopperSpice, a C&#43;&#43; library derived from the existing Qt 4.8 framework. I have programmed in C&#43;&#43;, C, Lisp, Java, and Perl. I am an avid follower of the C&#43;&#43; standard. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d7fc4fde516149328ee7a572010062e7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V006</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V006</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — CopperSpice is a collection of cross platform GUI libraries derived from Qt 4.8. Our libraries use current C&amp;#43;&amp;#43;11 technology to implement Reflection, without requiring moc (a code generator) or any preprocessing. We will discuss what Reflection is, how this technology can be used, and why it can be difficult to implement. The focus of this presentation is to show the core implementation of CopperSpice. Source code from CopperSpice will be shown to explain how we implemented Reflection using pure C&amp;#43;&amp;#43;11. We will also demonstrate small samples of code which use the CopperSpice libraries. Technologies covered in this presentation will include templates, variadic templates, and template specialization. No prior knowledge of CopperSpice or Qt is required. A working knowledge of templates in C&amp;#43;&amp;#43;11 would be helpful. — Barbara Geller: I am an independent consultant with over twenty-five years of experience as a programmer and software developer. I have worked with numerous smaller companies developing in-house applications. I have also designed and developed Windows applications for several vertical markets including medical billing, transportation, and construction. My degree is in Electrical Engineering from Cal Poly Pomona with additional studies in Computer Science. I am a Co-founder of CopperSpice, a C&amp;#43;&amp;#43; library derived from the existing Qt framework. I designed the Diamond Editor, a cross-platform programmers editor using the CopperSpice libraries. I have programmed in C&amp;#43;&amp;#43;, Qt, Visual Objects, Clipper, PHP, and Java. Ansel Sermersheim: I have been working as a programmer for over fifteen years. My degree is in Computer Science from Cal Poly San Luis Obispo. Currently I work as a software engineer designing scalable, high performance, multi-threaded network daemons in C&amp;#43;&amp;#43;. The daemons I have develope</itunes:summary>
    <itunes:duration>4319</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V006</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-1230_CopperSpiceGellerSemershein.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006.mp3" expression="full" duration="4319" fileSize="69107658" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006.mp4" expression="full" duration="4319" fileSize="143068087" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/bb6a/e488b7e9-1d7f-45ed-93eb-79303088bb6a/CPPConD05V006_mid.mp4" expression="full" duration="4319" fileSize="597198227" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-1230_CopperSpiceGellerSemershein.mp4" expression="full" duration="4319" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Birth of Study Group 14: Towards Improving C++ for Game and Low Latency</title>
    <description><![CDATA[The Birth of Study Group 14: Toward Improving C&#43;&#43; for Games &amp; Low Latency -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&#43;&#43; is paramount for games development, and low-latency real-time applications everywhere. But has it recall improved since C&#43;&#43;98/03? What features in C&#43;&#43; 11/14 has helped, and what else do we still need from C&#43;&#43; 17/22? In last year's CPPCon, there was clearly demand for even better support for this community as evidenced by the large number of games submission and an impromptu BoF. But this industry has a demanding schedule and cannot freely attend ISO C&#43;&#43; standard meetings. So when the prophet cannot go to the mountain, the mountain has decided to come to the prophet! This year, we like to announce the formation of an official SG14 that will go where the community is, at CppCon 2015 will be an official SG14 meeting followed by an SG14 meeting at GDC 2015 hosted by Sony. This talk will describe the initial findings of the unofficial real time google group https://groups.google.com/forum/#!for... as described in: http://www.open-std.org/jtc1/sc22/wg2... where we considered improvements such as flat map, intrusive container, and other suggestions for better support for games development and low latency in ISO C&#43;&#43;. — Nicolas Guillemot: Graphics Software Engineer, Intel I do C&#43;&#43;, game programming, and graphics programming. Currently doing gaming graphics stuff at Intel. Was previously at Electronic Arts, and am studying at the University of Victoria. Sean Middleditch: Lead Server Engineer, Wargaming Seattle, Inc. I make games. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2ca651891af246239574a572010062dd">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V005</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V005</link>
    <itunes:summary>The Birth of Study Group 14: Toward Improving C&amp;#43;&amp;#43; for Games &amp;amp; Low Latency -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&amp;#43;&amp;#43; is paramount for games development, and low-latency real-time applications everywhere. But has it recall improved since C&amp;#43;&amp;#43;98/03? What features in C&amp;#43;&amp;#43; 11/14 has helped, and what else do we still need from C&amp;#43;&amp;#43; 17/22? In last year&#39;s CPPCon, there was clearly demand for even better support for this community as evidenced by the large number of games submission and an impromptu BoF. But this industry has a demanding schedule and cannot freely attend ISO C&amp;#43;&amp;#43; standard meetings. So when the prophet cannot go to the mountain, the mountain has decided to come to the prophet! This year, we like to announce the formation of an official SG14 that will go where the community is, at CppCon 2015 will be an official SG14 meeting followed by an SG14 meeting at GDC 2015 hosted by Sony. This talk will describe the initial findings of the unofficial real time google group https://groups.google.com/forum/#!for... as described in: http://www.open-std.org/jtc1/sc22/wg2... where we considered improvements such as flat map, intrusive container, and other suggestions for better support for games development and low latency in ISO C&amp;#43;&amp;#43;. — Nicolas Guillemot: Graphics Software Engineer, Intel I do C&amp;#43;&amp;#43;, game programming, and graphics programming. Currently doing gaming graphics stuff at Intel. Was previously at Electronic Arts, and am studying at the University of Victoria. Sean Middleditch: Lead Server Engineer, Wargaming Seattle, Inc. I make games. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3290</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V005</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Wong+2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005.mp3" expression="full" duration="3290" fileSize="52645194" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005.mp4" expression="full" duration="3290" fileSize="84382419" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a2fb/1c3e1e98-97e0-483e-84bf-16520b8fa2fb/CPPConD05V005_mid.mp4" expression="full" duration="3290" fileSize="266598600" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Wong+2.mp4" expression="full" duration="3290" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Metaprogramming: Journey from simple to insanity and back</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to template metaprogramming. Template metaprogramming is a variant of generic programming, a technique that uses C&#43;&#43; template mechanism to perform computations at compilation time, usually to generate, from a single description, executable code that depends on the properties of the data types. It can be viewed as “programming with types”. In this example-driven class we start with the overview of the metaprogramming tools (everything you wanted to know about template specializations but were afraid to ask). We will apply these tools to simple examples, such as: how to sort a sequence in order of increasing values, unless it’s a sequence of pointers, in which case we want the values of what they point to. Part II: Advanced techniques and practical applications. Simple examples of metaprogramming are fun and useful, but once you master them you start chafing at the limitations. This is C&#43;&#43;, where we don’t suffer limitations gladly. We therefore move on to the more advanced techniques, including SFINAE, and the appropriately more advanced examples. The journey takes us back to the beginning: after all, when sorting a sequence of values vs a sequence of pointers, you don’t really care whether the pointer is smart or dumb. What you really want to know is whether “*p” compiles or not. What you really need is an “if_compiles” metaprogramming function. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:06f771f0d84d44c39154a572010062d4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V004</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V004</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to template metaprogramming. Template metaprogramming is a variant of generic programming, a technique that uses C&amp;#43;&amp;#43; template mechanism to perform computations at compilation time, usually to generate, from a single description, executable code that depends on the properties of the data types. It can be viewed as “programming with types”. In this example-driven class we start with the overview of the metaprogramming tools (everything you wanted to know about template specializations but were afraid to ask). We will apply these tools to simple examples, such as: how to sort a sequence in order of increasing values, unless it’s a sequence of pointers, in which case we want the values of what they point to. Part II: Advanced techniques and practical applications. Simple examples of metaprogramming are fun and useful, but once you master them you start chafing at the limitations. This is C&amp;#43;&amp;#43;, where we don’t suffer limitations gladly. We therefore move on to the more advanced techniques, including SFINAE, and the appropriately more advanced examples. The journey takes us back to the beginning: after all, when sorting a sequence of values vs a sequence of pointers, you don’t really care whether the pointer is smart or dumb. What you really want to know is whether “*p” compiles or not. What you really need is an “if_compiles” metaprogramming function. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction </itunes:summary>
    <itunes:duration>3957</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V004</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Pikus.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004.mp3" expression="full" duration="3957" fileSize="63313866" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004.mp4" expression="full" duration="3957" fileSize="102753717" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f880/ffe6b49b-71b5-4138-9f9b-d348eb79f880/CPPConD05V004_mid.mp4" expression="full" duration="3957" fileSize="321529681" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Pikus.mp4" expression="full" duration="3957" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A C++14 approach to dates and times</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — A new date and date/time library designed for C&#43;&#43;14 is presented. This library stresses ease of use, easy-to-read code, catching common errors at compile time, and uncompromising run-time performance. The design starts with the C&#43;&#43;11 std::chrono library, and extends it into the realm of calendars, giving a seamless experience built upon chrono::system_clock::time_point, the durations you already know such as chrono::hours and nanoseconds. Functionality that allows easy and efficient conversions between the std::chrono types and year/month/day - hh::mm::ss data structures is presented. When dates (and times) are known at compile-time (e.g. leap second transitions), all computations are available at compile time (constexpr). When only parts of a date are known at compile time, run-time efficiencies are still gained by compile-time computing parts of the date. The syntax of the library is built around a few easy-to-learn rules, and strictly checked at compile time. This makes it easy to learn, and very forgiving for the novice. — Lead author of several C&#43;&#43;11 features including: move semantics, unique_ptr, , and . Coming in C&#43;&#43;14: .Homepage is http://howardhinnant.github.io (never seem to have time to make it look pretty).Lead author on two open source projects: A std::lib implementation: http://libcxx.llvm.org An Itanium ABI implementation: http://libcxxabi.llvm.orgWebsite: http://howardhinnant.github.io — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a464535201644529aa54a572010062cf">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V003</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V003</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — A new date and date/time library designed for C&amp;#43;&amp;#43;14 is presented. This library stresses ease of use, easy-to-read code, catching common errors at compile time, and uncompromising run-time performance. The design starts with the C&amp;#43;&amp;#43;11 std::chrono library, and extends it into the realm of calendars, giving a seamless experience built upon chrono::system_clock::time_point, the durations you already know such as chrono::hours and nanoseconds. Functionality that allows easy and efficient conversions between the std::chrono types and year/month/day - hh::mm::ss data structures is presented. When dates (and times) are known at compile-time (e.g. leap second transitions), all computations are available at compile time (constexpr). When only parts of a date are known at compile time, run-time efficiencies are still gained by compile-time computing parts of the date. The syntax of the library is built around a few easy-to-learn rules, and strictly checked at compile time. This makes it easy to learn, and very forgiving for the novice. — Lead author of several C&amp;#43;&amp;#43;11 features including: move semantics, unique_ptr, , and . Coming in C&amp;#43;&amp;#43;14: .Homepage is http://howardhinnant.github.io (never seem to have time to make it look pretty).Lead author on two open source projects: A std::lib implementation: http://libcxx.llvm.org An Itanium ABI implementation: http://libcxxabi.llvm.orgWebsite: http://howardhinnant.github.io — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3534</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V003</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Hinnant.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003.mp3" expression="full" duration="3534" fileSize="56551242" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003.mp4" expression="full" duration="3534" fileSize="90401199" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/950b/5711c710-9400-4d10-9a4d-d851de15950b/CPPConD05V003_mid.mp4" expression="full" duration="3534" fileSize="285279640" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Hinnant.mp4" expression="full" duration="3534" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Stop Teaching C</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — To this day most people who set out to help others learn C&#43;&#43; start with &quot;introduction to C&quot; material. I think this actively contributes to bad C&#43;&#43; code in the world. For the past few years I've been teaching C&#43;&#43; (and making suggestions to folks who intend to teach themselves) in an entirely different way. No char* strings, no strlen, strcmp, strcpy, no printf, and no [] arrays. Pointers introduced very late. References before pointers, and polymorphism with references rather than with pointers. Smart pointers as the default pointer with raw pointers (whether from new or &amp;) reserved for times they're needed. Drawing on the Standard Library sooner rather than later, and writing modern C&#43;&#43; from lesson 1. In this session I want to talk about the specific advantages of teaching C&#43;&#43; this way – a way that’s very different from the way you almost certainly learned the language. You’ll be pleasantly surprised to see what you get to leave for later or never cover at all, what bad habits you don't later need to correct, what complicated concepts actually become accessible to beginners, and how you spend a lot less time dictating magic spells you can't explain yet, and more showing someone a comprehensive, sensible, and understandable language. You don't have to be a trainer to come to this session. If you ever mentor other developers and show them your C&#43;&#43; code, if you ever help somebody choose a book or a course or other material to learn from, or even if you occasionally feel bad that you work in a language that's hard to learn, come and see how one philosophical shift can turn that very same language into one that's actually pretty easy to learn! — Kate Gregory has been using C&#43;&#43; since before Microsoft had a C&#43;&#43; compiler. She writes, mentors, codes, and leads projects, in both C&#43;&#43; and .NET, especially for Windows 7 and 8. Kate is a Microsoft Regional Director, a Visual C&#43;&#43; MVP, and has written over a dozen books (the most recent on C&#43;&#43; AMP for Microsoft Press) and speaks at conferences and user groups around the world. Kate develops courses on C&#43;&#43;, Visual Studio, and Windows programming for Pluralsight, founded the East of Toronto .NET Users group, and is a member of adjunct faculty at Trent University in Peterborough.Website: http://www.gregcons.comTwitter handle: @gregcons — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4e43dc0341d74dce9eefa572010062ca">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V002</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V002</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — To this day most people who set out to help others learn C&amp;#43;&amp;#43; start with &amp;quot;introduction to C&amp;quot; material. I think this actively contributes to bad C&amp;#43;&amp;#43; code in the world. For the past few years I&#39;ve been teaching C&amp;#43;&amp;#43; (and making suggestions to folks who intend to teach themselves) in an entirely different way. No char* strings, no strlen, strcmp, strcpy, no printf, and no [] arrays. Pointers introduced very late. References before pointers, and polymorphism with references rather than with pointers. Smart pointers as the default pointer with raw pointers (whether from new or &amp;amp;) reserved for times they&#39;re needed. Drawing on the Standard Library sooner rather than later, and writing modern C&amp;#43;&amp;#43; from lesson 1. In this session I want to talk about the specific advantages of teaching C&amp;#43;&amp;#43; this way – a way that’s very different from the way you almost certainly learned the language. You’ll be pleasantly surprised to see what you get to leave for later or never cover at all, what bad habits you don&#39;t later need to correct, what complicated concepts actually become accessible to beginners, and how you spend a lot less time dictating magic spells you can&#39;t explain yet, and more showing someone a comprehensive, sensible, and understandable language. You don&#39;t have to be a trainer to come to this session. If you ever mentor other developers and show them your C&amp;#43;&amp;#43; code, if you ever help somebody choose a book or a course or other material to learn from, or even if you occasionally feel bad that you work in a language that&#39;s hard to learn, come and see how one philosophical shift can turn that very same language into one that&#39;s actually pretty easy to learn! — Kate Gregory has been using C&amp;#43;&amp;#43; since before Microsoft had a C&amp;#43;&amp;#43; compiler. She writes, mentors, codes, and leads projects, in b</itunes:summary>
    <itunes:duration>3610</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V002</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Gregory.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002.mp3" expression="full" duration="3610" fileSize="57776970" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002.mp4" expression="full" duration="3610" fileSize="106730601" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9517/70f7040e-8b8f-447e-a534-c59572c39517/CPPConD05V002_mid.mp4" expression="full" duration="3610" fileSize="332744364" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Gregory.mp4" expression="full" duration="3610" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Evolving Legacy Code</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — We will be presenting on the evolution of a legacy monitoring subsystem modernized to C&#43;&#43;11 with enhanced interfaces and better programming techniques. The presentation will cover some abstracted example problem areas, the solutions, and talk about the strategy employed to modernize the code. — Rachel Cheng: Software Engineer, F5 Networks Michael VanLoon: Principal Software Engineer, F5 Networks I have been developing software for over 30 years. Yes, I started before I was born. I have been doing C&#43;&#43; for over 20 years, not very well at first, and slightly better now. I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities. I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:133e2041b52246198594a572010062bc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V001</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V001</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — We will be presenting on the evolution of a legacy monitoring subsystem modernized to C&amp;#43;&amp;#43;11 with enhanced interfaces and better programming techniques. The presentation will cover some abstracted example problem areas, the solutions, and talk about the strategy employed to modernize the code. — Rachel Cheng: Software Engineer, F5 Networks Michael VanLoon: Principal Software Engineer, F5 Networks I have been developing software for over 30 years. Yes, I started before I was born. I have been doing C&amp;#43;&amp;#43; for over 20 years, not very well at first, and slightly better now. I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities. I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2076</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD05V001</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Cheng+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001.mp3" expression="full" duration="2076" fileSize="33230922" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001.mp4" expression="full" duration="2076" fileSize="56543604" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ba1a/6a96cc91-2ce0-457d-8df3-4df65cb6ba1a/CPPConD05V001_mid.mp4" expression="full" duration="2076" fileSize="224830288" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0925-0900_Cheng+1.mp4" expression="full" duration="2076" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Value Semantics: It ain&#39;t about the syntax! Part II</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — When people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C&#43;&#43; language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, &quot;Should an object of that type be copyable at all?&quot; If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don't. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes. — John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:76a5f80b61c24e3e8c33a572010062b8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V021</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V021</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — When people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C&amp;#43;&amp;#43; language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, &amp;quot;Should an object of that type be copyable at all?&amp;quot; If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don&#39;t. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes. — John Lakos, author of &amp;quot;Large Scale C&amp;#43;&amp;#43; Softw</itunes:summary>
    <itunes:duration>3938</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V021</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Lakos.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021.mp3" expression="full" duration="3938" fileSize="63013578" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021.mp4" expression="full" duration="3938" fileSize="112751070" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2cec/67d6f581-c8f0-4b59-8834-a7ad58df2cec/CPPConD04V021_mid.mp4" expression="full" duration="3938" fileSize="408237821" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Lakos.mp4" expression="full" duration="3938" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Testing Battle.net (before deploying to millions of players)</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Battle.net is the online service that runs Blizzard's games. As such, it is a large scale distributed system with many interacting parts and dependencies on various services and data. While developing Battle.net servers, I needed a way to isolate and test functionality that I was working on. In this talk I will cover my experience designing for testability of components in a distributed system, and practical ways to structure classes and data to facilitate testing. I will also present my solution to the problem of testing my code for correctness, performance and scalability without having to deploy a full-scale environment and spin up a million clients. — Ben has been writing games for almost 20 years, and in C&#43;&#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He's always looking for useful new techniques in C&#43;&#43;, and he likes functional programming. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:22cc1e2b4c9d4e078d89a572010062b3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V020</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V020</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Battle.net is the online service that runs Blizzard&#39;s games. As such, it is a large scale distributed system with many interacting parts and dependencies on various services and data. While developing Battle.net servers, I needed a way to isolate and test functionality that I was working on. In this talk I will cover my experience designing for testability of components in a distributed system, and practical ways to structure classes and data to facilitate testing. I will also present my solution to the problem of testing my code for correctness, performance and scalability without having to deploy a full-scale environment and spin up a million clients. — Ben has been writing games for almost 20 years, and in C&amp;#43;&amp;#43; for most of that. He is currently a Principal Engineer at Blizzard Entertainment where he works on the Battle.net team. He&#39;s always looking for useful new techniques in C&amp;#43;&amp;#43;, and he likes functional programming. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3775</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V020</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Deane.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020.mp3" expression="full" duration="3775" fileSize="60415050" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020.mp4" expression="full" duration="3775" fileSize="89684939" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71e8/3ae57ca7-1e9b-4afc-8c52-9eff949c71e8/CPPConD04V020_mid.mp4" expression="full" duration="3775" fileSize="229781850" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Deane.mp4" expression="full" duration="3775" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Comparison is not simple, but it can be simpler</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The standard's algorithms typically require a 'strict weak ordering'. I will explain what this really means and show that even simple uses of sort can have latent failures. Programmers can avoid the problems today with a bit of work. Changes to the standard will reduce errors and programming effort. — Dr. Lawrence Crowl has expertise in programming languages, compilers, and parallel programming. He has been mixing threads with C&#43;&#43; for twenty-five years and is a major contributor to C&#43;&#43;11. His goal is to achieve both high quality and high performance programs. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:01fb8e402aaf4b7b9a77a572010062aa">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V019</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V019</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The standard&#39;s algorithms typically require a &#39;strict weak ordering&#39;. I will explain what this really means and show that even simple uses of sort can have latent failures. Programmers can avoid the problems today with a bit of work. Changes to the standard will reduce errors and programming effort. — Dr. Lawrence Crowl has expertise in programming languages, compilers, and parallel programming. He has been mixing threads with C&amp;#43;&amp;#43; for twenty-five years and is a major contributor to C&amp;#43;&amp;#43;11. His goal is to achieve both high quality and high performance programs. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2732</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V019</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Crowl.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019.mp3" expression="full" duration="2732" fileSize="43729482" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019.mp4" expression="full" duration="2732" fileSize="62021981" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8bb5/6e46af3a-c204-46b9-883f-e697c7b58bb5/CPPConD04V019_mid.mp4" expression="full" duration="2732" fileSize="184381587" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Crowl.mp4" expression="full" duration="2732" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>string_view</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The library fundamentals TS contains a new class &quot;string_view&quot;, which appears to be unlike anything else in the standard library. In this talk, we will explore the uses of string_view, when it is appropriate to use it, and when it is not. Along the way, I will discuss other possible &quot;_view&quot; classes, with an eye to the upcoming &quot;ranges&quot; proposal before the standards committee. — Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:97a9e92afd394b4abb88a5720100629c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V018</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V018</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The library fundamentals TS contains a new class &amp;quot;string_view&amp;quot;, which appears to be unlike anything else in the standard library. In this talk, we will explore the uses of string_view, when it is appropriate to use it, and when it is not. Along the way, I will discuss other possible &amp;quot;_view&amp;quot; classes, with an eye to the upcoming &amp;quot;ranges&amp;quot; proposal before the standards committee. — Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3760</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V018</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Clow.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018.mp3" expression="full" duration="3760" fileSize="60169290" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018.mp4" expression="full" duration="3760" fileSize="89413799" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/265c/c4dd945f-5147-41dd-97a3-4ac8022f265c/CPPConD04V018_mid.mp4" expression="full" duration="3760" fileSize="223848056" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Clow.mp4" expression="full" duration="3760" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Pruning Error Messages From Your C++ Template Code</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Many template libraries are regarded with ambivalent feelings by developers: On the one hand, such libraries can offer wonderful functionality. On the other hand, they are dreaded for the sheer amount of error messages spilled out by the compiler when there is even a small bug in the developer's code. This talk will demonstrate several techniques to drastically reduce the amount of compiler output in case of errors (with real-life examples, of course). — Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions. | He lives and codes in Munich (Germany). | | Author of | - sqlpp11 | - kiss-templates | | Looking for co-authors for a &quot;names&quot; proposal, see | http://cpp.eudoxos.de/dreaming-of-names/ — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b91bc967dbce4df58ef1a57201006297">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V017</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V017</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Many template libraries are regarded with ambivalent feelings by developers: On the one hand, such libraries can offer wonderful functionality. On the other hand, they are dreaded for the sheer amount of error messages spilled out by the compiler when there is even a small bug in the developer&#39;s code. This talk will demonstrate several techniques to drastically reduce the amount of compiler output in case of errors (with real-life examples, of course). — Roland is Head of Development at PPRO Financial Ltd, an FCA regulated e-Money institute offering prepaid MasterCard card programs and comprehensive financial solutions for international electronic payment transactions. | He lives and codes in Munich (Germany). | | Author of | - sqlpp11 | - kiss-templates | | Looking for co-authors for a &amp;quot;names&amp;quot; proposal, see | http://cpp.eudoxos.de/dreaming-of-names/ — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3208</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V017</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Bock.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017.mp3" expression="full" duration="3208" fileSize="51335370" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017.mp4" expression="full" duration="3208" fileSize="84813626" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ce0/4a000589-e53e-4344-8534-0160ee3c2ce0/CPPConD04V017_mid.mp4" expression="full" duration="3208" fileSize="231260977" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1645_Bock.mp4" expression="full" duration="3208" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Compile-time tools supporting generic programming in C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Generic programming is a programming paradigm which makes it possible to build highly extensible and efficient libraries. In C&#43;&#43; it can be implemented using templates, therefore developers and users of generic libraries need to understand how the compiler works with templates. The details are important when the code using a library instantiates different templates (or specialisations), or the same templates but with different arguments as expected. Fixing such bugs can lead to difficult debugging sessions. These are not bugs in the program's runtime behaviour. These are bugs in the program's compile-time behaviour and therefore different tools are needed to find them. Tools providing insight into what happens during the compilation process are needed. Template metaprogrammers have been pushing the limits of what is possible using templates. The way they use templates is usually more complex than what generic libraries need. Recently a number of advanced tools supporting template metaprogrammers have been built. REPL shells, debuggers, profilers are available to make it possible to see what happens during compilation. This talk presents how these tools can be used and be useful for the developers and users of generic libraries. Insight into what happens inside the compiler can be extremely useful to understand why the code compiles slowly, behaves the way it does or to debug errors in code using generic libraries. — Ábel Sinkovics is a software developer and has defended his PhD in January at Eötvös Loránd University, Budapest, Hungary. His research is about C&#43;&#43; template metaprogramming, functional programming and domain-specific languages. He has been building libraries supporting domain-specific language embedding based on template metaprogramming and libraries supporting template metaprogrammers. He has also been working on tools supporting metaprogramming in C&#43;&#43;. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:73267f387f4a411aa37aa5720100628e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V016</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V016</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Generic programming is a programming paradigm which makes it possible to build highly extensible and efficient libraries. In C&amp;#43;&amp;#43; it can be implemented using templates, therefore developers and users of generic libraries need to understand how the compiler works with templates. The details are important when the code using a library instantiates different templates (or specialisations), or the same templates but with different arguments as expected. Fixing such bugs can lead to difficult debugging sessions. These are not bugs in the program&#39;s runtime behaviour. These are bugs in the program&#39;s compile-time behaviour and therefore different tools are needed to find them. Tools providing insight into what happens during the compilation process are needed. Template metaprogrammers have been pushing the limits of what is possible using templates. The way they use templates is usually more complex than what generic libraries need. Recently a number of advanced tools supporting template metaprogrammers have been built. REPL shells, debuggers, profilers are available to make it possible to see what happens during compilation. This talk presents how these tools can be used and be useful for the developers and users of generic libraries. Insight into what happens inside the compiler can be extremely useful to understand why the code compiles slowly, behaves the way it does or to debug errors in code using generic libraries. — &#193;bel Sinkovics is a software developer and has defended his PhD in January at E&#246;tv&#246;s Lor&#225;nd University, Budapest, Hungary. His research is about C&amp;#43;&amp;#43; template metaprogramming, functional programming and domain-specific languages. He has been building libraries supporting domain-specific language embedding based on template metaprogramming and libraries supporting template metaprogrammers. He has also been working on </itunes:summary>
    <itunes:duration>3066</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V016</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Sinkovics.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016.mp3" expression="full" duration="3066" fileSize="49063626" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016.mp4" expression="full" duration="3066" fileSize="89617583" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2973/443c4cf1-fd6d-452a-b736-98b290a02973/CPPConD04V016_mid.mp4" expression="full" duration="3066" fileSize="273756536" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Sinkovics.mp4" expression="full" duration="3066" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Value Semantics: It ain&#39;t about the syntax! Part I</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — When people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C&#43;&#43; language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, &quot;Should an object of that type be copyable at all?&quot; If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don't. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes. — John Lakos, author of &quot;Large Scale C&#43;&#43; Software Design.&quot;, serves at Bloomberg LP in New York City as a senior architect and mentor for C&#43;&#43; Software Development world-wide. He is also an active voting member of the C&#43;&#43; Standards Committee, Library Working Group. Previously, Dr. Lakos directed the design and development of infrastructure libraries for proprietary analytic financial applications at Bear Stearns. For 12 years prior, Dr. Lakos developed large frameworks and advanced ICCAD applications at Mentor Graphics, for which he holds multiple software patents. His academic credentials include a Ph.D. in Computer Science ('97) and an Sc.D. in Electrical Engineering ('89) from Columbia University. Dr. Lakos received his undergraduate degrees from MIT in Mathematics ('82) and Computer Science ('81). His next book, entitled &quot;Large-Scale C&#43;&#43;, Volume I: Process and Architecture&quot;, is anticipated in 2014. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:33ff90e54dcf4d0da308a57201006289">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V015</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V015</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — When people talk about a type as having *value* *semantics*, they are often thinking about its ability to be passed to (or returned from) a function by value. In order to do that, the C&amp;#43;&amp;#43; language requires that the type implement a copy constructor, and so people routinely implement copy constructors on their classes, which begs the question, &amp;quot;Should an object of that type be copyable at all?&amp;quot; If so, what should be true about the copy? Should it have the same state as the original object? Same behavior? What does copying an object mean?! By *value* *type*, most people assume that the type is specifically intended to represent a member of some set (of values). A *value-semantic* *type*, however, is one that strives to approximate an abstract *mathematical* type (e.g., integer, character set, complex-number sequence), which comprises operations as well as values. When we copy an object of a value-semantic type, the new object might not have the same state, or even the same behavior as the original object; for proper value-semantic types, however, the new object will have the same *value*. In this talk, we begin by gaining an intuitive feel for what we mean by *value* by identifying *salient* *attributes*, i.e., those that contribute to value, and by contrasting types whose objects naturally represent values with those that don&#39;t. After quickly reviewing the syntactic properties common to typical value types, we dive into the much deeper issues that *value* *semantics* entail. In particular, we explore the subtle *Essential* *Property* *of* *Value*, which applies to every *salient* mutating operation on a value-semantic object, and then profitably apply this property to realize a correct design for each of a variety of increasingly interesting (value-semantic) classes. — John Lakos, author of &amp;quot;Large Scale C&amp;#43;&amp;#43; Softw</itunes:summary>
    <itunes:duration>3499</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V015</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Lakos.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015.mp3" expression="full" duration="3499" fileSize="55999434" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015.mp4" expression="full" duration="3499" fileSize="100926892" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8fb1/e9423196-0dc2-4266-9edc-e07f2e608fb1/CPPConD04V015_mid.mp4" expression="full" duration="3499" fileSize="344145982" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Lakos.mp4" expression="full" duration="3499" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Secure C++ Programming</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Security vulnerabilities are fundamentally defects in our code. We know many of these defects stem from string processing, buffer overflows and integer underflow and overflows. These defects become security vulnerabilities when an attacker can crash an application, cause undefined behavior that leads to a Denial of Service, privilege escalation or hidden installation of rogue software. So how do we build more secure C&#43;&#43; software? It starts by gaining an understanding of the basics of security vulnerabilities and how to identify them using the rich set of tools we now have available. With this foundation we can build a development culture where security considerations are pervasive and treated as important as program and algorithm correctness. This session begins with a survey of common C/C&#43;&#43; string, integer and STL container issues and mitigations for these vulnerabilities. Follows with two detailed examples of vulnerabilities and how to fix their problems. Finishes with a survey of tools and references we have available today. — Gwendolyn Hunt has been in the trenches programming C&#43;&#43; for 20-years. Starting with card swipe systems with EDS, asynchronous messaging client server systems with IBM and high resolution surveillance systems for a bleeding edge startup, Gwendolyn has had the opportunity to build a wide-variety of production and commercial software applications. The last four years she has been the development lead for new generation security applications for Tripwire, Inc. When she is not cranking code, Gwendolyn finds telemark skiing and riding technical singletrack to calm the mind. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fad26fef9c034f74becba5720100627f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V014</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V014</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Security vulnerabilities are fundamentally defects in our code. We know many of these defects stem from string processing, buffer overflows and integer underflow and overflows. These defects become security vulnerabilities when an attacker can crash an application, cause undefined behavior that leads to a Denial of Service, privilege escalation or hidden installation of rogue software. So how do we build more secure C&amp;#43;&amp;#43; software? It starts by gaining an understanding of the basics of security vulnerabilities and how to identify them using the rich set of tools we now have available. With this foundation we can build a development culture where security considerations are pervasive and treated as important as program and algorithm correctness. This session begins with a survey of common C/C&amp;#43;&amp;#43; string, integer and STL container issues and mitigations for these vulnerabilities. Follows with two detailed examples of vulnerabilities and how to fix their problems. Finishes with a survey of tools and references we have available today. — Gwendolyn Hunt has been in the trenches programming C&amp;#43;&amp;#43; for 20-years. Starting with card swipe systems with EDS, asynchronous messaging client server systems with IBM and high resolution surveillance systems for a bleeding edge startup, Gwendolyn has had the opportunity to build a wide-variety of production and commercial software applications. The last four years she has been the development lead for new generation security applications for Tripwire, Inc. When she is not cranking code, Gwendolyn finds telemark skiing and riding technical singletrack to calm the mind. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2898</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V014</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Hunt.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014.mp3" expression="full" duration="2898" fileSize="46375626" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014.mp4" expression="full" duration="2898" fileSize="98196733" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2216/b06767fa-3a6b-4a2e-a7f3-3813edbe2216/CPPConD04V014_mid.mp4" expression="full" duration="2898" fileSize="332675237" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Hunt.mp4" expression="full" duration="2898" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Demystifying Floating Point</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Every day we develop software that relies on math while we often overlook the importance of understanding the implications of using our IEEE floats. From the often cited “floating point error” to unstable algorithms, this talk will explain the importance of floats, understanding their storage, the impact of the IEEE floats on math, and designing algorithms better. Finally, the talk will conclude with a quick case study of storing time for games and simulations. — John Farrier is a software engineer, researcher, and musician. He designs software architectures for military modeling and simulation activities. His projects support efforts across the U.S. Department of Defense ranging from lab-based experimental software to fielded software on live fire test ranges. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3cb2a274f14c45379ad4a5720100627b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V013</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V013</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Every day we develop software that relies on math while we often overlook the importance of understanding the implications of using our IEEE floats. From the often cited “floating point error” to unstable algorithms, this talk will explain the importance of floats, understanding their storage, the impact of the IEEE floats on math, and designing algorithms better. Finally, the talk will conclude with a quick case study of storing time for games and simulations. — John Farrier is a software engineer, researcher, and musician. He designs software architectures for military modeling and simulation activities. His projects support efforts across the U.S. Department of Defense ranging from lab-based experimental software to fielded software on live fire test ranges. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2853</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V013</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Farrier.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013.mp3" expression="full" duration="2853" fileSize="45650634" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013.mp4" expression="full" duration="2853" fileSize="75998450" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f271/3a481f07-46f0-4fdd-8708-06cd33f2f271/CPPConD04V013_mid.mp4" expression="full" duration="2853" fileSize="270673531" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_Farrier.mp4" expression="full" duration="2853" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Programming with less effort in C++: Measuring the programming effort with metrics</title>
    <description><![CDATA[Programming with less effort C&#43;&#43;: Measuring the programming effort with metrics -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The C&#43;&#43; language and libraries propose different ways to implement codes. For example, using explicit loops or STL algorithms to traverse containers and process data. C&#43;&#43;11&amp;14 bring also new features to the C&#43;&#43; language aimed at simplifying the writing of codes. But what is the gain we can expect in term of development effort when using these different possibilities and features ? or, as a developer may ask himself: Is it viable for me to spend some time learning new C&#43;&#43; libraries or standards to provide less effort/spend less time on my future codes ? Before answering these questions, we must give a definition of the development effort, and define a way to measure it. Thus, we first propose to describe existing software metrics, from the simple Single Line Of Code (SLOC) to the more complex Halstead metrics, then to implement them in an automatic tool based on Clang tools, and finally to apply them on several codes to compare their respective development efforts. First results show that using modern C&#43;&#43; features like auto, decltype and lambdas help to dramatically reduce the development effort. These results may help to convince developers to use new C&#43;&#43; features, or to port their codes from old standards to new ones, or even switch from other languages to C&#43;&#43; ! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:519d482b39464100997ba57201006271">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V012</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V012</link>
    <itunes:summary>Programming with less effort C&amp;#43;&amp;#43;: Measuring the programming effort with metrics -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The C&amp;#43;&amp;#43; language and libraries propose different ways to implement codes. For example, using explicit loops or STL algorithms to traverse containers and process data. C&amp;#43;&amp;#43;11&amp;amp;14 bring also new features to the C&amp;#43;&amp;#43; language aimed at simplifying the writing of codes. But what is the gain we can expect in term of development effort when using these different possibilities and features ? or, as a developer may ask himself: Is it viable for me to spend some time learning new C&amp;#43;&amp;#43; libraries or standards to provide less effort/spend less time on my future codes ? Before answering these questions, we must give a definition of the development effort, and define a way to measure it. Thus, we first propose to describe existing software metrics, from the simple Single Line Of Code (SLOC) to the more complex Halstead metrics, then to implement them in an automatic tool based on Clang tools, and finally to apply them on several codes to compare their respective development efforts. First results show that using modern C&amp;#43;&amp;#43; features like auto, decltype and lambdas help to dramatically reduce the development effort. These results may help to convince developers to use new C&amp;#43;&amp;#43; features, or to port their codes from old standards to new ones, or even switch from other languages to C&amp;#43;&amp;#43; ! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3574</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V012</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_DeCosta+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012.mp3" expression="full" duration="3574" fileSize="57189066" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012.mp4" expression="full" duration="3574" fileSize="79273743" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8323/729a369e-55e6-44f7-b610-7a7924998323/CPPConD04V012_mid.mp4" expression="full" duration="3574" fileSize="244125521" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1515_DeCosta+1.mp4" expression="full" duration="3574" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>for_each_argument&#39; explained and expanded</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — During January 2015, Sean Parent posted a very interesting short piece of code on Twitter. The code iteratively iterates at compile-time over any number of function arguments, forwarding them one by one to a callable object. How does this code work? What are the possible use cases? Can we make it even more generic and useful? My talk answers all of the questions above, using independently compiled chronologically sequential code segments that show the audience the analysis and improvement process of `for_each_argument`. — Vittorio Romeo is an Italian 20 year old Computer Science student at &quot;Università degli Studi di Messina&quot;. He began programming at a very young age and soon became a C&#43;&#43; enthusiast. While following the evolution of the C&#43;&#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. Vittorio is an active member of the C&#43;&#43; community: he participated as a speaker at CppCon 2014, as a Student/Volunteer at C&#43;&#43;Now 2015, as a speaker at Italian C&#43;&#43; Meeting 2015 and as a speaker at his local city's Linux Day 2013 and 2014 events. He currently maintains a YouTube channel featuring well-received modern C&#43;&#43;11 and C&#43;&#43;14 tutorials. When he's not programming, Vittorio enjoys weightlifting and fitness-related activities, competitive/challenging computer gaming (CS:GO, Quake, LoL, Touhou, ...), and good sci-fi movies/tv-series (Firefly, Fringe, Futurama, ...). — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c40c71f607f04b8fa3bfa5720100626d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V011</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V011</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — During January 2015, Sean Parent posted a very interesting short piece of code on Twitter. The code iteratively iterates at compile-time over any number of function arguments, forwarding them one by one to a callable object. How does this code work? What are the possible use cases? Can we make it even more generic and useful? My talk answers all of the questions above, using independently compiled chronologically sequential code segments that show the audience the analysis and improvement process of `for_each_argument`. — Vittorio Romeo is an Italian 20 year old Computer Science student at &amp;quot;Universit&#224; degli Studi di Messina&amp;quot;. He began programming at a very young age and soon became a C&amp;#43;&amp;#43; enthusiast. While following the evolution of the C&amp;#43;&amp;#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. Vittorio is an active member of the C&amp;#43;&amp;#43; community: he participated as a speaker at CppCon 2014, as a Student/Volunteer at C&amp;#43;&amp;#43;Now 2015, as a speaker at Italian C&amp;#43;&amp;#43; Meeting 2015 and as a speaker at his local city&#39;s Linux Day 2013 and 2014 events. He currently maintains a YouTube channel featuring well-received modern C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 tutorials. When he&#39;s not programming, Vittorio enjoys weightlifting and fitness-related activities, competitive/challenging computer gaming (CS:GO, Quake, LoL, Touhou, ...), and good sci-fi movies/tv-series (Firefly, Fringe, Futurama, ...). — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1912</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V011</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Romeo.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011.mp3" expression="full" duration="1912" fileSize="30598602" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011.mp4" expression="full" duration="1912" fileSize="53820556" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/62dd/d5c78981-3d3b-4d5b-8ede-6cb306e162dd/CPPConD04V011_mid.mp4" expression="full" duration="1912" fileSize="170678354" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Romeo.mp4" expression="full" duration="1912" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Compile-time contract checking with nn</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Tony Hoare called null pointers a “billion-dollar mistake”, but nearly every language in wide use today has them. There have been many efforts to reduce the risk of nulls creeping in where they shouldn't be, but most involve attributes or annotations rather than being part of the type system itself. Can we do better? C&#43;&#43;'s customizable value types make it possible to solve this sort of problem. In this talk, I’ll present a non-nullable pointer wrapper, `nn`, that’s found wide use in Dropbox’s C&#43;&#43; code. This helper lets us use the type system to track pointers that can't be null, and express and enforce contracts at compile time. I’ll go into some depth on the template trickery needed to make things “just work”, the toolchain bugs we found along the way, and how this tool has helped us improve our code. — Jacob Potter is a recovering embedded systems engineer who is now driving Dropbox’s use of modern C&#43;&#43; for cross-platform mobile development. He's also the primary maintainer of Djinni, the tool Dropbox uses for generating cross-language bindings. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:afd8d3df18a94e0a8546a57201006263">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V010</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V010</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Tony Hoare called null pointers a “billion-dollar mistake”, but nearly every language in wide use today has them. There have been many efforts to reduce the risk of nulls creeping in where they shouldn&#39;t be, but most involve attributes or annotations rather than being part of the type system itself. Can we do better? C&amp;#43;&amp;#43;&#39;s customizable value types make it possible to solve this sort of problem. In this talk, I’ll present a non-nullable pointer wrapper, `nn`, that’s found wide use in Dropbox’s C&amp;#43;&amp;#43; code. This helper lets us use the type system to track pointers that can&#39;t be null, and express and enforce contracts at compile time. I’ll go into some depth on the template trickery needed to make things “just work”, the toolchain bugs we found along the way, and how this tool has helped us improve our code. — Jacob Potter is a recovering embedded systems engineer who is now driving Dropbox’s use of modern C&amp;#43;&amp;#43; for cross-platform mobile development. He&#39;s also the primary maintainer of Djinni, the tool Dropbox uses for generating cross-language bindings. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1437</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V010</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Potter.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010.mp3" expression="full" duration="1437" fileSize="22994634" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010.mp4" expression="full" duration="1437" fileSize="37296092" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0578/b8039c17-83cb-4d80-8bf5-54f199a00578/CPPConD04V010_mid.mp4" expression="full" duration="1437" fileSize="104074074" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Potter.mp4" expression="full" duration="1437" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Futures from Scratch: A Guided Tour of Concurrency in C++14 and Beyond</title>
    <description><![CDATA[Futures from Scratch: A Guided Tour of Concurrency in C&#43;&#43;14 and Beyond -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The contents of header are probably still a bit mysterious to most people. Sure, we know that setting the value of a promise causes the corresponding future to resolve; but how does that happen behind the scenes in a way that allows us to move futures around? How are we going to implement the new features in the Concurrency TS, such as .then() and .when_all()? How (if at all) do futures interact with std::thread, std::async, and &quot;executors&quot;? We'll present an extremely simplified implementation of futures and shared_futures, without the template metaprogramming that comes along with future and future and so on, but showing all the pointers and synchronization primitives. — Arthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C&#43;&#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&#43;&#43; meetup. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2a8aa4e15b5d4f72ab32a5720100625a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V009</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V009</link>
    <itunes:summary>Futures from Scratch: A Guided Tour of Concurrency in C&amp;#43;&amp;#43;14 and Beyond -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The contents of header are probably still a bit mysterious to most people. Sure, we know that setting the value of a promise causes the corresponding future to resolve; but how does that happen behind the scenes in a way that allows us to move futures around? How are we going to implement the new features in the Concurrency TS, such as .then() and .when_all()? How (if at all) do futures interact with std::thread, std::async, and &amp;quot;executors&amp;quot;? We&#39;ll present an extremely simplified implementation of futures and shared_futures, without the template metaprogramming that comes along with future and future and so on, but showing all the pointers and synchronization primitives. — Arthur O&#39;Dwyer worked for many years at Green Hills Software, making the world&#39;s most optimizing C and C&amp;#43;&amp;#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&amp;#43;&amp;#43; meetup. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3312</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V009</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Odwyer.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009.mp3" expression="full" duration="3312" fileSize="41146314" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009.mp4" expression="full" duration="3312" fileSize="60785407" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d4f7/0595c491-8d77-487a-8f91-068a5105d4f7/CPPConD04V009_mid.mp4" expression="full" duration="3312" fileSize="161739564" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Odwyer.mp4" expression="full" duration="3312" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Racing the File System</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Almost every programmer knows about and fears race conditions on memory where one strand of execution may concurrently update data in use by another strand of execution, leading to an inconsistent and usually dangerous inconsistent read of program state. Almost every programmer therefore is aware of mutexes, memory ordering, semaphores and the other techniques used to serialise access to memory. Interestingly, most programmers are but vaguely aware of potential race conditions on the filing system, and as a result write code which assumes that the filing system does not suddenly change out from underneath you when you are working on it. This assumption of a static filing system introduces many potential security bugs never mind ways of crashing your program, and of course creating data loss and corruption. This workshop will cover some of the ways in which filing system races can confound, and what portable idioms and patterns you should employ to prevent misoperation, even across networked Samba shares. Finally, an introduction of the proposed Boost library AFIO will be made which can help application developers writing filing system race free code portably. — Niall Douglas is a lead author of proposed Boost.AFIO, Boost.APIBind and Boost.Outcome. He is currently the lead Google Summer of Code administrator for Boost. He is an Affiliate Researcher with the Waterloo Research Institute for Complexity and Innovation at the University of Waterloo, Canada, and holds postgraduate qualifications in Business Information Systems and Educational and Social Research as well as a second undergraduate degree double majoring in Economics and Management. He has been using Boost since 2002 and was the ISO SC22 (Programming Languages) mirror convener for the Republic of Ireland 2011-2012. He formerly worked for BlackBerry 2012-2013 in their Platform Development group, and was formerly the Chief Software Architect of the Fuel and Hydraulic Test Benches of the EuroFighter defense aircraft. He is a published author in the field of Economics and Power Relations, is the Social Media Coordinator for the World Economics Association and his particular interest lies in productivity, the causes of productivity and the organizational scaling constraints which inhibit productivity. He is presently between contracts as an expert C&#43;&#43; consultant. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:72baad2d11bd4da3ba17a57201006255">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V008</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V008</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Almost every programmer knows about and fears race conditions on memory where one strand of execution may concurrently update data in use by another strand of execution, leading to an inconsistent and usually dangerous inconsistent read of program state. Almost every programmer therefore is aware of mutexes, memory ordering, semaphores and the other techniques used to serialise access to memory. Interestingly, most programmers are but vaguely aware of potential race conditions on the filing system, and as a result write code which assumes that the filing system does not suddenly change out from underneath you when you are working on it. This assumption of a static filing system introduces many potential security bugs never mind ways of crashing your program, and of course creating data loss and corruption. This workshop will cover some of the ways in which filing system races can confound, and what portable idioms and patterns you should employ to prevent misoperation, even across networked Samba shares. Finally, an introduction of the proposed Boost library AFIO will be made which can help application developers writing filing system race free code portably. — Niall Douglas is a lead author of proposed Boost.AFIO, Boost.APIBind and Boost.Outcome. He is currently the lead Google Summer of Code administrator for Boost. He is an Affiliate Researcher with the Waterloo Research Institute for Complexity and Innovation at the University of Waterloo, Canada, and holds postgraduate qualifications in Business Information Systems and Educational and Social Research as well as a second undergraduate degree double majoring in Economics and Management. He has been using Boost since 2002 and was the ISO SC22 (Programming Languages) mirror convener for the Republic of Ireland 2011-2012. He formerly worked for BlackBerry 2012-2013 in their Platform Developme</itunes:summary>
    <itunes:duration>3644</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V008</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Douglas.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008.mp3" expression="full" duration="3644" fileSize="58311114" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008.mp4" expression="full" duration="3644" fileSize="118254860" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c534/3e80b553-c1f8-4b8c-941e-02512b04c534/CPPConD04V008_mid.mp4" expression="full" duration="3644" fileSize="382572651" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Douglas.mp4" expression="full" duration="3644" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>std::allocator Is to Allocation what std::vector Is to Vexation</title>
    <description><![CDATA[std::allocator Is to Allocation what std::vector Is to Vexation -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — std::allocator has an inglorious past, murky present, and cheerless future. STL introduced allocators as a stop gap for the now antiquated segmented memory models of the 1990s. Their design was limited and in many ways wasn't even aiming at helping allocation that much. Because allocators were there, they simply continued being there, up to the point they became impossible to either uproot or make work, in spite of valiant effort spent by the community. But this talk aims at spending less time on poking criticism at std::allocator and more on actually defining allocator APIs that work. Scalable, high-performance memory allocation is a topic of increasing importance in today's demanding applications. For such, std::allocator simply doesn't work. This talk discusses the full design of a memory allocator created from first principles. It is generic, componentized, and composable for supporting application-specific allocation patterns. — Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&#43;&#43; Design, C&#43;&#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &quot;Politehnica&quot; Bucharest. He works as a Research Scientist for Facebook.Website: http://erdani.comTwitter handle: @incomputable — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:75898484618a4bedb893a5720100624c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V007</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V007</link>
    <itunes:summary>std::allocator Is to Allocation what std::vector Is to Vexation -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — std::allocator has an inglorious past, murky present, and cheerless future. STL introduced allocators as a stop gap for the now antiquated segmented memory models of the 1990s. Their design was limited and in many ways wasn&#39;t even aiming at helping allocation that much. Because allocators were there, they simply continued being there, up to the point they became impossible to either uproot or make work, in spite of valiant effort spent by the community. But this talk aims at spending less time on poking criticism at std::allocator and more on actually defining allocator APIs that work. Scalable, high-performance memory allocation is a topic of increasing importance in today&#39;s demanding applications. For such, std::allocator simply doesn&#39;t work. This talk discusses the full design of a memory allocator created from first principles. It is generic, componentized, and composable for supporting application-specific allocation patterns. — Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&amp;#43;&amp;#43; Design, C&amp;#43;&amp;#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &amp;quot;Politehnica&amp;quot; Bucharest. He works as a Research Scientist for Facebook.Website: http://erdani.comTwitter handle: @incomputable — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4346</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V007</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Alexandrescu.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007.mp3" expression="full" duration="4346" fileSize="69550794" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007.mp4" expression="full" duration="4346" fileSize="111019144" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0cd6/3663cc98-4bfa-498d-9fb3-e752bef10cd6/CPPConD04V007_mid.mp4" expression="full" duration="4346" fileSize="381176452" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-1400_Alexandrescu.mp4" expression="full" duration="4346" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lessons in Sustainability: How to Maintain a C++ Codebase for Decades</title>
    <description><![CDATA[Lessons in Sustainability: How to Maintain a C&#43;&#43; Codebase for Decades -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Google maintains (we believe) the largest monolithic C&#43;&#43; codebase in the world with over 100M lines of C&#43;&#43; code. Early commits to this repository date back to the late 1990s. About 4000 engineers submit at least one change in C&#43;&#43; every week. We’ve learned a few things about what it takes to maintain a codebase at this scale. In this talk I’ll present some of the lessons we’ve learned over the years with respect to policies, technology, education, design, and maintenance of a long-lived monolithic codebase. — Titus Winters has spent the past 4 years working on Google's core C&#43;&#43; libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&#43;&#43; Style Guide. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fd2de133d77d419cb1c1a57201006247">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V006</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V006</link>
    <itunes:summary>Lessons in Sustainability: How to Maintain a C&amp;#43;&amp;#43; Codebase for Decades -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Google maintains (we believe) the largest monolithic C&amp;#43;&amp;#43; codebase in the world with over 100M lines of C&amp;#43;&amp;#43; code. Early commits to this repository date back to the late 1990s. About 4000 engineers submit at least one change in C&amp;#43;&amp;#43; every week. We’ve learned a few things about what it takes to maintain a codebase at this scale. In this talk I’ll present some of the lessons we’ve learned over the years with respect to policies, technology, education, design, and maintenance of a long-lived monolithic codebase. — Titus Winters has spent the past 4 years working on Google&#39;s core C&amp;#43;&amp;#43; libraries. He&#39;s particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&amp;#43;&amp;#43; Style Guide. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4173</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V006</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Winters.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006.mp3" expression="full" duration="4173" fileSize="66784074" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006.mp4" expression="full" duration="4173" fileSize="115570143" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/306e/d9c8b844-bfac-42c4-9b15-26466b4b306e/CPPConD04V006_mid.mp4" expression="full" duration="4173" fileSize="354311459" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Winters.mp4" expression="full" duration="4173" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Multi-dimensional Arrays for Computational Physics and Applied Mathematics</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The language feature of passing a multi-dimensional array to a function without specifying all its dimensions at compile time is crucial for computational physics and applied mathematics. For example a matrix is a two dimensional array and a matrix inversion function which needs to know the size of the matrix at compile time would be of limited use. Major general purpose languages such as C, Java and C# support this feature. Of course, scientific programming languages like Fortran, Matlab and R also support this feature. C&#43;&#43; is perhaps the only major programming language which does not allow passing a multi-dimensional array to a function unless the size of all the dimensions except the first one is known at compile time. Due to this limitation of C&#43;&#43;, various libraries have been developed for using multi-dimensional arrays in C&#43;&#43;. Some of these libraries are Blitz&#43;&#43;, Armadillo, Eigen and boost.multi_array. These libraries are very large and complex. While they do provide a wide variety of features, they have a learning curve which may be difficult to justify for something as basic as passing multi-dimensional arrays to functions. Also the computational physics or applied mathematics code becomes dependent on a large non-standard library. Hence its usage will be limited to only those scientists who are willing to install these non-standard libraries. The reference feature of C&#43;&#43; allows us to develop a multi-dimensional array class. The class has a small number of lines of code and hence the code can be included with the scientific application code. We use this class to write programs for various areas of computational physics and show that the class is easy to use and it leads to readable programs. — Pramod Gupta is a research scientist at the Department of Astronomy at the University of Washington. He works on computational astrophysics using C&#43;&#43; and other languages. He is interested in parallel computing and he has used both the established techniques such as MPI and OpenMP and the newer techniques such as Hadoop and CUDA/GPU. He has taught a graduate course on astrophysics. He holds several United States patents. He has presented papers at APS(American Physical Society), AAS(American Astronomical Society), ACM and IEEE conferences. He obtained his Ph.D. in computational physics from the University of Rochester in New York. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:70b5f6d2e8894de1b0fda5720100623e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V005</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V005</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The language feature of passing a multi-dimensional array to a function without specifying all its dimensions at compile time is crucial for computational physics and applied mathematics. For example a matrix is a two dimensional array and a matrix inversion function which needs to know the size of the matrix at compile time would be of limited use. Major general purpose languages such as C, Java and C# support this feature. Of course, scientific programming languages like Fortran, Matlab and R also support this feature. C&amp;#43;&amp;#43; is perhaps the only major programming language which does not allow passing a multi-dimensional array to a function unless the size of all the dimensions except the first one is known at compile time. Due to this limitation of C&amp;#43;&amp;#43;, various libraries have been developed for using multi-dimensional arrays in C&amp;#43;&amp;#43;. Some of these libraries are Blitz&amp;#43;&amp;#43;, Armadillo, Eigen and boost.multi_array. These libraries are very large and complex. While they do provide a wide variety of features, they have a learning curve which may be difficult to justify for something as basic as passing multi-dimensional arrays to functions. Also the computational physics or applied mathematics code becomes dependent on a large non-standard library. Hence its usage will be limited to only those scientists who are willing to install these non-standard libraries. The reference feature of C&amp;#43;&amp;#43; allows us to develop a multi-dimensional array class. The class has a small number of lines of code and hence the code can be included with the scientific application code. We use this class to write programs for various areas of computational physics and show that the class is easy to use and it leads to readable programs. — Pramod Gupta is a research scientist at the Department of Astronomy at the University of Washington. He </itunes:summary>
    <itunes:duration>2319</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V005</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Gupta.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005.mp3" expression="full" duration="2319" fileSize="37119306" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005.mp4" expression="full" duration="2319" fileSize="57332387" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8f42/f1b90f17-b770-49e2-a583-d8eb35768f42/CPPConD04V005_mid.mp4" expression="full" duration="2319" fileSize="160246569" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Gupta.mp4" expression="full" duration="2319" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Rcpp: Seamless R and C++ Integration</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — R is an open-source statistical language designed with a focus on data analysis. While its historical roots are in statistical applications, it is currently experiencing a rapid growth in popularity in all fields where data matters: from data science, through bioinformatics and finance, to machine learning. Key strengths contributing to this growth include its rich libraries ecosystem (over 6 thousands packages at the moment of writing) – often authored by the leading researchers in the field, providing early access to the latest techniques; beautiful, high-quality visualizations – supporting seamless exploratory data analysis and producing stunning presentations; all of this available in an interactive environment resulting in high productivity through fast iteration times. At the same time, there are no free lunches in programming: the dynamic, interactive nature of R does have its costs, including a significant impact on run-time performance. In an era of growing data sizes and increasingly realistic models this concern is only becoming more important. In this talk we provide an introduction to Rcpp – a library allowing smooth integration of R with C&#43;&#43;, combining the productivity benefits of R for data science together with the performance of C&#43;&#43;. First released in 2005, today it’s the most popular language extension for R -- used by over 400 packages. We'll also discuss challenges (as well as possible solutions) involved in integrating modern C&#43;&#43; code, and demonstrate the usage of popular C&#43;&#43; libraries in practice. We’ll conclude the talk with the RInside package allowing to embed R in C&#43;&#43;. — Matt P. Dziubinski is an Assistant Professor at the Department of Mathematical Sciences, Aalborg University, Denmark and a Junior Fellow at Center for Research in Econometric Analysis of Time Series (CREATES). His fascination with computers started in the late 1980s with an 8-bit Atari. His current research interests include Quantitative Finance and High Performance Scientific Computing, with a focus on applied cross-platform parallel computing -- targeting multi-core CPUs as well as many-core GPGPUs. Practical implementation of these research ideas is made easier, more accessible, and even fun thanks to modern C&#43;&#43;. Since 2008 Matt has also been sharing his passion introducing modern C&#43;&#43; to his students -- with computational applications in math, finance, statistics, and economics. C&#43;&#43; interests include generic programming, numerics, networking, and performance optimization -- while also enjoying learning about computer architecture in his spare time <span class="c9emoticon c9emoticon_smiley">:)</span> — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:e2679821c3d64841857fa57201006239">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V004</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V004</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — R is an open-source statistical language designed with a focus on data analysis. While its historical roots are in statistical applications, it is currently experiencing a rapid growth in popularity in all fields where data matters: from data science, through bioinformatics and finance, to machine learning. Key strengths contributing to this growth include its rich libraries ecosystem (over 6 thousands packages at the moment of writing) – often authored by the leading researchers in the field, providing early access to the latest techniques; beautiful, high-quality visualizations – supporting seamless exploratory data analysis and producing stunning presentations; all of this available in an interactive environment resulting in high productivity through fast iteration times. At the same time, there are no free lunches in programming: the dynamic, interactive nature of R does have its costs, including a significant impact on run-time performance. In an era of growing data sizes and increasingly realistic models this concern is only becoming more important. In this talk we provide an introduction to Rcpp – a library allowing smooth integration of R with C&amp;#43;&amp;#43;, combining the productivity benefits of R for data science together with the performance of C&amp;#43;&amp;#43;. First released in 2005, today it’s the most popular language extension for R -- used by over 400 packages. We&#39;ll also discuss challenges (as well as possible solutions) involved in integrating modern C&amp;#43;&amp;#43; code, and demonstrate the usage of popular C&amp;#43;&amp;#43; libraries in practice. We’ll conclude the talk with the RInside package allowing to embed R in C&amp;#43;&amp;#43;. — Matt P. Dziubinski is an Assistant Professor at the Department of Mathematical Sciences, Aalborg University, Denmark and a Junior Fellow at Center for Research in Econometric Analysis of Time Series (CREATES). </itunes:summary>
    <itunes:duration>3550</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V004</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Dziubinski.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004.mp3" expression="full" duration="3550" fileSize="56803530" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004.mp4" expression="full" duration="3550" fileSize="90948389" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a518/1c5ef7a3-afb5-47f3-b604-61694ce6a518/CPPConD04V004_mid.mp4" expression="full" duration="3550" fileSize="316759033" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Dziubinski.mp4" expression="full" duration="3550" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Metaprogramming: A Paradigm Shift</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Most people think metaprogramming is hard. It isn't; we just didn't have the right tools for it. This talk will present a new way of metaprogramming using the same syntax as that of normal C&#43;&#43;. It will show how the runtime and the compile-time boundaries can be crossed almost seamlessly. It will show how compilation times can be reduced without sacrificing expressiveness. It will introduce Hana [1], a newly accepted Boost library using cutting edge features of the language in a creative way to solve the problem of metaprogramming for good. — Louis is a computer programming enthusiast and math student with interest in C&#43;&#43; (meta)programming, functional programming, category theory and related subjects. In the past years, he's been working on various ways to solve the problem of metaprogramming in C&#43;&#43;, and he thinks he has finally found a satisfactory solution. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:11f1434447e74921a15ba57201006230">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V003</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V003</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Most people think metaprogramming is hard. It isn&#39;t; we just didn&#39;t have the right tools for it. This talk will present a new way of metaprogramming using the same syntax as that of normal C&amp;#43;&amp;#43;. It will show how the runtime and the compile-time boundaries can be crossed almost seamlessly. It will show how compilation times can be reduced without sacrificing expressiveness. It will introduce Hana [1], a newly accepted Boost library using cutting edge features of the language in a creative way to solve the problem of metaprogramming for good. — Louis is a computer programming enthusiast and math student with interest in C&amp;#43;&amp;#43; (meta)programming, functional programming, category theory and related subjects. In the past years, he&#39;s been working on various ways to solve the problem of metaprogramming in C&amp;#43;&amp;#43;, and he thinks he has finally found a satisfactory solution. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4090</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V003</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Dionne.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003.mp3" expression="full" duration="4090" fileSize="65453514" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003.mp4" expression="full" duration="4090" fileSize="103197950" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f69d/5deaf29f-337c-4133-9392-c7a06b1df69d/CPPConD04V003_mid.mp4" expression="full" duration="4090" fileSize="365597499" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Dionne.mp4" expression="full" duration="4090" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What&#39;s New in Visual C++ 2015 and Future Directions</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, we'll discuss new features, optimizations, and scenarios in Visual Studio 2015. We'll cover new backend optimizations, improved build throughput, new productivity and diagnostics features, and give a detailed update on our conformance progress, as well as talk about cool new c&#43;&#43;1y features that we are shipping from await to modules. Visual Studio isn't just for Microsoft platform developers. We'll also demonstrate our latest cross platform C&#43;&#43; development features for Android and iOS. We'll also give a sneak peak at our work on combining the Clang frontend with our existing backend to bring Clang support for Windows to Visual Studio. — Ayman Shoukry has been with the Microsoft Developer Division product groups for close to 15 years. He is currently the Group Program Manager for the Visual C&#43;&#43; team at Microsoft. Ayman’s team is responsible for delivering the compilers, libraries, runtimes and IDE that enable developers to create great native applications using visual Studio. Prior to joining Microsoft, Ayman spent a year &amp; half in Newcastle, Australia where he earned his Master degree in Software Engineering. In Addition, He holds a BSc. in Computer Science from the American University in Cairo. He currently lives in Seattle, WA with his wife and two daughters. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:189ea3a9f00b4d85a84fa5720100622b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V002</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V002</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, we&#39;ll discuss new features, optimizations, and scenarios in Visual Studio 2015. We&#39;ll cover new backend optimizations, improved build throughput, new productivity and diagnostics features, and give a detailed update on our conformance progress, as well as talk about cool new c&amp;#43;&amp;#43;1y features that we are shipping from await to modules. Visual Studio isn&#39;t just for Microsoft platform developers. We&#39;ll also demonstrate our latest cross platform C&amp;#43;&amp;#43; development features for Android and iOS. We&#39;ll also give a sneak peak at our work on combining the Clang frontend with our existing backend to bring Clang support for Windows to Visual Studio. — Ayman Shoukry has been with the Microsoft Developer Division product groups for close to 15 years. He is currently the Group Program Manager for the Visual C&amp;#43;&amp;#43; team at Microsoft. Ayman’s team is responsible for delivering the compilers, libraries, runtimes and IDE that enable developers to create great native applications using visual Studio. Prior to joining Microsoft, Ayman spent a year &amp;amp; half in Newcastle, Australia where he earned his Master degree in Software Engineering. In Addition, He holds a BSc. in Computer Science from the American University in Cairo. He currently lives in Seattle, WA with his wife and two daughters. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3816</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V002</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Carroll+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002.mp3" expression="full" duration="3816" fileSize="61057866" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002.mp4" expression="full" duration="3816" fileSize="112500254" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/32a8/03011555-348c-4d4b-a6dd-0847aace32a8/CPPConD04V002_mid.mp4" expression="full" duration="3816" fileSize="416003084" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Carroll+1.mp4" expression="full" duration="3816" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Faster Complex Numbers</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Complex numbers are an important tool from mathematics enabling many problems to be written in a more generic form. The C&#43;&#43; standard library comes with an implementation to work with complex numbers in a natural way. Motivated by useful real world examples from theoretical physics and audio dsp I will discuss benchmarks of std::complex and demonstrate how alternative implementations, naïve or advanced ones based on expression templates, outperform std::complex and can compete with hand-crafted C code (depending on compiler and std lib). A quick introduction to expression templates will be provided. — André leads the Traktor software development team at Native Instruments. There he is taking an active role in modernizing the C&#43;&#43; coding standards by organizing tech talks and introducing new techniques and libraries. Some of his main interests are functional and generic programming and solving meta-programming puzzles. Besides that he is lecturer at the Beuth Hochschule in Berlin where he teaches C&#43;&#43; and is one of the organizers of the local Berlin C&#43;&#43; meetups. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:08ba607541e64aa79604a5720100621d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V001</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V001</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Complex numbers are an important tool from mathematics enabling many problems to be written in a more generic form. The C&amp;#43;&amp;#43; standard library comes with an implementation to work with complex numbers in a natural way. Motivated by useful real world examples from theoretical physics and audio dsp I will discuss benchmarks of std::complex and demonstrate how alternative implementations, na&#239;ve or advanced ones based on expression templates, outperform std::complex and can compete with hand-crafted C code (depending on compiler and std lib). A quick introduction to expression templates will be provided. — Andr&#233; leads the Traktor software development team at Native Instruments. There he is taking an active role in modernizing the C&amp;#43;&amp;#43; coding standards by organizing tech talks and introducing new techniques and libraries. Some of his main interests are functional and generic programming and solving meta-programming puzzles. Besides that he is lecturer at the Beuth Hochschule in Berlin where he teaches C&amp;#43;&amp;#43; and is one of the organizers of the local Berlin C&amp;#43;&amp;#43; meetups. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1953</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD04V001</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Bergner.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001.mp3" expression="full" duration="1953" fileSize="31250250" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001.mp4" expression="full" duration="1953" fileSize="54818473" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8f55/65f55a0b-4749-4f50-bc9a-2385da238f55/CPPConD04V001_mid.mp4" expression="full" duration="1953" fileSize="218778887" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0924-0900_Bergner.mp4" expression="full" duration="1953" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Clang on Windows: a status update</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6e33ffb163884529a831a57201006218">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V034</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V034</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>389</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V034</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning6-6_Kleckner.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034.mp3" expression="full" duration="389" fileSize="6236106" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034.mp4" expression="full" duration="389" fileSize="11172634" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d462/6e02f1b9-efa5-4136-beef-7d0495b4d462/CPPConD03V034_mid.mp4" expression="full" duration="389" fileSize="32904707" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning6-6_Kleckner.mp4" expression="full" duration="389" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ devirtualization in clang</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7347382ca28b4ecfa671a5720100620f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V033</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V033</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>914</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V033</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning5-6_PADLEWSKI.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033.mp3" expression="full" duration="914" fileSize="14640330" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033.mp4" expression="full" duration="914" fileSize="30925867" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5a24/cfc207bf-d672-4035-885d-9718dcb35a24/CPPConD03V033_mid.mp4" expression="full" duration="914" fileSize="85310792" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning5-6_PADLEWSKI.mp4" expression="full" duration="914" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Indian C++: Curry for your Functions</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f3fa5402ac914023adeaa57201006206">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V032</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V032</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>854</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V032</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning4-6_Bergner.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032.mp3" expression="full" duration="854" fileSize="13671498" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032.mp4" expression="full" duration="854" fileSize="26680285" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/87a9/37a67dae-96a8-40e3-a694-3e6625a887a9/CPPConD03V032_mid.mp4" expression="full" duration="854" fileSize="86005763" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning4-6_Bergner.mp4" expression="full" duration="854" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Compile-Time Counter Using Template &amp; Constexpr Magic</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f5e1724f298a4030bd60a57201006201">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V031</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V031</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>700</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V031</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning3-6_GellerSermersheim.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031.mp3" expression="full" duration="700" fileSize="11208522" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031.mp4" expression="full" duration="700" fileSize="22422527" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d81e/364d6122-c0bf-4e4f-9a1d-52eaa714d81e/CPPConD03V031_mid.mp4" expression="full" duration="700" fileSize="74073365" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning3-6_GellerSermersheim.mp4" expression="full" duration="700" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A different way to use boost serialization</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a925f47f9357435f8e6ca572010061fc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V030</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V030</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>332</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V030</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning2-6_Weller.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030.mp3" expression="full" duration="332" fileSize="5326410" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030.mp4" expression="full" duration="332" fileSize="9716751" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/518b/e887df3e-67ea-4b77-ba6b-42860dab518b/CPPConD03V030_mid.mp4" expression="full" duration="332" fileSize="26577827" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning2-6_Weller.mp4" expression="full" duration="332" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Introducing brigand</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:919089e794c9496db878a572010061f3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V029</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V029</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>520</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V029</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning1-6_AlligandFalcou.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029.mp3" expression="full" duration="520" fileSize="8335050" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029.mp4" expression="full" duration="520" fileSize="14273895" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/833f/5e1e0854-c833-4f30-83e5-e7f9b6f7833f/CPPConD03V029_mid.mp4" expression="full" duration="520" fileSize="48528913" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Lightning1-6_AlligandFalcou.mp4" expression="full" duration="520" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Crash Course in Open Source Licensing</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Open source software licenses are intended to provide a way for software authors to protect their own rights, and the rights of the users of their software, but many developers are unaware of how they work, why they are important, and how to apply them to their projects. It may never have occurred to you, but software licenses are much like programs: they are developed to meet requirements, they live in a world of external influences and constraints, and they use documented techniques to solve problems. In this session, the attendees will participate in a fun, interactive process to choose the components of a software license through real-world examples, with the goal of every attendee leaving with a basic understanding of the more important aspects of software licenses. Along the way they will learn the basics of copyrights and how they apply to software; what 'derivative work' and 'distribution' mean in these contexts; and many other useful concepts, including the most important differences between common licenses like the GNU General Public License family and the Apache 2 license. — I manage community development and evangelism at Bloomberg, spanning our activities in the open source, open standards and academic communities. Ask me about open source software, open source licensing, and C&#43;&#43;! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:bc0800256307490ab706a572010061ee">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V028</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V028</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Open source software licenses are intended to provide a way for software authors to protect their own rights, and the rights of the users of their software, but many developers are unaware of how they work, why they are important, and how to apply them to their projects. It may never have occurred to you, but software licenses are much like programs: they are developed to meet requirements, they live in a world of external influences and constraints, and they use documented techniques to solve problems. In this session, the attendees will participate in a fun, interactive process to choose the components of a software license through real-world examples, with the goal of every attendee leaving with a basic understanding of the more important aspects of software licenses. Along the way they will learn the basics of copyrights and how they apply to software; what &#39;derivative work&#39; and &#39;distribution&#39; mean in these contexts; and many other useful concepts, including the most important differences between common licenses like the GNU General Public License family and the Apache 2 license. — I manage community development and evangelism at Bloomberg, spanning our activities in the open source, open standards and academic communities. Ask me about open source software, open source licensing, and C&amp;#43;&amp;#43;! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>5202</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V028</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Fleming.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028.mp3" expression="full" duration="5202" fileSize="83248458" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028.mp4" expression="full" duration="5202" fileSize="124200478" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b2d3/abd8a874-2da0-4110-be03-c655af49b2d3/CPPConD03V028_mid.mp4" expression="full" duration="5202" fileSize="466398416" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Fleming.mp4" expression="full" duration="5202" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Functional programming: functors and monads</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Following the 'Applying functional programming in code design' session from Wednesday, I'd like to conduct a 'crash course' on functors and monads, and why they are important - and useful - regardless of the language you are writing code in. — Computer Science student at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a5c79ebceb9f47fe8a0da572010061e5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V027</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V027</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Following the &#39;Applying functional programming in code design&#39; session from Wednesday, I&#39;d like to conduct a &#39;crash course&#39; on functors and monads, and why they are important - and useful - regardless of the language you are writing code in. — Computer Science student at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1723</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V027</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Dominiak.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027.mp3" expression="full" duration="1723" fileSize="27581514" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027.mp4" expression="full" duration="1723" fileSize="49562277" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/14cb/fa88e525-bf93-42ab-9e6d-0ae9d6a314cb/CPPConD03V027_mid.mp4" expression="full" duration="1723" fileSize="135988649" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-2030_Dominiak.mp4" expression="full" duration="1723" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>What is Open Source, and Why Should You Care?</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this session, Kevin will present a condensed history of open source software: its origins, motivations and effect on the world of software development. He'll then talk about open source *beyond* software, and various ways that students can get involved in open source projects to develop useful (and marketable) skills. These are skills which are not taught in most degree programs, but are very valuable for jobs in scientific and engineering disciplines. — I manage community development and evangelism at Bloomberg, spanning our activities in the open source, open standards and academic communities. Ask me about open source software, open source licensing, and C&#43;&#43;! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:873def77dec042198ec2a572010061d7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V026</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V026</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this session, Kevin will present a condensed history of open source software: its origins, motivations and effect on the world of software development. He&#39;ll then talk about open source *beyond* software, and various ways that students can get involved in open source projects to develop useful (and marketable) skills. These are skills which are not taught in most degree programs, but are very valuable for jobs in scientific and engineering disciplines. — I manage community development and evangelism at Bloomberg, spanning our activities in the open source, open standards and academic communities. Ask me about open source software, open source licensing, and C&amp;#43;&amp;#43;! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4080</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V026</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Fleming.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026.mp3" expression="full" duration="4080" fileSize="65286090" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026.mp4" expression="full" duration="4080" fileSize="143401284" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5191/8f56baa8-2cd2-4472-8f88-623acb2d5191/CPPConD03V026_mid.mp4" expression="full" duration="4080" fileSize="411346613" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Fleming.mp4" expression="full" duration="4080" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Contracts for Dependable C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — One of the three major areas that C&#43;&#43;17 is expected to address is “improving support for large-scale dependable software.” A general understanding of ‘dependable software’ is the notion that the product should reliably perform the task it was designed for, and when given erroneous inputs the program should not be allowed to blindly continue execution, thereby possibly causing serious harms. In another words, an abrupt program termination is preferable to an exploited program vulnerability. “Contracts” are a language feature being considered by the ISO C&#43;&#43; standards committee for C&#43;&#43;17. They offer a basic mitigation measure, and early containment mechanism, by allowing a C&#43;&#43; programmer express more formally (instead of just comments) in code the requirements of a function interface. They offer a complement to conventional static type checking, and move comments closer to mechanized scrutiny. This presentation will explore the design space, previous efforts, the importance of analysis tools (both static and dynamic), and how contracts provide greater integration and support. — Gabriel Dos Reis is a Principal Software Development Engineer at Microsoft. He is also a researcher and a longtime member of the C&#43;&#43; community. His research interests include programming tools for dependable software. Prior to joining Microsoft, he was Assistant Professor at Texas A&amp;M University. Dr. Dos Reis was a recipient of the 2012 National Science Foundation CAREER award for his research in compilers for dependable computational mathematics and educational activities. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:592a478f77224d289091a572010061d2">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V025</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V025</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — One of the three major areas that C&amp;#43;&amp;#43;17 is expected to address is “improving support for large-scale dependable software.” A general understanding of ‘dependable software’ is the notion that the product should reliably perform the task it was designed for, and when given erroneous inputs the program should not be allowed to blindly continue execution, thereby possibly causing serious harms. In another words, an abrupt program termination is preferable to an exploited program vulnerability. “Contracts” are a language feature being considered by the ISO C&amp;#43;&amp;#43; standards committee for C&amp;#43;&amp;#43;17. They offer a basic mitigation measure, and early containment mechanism, by allowing a C&amp;#43;&amp;#43; programmer express more formally (instead of just comments) in code the requirements of a function interface. They offer a complement to conventional static type checking, and move comments closer to mechanized scrutiny. This presentation will explore the design space, previous efforts, the importance of analysis tools (both static and dynamic), and how contracts provide greater integration and support. — Gabriel Dos Reis is a Principal Software Development Engineer at Microsoft. He is also a researcher and a longtime member of the C&amp;#43;&amp;#43; community. His research interests include programming tools for dependable software. Prior to joining Microsoft, he was Assistant Professor at Texas A&amp;amp;M University. Dr. Dos Reis was a recipient of the 2012 National Science Foundation CAREER award for his research in compilers for dependable computational mathematics and educational activities. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3348</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V025</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_DosReis.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025.mp3" expression="full" duration="3348" fileSize="53582154" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025.mp4" expression="full" duration="3348" fileSize="99278254" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/45a2/296a0744-8fb2-4e64-ac22-e18f55be45a2/CPPConD03V025_mid.mp4" expression="full" duration="3348" fileSize="304721812" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_DosReis.mp4" expression="full" duration="3348" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Applying functional programming in code design</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — At first glance C&#43;&#43; doesn't seem to be a language that lets you do much functional programming, not to mention actually focusing the structure of your application around that. But that is changing, together with the general approach to program in the language. We do care about const-correctness; when writing code meant to run concurrently, we want to avoid locks, so we do our best not to share mutable state (I'm here to argue that uniquely owned mutable state is perfectly fine). With that mindset, we can try to design our applications in a functional way. This talk will focus not only on things typically associated with functional programming, but also on the following in the context of C&#43;&#43;: * Making functions pure (as long as it makes sense). * Using functional data structures. * Designing control flows that don't lead to shared state. * Composability and benefiting from laziness. * Striving for generic code. * Noticing patterns and turning them into abstractions. * Functors and monads as &quot;patterns&quot;. * An example application built around those principles. — Computer Science student at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d2889bc606a346aab635a572010061c9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V024</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V024</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — At first glance C&amp;#43;&amp;#43; doesn&#39;t seem to be a language that lets you do much functional programming, not to mention actually focusing the structure of your application around that. But that is changing, together with the general approach to program in the language. We do care about const-correctness; when writing code meant to run concurrently, we want to avoid locks, so we do our best not to share mutable state (I&#39;m here to argue that uniquely owned mutable state is perfectly fine). With that mindset, we can try to design our applications in a functional way. This talk will focus not only on things typically associated with functional programming, but also on the following in the context of C&amp;#43;&amp;#43;: * Making functions pure (as long as it makes sense). * Using functional data structures. * Designing control flows that don&#39;t lead to shared state. * Composability and benefiting from laziness. * Striving for generic code. * Noticing patterns and turning them into abstractions. * Functors and monads as &amp;quot;patterns&amp;quot;. * An example application built around those principles. — Computer Science student at Faculty of Electronics at Wrocław University of Technology. Loves metaprogramming and doing as much as possible during compile time, instead of wasting precious cycles at runtime. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2948</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V024</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Dominiak.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024.mp3" expression="full" duration="2948" fileSize="47176266" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024.mp4" expression="full" duration="2948" fileSize="76673594" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4bbd/e99257bc-4a5a-4e9c-b962-c9738c8c4bbd/CPPConD03V024_mid.mp4" expression="full" duration="2948" fileSize="200040568" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Dominiak.mp4" expression="full" duration="2948" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Declarative Control Flow</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Getting exception handling right is a perennial problem in C&#43;&#43; that has eluded systematization. Not for much longer. New language and library developments make it possible to handle exceptions in a declarative manner, leading to drastic code simplification. This talk discusses an alternative approach to handling exceptional flow that eliminates the need for small ancillary RAII classes, try/catch statements that rethrow, and other cleanup mechanisms. The popular Scope Guard idiom gets a spectacular generalization. Statements specify in a declarative manner actions to be taken if the current scope is left normally or via an exception. The resulting code is simpler, smaller, and easier to maintain. — Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&#43;&#43; Design, C&#43;&#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &quot;Politehnica&quot; Bucharest. He works as a Research Scientist for Facebook.Website: http://erdani.comTwitter handle: @incomputable — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c298e662647b48fdb212a572010061bf">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V023</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V023</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Getting exception handling right is a perennial problem in C&amp;#43;&amp;#43; that has eluded systematization. Not for much longer. New language and library developments make it possible to handle exceptions in a declarative manner, leading to drastic code simplification. This talk discusses an alternative approach to handling exceptional flow that eliminates the need for small ancillary RAII classes, try/catch statements that rethrow, and other cleanup mechanisms. The popular Scope Guard idiom gets a spectacular generalization. Statements specify in a declarative manner actions to be taken if the current scope is left normally or via an exception. The resulting code is simpler, smaller, and easier to maintain. — Andrei Alexandrescu is a researcher, software engineer, and author. He wrote three best-selling books on programming (Modern C&amp;#43;&amp;#43; Design, C&amp;#43;&amp;#43; Coding Standards, and The D Programming Language) and numerous articles and papers on wide-ranging topics from programming to language design to Machine Learning to Natural Language Processing. Andrei holds a PhD in Computer Science from the University of Washington and a BSc in Electrical Engineering from University &amp;quot;Politehnica&amp;quot; Bucharest. He works as a Research Scientist for Facebook.Website: http://erdani.comTwitter handle: @incomputable — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4054</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V023</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Alexandrescu.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023.mp3" expression="full" duration="4054" fileSize="64867530" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023.mp4" expression="full" duration="4054" fileSize="114541098" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f8b8/e2f084ee-90cc-4f73-89cd-4a856a44f8b8/CPPConD03V023_mid.mp4" expression="full" duration="4054" fileSize="390168054" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1645_Alexandrescu.mp4" expression="full" duration="4054" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Bridging Languages Cross-Platform</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Dropbox has been using C&#43;&#43; for cross-platform development on mobile platforms since 2012. In 2014 we open-sourced Djinni, our code generator that bridges C&#43;&#43; to other languages. In this talk we'll dive deep into some implementation techniques we use to bridge languages, easily, flexibly, and efficiently. We'll use the recent addition of Python-to-C&#43;&#43; bridging as an example of the challenges and decisions which come up when building a bridge between two very different languages, as well as talking about some interesting challenges we faced in Java and Objective-C. Topics include marshaling data-types, cross-language object ownership and identity, template-generated cached proxy objects, and translation of exceptions. What you learn should arm you to bridge languages for your own needs, or use/extend Djinni for your own programs. No prior knowledge of Djinni or mobile development required, but intermediate C&#43;&#43; will be assumed, and a bit of Python will be useful. — Jacob Potter is a recovering embedded systems engineer who is now driving Dropbox’s use of modern C&#43;&#43; for cross-platform mobile development. He's also the primary maintainer of Djinni, the tool Dropbox uses for generating cross-language bindings. Andrew Twyman has been developing products and libraries in C&#43;&#43; for almost 10 years. He loves building robust systems and solving tricky low-level problems. Starting in 2012, Andrew helped spearhead Dropbox’s new approach to cross-platform mobile development. Now on the Platforms and Libraries team, Andrew is helping bring cross-platform goodness to Dropbox’s new generation of mobile and desktop apps. Prior to Dropbox, Andrew was an architect at Liquid Machines, where shared libraries supported parallel development of more products than there were developers. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c0225d846b834ddd9e93a572010061bb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V022</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V022</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Dropbox has been using C&amp;#43;&amp;#43; for cross-platform development on mobile platforms since 2012. In 2014 we open-sourced Djinni, our code generator that bridges C&amp;#43;&amp;#43; to other languages. In this talk we&#39;ll dive deep into some implementation techniques we use to bridge languages, easily, flexibly, and efficiently. We&#39;ll use the recent addition of Python-to-C&amp;#43;&amp;#43; bridging as an example of the challenges and decisions which come up when building a bridge between two very different languages, as well as talking about some interesting challenges we faced in Java and Objective-C. Topics include marshaling data-types, cross-language object ownership and identity, template-generated cached proxy objects, and translation of exceptions. What you learn should arm you to bridge languages for your own needs, or use/extend Djinni for your own programs. No prior knowledge of Djinni or mobile development required, but intermediate C&amp;#43;&amp;#43; will be assumed, and a bit of Python will be useful. — Jacob Potter is a recovering embedded systems engineer who is now driving Dropbox’s use of modern C&amp;#43;&amp;#43; for cross-platform mobile development. He&#39;s also the primary maintainer of Djinni, the tool Dropbox uses for generating cross-language bindings. Andrew Twyman has been developing products and libraries in C&amp;#43;&amp;#43; for almost 10 years. He loves building robust systems and solving tricky low-level problems. Starting in 2012, Andrew helped spearhead Dropbox’s new approach to cross-platform mobile development. Now on the Platforms and Libraries team, Andrew is helping bring cross-platform goodness to Dropbox’s new generation of mobile and desktop apps. Prior to Dropbox, Andrew was an architect at Liquid Machines, where shared libraries supported parallel development of more products than there were developers. — Videos Filmed &amp;amp; Edited by Bash</itunes:summary>
    <itunes:duration>3713</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V022</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Potter+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022.mp3" expression="full" duration="3713" fileSize="59418954" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022.mp4" expression="full" duration="3713" fileSize="96691393" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3134/2342dc84-3f31-4144-a314-58b0c1403134/CPPConD03V022_mid.mp4" expression="full" duration="3713" fileSize="258793233" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Potter+1.mp4" expression="full" duration="3713" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>A Few Good Types: Evolving array_view and string_view for safe C++ code</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The Library Fundamentals TS already contains a string_view type, and possibly soon an array_view type. These are important and should be used pervasively as function parameters, especially instead of (pointer, length) pairs which are generally unsafe. They offer additional benefits in the form of decoupling: allowing functions to be specified in terms of high-level views rather than references to specific, concrete string and container types which bind both caller and callee to a specific implementation detail. As a specific example, using string_view in function signatures allows them to be called with any of the endless proliferation of string types that exist in codebases today (std::string, CStringT, char*, BSTR, HSTRING, MyString etc). We can and should evolve these types further as a key part of achieving memory safety for C&#43;&#43; code. This example-driven talk shares our experience with preventing defects in large-scale commercial C&#43;&#43; codebases by applying modestly evolved versions of the proposed array_view and string_view types, plus a small number of related types such as not_null. Adopting these types enables simpler and safer code that eliminates important classes of defects by construction. The types are carefully designed to have usually exactly zero space and time overhead over the current unsafe idioms they replace, so as to leave no valid performance reason against adopting them. Using these types enables high-quality static analysis, and is allowing Microsoft to fully replace non-standard and non-portable annotation systems for type and memory safety in our own code bases. We believe this approach is generally applicable to code at all levels, from application code down to the most performance-sensitive systems code. An open source reference implementation of the types that supports all major compilers and platforms will be available on GitHub. — Neil is the lead for the C&#43;&#43; static analysis frameworks used widely within Microsoft, including PREfix, PREfast, and ESPx, as well as the /analyze feature of the Microsoft C&#43;&#43; compiler. He is currently focused on making all these tools work better with portable C&#43;&#43;14 code rather than nonstandard annotations. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:616bdade539145bc8c85a572010061b6">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V021</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V021</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The Library Fundamentals TS already contains a string_view type, and possibly soon an array_view type. These are important and should be used pervasively as function parameters, especially instead of (pointer, length) pairs which are generally unsafe. They offer additional benefits in the form of decoupling: allowing functions to be specified in terms of high-level views rather than references to specific, concrete string and container types which bind both caller and callee to a specific implementation detail. As a specific example, using string_view in function signatures allows them to be called with any of the endless proliferation of string types that exist in codebases today (std::string, CStringT, char*, BSTR, HSTRING, MyString etc). We can and should evolve these types further as a key part of achieving memory safety for C&amp;#43;&amp;#43; code. This example-driven talk shares our experience with preventing defects in large-scale commercial C&amp;#43;&amp;#43; codebases by applying modestly evolved versions of the proposed array_view and string_view types, plus a small number of related types such as not_null. Adopting these types enables simpler and safer code that eliminates important classes of defects by construction. The types are carefully designed to have usually exactly zero space and time overhead over the current unsafe idioms they replace, so as to leave no valid performance reason against adopting them. Using these types enables high-quality static analysis, and is allowing Microsoft to fully replace non-standard and non-portable annotation systems for type and memory safety in our own code bases. We believe this approach is generally applicable to code at all levels, from application code down to the most performance-sensitive systems code. An open source reference implementation of the types that supports all major compilers and platfo</itunes:summary>
    <itunes:duration>3616</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V021</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Macintosh.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021.mp3" expression="full" duration="3616" fileSize="57870282" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021.mp4" expression="full" duration="3616" fileSize="117320311" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/838a/c5b33f40-8b2c-42cd-953e-5cc0c9de838a/CPPConD03V021_mid.mp4" expression="full" duration="3616" fileSize="393379102" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Macintosh.mp4" expression="full" duration="3616" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Enhancing STL containers</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — STL has a big history. Due to class paradigm of C&#43;&#43;, many STL containers have a flat layout in memory, i.e. containers naturally store objects and address objects rather than their indexing entities such as smart pointers (which are, strictly speaking, objects too). This model has a benefit of lower memory fragmentation, that causes better CPU cache performance. However, many tasks in real life require reordering of objects, that requires compexity of O(n*q), where q is a size of an object and n is a compexity measured in operations. Thus, some imlementations of operations with reordering objects in some containers are much slower that they could be. This problem could sometimes be solved by storing “pointers” as index entities in containers instead of the objects by themselves, what improves performance by q times, but causes memory fragmentation and worse cache performance. Algorithmically, the solution with pointers is obviously better, but it is still not the most efficient one. In the presentation I will show myimplementations of containers using both approaches and having the best of two worlds. I will compare these methods with classical and modern approaches and draw some conclusion, encouraging everybody to use the power of algorithms with C&#43;&#43;. — Viktor graduated from Moscow Technical University and Yandex Data Analysis School. In 2006 - 2008 Viktor worked for Galaktika corpotation, participated in the creation of a 4'th generation OO-programming language. In 2008 - 2010 Viktor worked for Alta-Soft LLC as a technical architect of a distributed customs database. Since 2012 Viktor has been working for Zeptolab LLC, creating modern mobile games. At the moment the company is drastically updating the technologies and codebase, including an internal framework. Viktor is always making an emphasis on algorithms, fundamental data structures and robust object model. Mobius 2015, http://www.youtube.com/watch?v=TG1QVX... Droidcon 2014, http://ru.droidcon.com/2014/gaming-i/ — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:acdf0adde2fd46aeaee7a572010061ad">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V020</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V020</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — STL has a big history. Due to class paradigm of C&amp;#43;&amp;#43;, many STL containers have a flat layout in memory, i.e. containers naturally store objects and address objects rather than their indexing entities such as smart pointers (which are, strictly speaking, objects too). This model has a benefit of lower memory fragmentation, that causes better CPU cache performance. However, many tasks in real life require reordering of objects, that requires compexity of O(n*q), where q is a size of an object and n is a compexity measured in operations. Thus, some imlementations of operations with reordering objects in some containers are much slower that they could be. This problem could sometimes be solved by storing “pointers” as index entities in containers instead of the objects by themselves, what improves performance by q times, but causes memory fragmentation and worse cache performance. Algorithmically, the solution with pointers is obviously better, but it is still not the most efficient one. In the presentation I will show myimplementations of containers using both approaches and having the best of two worlds. I will compare these methods with classical and modern approaches and draw some conclusion, encouraging everybody to use the power of algorithms with C&amp;#43;&amp;#43;. — Viktor graduated from Moscow Technical University and Yandex Data Analysis School. In 2006 - 2008 Viktor worked for Galaktika corpotation, participated in the creation of a 4&#39;th generation OO-programming language. In 2008 - 2010 Viktor worked for Alta-Soft LLC as a technical architect of a distributed customs database. Since 2012 Viktor has been working for Zeptolab LLC, creating modern mobile games. At the moment the company is drastically updating the technologies and codebase, including an internal framework. Viktor is always making an emphasis on algorithms, fundamental d</itunes:summary>
    <itunes:duration>2197</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V020</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Korsun.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020.mp3" expression="full" duration="2197" fileSize="35159754" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020.mp4" expression="full" duration="2197" fileSize="52181285" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/54d2/6b301510-e955-415e-963c-b399d9a154d2/CPPConD03V020_mid.mp4" expression="full" duration="2197" fileSize="150025277" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Korsun.mp4" expression="full" duration="2197" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Transactional Memory in Practice</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Transactional memory has been held up as a panacea for concurrent programming in some quarters. The C&#43;&#43; standardization committee is even looking at including it in the standard. But is it really a panacea? Has anyone used it in a shipping piece of software? There are scattered examples, mostly from the high-performance and super-computing realms. On the other end of the spectrum, at Wyatt Technology we've been using transactional memory in a desktop application that does data acquisition and analysis for the light-scattering instruments we build. That application is called Dynamics and we've been using a software transactional memory system in it for four years now. This talk will detail how our system works, how well it worked, and what pitfalls we've run into. Prior experience with transactional memory will not be assumed, though it would help if you have experience programming threads with locks and an open mind about alternatives and why we're looking for them. — Brett is the lead developer on Dynamics, a data collection and analysis package developed at Wyatt Technology(http://www.wyatt.com/) for use with their light scattering instruments. He holds a PhD in Physics from the University of California, Santa Barbara. Previous to joining Wyatt, Brett worked in the game industry, remote sensing, and web development. He also blogs about C&#43;&#43;, among other things, at backwardsincompatibilities.wordpress.com­. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a9e09228347d45c9bb91a572010061a8">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V019</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V019</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Transactional memory has been held up as a panacea for concurrent programming in some quarters. The C&amp;#43;&amp;#43; standardization committee is even looking at including it in the standard. But is it really a panacea? Has anyone used it in a shipping piece of software? There are scattered examples, mostly from the high-performance and super-computing realms. On the other end of the spectrum, at Wyatt Technology we&#39;ve been using transactional memory in a desktop application that does data acquisition and analysis for the light-scattering instruments we build. That application is called Dynamics and we&#39;ve been using a software transactional memory system in it for four years now. This talk will detail how our system works, how well it worked, and what pitfalls we&#39;ve run into. Prior experience with transactional memory will not be assumed, though it would help if you have experience programming threads with locks and an open mind about alternatives and why we&#39;re looking for them. — Brett is the lead developer on Dynamics, a data collection and analysis package developed at Wyatt Technology(http://www.wyatt.com/) for use with their light scattering instruments. He holds a PhD in Physics from the University of California, Santa Barbara. Previous to joining Wyatt, Brett worked in the game industry, remote sensing, and web development. He also blogs about C&amp;#43;&amp;#43;, among other things, at backwardsincompatibilities.wordpress.com&#173;. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3783</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V019</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Hall.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019.mp3" expression="full" duration="3783" fileSize="60536394" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019.mp4" expression="full" duration="3783" fileSize="83478409" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3fe9/e0c5564a-f622-4b12-a2a3-0e0827533fe9/CPPConD03V019_mid.mp4" expression="full" duration="3783" fileSize="223649900" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Hall.mp4" expression="full" duration="3783" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Type Traits: What are they and why should I use them?</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, I will answer the questions, &quot;What are type traits?&quot; and &quot;Why are type traits useful?&quot;, along with some examples of why when when they should be used. — Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:7c8a6ae7a2534e16b624a5720100619a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V018</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V018</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, I will answer the questions, &amp;quot;What are type traits?&amp;quot; and &amp;quot;Why are type traits useful?&amp;quot;, along with some examples of why when when they should be used. — Marshall is a long-time boost participant. He is one of the moderators of the Boost-Users mailing list, and helps keep the Trac system running. Marshall is a principal engineer at Qualcomm, Inc. in San Diego. | | He is the author of the Boost.Algorithm library, maintains Boost.Array and Boost.StringAlgo, and is the leader of the Boost Community Maintenance team. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3386</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V018</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Clow.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018.mp3" expression="full" duration="3386" fileSize="54180042" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018.mp4" expression="full" duration="3386" fileSize="83061875" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4e32/0f2020c8-e24e-45d9-9d45-04057dcc4e32/CPPConD03V018_mid.mp4" expression="full" duration="3386" fileSize="303196343" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Clow.mp4" expression="full" duration="3386" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Benchmarking C++ Code</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — With the ending of Moore's Law and the rise of multicore systems, programmers from across the industry are increasing forced to develop and maintain highly performance sensitive software. For C&#43;&#43;, a language frequently used for performance sensitive projects, benchmarking and performance analysis is especially important. Developing good benchmarks can be tricky; gathering and analyzing data from benchmarks can be an even greater challenge. This talk will discuss techniques and best practices for writing C&#43;&#43; benchmarks using facilities from the standard library and Boost. We'll also cover the development of performance unit/regression tests. We'll discuss the statistical best practices for gathering data, as well as techniques for benchmarking a variety of different metrics - time, memory, algorithmic complexity, etc. The main topics which will be covered: * Statistical Best Practices (dealing with uncertainty, achieving statistical confidence, how to sample) * Time-Based Benchmarking (best practices for timing, derived time-based metrics) * Non-Time-Based Benchmarking (memory, algorithmic complexity in time and space, etc) * Techniques for C&#43;&#43;-specific Performance Metrics (counting copies/moves, allocator tricks) * Converting Benchmarks into Tests — Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fa98f778a9c54bc6a1eba57201006195">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V017</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V017</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — With the ending of Moore&#39;s Law and the rise of multicore systems, programmers from across the industry are increasing forced to develop and maintain highly performance sensitive software. For C&amp;#43;&amp;#43;, a language frequently used for performance sensitive projects, benchmarking and performance analysis is especially important. Developing good benchmarks can be tricky; gathering and analyzing data from benchmarks can be an even greater challenge. This talk will discuss techniques and best practices for writing C&amp;#43;&amp;#43; benchmarks using facilities from the standard library and Boost. We&#39;ll also cover the development of performance unit/regression tests. We&#39;ll discuss the statistical best practices for gathering data, as well as techniques for benchmarking a variety of different metrics - time, memory, algorithmic complexity, etc. The main topics which will be covered: * Statistical Best Practices (dealing with uncertainty, achieving statistical confidence, how to sample) * Time-Based Benchmarking (best practices for timing, derived time-based metrics) * Non-Time-Based Benchmarking (memory, algorithmic complexity in time and space, etc) * Techniques for C&amp;#43;&amp;#43;-specific Performance Metrics (counting copies/moves, allocator tricks) * Converting Benchmarks into Tests — Bryce Adelstein-Lelbach is a researcher at the Center of Computation and Technology (CCT) at Louisiana State University. He works on the HPX runtime system and his research interests include parallel and distributed programming frameworks for scientific applications. He has been working on HPX for over a year now. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4284</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V017</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Adelstein.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017.mp3" expression="full" duration="4284" fileSize="68560842" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017.mp4" expression="full" duration="4284" fileSize="139789508" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/753b/25d7bca1-b4f1-46a5-978b-3c561177753b/CPPConD03V017_mid.mp4" expression="full" duration="4284" fileSize="288123370" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1515_Adelstein.mp4" expression="full" duration="4284" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>An Overview on Encryption in C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Encryption has become a very important topic for C&#43;&#43; developers and this session will serve as an introduction and overview this topic. I will present an overview on the popular encryption libraries cryptopp, botan and libsodium, and give you an update on the popular encryption algorithms of AES and RSA, plus why cryptoboxes can be a great help. — Jens Weller has worked, since 2007, as a freelancer in C&#43;&#43;, specialising in consulting, training and programming C&#43;&#43;. He started with programming C&#43;&#43; back in 1998. He is an active member of the European C&#43;&#43; community and the founder of the Meeting C&#43;&#43; platform and conference. Jens is an active supporter of C&#43;&#43; user groups and blogs often about C&#43;&#43;. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:42a93c750df04e3b981fa5720100618c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V016</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V016</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Encryption has become a very important topic for C&amp;#43;&amp;#43; developers and this session will serve as an introduction and overview this topic. I will present an overview on the popular encryption libraries cryptopp, botan and libsodium, and give you an update on the popular encryption algorithms of AES and RSA, plus why cryptoboxes can be a great help. — Jens Weller has worked, since 2007, as a freelancer in C&amp;#43;&amp;#43;, specialising in consulting, training and programming C&amp;#43;&amp;#43;. He started with programming C&amp;#43;&amp;#43; back in 1998. He is an active member of the European C&amp;#43;&amp;#43; community and the founder of the Meeting C&amp;#43;&amp;#43; platform and conference. Jens is an active supporter of C&amp;#43;&amp;#43; user groups and blogs often about C&amp;#43;&amp;#43;. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2674</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V016</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Weller.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016.mp3" expression="full" duration="2674" fileSize="42794826" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016.mp4" expression="full" duration="2674" fileSize="59026381" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/da74/06a65941-9b42-421d-b282-df2ad357da74/CPPConD03V016_mid.mp4" expression="full" duration="2674" fileSize="175453468" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Weller.mp4" expression="full" duration="2674" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How to make your data structures wait-free for reads</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk we will describe a new concurrency control algorithm with Blocking write operations and Wait-Free Population Oblivious read operations, which we named the Left-Right algorithm. We will show a new pattern where this algorithm is applied, which requires using two instances of a given resource, and can be used for any data structure, allowing concurrent access to it similarly to a Reader-Writer lock, but in a non-blocking manner for reads, including safe memory management without needing a Garbage Collector. — Pedro has a PhD in Particle Physics for research done at CERN. Most of the research itself required programming in C&#43;&#43;, and I also had a major participation in the coding of the experiment's data acquisition and decoding software in C and C&#43;&#43;. I'm currently working at Cisco writing networking software, with emphasis on real-time concurrent synchronization techniques, and wait-free/lock-free data structures. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4b964c2503f044bc9b70a57201006187">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V015</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V015</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk we will describe a new concurrency control algorithm with Blocking write operations and Wait-Free Population Oblivious read operations, which we named the Left-Right algorithm. We will show a new pattern where this algorithm is applied, which requires using two instances of a given resource, and can be used for any data structure, allowing concurrent access to it similarly to a Reader-Writer lock, but in a non-blocking manner for reads, including safe memory management without needing a Garbage Collector. — Pedro has a PhD in Particle Physics for research done at CERN. Most of the research itself required programming in C&amp;#43;&amp;#43;, and I also had a major participation in the coding of the experiment&#39;s data acquisition and decoding software in C and C&amp;#43;&amp;#43;. I&#39;m currently working at Cisco writing networking software, with emphasis on real-time concurrent synchronization techniques, and wait-free/lock-free data structures. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3975</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V015</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Ramalhete.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015.mp3" expression="full" duration="3975" fileSize="63603786" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015.mp4" expression="full" duration="3975" fileSize="98659621" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e8a2/48356ffb-7d31-4d9c-b1d3-d5d87afae8a2/CPPConD03V015_mid.mp4" expression="full" duration="3975" fileSize="279722173" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Ramalhete.mp4" expression="full" duration="3975" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Static Analysis and C++: More Than Lint</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Static analysis tools have the potential to significantly improve programmer productivity as well as the safety, reliability and efficiency of the code they write. Modern static analysis has moved well beyond the mental model people often have based on “lint”: just finding simple “typos” or “thinkos”. Static analysis can find subtle, complex bugs early, identify opportunities to improve performance, encourage consistent style and appropriate usage of libraries and APIs. This talk will look at the different purposes static analysis tools can be used to meet all these different goals. It will present specific examples from our experience working with sophisticated analysis tools on large, commercial codebases. The talk will also present a specific implementation of a modern static analysis toolkit for C&#43;&#43;. This toolkit is being used in a number of different contexts: to provide tool-based enforcement of new coding guidelines and rules, to migrate people to modern C&#43;&#43; coding idioms and to find important security and reliability defects. One notable example of its use is to implement the checker for enforcement of a core set of coding guidelines that are presented in Bjarne Stroustrup’s keynote address. Some of the tools described in the talk will be available for download in a future Community Technology Preview . — Neil is the lead for the C&#43;&#43; static analysis frameworks used widely within Microsoft, including PREfix, PREfast, and ESPx, as well as the /analyze feature of the Microsoft C&#43;&#43; compiler. He is currently focused on making all these tools work better with portable C&#43;&#43;14 code rather than nonstandard annotations. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f267a91b847f4678b1d0a57201006182">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V014</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V014</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Static analysis tools have the potential to significantly improve programmer productivity as well as the safety, reliability and efficiency of the code they write. Modern static analysis has moved well beyond the mental model people often have based on “lint”: just finding simple “typos” or “thinkos”. Static analysis can find subtle, complex bugs early, identify opportunities to improve performance, encourage consistent style and appropriate usage of libraries and APIs. This talk will look at the different purposes static analysis tools can be used to meet all these different goals. It will present specific examples from our experience working with sophisticated analysis tools on large, commercial codebases. The talk will also present a specific implementation of a modern static analysis toolkit for C&amp;#43;&amp;#43;. This toolkit is being used in a number of different contexts: to provide tool-based enforcement of new coding guidelines and rules, to migrate people to modern C&amp;#43;&amp;#43; coding idioms and to find important security and reliability defects. One notable example of its use is to implement the checker for enforcement of a core set of coding guidelines that are presented in Bjarne Stroustrup’s keynote address. Some of the tools described in the talk will be available for download in a future Community Technology Preview . — Neil is the lead for the C&amp;#43;&amp;#43; static analysis frameworks used widely within Microsoft, including PREfix, PREfast, and ESPx, as well as the /analyze feature of the Microsoft C&amp;#43;&amp;#43; compiler. He is currently focused on making all these tools work better with portable C&amp;#43;&amp;#43;14 code rather than nonstandard annotations. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3637</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V014</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Macintosh.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014.mp3" expression="full" duration="3637" fileSize="58208970" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014.mp4" expression="full" duration="3637" fileSize="102074834" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/60fb/8b50f81a-1ab5-458d-80a3-8fb8fbd860fb/CPPConD03V014_mid.mp4" expression="full" duration="3637" fileSize="280367889" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Macintosh.mp4" expression="full" duration="3637" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Transducers: from Clojure to C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Transducers allow to express transformations on sequential inputs (like std::transform, std::filter, most of boost::range::adators [4] and more) in a way that is independent of the input source. They are simple high order functions agnostic of the notion of iterator or collection and can be combined by simple function composition. They can later be applied eagerly or lazily over iterators, but most interestingly, also to other kinds of &quot;reactive&quot; sources, like networked streams, inter-process channels or reactive observables (e.g. RxCpp [3]). Not only they provide an elegant decoupling between the &quot;what&quot; and the &quot;how&quot; and higher level of reuse, their implementation is often simpler and and more performant than similar boost::range adaptors. Transducers were introduced in Clojure by Rich Hickey [2]. At Ableton we implemented them in C&#43;&#43; and released them as part of our Open Source modern C&#43;&#43; toolkit: Atria [1]. Our implementation introduces innovations of its own, like implementing state-full transducers without mutation, enabling further safety and reusability. We also use Eric Niebler's technique [5] to describe and check its concepts in standard compliant C&#43;&#43;11. In this session we will introduce the concept of transducers and how they can be implemented in modern C&#43;&#43;. We will also cover some of the most interesting use-cases. [1] https://github.com/AbletonAG/atria [2] http://clojure.org/transducers [3] https://github.com/Reactive-Extension... [4] http://www.boost.org/doc/libs/1_58_0/... [5] http://ericniebler.com/2013/11/23/con... — Juanpe is a Spanish software engineer currently based in Berlin, Germany. Since 2011 he works for Ableton, where he has helped building novel musical platforms like Push and Live and where he coordinates the &quot;Open Source Guild&quot; helping the adoption and contribution to FLOSS. He is most experienced in C&#43;&#43; and Python and likes tinkering with languages like Haskell or Clojure. He is an advocate for &quot;modern C&#43;&#43;&quot; and pushes for adoption of declarative and functional paradigms in the programming mainstream. He is also an open source activist and maintainer of a couple of official GNU packages like Psychosynth which introduces new realtime audio processing techniques leveraging the newest C&#43;&#43; standards. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fb9dcaeed9634010b716a57201006179">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V013</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V013</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Transducers allow to express transformations on sequential inputs (like std::transform, std::filter, most of boost::range::adators [4] and more) in a way that is independent of the input source. They are simple high order functions agnostic of the notion of iterator or collection and can be combined by simple function composition. They can later be applied eagerly or lazily over iterators, but most interestingly, also to other kinds of &amp;quot;reactive&amp;quot; sources, like networked streams, inter-process channels or reactive observables (e.g. RxCpp [3]). Not only they provide an elegant decoupling between the &amp;quot;what&amp;quot; and the &amp;quot;how&amp;quot; and higher level of reuse, their implementation is often simpler and and more performant than similar boost::range adaptors. Transducers were introduced in Clojure by Rich Hickey [2]. At Ableton we implemented them in C&amp;#43;&amp;#43; and released them as part of our Open Source modern C&amp;#43;&amp;#43; toolkit: Atria [1]. Our implementation introduces innovations of its own, like implementing state-full transducers without mutation, enabling further safety and reusability. We also use Eric Niebler&#39;s technique [5] to describe and check its concepts in standard compliant C&amp;#43;&amp;#43;11. In this session we will introduce the concept of transducers and how they can be implemented in modern C&amp;#43;&amp;#43;. We will also cover some of the most interesting use-cases. [1] https://github.com/AbletonAG/atria [2] http://clojure.org/transducers [3] https://github.com/Reactive-Extension... [4] http://www.boost.org/doc/libs/1_58_0/... [5] http://ericniebler.com/2013/11/23/con... — Juanpe is a Spanish software engineer currently based in Berlin, Germany. Since 2011 he works for Ableton, where he has helped building novel musical platforms like Push and Live and where he coordinates the &amp;quot;Open Source Guild&amp;quot; helping the a</itunes:summary>
    <itunes:duration>3603</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V013</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_JuanPedro.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013.mp3" expression="full" duration="3603" fileSize="57661002" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013.mp4" expression="full" duration="3603" fileSize="103728078" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1753/3e0a4e8a-cc76-46dd-85ea-db3057ac1753/CPPConD03V013_mid.mp4" expression="full" duration="3603" fileSize="321659292" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_JuanPedro.mp4" expression="full" duration="3603" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boostache Exposed : the internals of Boost&#39;s template engine</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Template engines are commonly found generating web pages, customer reports, or even source code. They take a source template and data model as input and generate some desired output. Boostache was started as the Library in a Week challenge from CppNow'14 with initial support for Mustache. Today Boostache supports multiple template formats and adapts automagically at compile time to user defined data models. Many of the techniques utilized in Boostache are the same that Ciere has employed in custom IDL compilers, Domain Specific Language systems, compilers, and runtimes. This talk will briefly introduce Boostache and then delve into the internal architecture and design of the library. We will explore some implementation details of the parser, compiler, virtual machine, and generic data model infrastructure with the goal to expose useful techniques and patterns from this C&#43;&#43;11 code base that can be used in your own libraries and applications. — Michael Caisse has been crafting code in C&#43;&#43; for nearly 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn't fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8fc2fbd41a114a6a91a2a57201006174">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V012</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V012</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Template engines are commonly found generating web pages, customer reports, or even source code. They take a source template and data model as input and generate some desired output. Boostache was started as the Library in a Week challenge from CppNow&#39;14 with initial support for Mustache. Today Boostache supports multiple template formats and adapts automagically at compile time to user defined data models. Many of the techniques utilized in Boostache are the same that Ciere has employed in custom IDL compilers, Domain Specific Language systems, compilers, and runtimes. This talk will briefly introduce Boostache and then delve into the internal architecture and design of the library. We will explore some implementation details of the parser, compiler, virtual machine, and generic data model infrastructure with the goal to expose useful techniques and patterns from this C&amp;#43;&amp;#43;11 code base that can be used in your own libraries and applications. — Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for nearly 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn&#39;t fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3769</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V012</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Caisse.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012.mp3" expression="full" duration="3769" fileSize="60320970" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012.mp4" expression="full" duration="3769" fileSize="93783227" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/27c4/b0c91eff-9ecb-4c96-83a5-e4b080d827c4/CPPConD03V012_mid.mp4" expression="full" duration="3769" fileSize="285214667" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-1400_Caisse.mp4" expression="full" duration="3769" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Current State of (free) Static Analysis</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — We will discuss the currently available free static analysis software available for C&#43;&#43;. What kinds of errors can these tools catch? What kind do they miss? Why static analysis should be a part of your normal build process. — I'm an independent contractor with 15 years of development experience. For the past 5 years I've been specializing in cross platform development, scripting of C&#43;&#43; libraries, and automated testing and code quality analysis. I'm the co-creator and maintainer of the embedded scripting language for C&#43;&#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b06126cd00944fa0a9aba5720100616b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V011</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V011</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — We will discuss the currently available free static analysis software available for C&amp;#43;&amp;#43;. What kinds of errors can these tools catch? What kind do they miss? Why static analysis should be a part of your normal build process. — I&#39;m an independent contractor with 15 years of development experience. For the past 5 years I&#39;ve been specializing in cross platform development, scripting of C&amp;#43;&amp;#43; libraries, and automated testing and code quality analysis. I&#39;m the co-creator and maintainer of the embedded scripting language for C&amp;#43;&amp;#43;, ChaiScript http://chaiscript.com, and author and curator of the forkable coding standards document http://cppbestpractices.com. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1768</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V011</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Turner.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011.mp3" expression="full" duration="1768" fileSize="28298826" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011.mp4" expression="full" duration="1768" fileSize="43801624" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ba71/dd55f276-a823-4a6c-96a5-4a81aa12ba71/CPPConD03V011_mid.mp4" expression="full" duration="1768" fileSize="113372817" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Turner.mp4" expression="full" duration="1768" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Variable Templates and Compile-Time Computation with C++14</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&#43;&#43;11 introduced Variadic Templates, constexpr Functions and Literal Types that ease and allow type-safe computations at compile time. For embedded development this is an important aspect, because it provides a means to create ROMable data in type-safe C&#43;&#43;. In combination with C&#43;&#43;14 mechanism of Variable Templates, that actually defines constants, and the relaxed constexpr function rules there are unprecedented possibilities for compile-time computations. This talk does not only show the mechanisms available but also demonstrates non-trivial examples, how they can be used to compute interesting data at compile time. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&#43;&#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&#43;&#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9681d10c9b5b48a79d7ea57201006166">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V010</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V010</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&amp;#43;&amp;#43;11 introduced Variadic Templates, constexpr Functions and Literal Types that ease and allow type-safe computations at compile time. For embedded development this is an important aspect, because it provides a means to create ROMable data in type-safe C&amp;#43;&amp;#43;. In combination with C&amp;#43;&amp;#43;14 mechanism of Variable Templates, that actually defines constants, and the relaxed constexpr function rules there are unprecedented possibilities for compile-time computations. This talk does not only show the mechanisms available but also demonstrates non-trivial examples, how they can be used to compute interesting data at compile time. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&amp;#43;&amp;#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&amp;#43;&amp;#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4706</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V010</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Sommerlad_v2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010.mp3" expression="full" duration="4706" fileSize="75301578" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010.mp4" expression="full" duration="4706" fileSize="111431518" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/98ab/866484a0-23a7-4c99-a466-7366d45398ab/CPPConD03V010_mid.mp4" expression="full" duration="4706" fileSize="340305614" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Sommerlad_v2.mp4" expression="full" duration="4706" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Unexceptional Exceptions</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The main goal of this class is not to teach how to use exceptions - it's not that hard, and we will go over the basics at the start of the class. The main goal is to teach to not be afraid to use exceptions, and also not to be awed by them. We will spend few minutes on the basic syntax and semantics of exceptions, as well as their interaction with other parts of the language. Then we get to the real issue: the error handling. It is important to understand that errors, or exceptional cases, do not need to be handled by exceptions. Exceptions are just a tool that provides one way of coding the error handling, and it’s not even a very good one: overly focusing on exception handling, as opposed to error handling, often leads to code that is both buggy and hard to read and maintain. My goal is to show that the best approach to error handling involves very light explicit use of exceptions. The emphasis is put on maintaining program invariants and avoiding the undefined behavior, something all programs need to do at all times, with or without errors. Thus, a well-written program should have very little error handling code, and only a part of that explicitly deals with exceptions. This understanding is particularly important for programmers who have to deal with the “we don’t use exceptions here” mindset, or want to use exceptions for handling errors in their part of the larger legacy system. Once you understand (small) the role exceptions play in the real problem of error handling, it becomes quite obvious how to start using exceptions in a small part of a larger system without disturbing the rest of it, or even how to write very “exception-like” code without actually using exceptions. Most importantly, the exceptions are completely demystified. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:718ea91a14ab4860aaa2a5720100615d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V009</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V009</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The main goal of this class is not to teach how to use exceptions - it&#39;s not that hard, and we will go over the basics at the start of the class. The main goal is to teach to not be afraid to use exceptions, and also not to be awed by them. We will spend few minutes on the basic syntax and semantics of exceptions, as well as their interaction with other parts of the language. Then we get to the real issue: the error handling. It is important to understand that errors, or exceptional cases, do not need to be handled by exceptions. Exceptions are just a tool that provides one way of coding the error handling, and it’s not even a very good one: overly focusing on exception handling, as opposed to error handling, often leads to code that is both buggy and hard to read and maintain. My goal is to show that the best approach to error handling involves very light explicit use of exceptions. The emphasis is put on maintaining program invariants and avoiding the undefined behavior, something all programs need to do at all times, with or without errors. Thus, a well-written program should have very little error handling code, and only a part of that explicitly deals with exceptions. This understanding is particularly important for programmers who have to deal with the “we don’t use exceptions here” mindset, or want to use exceptions for handling errors in their part of the larger legacy system. Once you understand (small) the role exceptions play in the real problem of error handling, it becomes quite obvious how to start using exceptions in a small part of a larger system without disturbing the rest of it, or even how to write very “exception-like” code without actually using exceptions. Most importantly, the exceptions are completely demystified. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Cor</itunes:summary>
    <itunes:duration>3432</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V009</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Pikus.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009.mp3" expression="full" duration="3432" fileSize="54915402" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009.mp4" expression="full" duration="3432" fileSize="91987978" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/865a/fc129eb1-0edc-410f-bd22-55952069865a/CPPConD03V009_mid.mp4" expression="full" duration="3432" fileSize="264238771" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Pikus.mp4" expression="full" duration="3432" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Coroutines - a negative overhead abstraction</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&#43;&#43; coroutines are one of the few major features that may land in C&#43;&#43;17. We will look at the current standardization status, available experimental implementations and develop a small coroutine adapter over raw C networking APIs that will beat hand-crafted state machine in performance. — Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&#43;&#43; team. He works on the 'await' feature. Prior to joining C&#43;&#43; team, Gor was working on distributed systems in Windows Clustering team. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6df218f63faa446cad9da57201006153">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V008</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V008</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&amp;#43;&amp;#43; coroutines are one of the few major features that may land in C&amp;#43;&amp;#43;17. We will look at the current standardization status, available experimental implementations and develop a small coroutine adapter over raw C networking APIs that will beat hand-crafted state machine in performance. — Gor Nishanov is a is a Principal Software Design Engineer on the Microsoft C&amp;#43;&amp;#43; team. He works on the &#39;await&#39; feature. Prior to joining C&amp;#43;&amp;#43; team, Gor was working on distributed systems in Windows Clustering team. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3502</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V008</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Nishanov.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008.mp3" expression="full" duration="3502" fileSize="56043594" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008.mp4" expression="full" duration="3502" fileSize="99752917" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2a10/f1f67492-1a0f-4823-84c9-810da7512a10/CPPConD03V008_mid.mp4" expression="full" duration="3502" fileSize="319113219" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Nishanov.mp4" expression="full" duration="3502" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ in Open Source Robotics</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The robotics community is thriving in part due to flexible, powerful, accessible open source tools. The Open Source Robotics Foundation is a non-profit organization dedicated to the development, distribution, and adoption of open source software in robotics. We enable academics to focus on high-level research by re-using code, robotics startups to keep their development costs lean, and novice users to engage with powerful, complex robotics technology. The first half of this talk centers around the future of ROS, the most widely used open source framework for robotics. After an overview of ROS transport, tools, capabilities, and the diverse ecosystem of ROS-compatible libraries, we will motivate the development of ROS 2: a major API change that targets new use cases for ROS, including embedded hardware, multi-robot systems, and real-time performance. Starting with an overview of the ROS 2 architecture, which includes a modern C&#43;&#43;11 client library built on top of a generic DDS middleware interface, we will then focus on two core user code examples: publish/subscribe over a topic, and client request/service response. After this half of the presentation, attendees will understand C&#43;&#43; is a dominant language choice for robotics and why C&#43;&#43;11 makes it easy to build a flexible, modular, Boost-free framework for communication and synchronization. The second half of the talk focuses on Gazebo, a simulator for robotics that features support for multiple rigid body dynamics physics engines, high quality graphics, and a flexible C&#43;&#43; API. Simulation software like Gazebo is of utmost importance for developing controller algorithms, prototyping robot designs, and regression testing in challenging environments. It has been used in high­-stakes competitions such as the DARPA Robotics Challenge. This talk will delve into how different components of the simulator interact, from calculating the physical interactions between objects to rendering graphics with OGRE. We will also discuss upcoming features in Gazebo and the process of tailoring our development to our community. — Jackie Kay: Software Engineer, Open Source Robotics Foundation Louise Poubel is a software engineer at the Open Source Robotics Foundation, working on GUI tools and user experience for the multi-robot simulator Gazebo. She first got involved with OSRF in the end of 2013 through GNOME's Outreach Program For Women. Louise grew up in Brazil and went to college in Japan, where she received her BS in Electromechanical Engineering from Chiba University. After that she got a joint MEng in Advanced Robotics from Ecole Centrale de Nantes and Warsaw University of Technology. Her masters research focused on real-time whole-body human motion imitation by humanoid robots. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b75fb2a771de48d3bbd7a5720100614f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V007</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V007</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The robotics community is thriving in part due to flexible, powerful, accessible open source tools. The Open Source Robotics Foundation is a non-profit organization dedicated to the development, distribution, and adoption of open source software in robotics. We enable academics to focus on high-level research by re-using code, robotics startups to keep their development costs lean, and novice users to engage with powerful, complex robotics technology. The first half of this talk centers around the future of ROS, the most widely used open source framework for robotics. After an overview of ROS transport, tools, capabilities, and the diverse ecosystem of ROS-compatible libraries, we will motivate the development of ROS 2: a major API change that targets new use cases for ROS, including embedded hardware, multi-robot systems, and real-time performance. Starting with an overview of the ROS 2 architecture, which includes a modern C&amp;#43;&amp;#43;11 client library built on top of a generic DDS middleware interface, we will then focus on two core user code examples: publish/subscribe over a topic, and client request/service response. After this half of the presentation, attendees will understand C&amp;#43;&amp;#43; is a dominant language choice for robotics and why C&amp;#43;&amp;#43;11 makes it easy to build a flexible, modular, Boost-free framework for communication and synchronization. The second half of the talk focuses on Gazebo, a simulator for robotics that features support for multiple rigid body dynamics physics engines, high quality graphics, and a flexible C&amp;#43;&amp;#43; API. Simulation software like Gazebo is of utmost importance for developing controller algorithms, prototyping robot designs, and regression testing in challenging environments. It has been used in high&#173;-stakes competitions such as the DARPA Robotics Challenge. This talk will delve into how diff</itunes:summary>
    <itunes:duration>3282</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V007</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Kay+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007.mp3" expression="full" duration="3282" fileSize="52519242" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007.mp4" expression="full" duration="3282" fileSize="85728210" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/98bb/9301a710-14ee-4dce-9843-0d2b117b98bb/CPPConD03V007_mid.mp4" expression="full" duration="3282" fileSize="232068938" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Kay+1.mp4" expression="full" duration="3282" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>On C++, Javascript and WebSockets</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Session presents Open Service Platform (OSP) - an application server engine inspired by OSGi, consisting of C&#43;&#43; and JavaScript runtime environments; OSP is based on the POCO C&#43;&#43; Libraries, with embedded Google V8 JavaScript engine. A brief overview of the application server and underlying technologies will be given, followed by dissection of the most interesting implementation details - C&#43;&#43;-to-JavaScript bridging mechanism and WebSocket-based messaging mechanism for transparent intra- and inter-process scalable communications. The language bridging mechanism exposes the C&#43;&#43; classes to JavaScript code without a need for manually written glue code or separate IDL constructs for interfaces. The messaging mechanism provides a unified, event-based interface for the in-process entities as well as those reachable over the network - be it TCP/HTTP server or a web browser. Key design aspects, advantages, as well as trade-offs will be examined; a live example demonstrating key technologies in action will be presented. — Alex is the POCO (C&#43;&#43; POrtable COmponents, http://pocoproject.org) Project Lead and ISO/IEEE Computer Society Certified Software Development Professional. Alex has been a professional programmer since 1992, using C and C&#43;&#43; since 1998. He earned a master's degree in Mechanical Engineering from Faculty of Engineering (University of Rijeka, Croatia) and a master's degree in Software Engineering from Citadel Graduate College in Charleston, South Carolina. In addition to C&#43;&#43;, Alex occasionally writes code in Python and Javascript. He formerly competed in rowing on World Championship/Olympic Games levels. As a diversion, Alex likes to spend his free time traveling, reading, and watching good movies. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:73ccb8ab571b4b8ca434a57201006145">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V006</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V006</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Session presents Open Service Platform (OSP) - an application server engine inspired by OSGi, consisting of C&amp;#43;&amp;#43; and JavaScript runtime environments; OSP is based on the POCO C&amp;#43;&amp;#43; Libraries, with embedded Google V8 JavaScript engine. A brief overview of the application server and underlying technologies will be given, followed by dissection of the most interesting implementation details - C&amp;#43;&amp;#43;-to-JavaScript bridging mechanism and WebSocket-based messaging mechanism for transparent intra- and inter-process scalable communications. The language bridging mechanism exposes the C&amp;#43;&amp;#43; classes to JavaScript code without a need for manually written glue code or separate IDL constructs for interfaces. The messaging mechanism provides a unified, event-based interface for the in-process entities as well as those reachable over the network - be it TCP/HTTP server or a web browser. Key design aspects, advantages, as well as trade-offs will be examined; a live example demonstrating key technologies in action will be presented. — Alex is the POCO (C&amp;#43;&amp;#43; POrtable COmponents, http://pocoproject.org) Project Lead and ISO/IEEE Computer Society Certified Software Development Professional. Alex has been a professional programmer since 1992, using C and C&amp;#43;&amp;#43; since 1998. He earned a master&#39;s degree in Mechanical Engineering from Faculty of Engineering (University of Rijeka, Croatia) and a master&#39;s degree in Software Engineering from Citadel Graduate College in Charleston, South Carolina. In addition to C&amp;#43;&amp;#43;, Alex occasionally writes code in Python and Javascript. He formerly competed in rowing on World Championship/Olympic Games levels. As a diversion, Alex likes to spend his free time traveling, reading, and watching good movies. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3345</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V006</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Fabijanic.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006.mp3" expression="full" duration="3345" fileSize="53524938" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006.mp4" expression="full" duration="3345" fileSize="113116068" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eeb3/678746ee-90c8-4fc7-8c06-835a27f3eeb3/CPPConD03V006_mid.mp4" expression="full" duration="3345" fileSize="496332873" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0900_Fabijanic.mp4" expression="full" duration="3345" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Traits Go Mainstream (They&#39;re not just for library developers any more: a case study)</title>
    <description><![CDATA[&quot;Traits Go Mainstream (They're not just for library developers any more: a case study)&quot; — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1d1e5bd2a5b74a89ba36a57201006141">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V005</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V005</link>
    <itunes:summary>&amp;quot;Traits Go Mainstream (They&#39;re not just for library developers any more: a case study)&amp;quot; — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>724</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V005</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning5-5_ZOLMAN.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005.mp3" expression="full" duration="724" fileSize="11589834" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005.mp4" expression="full" duration="724" fileSize="23890725" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f126/53e6d110-b376-4ced-a745-a8e054a2f126/CPPConD03V005_mid.mp4" expression="full" duration="724" fileSize="85082110" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning5-5_ZOLMAN.mp4" expression="full" duration="724" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The dangers of C-style casts</title>
    <description><![CDATA[Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c51275a2097e4d4ca3b5a57201006137">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V004</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V004</link>
    <itunes:summary>Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>270</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V004</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning4-5_GERRARD.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004.mp3" expression="full" duration="270" fileSize="4334538" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004.mp4" expression="full" duration="270" fileSize="8254982" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/21df/c702442e-6ccb-4112-898f-b392437521df/CPPConD03V004_mid.mp4" expression="full" duration="270" fileSize="25826695" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning4-5_GERRARD.mp4" expression="full" duration="270" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Superscopes: Local, global... is there any more?</title>
    <description><![CDATA[Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4dcb2ea58cb74605930fa57201006133">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V003</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V003</link>
    <itunes:summary>Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>316</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V003</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning3-5_RENNGILES.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003.mp3" expression="full" duration="316" fileSize="5062602" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003.mp4" expression="full" duration="316" fileSize="8893717" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3b14/51b926a1-c353-4887-b24b-0cd66d2b3b14/CPPConD03V003_mid.mp4" expression="full" duration="316" fileSize="24927617" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning3-5_RENNGILES.mp4" expression="full" duration="316" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CLion Tips &amp; Tricks</title>
    <description><![CDATA[Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:72dfaa75f1c34309ab14a57201006129">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V002</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V002</link>
    <itunes:summary>Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>952</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V002</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning2-5_NESTERUK.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002.mp3" expression="full" duration="952" fileSize="15233994" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002.mp4" expression="full" duration="952" fileSize="20091367" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/55ab/5366453e-e3ad-49ad-a392-4149667155ab/CPPConD03V002_mid.mp4" expression="full" duration="952" fileSize="50346054" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning2-5_NESTERUK.mp4" expression="full" duration="952" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The Projucer</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:37043fb187db4d3bb4b0a57201006125">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V001</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V001</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>885</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD03V001</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning1-5_STORER.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001.mp3" expression="full" duration="885" fileSize="14174922" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001.mp4" expression="full" duration="885" fileSize="22403021" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a111/6d84bf15-f5d5-4edb-8ed8-83f0ce9ba111/CPPConD03V001_mid.mp4" expression="full" duration="885" fileSize="71590164" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0923-0800_Lightning1-5_STORER.mp4" expression="full" duration="885" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Algorithmic Differentiation: C++ &amp; Extremum Estimation</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:809c66d2e66347778e77a5720100611b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V035</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V035</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>985</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V035</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning6-6_DZIUBINSKI.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035.mp3" expression="full" duration="985" fileSize="15770826" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035.mp4" expression="full" duration="985" fileSize="22649815" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0ac1/6bea3afd-5d56-4f40-b437-bb5bbd1a0ac1/CPPConD02V035_mid.mp4" expression="full" duration="985" fileSize="73983057" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning6-6_DZIUBINSKI.mp4" expression="full" duration="985" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>How I integrated TinyMCE into my Qt Application</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:cee440ff1b86473bbd4ba57201006117">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V034</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V034</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>857</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V034</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning5-6_WELLER.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034.mp3" expression="full" duration="857" fileSize="13728330" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034.mp4" expression="full" duration="857" fileSize="25110500" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5256/a18d8e0c-74b2-48b1-b5a8-46d090255256/CPPConD02V034_mid.mp4" expression="full" duration="857" fileSize="75812498" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning5-6_WELLER.mp4" expression="full" duration="857" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Kiss Templates</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:37b156627667433c9eeca5720100610d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V033</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V033</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>482</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V033</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning4-6_BOCK.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033.mp3" expression="full" duration="482" fileSize="7717194" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033.mp4" expression="full" duration="482" fileSize="11276147" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c3cf/e6b761b7-a82b-4e58-9104-16f84d8ec3cf/CPPConD02V033_mid.mp4" expression="full" duration="482" fileSize="32174774" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning4-6_BOCK.mp4" expression="full" duration="482" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Give me 15 minutes &amp; I&#39;ll change your view of GDB</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:62d2efcdaab9454f8889a57201006108">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V032</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V032</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>886</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V032</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning3-6_LAW.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032.mp3" expression="full" duration="886" fileSize="14178762" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032.mp4" expression="full" duration="886" fileSize="25617699" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1491/2ee58e13-672f-4438-9e88-7e1a51d71491/CPPConD02V032_mid.mp4" expression="full" duration="886" fileSize="90892978" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning3-6_LAW.mp4" expression="full" duration="886" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ WAT</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a4e84445870e496dacd1a572010060ff">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V031</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V031</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>914</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V031</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning2-6_PADLEWSKI.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031.mp3" expression="full" duration="914" fileSize="14640330" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031.mp4" expression="full" duration="914" fileSize="27568662" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/54d1/d3b43f3f-e86b-4c79-8320-50338f4454d1/CPPConD02V031_mid.mp4" expression="full" duration="914" fileSize="107054933" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning2-6_PADLEWSKI.mp4" expression="full" duration="914" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>The stand up</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9754826c3dc6463890b5a572010060fa">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V030</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V030</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015</itunes:summary>
    <itunes:duration>780</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V030</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning1-6_NASH.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030.mp3" expression="full" duration="780" fileSize="12483786" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030.mp4" expression="full" duration="780" fileSize="21090260" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0459/5b4a57f2-59c5-46fe-95e3-919eb4170459/CPPConD02V030_mid.mp4" expression="full" duration="780" fileSize="75553693" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-2030_Lightning1-6_NASH.mp4" expression="full" duration="780" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>All Your Tests are Terrible: Tales from the Trenches</title>
    <description><![CDATA[Titus Winters &amp; Hyrum Wright &quot;All Your Tests are Terrible: Tales from the Trenches&quot; -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Thousands of Google engineers have collectively written about 100,000 separate C&#43;&#43; test binaries in the last 15 years. Not all of those was a perfect test. In this talk we’ll focus on how to write good tests and adopt a good testing philosophy, with lots of examples of what not to do (and why). — Titus Winters has spent the past 4 years working on Google's core C&#43;&#43; libraries. He's particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&#43;&#43; Style Guide. Hyrum Wright hates C&#43;&#43; less than the rest of the programming languages he's worked with, and works on C&#43;&#43; library infrastructure at Google. He writes programs to rewrite other programs, and will eventually put himself out of a job. In a former life, he was an author of Apache Subversion, and still retains membership in the Apache Software Foundation. Hyrum enjoys cycling, but didn't bring a bike to Seattle. Twitter handle: @hyrumwright — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5bbe557f906f43f699fba572010060f1">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V029</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V029</link>
    <itunes:summary>Titus Winters &amp;amp; Hyrum Wright &amp;quot;All Your Tests are Terrible: Tales from the Trenches&amp;quot; -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Thousands of Google engineers have collectively written about 100,000 separate C&amp;#43;&amp;#43; test binaries in the last 15 years. Not all of those was a perfect test. In this talk we’ll focus on how to write good tests and adopt a good testing philosophy, with lots of examples of what not to do (and why). — Titus Winters has spent the past 4 years working on Google&#39;s core C&amp;#43;&amp;#43; libraries. He&#39;s particularly interested in issues of large scale software engineer and codebase maintenance: how do we keep a codebase of over 100M lines of code consistent and flexible for the next decade? Along the way he has helped Google teams pioneer techniques to perform automated code transformations on a massive scale, and helps maintain the Google C&amp;#43;&amp;#43; Style Guide. Hyrum Wright hates C&amp;#43;&amp;#43; less than the rest of the programming languages he&#39;s worked with, and works on C&amp;#43;&amp;#43; library infrastructure at Google. He writes programs to rewrite other programs, and will eventually put himself out of a job. In a former life, he was an author of Apache Subversion, and still retains membership in the Apache Software Foundation. Hyrum enjoys cycling, but didn&#39;t bring a bike to Seattle. Twitter handle: @hyrumwright — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3831</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V029</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Winters+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029.mp3" expression="full" duration="3831" fileSize="61301322" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029.mp4" expression="full" duration="3831" fileSize="107112534" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6226/6901e748-1645-4a5e-b4a5-d62402886226/CPPConD02V029_mid.mp4" expression="full" duration="3831" fileSize="425050610" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Winters+1.mp4" expression="full" duration="3831" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>STL Algorithms in Action</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This will be an entertaining trip through the STL algorithms, where we will view many of them in their natural habitats, going about their natural algorithm business. Then we will take some of them out of their native environments and make them do tricks that are entirely unexpected. In the end, you will gain a new appreciation for what the algorithms are and how pervasively they can be used throughout your code. — I have been developing software for over 30 years. Yes, I started before I was born. I have been doing C&#43;&#43; for over 20 years, not very well at first, and slightly better now. I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities. I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:641683e2b0c74fad8a8ea572010060ec">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V028</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V028</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This will be an entertaining trip through the STL algorithms, where we will view many of them in their natural habitats, going about their natural algorithm business. Then we will take some of them out of their native environments and make them do tricks that are entirely unexpected. In the end, you will gain a new appreciation for what the algorithms are and how pervasively they can be used throughout your code. — I have been developing software for over 30 years. Yes, I started before I was born. I have been doing C&amp;#43;&amp;#43; for over 20 years, not very well at first, and slightly better now. I work at F5 Networks, and have worked at Disney, VMware, Yahoo!, and Microsoft, among many others. I have benefited from a wide range of experience and personalities. I have a personal grudge against code that does not strive to reach a high standard. I am dismayed at code that does not reach its potential. And I firmly believe that writing code well creates a better, more stable, more maintainable product. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3711</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V028</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_VanLoon.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028.mp3" expression="full" duration="3711" fileSize="59379018" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028.mp4" expression="full" duration="3711" fileSize="102903792" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/084a/311de23b-bd7d-4bba-983a-e3a04707084a/CPPConD02V028_mid.mp4" expression="full" duration="3711" fileSize="335061167" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_VanLoon.mp4" expression="full" duration="3711" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Boost Units Library for Correct Code</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I will give a presentation on the Boost Units library. This library implements a zero runtime facility for performing dimensional analysis checking and automatic units conversion on C&#43;&#43; expressions. I have found this indispensable for coding scientific programs involving a variety of complex physical units. The documentation of the Boost Units library is totally complete and accurate, but totally inpenetrable. I had to spend way too much time figuring out how to use this. By attending this meeting, you're going to avoid this pain and just get the benefit of simpler programs that contain fewer bugs. — Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&#43;&#43; library development. Lately, he has been mostly interested in C&#43;&#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:515cc9765d12421f9a48a572010060e3">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V027</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V027</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I will give a presentation on the Boost Units library. This library implements a zero runtime facility for performing dimensional analysis checking and automatic units conversion on C&amp;#43;&amp;#43; expressions. I have found this indispensable for coding scientific programs involving a variety of complex physical units. The documentation of the Boost Units library is totally complete and accurate, but totally inpenetrable. I had to spend way too much time figuring out how to use this. By attending this meeting, you&#39;re going to avoid this pain and just get the benefit of simpler programs that contain fewer bugs. — Robert Ramey is a freelance Software Developer living in Santa Barbara, California. (See www.rrsd.com.) His long and varied career spans various aspects of software development including business data processing, product, embedded systems, custom software, and C&amp;#43;&amp;#43; library development. Lately, he has been mostly interested in C&amp;#43;&amp;#43; library design and implementation related to Boost. He is the author and maintainer of the Boost Serialization library and a frequent contributor to the Boost developers list. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4110</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V027</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Ramey.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027.mp3" expression="full" duration="4110" fileSize="65775306" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027.mp4" expression="full" duration="4110" fileSize="121775664" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6597/e3314d8f-f5d4-4dc2-9732-8a56cfc06597/CPPConD02V027_mid.mp4" expression="full" duration="4110" fileSize="406851532" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Ramey.mp4" expression="full" duration="4110" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Work Stealing</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — If you've used a C&#43;&#43; parallel-programming system in the last decade, you've probably run across the term &quot;work stealing.&quot; Work stealing is a scheduling strategy that automatically balances a parallel workload among available CPUs in a multi-core computer, using computation resources with theoretical utilization that is nearly optimal. Modern C&#43;&#43; parallel template libraries such as Intel(R)'s TBB or Microsoft*'s PPL and language extensions such as Intel(R) Cilk(tm) Plus or OpenMP tasks are implemented using work-stealing runtime libraries. Most C&#43;&#43; programmers pride themselves on understanding how their programs execute on the underlying machine. Yet, when it comes to parallel programming, many programmers mistakenly believe that if you understand threads, then you understand parallel runtime libraries. In this talk, we'll investigate how work-stealing applies to the semantics of a parallel C&#43;&#43; program. We'll look at the theoretical underpinnings of work-stealing, now it achieves near optimal machine utilization, and a bit about how it's implemented. In the process, we'll discover some pit-falls and how to avoid them. You should leave this talk with a deeper appreciation of how parallel software runs on real systems. Previous experience with parallel programming is helpful but not required. A medium level of expertise in C&#43;&#43; is assumed. — Pablo Halpern has been programming in C&#43;&#43; since 1989 and has been a member of the C&#43;&#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&#43;&#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2009. During his time at Cilk Arts, he co-authored the paper &quot;Reducers and other Cilk&#43;&#43; Hyperobjects&quot;, which won best paper at the SPAA 2009 conference. His current work is focused on creating simpler and more powerful parallel programming languages and tools for Intel's customers and promoting adoption of parallel constructs into the C&#43;&#43; and C standards. He lives with his family in southern New Hampshire, USA. When not working on parallel programming, he enjoys studying the viola, skiing, snowboarding, and watching opera. Twitter handle: @PabloGHalpern — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f9faa0f17ae749fd9e61a572010060da">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V026</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V026</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — If you&#39;ve used a C&amp;#43;&amp;#43; parallel-programming system in the last decade, you&#39;ve probably run across the term &amp;quot;work stealing.&amp;quot; Work stealing is a scheduling strategy that automatically balances a parallel workload among available CPUs in a multi-core computer, using computation resources with theoretical utilization that is nearly optimal. Modern C&amp;#43;&amp;#43; parallel template libraries such as Intel(R)&#39;s TBB or Microsoft*&#39;s PPL and language extensions such as Intel(R) Cilk(tm) Plus or OpenMP tasks are implemented using work-stealing runtime libraries. Most C&amp;#43;&amp;#43; programmers pride themselves on understanding how their programs execute on the underlying machine. Yet, when it comes to parallel programming, many programmers mistakenly believe that if you understand threads, then you understand parallel runtime libraries. In this talk, we&#39;ll investigate how work-stealing applies to the semantics of a parallel C&amp;#43;&amp;#43; program. We&#39;ll look at the theoretical underpinnings of work-stealing, now it achieves near optimal machine utilization, and a bit about how it&#39;s implemented. In the process, we&#39;ll discover some pit-falls and how to avoid them. You should leave this talk with a deeper appreciation of how parallel software runs on real systems. Previous experience with parallel programming is helpful but not required. A medium level of expertise in C&amp;#43;&amp;#43; is assumed. — Pablo Halpern has been programming in C&amp;#43;&amp;#43; since 1989 and has been a member of the C&amp;#43;&amp;#43; Standards Committee since 2007. He is currently the Parallel Programming Languages Architect at Intel Corp., where he coordinates the efforts of teams working on Cilk Plus, TBB, OpenMP, and other parallelism languages, frameworks, and tools targeted to C&amp;#43;&amp;#43;, C, and Fortran users. Pablo came to Intel from Cilk Arts, Inc., which was acquired by Intel in 2</itunes:summary>
    <itunes:duration>4688</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V026</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Halpern.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026.mp3" expression="full" duration="4688" fileSize="75016266" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026.mp4" expression="full" duration="4688" fileSize="142010708" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c165/dbb5f70c-c4e6-437e-b0c9-3d9179d7c165/CPPConD02V026_mid.mp4" expression="full" duration="4688" fileSize="531584291" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Halpern.mp4" expression="full" duration="4688" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Reflection Techniques in C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Reflection is a very powerful and useful feature used in many languages to achieve things like serialization, object-relationship mapping, and general data-driven development. C&#43;&#43; doesn't support reflection natively in the language yet. There are proposals to add compile-time reflection to the language, but C&#43;&#43; has survived all this time without direct support for reflection. This talk will discuss the various techniques the can be used to achieve reflection including boost fusion, the visitor patter, and do-it-yourself with some macros and metaprogramming. This talk will discuss how these techniques can be used to implement serialization or object-relational mapping. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6128f6d5b46044a1bf2aa572010060d0">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V025</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V025</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Reflection is a very powerful and useful feature used in many languages to achieve things like serialization, object-relationship mapping, and general data-driven development. C&amp;#43;&amp;#43; doesn&#39;t support reflection natively in the language yet. There are proposals to add compile-time reflection to the language, but C&amp;#43;&amp;#43; has survived all this time without direct support for reflection. This talk will discuss the various techniques the can be used to achieve reflection including boost fusion, the visitor patter, and do-it-yourself with some macros and metaprogramming. This talk will discuss how these techniques can be used to implement serialization or object-relational mapping. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2812</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V025</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Fultz.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025.mp3" expression="full" duration="2812" fileSize="45004362" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025.mp4" expression="full" duration="2812" fileSize="72647934" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/31f4/04487653-1537-4644-8e46-0a33a1a131f4/CPPConD02V025_mid.mp4" expression="full" duration="2812" fileSize="209258666" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Fultz.mp4" expression="full" duration="2812" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ on the Web: Ponies for developers without pwn’ing users</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Is it possible to write apps in C&#43;&#43; that run in the browser with native code speed? Yes. Can you do this without the security problems associated with running native code downloaded from the net? Yes and yes. Come to this session to learn how. We'll showcase some resource-intensive applications that have been compiled to run in the browser. These applications run as fast as native code with access to cornerstone native programming APIs—modern C&#43;&#43; STL, OpenGL, files and processes with full access to C&#43;&#43;’s concurrency and parallelism—all in an architecture- and OS-agnostic packaging. Then, we'll describe how we deliver native code on the web securely, so developers get their C&#43;&#43; ponies and users don’t get pwn’d. We’ll also touch on the fuzzing, code randomization, and sandboxing that keep the billions of web users safe. — JF Bastien is a compiler engineer and tech lead on Google’s Chrome web browser, currently focusing on performance and security to bring portable, fast and secure code to the Web. JF is a member of the C&#43;&#43; standards committee, where his mechanical engineering degree serves little purpose. He’s worked on startup incubators, business jets, flight simulators, CPUs, dynamic binary translation, systems, and compilers. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:335701513bcf4cd9b13da572010060cc">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V024</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V024</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Is it possible to write apps in C&amp;#43;&amp;#43; that run in the browser with native code speed? Yes. Can you do this without the security problems associated with running native code downloaded from the net? Yes and yes. Come to this session to learn how. We&#39;ll showcase some resource-intensive applications that have been compiled to run in the browser. These applications run as fast as native code with access to cornerstone native programming APIs—modern C&amp;#43;&amp;#43; STL, OpenGL, files and processes with full access to C&amp;#43;&amp;#43;’s concurrency and parallelism—all in an architecture- and OS-agnostic packaging. Then, we&#39;ll describe how we deliver native code on the web securely, so developers get their C&amp;#43;&amp;#43; ponies and users don’t get pwn’d. We’ll also touch on the fuzzing, code randomization, and sandboxing that keep the billions of web users safe. — JF Bastien is a compiler engineer and tech lead on Google’s Chrome web browser, currently focusing on performance and security to bring portable, fast and secure code to the Web. JF is a member of the C&amp;#43;&amp;#43; standards committee, where his mechanical engineering degree serves little purpose. He’s worked on startup incubators, business jets, flight simulators, CPUs, dynamic binary translation, systems, and compilers. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>4421</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V024</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Bastien_v2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024.mp3" expression="full" duration="4421" fileSize="70746954" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024.mp4" expression="full" duration="4421" fileSize="133811850" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/787e/01eda96e-4aed-405c-b5b9-c4108dbc787e/CPPConD02V024_mid.mp4" expression="full" duration="4421" fileSize="539596447" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1645_Bastien_v2.mp4" expression="full" duration="4421" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>constexpr: Applications</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I'm excited about constexpr. It's probably my favorite C&#43;&#43;11 feature and it's gotten even better with C&#43;&#43;14. But when I talk to other developers about constexpr they seem puzzled. What sorts of useful computations can the compiler possibly do before runtime? I'd like to take this session to explore some of the capabilities that constexpr brings to the table. We'll look at compile-time parsing, floating-point computations, and containers. We'll also talk about motivations for computing these at compile time. This session builds on the &quot;constexpr: Introduction&quot; talk. — If you ask his children, they will tell you that Scott has been writing software since dinosaurs roamed the earth. In 1996 Scott learned C&#43;&#43; by working through the exercises in Stroustrup's TC&#43;&#43;PL 2nd edition and he has never looked back. Scott is currently working at Ripple Labs developing open source crypto-financial software. When he's not writing code Scott plays the Chapman Stick, sings rock and roll, and spends time with his lovely wife. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c34ebc83e2ba45d1af60a572010060c7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V023</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V023</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I&#39;m excited about constexpr. It&#39;s probably my favorite C&amp;#43;&amp;#43;11 feature and it&#39;s gotten even better with C&amp;#43;&amp;#43;14. But when I talk to other developers about constexpr they seem puzzled. What sorts of useful computations can the compiler possibly do before runtime? I&#39;d like to take this session to explore some of the capabilities that constexpr brings to the table. We&#39;ll look at compile-time parsing, floating-point computations, and containers. We&#39;ll also talk about motivations for computing these at compile time. This session builds on the &amp;quot;constexpr: Introduction&amp;quot; talk. — If you ask his children, they will tell you that Scott has been writing software since dinosaurs roamed the earth. In 1996 Scott learned C&amp;#43;&amp;#43; by working through the exercises in Stroustrup&#39;s TC&amp;#43;&amp;#43;PL 2nd edition and he has never looked back. Scott is currently working at Ripple Labs developing open source crypto-financial software. When he&#39;s not writing code Scott plays the Chapman Stick, sings rock and roll, and spends time with his lovely wife. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3628</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V023</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Schurr.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023.mp3" expression="full" duration="3628" fileSize="58052298" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023.mp4" expression="full" duration="3628" fileSize="142799144" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/745e/f164795c-5f6c-4209-bdbc-b4c804bb745e/CPPConD02V023_mid.mp4" expression="full" duration="3628" fileSize="498318583" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Schurr.mp4" expression="full" duration="3628" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Atomics: The Sad Story of memory_order_consume: A Happy Ending At Last?</title>
    <description><![CDATA[C&#43;&#43; Atomics: The Sad Story of memory_order_consume: A Happy Ending At Last? — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — One of the big advantages of C&#43;&#43; atomics is that developers can now let the compiler know about the intent behind their multi-threaded synchronization mechanisms. At least they can tell the compiler as long as the synchronization mechanism in question is not RCU. You see, all production compilers promote RCU's memory_order_consume to memory_order_acquire. Although this promotion does ensure correctness, it also ensures the additional overhead of memory-barrier instructions on weakly ordered systems and of needlessly suppressed compiler optimizations on all systems. All previous attempts to resolve this issue have foundered on either standard-committee reluctance to eviscerate the standard for a special case, compiler-writer reluctance to eviscerate their compilers for a special case, and kernel-developers reluctance to eviscerate their source base for late-to-the-party compiler support. But now there is a glimmer of hope in the guise of a small set of small patches to the Linux kernel that eliminate the most challenging use cases. Will this hope be realized? Come to this talk to here the story, which by September will hopefully have a happy ending! — Paul E. McKenney: Distinguished Engineer, IBM Linux Technology Center Low-level concurrency in applications and kernels written in C and C&#43;&#43;. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:b26cd329a2b0420f92cea572010060bd">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V022</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V022</link>
    <itunes:summary>C&amp;#43;&amp;#43; Atomics: The Sad Story of memory_order_consume: A Happy Ending At Last? — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — One of the big advantages of C&amp;#43;&amp;#43; atomics is that developers can now let the compiler know about the intent behind their multi-threaded synchronization mechanisms. At least they can tell the compiler as long as the synchronization mechanism in question is not RCU. You see, all production compilers promote RCU&#39;s memory_order_consume to memory_order_acquire. Although this promotion does ensure correctness, it also ensures the additional overhead of memory-barrier instructions on weakly ordered systems and of needlessly suppressed compiler optimizations on all systems. All previous attempts to resolve this issue have foundered on either standard-committee reluctance to eviscerate the standard for a special case, compiler-writer reluctance to eviscerate their compilers for a special case, and kernel-developers reluctance to eviscerate their source base for late-to-the-party compiler support. But now there is a glimmer of hope in the guise of a small set of small patches to the Linux kernel that eliminate the most challenging use cases. Will this hope be realized? Come to this talk to here the story, which by September will hopefully have a happy ending! — Paul E. McKenney: Distinguished Engineer, IBM Linux Technology Center Low-level concurrency in applications and kernels written in C and C&amp;#43;&amp;#43;. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2583</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V022</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_McLenney.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022.mp3" expression="full" duration="2583" fileSize="41344842" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022.mp4" expression="full" duration="2583" fileSize="74802551" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/41d1/48ed6ab6-6b2c-4dd7-9b00-3c8da99141d1/CPPConD02V022_mid.mp4" expression="full" duration="2583" fileSize="187866952" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_McLenney.mp4" expression="full" duration="2583" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Concurrency TS Editor&#39;s Report</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this presentation we will talk about the new C&#43;&#43; concurrency features that have been included in the Concurrency Technical Specification. The TS should be of interest to anyone writing concurrent code in C&#43;&#43;. The proposal includes improved futures for wait-free composition of asynchronous operations (including their relationship with C&#43;&#43; 'await'), new synchronization constructs as well as atomic smart pointers. — Artur Laksberg is a software design engineer at Microsoft. His interests include concurrency, programming language and library design, and modern C&#43;&#43;. Artur is a regular participant in the work of the Concurrency Study Group in the ISO C&#43;&#43; Committee, serving as the editor of the Concurrency Technical Specification. He is one of the co-authors of the proposal to improve std::future (currently part of the Concurrency TS) and also a contributor to the Parallelism TS. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3c538d7f5a0b4e4ab30ca572010060b4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V021</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V021</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this presentation we will talk about the new C&amp;#43;&amp;#43; concurrency features that have been included in the Concurrency Technical Specification. The TS should be of interest to anyone writing concurrent code in C&amp;#43;&amp;#43;. The proposal includes improved futures for wait-free composition of asynchronous operations (including their relationship with C&amp;#43;&amp;#43; &#39;await&#39;), new synchronization constructs as well as atomic smart pointers. — Artur Laksberg is a software design engineer at Microsoft. His interests include concurrency, programming language and library design, and modern C&amp;#43;&amp;#43;. Artur is a regular participant in the work of the Concurrency Study Group in the ISO C&amp;#43;&amp;#43; Committee, serving as the editor of the Concurrency Technical Specification. He is one of the co-authors of the proposal to improve std::future (currently part of the Concurrency TS) and also a contributor to the Parallelism TS. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1762</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V021</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Laksberg.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021.mp3" expression="full" duration="1762" fileSize="28199370" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021.mp4" expression="full" duration="1762" fileSize="60293649" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1a88/4877a47e-02a6-4750-b5be-0d76f6dd1a88/CPPConD02V021_mid.mp4" expression="full" duration="1762" fileSize="233461962" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Laksberg.mp4" expression="full" duration="1762" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Writing Great Libraries: 89 Easy Steps</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Writing code that does what you want it to do, correctly and efficiently, is hard. Doing so when you don't even know yet what you want the code to do yet is quite a bit harder. Yet this is the job of a library writer -- the users of a library may have a very different use case from that of the original author. How do library writers develop correct and efficient APIs that are also: - easy to use correctly - hard to use incorrectly - highly reusable - gracefully interoperable with other code This talk gives lots of practical advice and techniques for accomplishing those goals and more. — Zach Laine has been using C&#43;&#43; in industry for 12 years, focusing on data visualization, numeric computing, games, generic programming, and good library design. He finds the process of writing bio blurbs to be a little uncomfortable. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1ff2cc9edbaf4a7089a4a572010060af">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V020</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V020</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Writing code that does what you want it to do, correctly and efficiently, is hard. Doing so when you don&#39;t even know yet what you want the code to do yet is quite a bit harder. Yet this is the job of a library writer -- the users of a library may have a very different use case from that of the original author. How do library writers develop correct and efficient APIs that are also: - easy to use correctly - hard to use incorrectly - highly reusable - gracefully interoperable with other code This talk gives lots of practical advice and techniques for accomplishing those goals and more. — Zach Laine has been using C&amp;#43;&amp;#43; in industry for 12 years, focusing on data visualization, numeric computing, games, generic programming, and good library design. He finds the process of writing bio blurbs to be a little uncomfortable. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3422</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V020</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Laine.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020.mp3" expression="full" duration="3422" fileSize="54754506" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020.mp4" expression="full" duration="3422" fileSize="75593751" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0473/0fca89f8-fdb4-4845-8243-b2828f360473/CPPConD02V020_mid.mp4" expression="full" duration="3422" fileSize="231871240" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Laine.mp4" expression="full" duration="3422" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Cross-Platform Mobile App Development with Visual C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Visual C&#43;&#43; 2015 supports the development of apps for the Windows platform as well as for Android and iOS. A single code base, possibly with a thin platform-specific UI layer, can be compiled to run on Windows, Android, and iOS. The resulting binary can be published to a device and debugged, all from within Visual C&#43;&#43; 2015. This presentation introduces you to such cross-platform mobile app development, including debugging and emulation, and includes a number of demos. — Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&#43;&#43;, and specifically Microsoft VC&#43;&#43; and the MFC framework. Next to C/C&#43;&#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&#43;&#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&#43;&#43; expertise. Marc is the author of &quot;Professional C&#43;&#43;, Second and Third Edition&quot;, published by Wiley/Wrox, is the founder of the Belgian C&#43;&#43; Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blog. He also creates freeware and shareware programs that are distributed through his website at www.nuonsoft.com, and maintains a blog on www.nuonsoft.com/blog/. He is also passionate about traveling and gastronomic restaurants.m — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fa654dc8d90c4bb8b154a572010060ab">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V019</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V019</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Visual C&amp;#43;&amp;#43; 2015 supports the development of apps for the Windows platform as well as for Android and iOS. A single code base, possibly with a thin platform-specific UI layer, can be compiled to run on Windows, Android, and iOS. The resulting binary can be published to a device and debugged, all from within Visual C&amp;#43;&amp;#43; 2015. This presentation introduces you to such cross-platform mobile app development, including debugging and emulation, and includes a number of demos. — Marc Gregoire has worked as a software engineer consultant for 6 years for Siemens and Nokia Siemens Networks on critical 2G and 3G software running on Solaris for telecom operators. This required working in international teams stretching from South America and USA to EMEA and Asia. Now, Marc is working for Nikon Metrology on 3D scanning software. His main expertise is C/C&amp;#43;&amp;#43;, and specifically Microsoft VC&amp;#43;&amp;#43; and the MFC framework. Next to C/C&amp;#43;&amp;#43;, Marc also likes C# and uses PHP for creating web pages. In addition to his main interest for Windows development, he also has experience in developing C&amp;#43;&amp;#43; programs running 24x7 on Linux platforms; for example, EIB/KNX home automation controlling and monitoring software. Since April 2007, he received the yearly Microsoft MVP (Most Valuable Professional) award for his Visual C&amp;#43;&amp;#43; expertise. Marc is the author of &amp;quot;Professional C&amp;#43;&amp;#43;, Second and Third Edition&amp;quot;, published by Wiley/Wrox, is the founder of the Belgian C&amp;#43;&amp;#43; Users Group (www.becpp.org), and has written a number of articles which have been published on CodeGuru and/or his personal blog. He also creates freeware and shareware programs that are distributed through his website at www.nuonsoft.com, and maintains a blog on www.nuonsoft.com/blog/. He is also passionate about traveling and gastronomic restauran</itunes:summary>
    <itunes:duration>3619</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V019</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Asthana+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019.mp3" expression="full" duration="3619" fileSize="57916746" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019.mp4" expression="full" duration="3619" fileSize="94844130" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/66ef/8615d9bd-6f18-4a8b-9062-7ab324ee66ef/CPPConD02V019_mid.mp4" expression="full" duration="3619" fileSize="281828002" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Asthana+1.mp4" expression="full" duration="3619" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++: How I learned to stop worrying and love metaprogramming</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Horrible software engineering technique conceived in the forge of Hell or the Only True Way of doing C&#43;&#43; in 2015, template metaprogramming and its cohort of companion techniques are sure to create animation in a group of programmers. What if we were to tell you that an actual software product, actually sold to real customers and in production for now several years has been built on it? What if we were to tell you that a lot of advanced template techniques helped us to build a better software faster? This talk is all about real life examples of template metaprogramming, why they are useful and when and how you could use them in your own projects. — Edouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:302b3aa549b841498a3ca5720100609d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V018</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V018</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Horrible software engineering technique conceived in the forge of Hell or the Only True Way of doing C&amp;#43;&amp;#43; in 2015, template metaprogramming and its cohort of companion techniques are sure to create animation in a group of programmers. What if we were to tell you that an actual software product, actually sold to real customers and in production for now several years has been built on it? What if we were to tell you that a lot of advanced template techniques helped us to build a better software faster? This talk is all about real life examples of template metaprogramming, why they are useful and when and how you could use them in your own projects. — Edouard has more than thirteen years of professional experience in software engineering. After years hacking the kernel of various operating systems, Edouard founded Bureau 14, the home of the hyperscalable database quasardb. Combining an excellent knowledge of low level programming with a perverse love for template meta-programming, Edouard likes to come up with uncompromising solutions to seemingly impossible problems. He lives in Paris, France. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3052</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V018</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Alligand.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018.mp3" expression="full" duration="3052" fileSize="48836298" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018.mp4" expression="full" duration="3052" fileSize="76206084" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5eb7/0be3cc4a-287f-43ac-8bdc-3ceb4a715eb7/CPPConD02V018_mid.mp4" expression="full" duration="3052" fileSize="215642794" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1515_Alligand.mp4" expression="full" duration="3052" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++11/14/17 atomics and memory model: Before the story consumes you</title>
    <description><![CDATA[&quot;C&#43;&#43;11/14/17 atomics and memory model: Before the story consumes you&quot; -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In 2011, C&#43;&#43;11 atomics offered three memory models but 6 settings. Most compilers have started implementing most of these (relaxed, seq_cst, acquire, release, acq_rel) but not consume (For that you will need to see Paul's talk which naturally follows this talk.) For this, I will deep dive into what each memory model setting means (especially for Games Development and low latency, a new SG14 in the C&#43;&#43; Standard) and how C&#43;&#43;11 atomics are used to improve handling of mutable shared state. We have improved on it in C&#43;&#43;14 and have more crazy things planned for C&#43;&#43;17. I will also look at how C&#43;&#43; atomics are a natural precursor to SG5's Transactional Memory which was approved in Lenexa for publication. — Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&#43;&#43; Standard and OpenMP Committee. He is also a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada’s Standard Council. He has so many titles, it’s a wonder he can get anything done. He chairs the WG21 SG5 Transactional Memory and SG14 Games Development/Low Latency, and is the co-author of a number C&#43;&#43;11/OpenMP/Transactional Memory features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&#43;&#43; team lead to IBM’s XL C&#43;&#43; compiler means he has been messing around with designing C&#43;&#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&#43;&#43; benchmark performance, object model, generic programming and template metaprogramming. He holds a B.Sc from University of Toronto, and a Masters in Mathematics from University of Waterloo. He has been asked to speak at ACCU, C&#43;&#43;Now, Meeting C&#43;&#43;, ADC&#43;&#43;, CASCON, Bloomberg, CERN, and many Universities, research centers and companies. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:67249cb286974218b115a57201006098">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V017</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V017</link>
    <itunes:summary>&amp;quot;C&amp;#43;&amp;#43;11/14/17 atomics and memory model: Before the story consumes you&amp;quot; -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In 2011, C&amp;#43;&amp;#43;11 atomics offered three memory models but 6 settings. Most compilers have started implementing most of these (relaxed, seq_cst, acquire, release, acq_rel) but not consume (For that you will need to see Paul&#39;s talk which naturally follows this talk.) For this, I will deep dive into what each memory model setting means (especially for Games Development and low latency, a new SG14 in the C&amp;#43;&amp;#43; Standard) and how C&amp;#43;&amp;#43;11 atomics are used to improve handling of mutable shared state. We have improved on it in C&amp;#43;&amp;#43;14 and have more crazy things planned for C&amp;#43;&amp;#43;17. I will also look at how C&amp;#43;&amp;#43; atomics are a natural precursor to SG5&#39;s Transactional Memory which was approved in Lenexa for publication. — Michael Wong is the CEO of OpenMP. He is the IBM and Canadian representative to the C&amp;#43;&amp;#43; Standard and OpenMP Committee. He is also a Director of ISOCPP.org and a VP, Vice-Chair of Programming Languages for Canada’s Standard Council. He has so many titles, it’s a wonder he can get anything done. He chairs the WG21 SG5 Transactional Memory and SG14 Games Development/Low Latency, and is the co-author of a number C&amp;#43;&amp;#43;11/OpenMP/Transactional Memory features including generalized attributes, user-defined literals, inheriting constructors, weakly ordered memory models, and explicit conversion operators. Having been the past C&amp;#43;&amp;#43; team lead to IBM’s XL C&amp;#43;&amp;#43; compiler means he has been messing around with designing C&amp;#43;&amp;#43; compilers for twenty years. His current research interest, i.e. what he would like to do if he had time is in the area of parallel programming, transactional memory, C&amp;#43;&amp;#43; benchmark performance, object model, generic programming and template metaprogramming. He holds </itunes:summary>
    <itunes:duration>3657</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V017</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Wong.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017.mp3" expression="full" duration="3657" fileSize="58522314" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017.mp4" expression="full" duration="3657" fileSize="109464034" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8391/6110dc6b-2fe8-4520-86ae-5d4bebf08391/CPPConD02V017_mid.mp4" expression="full" duration="3657" fileSize="375518817" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Wong.mp4" expression="full" duration="3657" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Parallelizing the C++ Standard Template Library</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — As the era of frequency scaling comes to an end, multi-core parallelism has become an essential focal point in computational research. Mainstream languages, however, have not yet adapted to take full advantage of parallelism provided by the hardware. While new languages such as Rust and Swift are catching on and implementing multi-core algorithms in their libraries, C&#43;&#43; has only started to do so. A parallel Standard Library could bring with it many positive features that users can begin taking advantage of. This talk will focus around two standards proposals, N4409 and N4406. N4409 outlines the details of a parallel Standard Library and features of these new parallel algorithms. The complementary N4406 outlines abstractions to take advantage of various mechanisms for parallel execution. We will cover the reasons why the new Standard Library would be beneficial to C&#43;&#43; users and our experience implementing these algorithms in HPX. The presentation will address what exactly the two proposals define, the challenges we faced, and the results we collected. In addition, we will discuss extensions made to these proposals and the C&#43;&#43;11/14 standard in HPX to support these semantics in a distributed environment. — Daniel Bourgeois: I'm a student at LSU and have been working at the SET||AR research group helping implement parallel algorithms inside of HPX. Feel free to talk to me about new C&#43;&#43; features, parallel computing or anything else. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f97edc0e18b344e3b9fba57201006093">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V016</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V016</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — As the era of frequency scaling comes to an end, multi-core parallelism has become an essential focal point in computational research. Mainstream languages, however, have not yet adapted to take full advantage of parallelism provided by the hardware. While new languages such as Rust and Swift are catching on and implementing multi-core algorithms in their libraries, C&amp;#43;&amp;#43; has only started to do so. A parallel Standard Library could bring with it many positive features that users can begin taking advantage of. This talk will focus around two standards proposals, N4409 and N4406. N4409 outlines the details of a parallel Standard Library and features of these new parallel algorithms. The complementary N4406 outlines abstractions to take advantage of various mechanisms for parallel execution. We will cover the reasons why the new Standard Library would be beneficial to C&amp;#43;&amp;#43; users and our experience implementing these algorithms in HPX. The presentation will address what exactly the two proposals define, the challenges we faced, and the results we collected. In addition, we will discuss extensions made to these proposals and the C&amp;#43;&amp;#43;11/14 standard in HPX to support these semantics in a distributed environment. — Daniel Bourgeois: I&#39;m a student at LSU and have been working at the SET||AR research group helping implement parallel algorithms inside of HPX. Feel free to talk to me about new C&amp;#43;&amp;#43; features, parallel computing or anything else. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3385</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V016</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Mercer+1.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016.mp3" expression="full" duration="3385" fileSize="54168906" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016.mp4" expression="full" duration="3385" fileSize="75169268" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7233/1787f121-09bb-43c8-9273-329e0d7e7233/CPPConD02V016_mid.mp4" expression="full" duration="3385" fileSize="218328642" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Mercer+1.mp4" expression="full" duration="3385" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Integrating generators EDSL&#39;s for Spirit X3 (WIP)</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Based on the presentation I made on C&#43;&#43;Now 2015 for Developing EDSL's for Boost.Spirit V2, present the development of generators for Boost.Spirit X3 (next version of boost spirit) and how that can be used for higher abstraction EDSL's while, through template metaprogramming, create parsers and generators automatically from the same grammar, using CORBA format as an example, while dealing with endianness, alignment and asymmetric grammars. This work is based on the library mORBid (https://github.com/expertisesolutions...) and (https://github.com/expertisesolutions...). — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aedfcbd60cde462aa217a5720100608f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V015</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V015</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Based on the presentation I made on C&amp;#43;&amp;#43;Now 2015 for Developing EDSL&#39;s for Boost.Spirit V2, present the development of generators for Boost.Spirit X3 (next version of boost spirit) and how that can be used for higher abstraction EDSL&#39;s while, through template metaprogramming, create parsers and generators automatically from the same grammar, using CORBA format as an example, while dealing with endianness, alignment and asymmetric grammars. This work is based on the library mORBid (https://github.com/expertisesolutions...) and (https://github.com/expertisesolutions...). — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2600</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V015</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Magno.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015.mp3" expression="full" duration="2600" fileSize="41602122" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015.mp4" expression="full" duration="2600" fileSize="71158179" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0373/d8c989ca-dc78-4be3-b9d0-c682bdb00373/CPPConD02V015_mid.mp4" expression="full" duration="2600" fileSize="183876349" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Magno.mp4" expression="full" duration="2600" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Large Scale C++ with Modules: What You Should Know</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — “Modules” are a frequently requested and long-awaited feature by C&#43;&#43; programmers. In a nutshell, the idea is to have a direct language support for <span class="c9emoticon c9emoticon_angel">(a)</span> expressing the boundaries and dependencies of a program component; (b) isolating source codes from macro vagaries; (c) scaling compile time, especially for large projects, given the ubiquity of “headers-only” template libraries; (d) spur innovation and deployment of semantics-aware developer tools. This presentation will focus on three major points: (1) the design of the module proposal currently being considered by the C&#43;&#43; standards committee (design goals, properties, constraints); (2) implementations currently under way; and (3) early user experience and migration. Modules directly address a problem (scalability) listed as one of the three major areas where C&#43;&#43;17 is expected to significantly improve daily experience of the working C&#43;&#43; programmer. Naturally, this feature is also on the top ten list of C&#43;&#43;17 functionalities Bjarne Stroustrup put forward in his “Thought on C&#43;&#43;17.” — Gabriel Dos Reis is a Principal Software Development Engineer at Microsoft. He is also a researcher and a longtime member of the C&#43;&#43; community. His research interests include programming tools for dependable software. Prior to joining Microsoft, he was Assistant Professor at Texas A&amp;M University. Dr. Dos Reis was a recipient of the 2012 National Science Foundation CAREER award for his research in compilers for dependable computational mathematics and educational activities. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3c59897f2f0e4a84836da57201006085">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V014</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V014</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — “Modules” are a frequently requested and long-awaited feature by C&amp;#43;&amp;#43; programmers. In a nutshell, the idea is to have a direct language support for (a) expressing the boundaries and dependencies of a program component; (b) isolating source codes from macro vagaries; (c) scaling compile time, especially for large projects, given the ubiquity of “headers-only” template libraries; (d) spur innovation and deployment of semantics-aware developer tools. This presentation will focus on three major points: (1) the design of the module proposal currently being considered by the C&amp;#43;&amp;#43; standards committee (design goals, properties, constraints); (2) implementations currently under way; and (3) early user experience and migration. Modules directly address a problem (scalability) listed as one of the three major areas where C&amp;#43;&amp;#43;17 is expected to significantly improve daily experience of the working C&amp;#43;&amp;#43; programmer. Naturally, this feature is also on the top ten list of C&amp;#43;&amp;#43;17 functionalities Bjarne Stroustrup put forward in his “Thought on C&amp;#43;&amp;#43;17.” — Gabriel Dos Reis is a Principal Software Development Engineer at Microsoft. He is also a researcher and a longtime member of the C&amp;#43;&amp;#43; community. His research interests include programming tools for dependable software. Prior to joining Microsoft, he was Assistant Professor at Texas A&amp;amp;M University. Dr. Dos Reis was a recipient of the 2012 National Science Foundation CAREER award for his research in compilers for dependable computational mathematics and educational activities. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3658</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V014</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_high.mp4" length="1383140358" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014.mp3" expression="full" duration="3658" fileSize="58538442" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014.mp4" expression="full" duration="3658" fileSize="114733288" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_high.mp4" expression="full" duration="3658" fileSize="1383140358" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b802/47f2ed89-3a8a-45f9-a6ac-4a2b65d7b802/CPPConD02V014_mid.mp4" expression="full" duration="3658" fileSize="418071927" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Simple, Extensible Pattern Matching in C++14</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Recently, there has been in increased interest in applying functional programming techniques to C&#43;&#43;. A very convenient construct that is used in functional programming languages is pattern matching. Due to the features introduced in C&#43;&#43;11 and C&#43;&#43;14 we can actually write a simple, easy to use, understandable, and extensible pattern matching library that is header only and uses no macros. In this talks we will discuss the motivations for pattern matching, and see examples of use from other languages. We will then go on to design and implement a pattern matching library in C&#43;&#43;. Particular attention will be payed to new C&#43;&#43;14 features that greatly simplify the implementation such as integer_sequence, function return type deduction, and generic lambdas. The implementation will also serve a practical guide to using variadic templates and std::tuple. We will show how the library can be easily extended and customized by working through some examples of customization such as working with user defined classes and structs, pointers, tuples, boost::optional, and boost::variant. At the end of the session, the audience will have an appreciation for pattern matching, as well as a sense that the C&#43;&#43;11/14 features open new paradigms without sacrificing understandable code. — I first started programming in C&#43;&#43; at age 14 in 1994 when I cajoled my parents into buying me Visual C&#43;&#43; 1.0 for my birthday. It took a while, but as I learned the language, I decided I really liked C&#43;&#43;. I attended the University of Florida and obtained my undergraduate degree in Computer and Information Science. During my undergraduate time, I created and submitted Boost.Tokenizer. I went on to medical school and neurosurgery residency, but decided to do something with a little less scary undefined behavior and returned to programming in C&#43;&#43;. I am currently working for Transunion Specialized Risk Group as a Senior C&#43;&#43; programmer. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ee94a69f418840a08085a5720100607c">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V013</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V013</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Recently, there has been in increased interest in applying functional programming techniques to C&amp;#43;&amp;#43;. A very convenient construct that is used in functional programming languages is pattern matching. Due to the features introduced in C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 we can actually write a simple, easy to use, understandable, and extensible pattern matching library that is header only and uses no macros. In this talks we will discuss the motivations for pattern matching, and see examples of use from other languages. We will then go on to design and implement a pattern matching library in C&amp;#43;&amp;#43;. Particular attention will be payed to new C&amp;#43;&amp;#43;14 features that greatly simplify the implementation such as integer_sequence, function return type deduction, and generic lambdas. The implementation will also serve a practical guide to using variadic templates and std::tuple. We will show how the library can be easily extended and customized by working through some examples of customization such as working with user defined classes and structs, pointers, tuples, boost::optional, and boost::variant. At the end of the session, the audience will have an appreciation for pattern matching, as well as a sense that the C&amp;#43;&amp;#43;11/14 features open new paradigms without sacrificing understandable code. — I first started programming in C&amp;#43;&amp;#43; at age 14 in 1994 when I cajoled my parents into buying me Visual C&amp;#43;&amp;#43; 1.0 for my birthday. It took a while, but as I learned the language, I decided I really liked C&amp;#43;&amp;#43;. I attended the University of Florida and obtained my undergraduate degree in Computer and Information Science. During my undergraduate time, I created and submitted Boost.Tokenizer. I went on to medical school and neurosurgery residency, but decided to do something with a little less scary undefined behavior and retur</itunes:summary>
    <itunes:duration>3086</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V013</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Bandela.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013.mp3" expression="full" duration="3086" fileSize="49379658" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013.mp4" expression="full" duration="3086" fileSize="80762864" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ce9d/2c987a25-6ea9-4a83-b5d1-a34e7577ce9d/CPPConD02V013_mid.mp4" expression="full" duration="3086" fileSize="257186767" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1400_Bandela.mp4" expression="full" duration="3086" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Heaptrack: A Heap Memory Profiler for Linux</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9e8231e4778346d1bc4ca57201006077">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V012</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V012</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>637</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V012</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning4-4_WOLFF.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012.mp3" expression="full" duration="637" fileSize="10206282" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012.mp4" expression="full" duration="637" fileSize="21307381" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/9d0e/0d7d6d41-826f-46d0-a5a6-2db3334a9d0e/CPPConD02V012_mid.mp4" expression="full" duration="637" fileSize="55991016" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning4-4_WOLFF.mp4" expression="full" duration="637" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Extreme Type Safety with Opaque Typedefs</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Talk Description — Person Bio — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:226153d3105a4d06bcfba57201006072">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V011</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V011</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Talk Description — Person Bio — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>692</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V011</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning3-4_MARKLEY.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011.mp3" expression="full" duration="692" fileSize="11086794" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011.mp4" expression="full" duration="692" fileSize="21046904" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fe57/16b38784-8bb0-48a8-9cdc-6c6d19f3fe57/CPPConD02V011_mid.mp4" expression="full" duration="692" fileSize="54180155" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning3-4_MARKLEY.mp4" expression="full" duration="692" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ Requests - Curl for People</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d1e6e4ce086d4031b23ba57201006069">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V010</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V010</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>578</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V010</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning2-4_NGUYEN.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010.mp3" expression="full" duration="578" fileSize="9265482" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010.mp4" expression="full" duration="578" fileSize="16840041" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/334f/633adafb-5093-4139-bff8-1b6b9878334f/CPPConD02V010_mid.mp4" expression="full" duration="578" fileSize="53547931" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning2-4_NGUYEN.mp4" expression="full" duration="578" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Emacs as a C++ IDE</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:eeb7b4aa9bb34b1ca4e7a57201006060">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V009</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V009</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lightning Talk — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>978</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V009</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning1-4_NEVES.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009.mp3" expression="full" duration="978" fileSize="15650250" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009.mp4" expression="full" duration="978" fileSize="27506949" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/1fb3/cf733745-0b63-4148-9449-c19e03de1fb3/CPPConD02V009_mid.mp4" expression="full" duration="978" fileSize="77697245" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-1200_Lightning1-4_NEVES.mp4" expression="full" duration="978" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Templator: Demo of a nice tool for Visualizing Template Instantiations</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Many C&#43;&#43; beginners shy away from employing templates in their code, because of the myth of templates being hard. Even seasoned C&#43;&#43; developers can have problems manually interpreting template code correctly as Olve Maudal's C&#43;&#43; pub quiz demonstrates. Overloads and template specializations make it hard for programmers and also IDEs to show a developer what happens without compiling a program and even with a compile one might not get, what actually happens unless an unintelligible error message from your compiler appears. My students tried to alleviate that problem by visualizing template instantiation and overload selection in a C&#43;&#43; IDE and allow to navigate through template code in instantiation context that a compiler would only create internally and that is otherwise not available for humans. While still in its nascent state I hope to show what is possible and if things go as planned at the time of the submission you should be able to solve the template pub quiz questions without running the programs. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&#43;&#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&#43;&#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fae4cef3b14f4818b91ea5720100605b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V008</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V008</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Many C&amp;#43;&amp;#43; beginners shy away from employing templates in their code, because of the myth of templates being hard. Even seasoned C&amp;#43;&amp;#43; developers can have problems manually interpreting template code correctly as Olve Maudal&#39;s C&amp;#43;&amp;#43; pub quiz demonstrates. Overloads and template specializations make it hard for programmers and also IDEs to show a developer what happens without compiling a program and even with a compile one might not get, what actually happens unless an unintelligible error message from your compiler appears. My students tried to alleviate that problem by visualizing template instantiation and overload selection in a C&amp;#43;&amp;#43; IDE and allow to navigate through template code in instantiation context that a compiler would only create internally and that is otherwise not available for humans. While still in its nascent state I hope to show what is possible and if things go as planned at the time of the submission you should be able to solve the template pub quiz questions without running the programs. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&amp;#43;&amp;#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&amp;#43;&amp;#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1559</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V008</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Sommerlad.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008.mp3" expression="full" duration="1559" fileSize="24953034" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008.mp4" expression="full" duration="1559" fileSize="47622766" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/775e/0ce40fb1-1025-4033-b0d4-56367bdb775e/CPPConD02V008_mid.mp4" expression="full" duration="1559" fileSize="307595197" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Sommerlad.mp4" expression="full" duration="1559" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Test Driven C++ with Catch</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&#43;&#43; has been notorious for being a second class citizen when it comes to test frameworks. There are plenty of them but they tend to be fiddly to set-up and ceremonious to use. Many of them attempt to follow the xUnit template without respect for the language environment they are written for. Catch is an attempt to cut through all of that. It is simple to get and simple to use - being distributed in a single header file - yet is powerful and flexible. Catch includes a number of innovations that make testing in C&#43;&#43; more natural - and fun - than ever before. This presentation introduces you to the unique approach that Catch brings to unit and integration testing - and how to use Catch to drive your design with TDD or BDD. — Phil Nash: Long time C&#43;&#43; developer but also dabbles with F#, Objective-C, Swift, C#, Python, D, Rust and others. | Open source author and contributor - particularly Catch - a C&#43;&#43; test framework in a single header file. | Interested in all forms of bettering oneself! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2690066983de4da59cb8a57201006052">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V007</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V007</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — C&amp;#43;&amp;#43; has been notorious for being a second class citizen when it comes to test frameworks. There are plenty of them but they tend to be fiddly to set-up and ceremonious to use. Many of them attempt to follow the xUnit template without respect for the language environment they are written for. Catch is an attempt to cut through all of that. It is simple to get and simple to use - being distributed in a single header file - yet is powerful and flexible. Catch includes a number of innovations that make testing in C&amp;#43;&amp;#43; more natural - and fun - than ever before. This presentation introduces you to the unique approach that Catch brings to unit and integration testing - and how to use Catch to drive your design with TDD or BDD. — Phil Nash: Long time C&amp;#43;&amp;#43; developer but also dabbles with F#, Objective-C, Swift, C#, Python, D, Rust and others. | Open source author and contributor - particularly Catch - a C&amp;#43;&amp;#43; test framework in a single header file. | Interested in all forms of bettering oneself! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3486</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V007</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Nash.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007.mp3" expression="full" duration="3486" fileSize="55788234" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007.mp4" expression="full" duration="3486" fileSize="90111770" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/86b7/cae3d2de-6338-4bbe-b5b1-7d9ce53e86b7/CPPConD02V007_mid.mp4" expression="full" duration="3486" fileSize="287233628" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Nash.mp4" expression="full" duration="3486" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Time Programming Fundamentals</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — &quot;Time zones are logical and easy to use.&quot; -- No one ever Time programming is notoriously difficult and error prone. Attempts at handling daylight-saving time, for example, often yield baffling code, which of course is explained by a similarly misguided comment. Programmer confusion can spread virally throughout the codebase when these misconceptions find their way into library interfaces. The problem is not that dates and times are fundamentally complicated (though they are). The problem is the lack of a simplified mental model with library support. This would give programmers the concepts and vocabulary necessary to reason about and discuss these concepts, and the ability to express this reasoning in simple C&#43;&#43; terms. In this talk I will show how date and time programming evolved into what it is today. I will present a greatly simplified mental model that applies to all programming languages. I will show clear examples using an open source C&#43;&#43; library that implements these simplified concepts. And I will present practical tips for proper time hygiene that should be used by everyone immediately. — I design and implement C&#43;&#43; core libraries at Google. I work on Google's core strings libraries, as well as a Google's Time and Time Zone libraries. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:60c9d591747343969a3fa57201006048">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V006</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V006</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — &amp;quot;Time zones are logical and easy to use.&amp;quot; -- No one ever Time programming is notoriously difficult and error prone. Attempts at handling daylight-saving time, for example, often yield baffling code, which of course is explained by a similarly misguided comment. Programmer confusion can spread virally throughout the codebase when these misconceptions find their way into library interfaces. The problem is not that dates and times are fundamentally complicated (though they are). The problem is the lack of a simplified mental model with library support. This would give programmers the concepts and vocabulary necessary to reason about and discuss these concepts, and the ability to express this reasoning in simple C&amp;#43;&amp;#43; terms. In this talk I will show how date and time programming evolved into what it is today. I will present a greatly simplified mental model that applies to all programming languages. I will show clear examples using an open source C&amp;#43;&amp;#43; library that implements these simplified concepts. And I will present practical tips for proper time hygiene that should be used by everyone immediately. — I design and implement C&amp;#43;&amp;#43; core libraries at Google. I work on Google&#39;s core strings libraries, as well as a Google&#39;s Time and Time Zone libraries. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3525</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V006</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Miller.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006.mp3" expression="full" duration="3525" fileSize="56406858" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006.mp4" expression="full" duration="3525" fileSize="97925537" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/3049/022c6d64-8296-4f7c-94b6-36fc7a9a3049/CPPConD02V006_mid.mp4" expression="full" duration="3525" fileSize="391473723" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Miller.mp4" expression="full" duration="3525" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>functional: What&#39;s New, And Proper Usage</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — functional gained lots of machinery in C&#43;&#43;11, with further changes in C&#43;&#43;14 and C&#43;&#43;17. This talk will cover what's new in 11/14/17, focusing on how to use it properly. For example, you've probably used std::function, but do you know the criteria for activating the Small Functor Optimization? (It's not just being small!) We'll also look at bind(), mem_fn(), C&#43;&#43;17's invoke(), and more. — Stephan T. Lavavej is a Senior Developer at Microsoft. Since 2007, he's worked with Dinkumware to maintain Visual C&#43;&#43;'s implementation of the C&#43;&#43; Standard Library. He also designed a couple of C&#43;&#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn't own any). — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2e42b15642db486c901ca57201006044">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V005</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V005</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — functional gained lots of machinery in C&amp;#43;&amp;#43;11, with further changes in C&amp;#43;&amp;#43;14 and C&amp;#43;&amp;#43;17. This talk will cover what&#39;s new in 11/14/17, focusing on how to use it properly. For example, you&#39;ve probably used std::function, but do you know the criteria for activating the Small Functor Optimization? (It&#39;s not just being small!) We&#39;ll also look at bind(), mem_fn(), C&amp;#43;&amp;#43;17&#39;s invoke(), and more. — Stephan T. Lavavej is a Senior Developer at Microsoft. Since 2007, he&#39;s worked with Dinkumware to maintain Visual C&amp;#43;&amp;#43;&#39;s implementation of the C&amp;#43;&amp;#43; Standard Library. He also designed a couple of C&amp;#43;&amp;#43;14 features: make_unique and the transparent operator functors. He likes his initials (which people can actually spell) and cats (although he doesn&#39;t own any). — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3633</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V005</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Lavavej.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005.mp3" expression="full" duration="3633" fileSize="58131018" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005.mp4" expression="full" duration="3633" fileSize="106107696" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/befb/76a2e0a4-8a28-485e-8f8d-9c5fa2c4befb/CPPConD02V005_mid.mp4" expression="full" duration="3633" fileSize="276270875" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Lavavej.mp4" expression="full" duration="3633" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>3D Face Tracking and Reconstruction using Modern C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, I will present my work in computer vision, namely landmark detection and 3D face tracking, and the two C&#43;&#43; libraries that were developed in the process. The first part of the talk will give an introduction to detecting facial landmark points and work through a hello-world code example that presents and uses the superviseddescent library, a cross-platform library for cascaded regression that can be used to solve problems like landmark detection or pose estimation. The second part of the talk will present an approach that uses the found landmarks from the first part to use a 3D face model to track a person's face. With the library presented in the process, we hope to make 3D models easier to use and more widespread in the community. Both libraries are designed to be lightweight and simple to use, and try to follow modern C&#43;&#43;11/14 programming paradigms. The talk concludes with my views on code sustainability in academia and a wish list of standard library features for computer vision. — I'm a PhD student in computer vision at the Centre for Vision, Speech and Signal Processing of the University of Surrey, UK. My research is about using 3D face models to reconstruct a 3D face from a single 2D image, object tracking and facial landmark detection. My interest in C&#43;&#43; emerged in 2013 when I discovered the power of modern C&#43;&#43; programming, and I have since then open-sourced much of my research software. In my free time, I love to practice Yoga and I'm working towards obtaining my gliding license! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fa333c359d234715aab8a5720100603f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V004</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V004</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — In this talk, I will present my work in computer vision, namely landmark detection and 3D face tracking, and the two C&amp;#43;&amp;#43; libraries that were developed in the process. The first part of the talk will give an introduction to detecting facial landmark points and work through a hello-world code example that presents and uses the superviseddescent library, a cross-platform library for cascaded regression that can be used to solve problems like landmark detection or pose estimation. The second part of the talk will present an approach that uses the found landmarks from the first part to use a 3D face model to track a person&#39;s face. With the library presented in the process, we hope to make 3D models easier to use and more widespread in the community. Both libraries are designed to be lightweight and simple to use, and try to follow modern C&amp;#43;&amp;#43;11/14 programming paradigms. The talk concludes with my views on code sustainability in academia and a wish list of standard library features for computer vision. — I&#39;m a PhD student in computer vision at the Centre for Vision, Speech and Signal Processing of the University of Surrey, UK. My research is about using 3D face models to reconstruct a 3D face from a single 2D image, object tracking and facial landmark detection. My interest in C&amp;#43;&amp;#43; emerged in 2013 when I discovered the power of modern C&amp;#43;&amp;#43; programming, and I have since then open-sourced much of my research software. In my free time, I love to practice Yoga and I&#39;m working towards obtaining my gliding license! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2255</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V004</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Huber_v2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004.mp3" expression="full" duration="2255" fileSize="36082890" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004.mp4" expression="full" duration="2255" fileSize="50894142" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7d3c/72896ecc-9f9a-45b5-b6e6-26f8f5b17d3c/CPPConD02V004_mid.mp4" expression="full" duration="2255" fileSize="198209831" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Huber_v2.mp4" expression="full" duration="2255" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>From Functional to Parallel: Stochastic Modeling in C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Come with us as we take a legacy MFC financial modelling application that is largely function in design and transform it to something new. We will take a portion of this large financial simulation application and change its single threaded ways into parallel processing stochastic model. Transforming single class’s with a hodge-podge of functions into an object oriented parallel design using c&#43;&#43; amp and implementing Stochastic modelling methodology. Aside from focusing on the key portions of converting functional single threaded code to a parallel design we will also touch on some of the details of financial modeling for interest rate risk. — I started writing software before I finished grade school and have spent my life in technology since then. I currently write primarily Windows based financial applications in C&#43;&#43;. My passion is in producing not only quality code, but software that works for businesses. As much as I love trying to find the most elegant solution to a problem, I realize the client needs the solution that keeps them in business just as much. I enjoy trying to find the best of both. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f7504e9cb2ed4d17a026a5720100603a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V003</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V003</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Come with us as we take a legacy MFC financial modelling application that is largely function in design and transform it to something new. We will take a portion of this large financial simulation application and change its single threaded ways into parallel processing stochastic model. Transforming single class’s with a hodge-podge of functions into an object oriented parallel design using c&amp;#43;&amp;#43; amp and implementing Stochastic modelling methodology. Aside from focusing on the key portions of converting functional single threaded code to a parallel design we will also touch on some of the details of financial modeling for interest rate risk. — I started writing software before I finished grade school and have spent my life in technology since then. I currently write primarily Windows based financial applications in C&amp;#43;&amp;#43;. My passion is in producing not only quality code, but software that works for businesses. As much as I love trying to find the most elegant solution to a problem, I realize the client needs the solution that keeps them in business just as much. I enjoy trying to find the best of both. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3482</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V003</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Carpenter.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003.mp3" expression="full" duration="3482" fileSize="55726794" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003.mp4" expression="full" duration="3482" fileSize="65187950" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/891e/64fde70a-bbd1-4e25-825d-224a6f5c891e/CPPConD02V003_mid.mp4" expression="full" duration="3482" fileSize="187877958" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900_Carpenter.mp4" expression="full" duration="3482" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Organizational Leadership with Modern C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — With the &quot;C&#43;&#43; Renaissance&quot; it is imperative that the technical leadership prove their mettle to lead a large organization into adopting modern practices and idioms. In this talk, John and Kevin will discuss various techniques that they have employed to help drive their large development organization (~ 75 software engineers) towards a culture of modernization - some techniques that have worked well, and some that have not. This will not be a discussion on specifics and nuances of the language. This is more a &quot;fuzzy&quot; discussion on what it means to be both at the forefront of the language and a leader / champion for your peers. — Kevin Kostrzewa: My first piece of published software was in 1983, on a Commodore 64, published in Commodore Power/Play magazine. I have been a professional programmer since 1992 working for Thomson Reuters (originally Creative Solutions) working initially in C/DOS and now primarily in C&#43;&#43;/Windows. John Wyman: I have been working at Thomson Reuters (then Creative Solutions) since 1999. There I develop a US Tax application that contains modules for most conceivable forms of US Tax. US Tax makes for a dynamic code base and a strong desire for efficiency, making C&#43;&#43; our tool of choice. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ca6be4618af94e5f850ea57201006031">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V002</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V002</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — With the &amp;quot;C&amp;#43;&amp;#43; Renaissance&amp;quot; it is imperative that the technical leadership prove their mettle to lead a large organization into adopting modern practices and idioms. In this talk, John and Kevin will discuss various techniques that they have employed to help drive their large development organization (~ 75 software engineers) towards a culture of modernization - some techniques that have worked well, and some that have not. This will not be a discussion on specifics and nuances of the language. This is more a &amp;quot;fuzzy&amp;quot; discussion on what it means to be both at the forefront of the language and a leader / champion for your peers. — Kevin Kostrzewa: My first piece of published software was in 1983, on a Commodore 64, published in Commodore Power/Play magazine. I have been a professional programmer since 1992 working for Thomson Reuters (originally Creative Solutions) working initially in C/DOS and now primarily in C&amp;#43;&amp;#43;/Windows. John Wyman: I have been working at Thomson Reuters (then Creative Solutions) since 1999. There I develop a US Tax application that contains modules for most conceivable forms of US Tax. US Tax makes for a dynamic code base and a strong desire for efficiency, making C&amp;#43;&amp;#43; our tool of choice. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1720</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V002</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900-Wynman.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002.mp3" expression="full" duration="1720" fileSize="27525066" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002.mp4" expression="full" duration="1720" fileSize="42663872" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2ef8/a15f73ef-e814-4910-b6be-1189a51e2ef8/CPPConD02V002_mid.mp4" expression="full" duration="1720" fileSize="111666202" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900-Wynman.mp4" expression="full" duration="1720" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>completion T : Improving the future T with monads</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — std::future provides us a mechanism for asynchronous communication between a provider and receiver. However, the C&#43;&#43;14 standard does not allow for actual asynchronous programming, as the only ways to interact with an std::future are blocking calls. The proposed then helps, but the interface is awkward and can be extremely slow when handling exceptions. Here, I will talk about completion a high-performance, async-only and monadic alternative to std::future and how it is used at SolidFire. — Travis work at SolidFire on a high-performance, fault-tolerant distributed system, where he is responsible for developing tools to make building systems easier and safer. He is a bit of a programming language nerd and is a big fan of where Rust is going (eventually). If you find Travis during the day without coffee or during the night without whiskey, there is a problem. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:9e8619a07cd649ea9c93a57201006023">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V001</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V001</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — std::future provides us a mechanism for asynchronous communication between a provider and receiver. However, the C&amp;#43;&amp;#43;14 standard does not allow for actual asynchronous programming, as the only ways to interact with an std::future are blocking calls. The proposed then helps, but the interface is awkward and can be extremely slow when handling exceptions. Here, I will talk about completion a high-performance, async-only and monadic alternative to std::future and how it is used at SolidFire. — Travis work at SolidFire on a high-performance, fault-tolerant distributed system, where he is responsible for developing tools to make building systems easier and safer. He is a bit of a programming language nerd and is a big fan of where Rust is going (eventually). If you find Travis during the day without coffee or during the night without whiskey, there is a problem. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>1940</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD02V001</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900-Gockel.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001.mp3" expression="full" duration="1940" fileSize="31052874" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001.mp4" expression="full" duration="1940" fileSize="52497774" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/b44f/dd99f43a-70f2-4772-b12e-d8db8409b44f/CPPConD02V001_mid.mp4" expression="full" duration="1940" fileSize="138031891" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0922-0900-Gockel.mp4" expression="full" duration="1940" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Grill the Committee</title>
    <description><![CDATA[The panel is made up of members of the C&#43;&#43; Standards Committee and the audience asks the questions. — Jon Kalb, Chandler Carruth, Marshall Clow, Lawrence Crowl, Gabriel Dos Reis, Richard Smith, Bjarne Stroustrup, Herb Sutter, Ville Voutilanien, Michael Wong — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5e26e0c434bc41308f33a5720100601e">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V023</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V023</link>
    <itunes:summary>The panel is made up of members of the C&amp;#43;&amp;#43; Standards Committee and the audience asks the questions. — Jon Kalb, Chandler Carruth, Marshall Clow, Lawrence Crowl, Gabriel Dos Reis, Richard Smith, Bjarne Stroustrup, Herb Sutter, Ville Voutilanien, Michael Wong — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>5480</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V023</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-2030_GrillPanel.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023.mp3" expression="full" duration="5480" fileSize="87685962" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023.mp4" expression="full" duration="5480" fileSize="396493578" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0f33/b2da4375-6d4a-42b2-abad-5102bb660f33/CPPConD01V023_mid.mp4" expression="full" duration="5480" fileSize="1841892653" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-2030_GrillPanel.mp4" expression="full" duration="5480" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Doxygen to DoxyPress: A Journey from C++98 to C++11</title>
    <description><![CDATA[“Doxygen to DoxyPress: A Journey from C&#43;&#43;98 to C&#43;&#43;11” — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This presentation will discuss the benefits of using a documentation generator for creating internal code documentation or end user documentation. DoxyPress can be used to document your source code, generate API documentation, show class hierarchies, collaboration diagrams, and much more. DoxyPress supports several output formats including html, chm, latex, and man pages. As part of our talk we will cover the process of redesigning source code originally designed for C&#43;&#43;98 and how to migrate it to C&#43;&#43;11. We will talk about the advantages and drawbacks of moving to C&#43;&#43;11 and show how the code changed in DoxyPress. We will show a small demonstration of DoxyPressApp, which is a a GUI program used to set up your project file which is then used by DoxyPress to generate documentation. DoxyPress is a fork of the Doxygen documentation tool. A very basic understanding of C&#43;&#43; will be helpful. No prior knowledge of DoxyPress or Doxygen is required. — Barbara Geller: I am an independent consultant with over twenty-five years of experience as a programmer and software developer. I have worked with numerous smaller companies developing in-house applications. I have also designed and developed Windows applications for several vertical markets including medical billing, transportation, and construction. My degree is in Electrical Engineering from Cal Poly Pomona with additional studies in Computer Science. I am a Co-founder of CopperSpice, a C&#43;&#43; library derived from the existing Qt framework. I designed the Diamond Editor, a cross-platform programmers editor using the CopperSpice libraries. I have programmed in C&#43;&#43;, Qt, Visual Objects, Clipper, PHP, and Java. Ansel Sermersheim: I have been working as a programmer for over fifteen years. My degree is in Computer Science from Cal Poly San Luis Obispo. Currently I work as a software engineer designing scalable, high performance, multi-threaded network daemons in C&#43;&#43;. The daemons I have developed are used at a Tier 1 carrier serving static and live content to customers around the world. I am a Co-founder of CopperSpice, a C&#43;&#43; library derived from the existing Qt 4.8 framework. I have programmed in C&#43;&#43;, C, Lisp, Java, and Perl. I am an avid follower of the C&#43;&#43; standard. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:33f05d238e854a4b9a74a57201006015">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V022</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V022</link>
    <itunes:summary>“Doxygen to DoxyPress: A Journey from C&amp;#43;&amp;#43;98 to C&amp;#43;&amp;#43;11” — Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This presentation will discuss the benefits of using a documentation generator for creating internal code documentation or end user documentation. DoxyPress can be used to document your source code, generate API documentation, show class hierarchies, collaboration diagrams, and much more. DoxyPress supports several output formats including html, chm, latex, and man pages. As part of our talk we will cover the process of redesigning source code originally designed for C&amp;#43;&amp;#43;98 and how to migrate it to C&amp;#43;&amp;#43;11. We will talk about the advantages and drawbacks of moving to C&amp;#43;&amp;#43;11 and show how the code changed in DoxyPress. We will show a small demonstration of DoxyPressApp, which is a a GUI program used to set up your project file which is then used by DoxyPress to generate documentation. DoxyPress is a fork of the Doxygen documentation tool. A very basic understanding of C&amp;#43;&amp;#43; will be helpful. No prior knowledge of DoxyPress or Doxygen is required. — Barbara Geller: I am an independent consultant with over twenty-five years of experience as a programmer and software developer. I have worked with numerous smaller companies developing in-house applications. I have also designed and developed Windows applications for several vertical markets including medical billing, transportation, and construction. My degree is in Electrical Engineering from Cal Poly Pomona with additional studies in Computer Science. I am a Co-founder of CopperSpice, a C&amp;#43;&amp;#43; library derived from the existing Qt framework. I designed the Diamond Editor, a cross-platform programmers editor using the CopperSpice libraries. I have programmed in C&amp;#43;&amp;#43;, Qt, Visual Objects, Clipper, PHP, and Java. Ansel Sermersheim: I have been working as a programmer for over fifteen years. My </itunes:summary>
    <itunes:duration>3853</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V022</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Sermersheim.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022.mp3" expression="full" duration="3853" fileSize="61651914" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022.mp4" expression="full" duration="3853" fileSize="147607403" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/4fb0/b0985552-62ee-4979-97ce-a52c7a564fb0/CPPConD01V022_mid.mp4" expression="full" duration="3853" fileSize="582173784" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Sermersheim.mp4" expression="full" duration="3853" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Functional Design Explained</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — An oft-cited benefit of learning a functional language is that it changes one's approach to solving problems for the better. The functional approach has such a strict emphasis on simplistic and highly composable solutions that an otherwise varied landscape of solution possibilities narrows down to only a few novel options. This talk introduces functional design and showcases its application to several real-world problems. It will briefly cover denotational semantics and several math-based programming abstractions. Finally, the talk will conclude with a comparison of functional solutions to the results more traditional design methodologies. No prior knowledge of functional programming or functional programming languages is required for this talk. All the examples make use of the C&#43;&#43; programming language. — David Sankel is a professional software developer/architect based in the USA. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&#43;&#43;Now! conferences and is especially well known for his advanced functional programming in C&#43;&#43; talks. David's current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for the software firm, Stellar Science. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:78754c3db439499391b8a5720100600b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V021</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V021</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — An oft-cited benefit of learning a functional language is that it changes one&#39;s approach to solving problems for the better. The functional approach has such a strict emphasis on simplistic and highly composable solutions that an otherwise varied landscape of solution possibilities narrows down to only a few novel options. This talk introduces functional design and showcases its application to several real-world problems. It will briefly cover denotational semantics and several math-based programming abstractions. Finally, the talk will conclude with a comparison of functional solutions to the results more traditional design methodologies. No prior knowledge of functional programming or functional programming languages is required for this talk. All the examples make use of the C&amp;#43;&amp;#43; programming language. — David Sankel is a professional software developer/architect based in the USA. His prolific software developments have included CAD/CAM, computer graphics, visual programming languages, web applications, computer vision, and cryptography. He is a frequent speaker at the C&amp;#43;&amp;#43;Now! conferences and is especially well known for his advanced functional programming in C&amp;#43;&amp;#43; talks. David&#39;s current research interests include dependently typed languages, semantic domains, EDSLs, and functional reactive programming. He currently works for the software firm, Stellar Science. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2927</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V021</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Sankel.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021.mp3" expression="full" duration="2927" fileSize="46846794" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021.mp4" expression="full" duration="2927" fileSize="89143349" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8296/4b61b593-13ff-4fa8-a674-aec6484f8296/CPPConD01V021_mid.mp4" expression="full" duration="2927" fileSize="288418606" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Sankel.mp4" expression="full" duration="2927" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Live Lock-Free or Deadlock (Practical Lock-free Programming)&#160;Part II</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to lock-free programming. We will cover the fundamentals of lock-free vs lock-based programming, explore the reasons to write lock-free programs as well as the reasons not to. We will learn, or be reminded, of the basic tools of lock-free programming and consider few simple examples. To make sure you stay on for part II, we will try something beyond the simple examples, for example, a lock-free list, just to see how insanely complex the problems can get. Part II: having been burned on the complexities of generic lock-free algorithms in part I, we take a more practical approach: assuming we are not all writing STL, what limitations can we really live with? Turns out that there are some inherent limitations imposed by the nature of the concurrent problem: is here really such a thing as “concurrent queue” (yes, sort of) and we can take advantages of these limitations (what an idea, concurrency actually makes something easier!) Then there are practical limitations that most application programmers can accept: is there really such a thing as a “lock-free queue” (may be, and you don’t need it). We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying assumptions used in this talk do not apply to your problem, the main idea to take away is how to find such assumptions and take advantage of them, because, chances are, you can use lock-free techniques and write code that works for you and is much simpler than what you learned before. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:fc66d85fc0d74bea8242a5720100600a">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V020</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V020</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to lock-free programming. We will cover the fundamentals of lock-free vs lock-based programming, explore the reasons to write lock-free programs as well as the reasons not to. We will learn, or be reminded, of the basic tools of lock-free programming and consider few simple examples. To make sure you stay on for part II, we will try something beyond the simple examples, for example, a lock-free list, just to see how insanely complex the problems can get. Part II: having been burned on the complexities of generic lock-free algorithms in part I, we take a more practical approach: assuming we are not all writing STL, what limitations can we really live with? Turns out that there are some inherent limitations imposed by the nature of the concurrent problem: is here really such a thing as “concurrent queue” (yes, sort of) and we can take advantages of these limitations (what an idea, concurrency actually makes something easier!) Then there are practical limitations that most application programmers can accept: is there really such a thing as a “lock-free queue” (may be, and you don’t need it). We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying assumptions used in this talk do not apply to your problem, the main idea to take away is how to find such assumptions and take advantage of them, because, chances are, you can use lock-free techniques and write code that works for you and is much simpler than what you learned before. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics</itunes:summary>
    <itunes:duration>5420</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V020</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Pikus.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020.mp3" expression="full" duration="5420" fileSize="86725578" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020.mp4" expression="full" duration="5420" fileSize="206799471" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d6c7/5093c12a-98b7-4b6a-b62b-041bd155d6c7/CPPConD01V020_mid.mp4" expression="full" duration="5420" fileSize="675726904" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Pikus.mp4" expression="full" duration="5420" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ for cross-platform VR</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This talk is an overview of how C&#43;&#43; can be used to quickly create cross-platform virtual reality experiences while sharing one codebase. To support all major vendors, a VR experience has to span not only across operating systems, but also device types, hardware specs, manufacturers, and SDKs -- and so pitfalls and learnings from shipping on Oculus mobile and desktop, Google Cardboard, and soon Sony's Morpheus will be discussed. We'll cover networking, graphics, SDK wrappers, and even abstracting language oddities (Android's Java layer for Oculus mobile). — Nick is a VR/AR engineer who is passionate about bridging the interface between computers and humans. Currently he's VP of Software Development at OTOY focusing on VR and AR (&quot;mixed/digital reality&quot;). He was a cofounder of everyAir, a pioneering P2P game streaming application which was later acquired. Before that he worked at Microsoft on Office 2010 and 2013. Feel free to talk to me about any rendering, real-time graphics, computer vision, and of course C&#43;&#43;! — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f4c3d3433ae34af9aa42a57201006004">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V019</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V019</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This talk is an overview of how C&amp;#43;&amp;#43; can be used to quickly create cross-platform virtual reality experiences while sharing one codebase. To support all major vendors, a VR experience has to span not only across operating systems, but also device types, hardware specs, manufacturers, and SDKs -- and so pitfalls and learnings from shipping on Oculus mobile and desktop, Google Cardboard, and soon Sony&#39;s Morpheus will be discussed. We&#39;ll cover networking, graphics, SDK wrappers, and even abstracting language oddities (Android&#39;s Java layer for Oculus mobile). — Nick is a VR/AR engineer who is passionate about bridging the interface between computers and humans. Currently he&#39;s VP of Software Development at OTOY focusing on VR and AR (&amp;quot;mixed/digital reality&amp;quot;). He was a cofounder of everyAir, a pioneering P2P game streaming application which was later acquired. Before that he worked at Microsoft on Office 2010 and 2013. Feel free to talk to me about any rendering, real-time graphics, computer vision, and of course C&amp;#43;&amp;#43;! — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>2257</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V019</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Lazareff.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019.mp3" expression="full" duration="2257" fileSize="36120522" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019.mp4" expression="full" duration="2257" fileSize="56210709" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/238f/0d60aca0-da6b-4bf9-9b02-add7f424238f/CPPConD01V019_mid.mp4" expression="full" duration="2257" fileSize="252467798" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Lazareff.mp4" expression="full" duration="2257" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Expression Templates: Past, Present, Future Part III</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&#43;&#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&#43;&#43;11 and C&#43;&#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&#43;&#43;1*, this idiom has a meaningful set of applciations and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ca30a6ddedcf42d59c60a57201005ffb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V018</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V018</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&amp;#43;&amp;#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&amp;#43;&amp;#43;1*, this idiom has a meaningful set of applciations and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of h</itunes:summary>
    <itunes:duration>3008</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V018</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Falcou.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018.mp3" expression="full" duration="3008" fileSize="48137802" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018.mp4" expression="full" duration="3008" fileSize="77626215" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/c66f/f63d7e5e-c551-4316-a731-1b5e4c32c66f/CPPConD01V018_mid.mp4" expression="full" duration="3008" fileSize="263187087" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Falcou.mp4" expression="full" duration="3008" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Using Spirit X3 to Write Parsers</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Parsing is a common problem in many domains. The complexity of using a library often pushes developers to ad-hoc solutions utilizing std::string manipulations, regular expressions, or nested if/switch statements. Most “quick hack” implementations are unmaintainable. Spirit provides a Domain Specific Embedded Language (DSEL) that allows grammars to be described in a natural and declarative manner just like writing PEG or EBNF directly in your C&#43;&#43; code. X3 is the third major release of the Spirit library and improves both compile and run times while simplifying the much of the library. In this tutorial session you will be introduced to Spirit X3, attribute parsing, and variety of tips to writing efficient and maintainable parsers. We will build a JSON parser during the session to illustrate techniques and usage of the library. This session is applicable toward anyone needing to parse data. — Michael Caisse has been crafting code in C&#43;&#43; for nearly 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&#43;&#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn't fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4541a2d60dee41f6bd92a57201005ff5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V017</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V017</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Parsing is a common problem in many domains. The complexity of using a library often pushes developers to ad-hoc solutions utilizing std::string manipulations, regular expressions, or nested if/switch statements. Most “quick hack” implementations are unmaintainable. Spirit provides a Domain Specific Embedded Language (DSEL) that allows grammars to be described in a natural and declarative manner just like writing PEG or EBNF directly in your C&amp;#43;&amp;#43; code. X3 is the third major release of the Spirit library and improves both compile and run times while simplifying the much of the library. In this tutorial session you will be introduced to Spirit X3, attribute parsing, and variety of tips to writing efficient and maintainable parsers. We will build a JSON parser during the session to illustrate techniques and usage of the library. This session is applicable toward anyone needing to parse data. — Michael Caisse has been crafting code in C&amp;#43;&amp;#43; for nearly 25-years. He is a regular speaker at various conferences and is passionate about teaching and training. Michael is the owner of Ciere Consulting which provides software consulting and contracting services, C&amp;#43;&amp;#43; training, and Project Recovery for failing multidisciplinary engineering projects. When he isn&#39;t fighting with compilers or robots, he enjoys fencing with a sabre. :: ciere.com — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3649</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V017</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Caisse.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017.mp3" expression="full" duration="3649" fileSize="58394442" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017.mp4" expression="full" duration="3649" fileSize="91746343" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/6971/113b6bed-73a9-48a6-8fc7-77d0d8e96971/CPPConD01V017_mid.mp4" expression="full" duration="3649" fileSize="291729910" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1645_Caisse.mp4" expression="full" duration="3649" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Haskell Design Patterns for Genericity &amp; Asynchronous Behavior</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The paper explores some of Haskell's support for genericity through type classes, Functors, Monads, and Continuations and their impact on lanugages such as C&#43;&#43;, Scala, and Rust. We explore these language features and consider alternatives that have been proposed to existing language features, including Object Algebras, GADTs, Open data types, open pattern matching, and extensions to Haskell's type system that impact the type inference algorithm and decidability. We use a number of case studies to demonstrate what proposed solutions look like in the target languages, considering how easy they are to use and how well the solutions integrate with existing linguistic features. — Sherri Shulman is a member of the faculty in Computer Science at The Evergreen State College I have been teaching at Evergreen for 23 years. My primary interests include language design, the role of types in programming, comparative programming languages, and higher order programming and its impact on software reuse. I regularly teach introduction to programming using Haskell and then transition to C and C&#43;&#43;. I particularly like showing how different languages address similar problems, and how ideas from one language can be reflected in others. C&#43;&#43; interests include generic programming, functional programming features, and higher order forms. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:46ea439e92de4986ae70a57201005fef">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V016</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V016</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The paper explores some of Haskell&#39;s support for genericity through type classes, Functors, Monads, and Continuations and their impact on lanugages such as C&amp;#43;&amp;#43;, Scala, and Rust. We explore these language features and consider alternatives that have been proposed to existing language features, including Object Algebras, GADTs, Open data types, open pattern matching, and extensions to Haskell&#39;s type system that impact the type inference algorithm and decidability. We use a number of case studies to demonstrate what proposed solutions look like in the target languages, considering how easy they are to use and how well the solutions integrate with existing linguistic features. — Sherri Shulman is a member of the faculty in Computer Science at The Evergreen State College I have been teaching at Evergreen for 23 years. My primary interests include language design, the role of types in programming, comparative programming languages, and higher order programming and its impact on software reuse. I regularly teach introduction to programming using Haskell and then transition to C and C&amp;#43;&amp;#43;. I particularly like showing how different languages address similar problems, and how ideas from one language can be reflected in others. C&amp;#43;&amp;#43; interests include generic programming, functional programming features, and higher order forms. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3531</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V016</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Shulman.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016.mp3" expression="full" duration="3531" fileSize="56498634" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016.mp4" expression="full" duration="3531" fileSize="105510982" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/eead/120d79d3-c658-44e2-b0d5-025f9667eead/CPPConD01V016_mid.mp4" expression="full" duration="3531" fileSize="345967333" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Shulman.mp4" expression="full" duration="3531" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>constexpr: Introduction</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I'm excited about constexpr. It's probably my favorite C&#43;&#43;11 feature and it's gotten even better with C&#43;&#43;14. This talk will introduce constexpr to the uninitiated. We'll start with C&#43;&#43;11 and continue into the improvements introduced with C&#43;&#43;14. We'll look into useful ways to think about constexpr code. We'll also cover some tips and tricks with writing constexpr code. — If you ask his children, they will tell you that Scott has been writing software since dinosaurs roamed the earth. In 1996 Scott learned C&#43;&#43; by working through the exercises in Stroustrup's TC&#43;&#43;PL 2nd edition and he has never looked back. Scott is currently working at Ripple Labs developing open source crypto-financial software. When he's not writing code Scott plays the Chapman Stick, sings rock and roll, and spends time with his lovely wife. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:ff0e8e5cda3f4c028ed6a57201005fe4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V015</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V015</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — I&#39;m excited about constexpr. It&#39;s probably my favorite C&amp;#43;&amp;#43;11 feature and it&#39;s gotten even better with C&amp;#43;&amp;#43;14. This talk will introduce constexpr to the uninitiated. We&#39;ll start with C&amp;#43;&amp;#43;11 and continue into the improvements introduced with C&amp;#43;&amp;#43;14. We&#39;ll look into useful ways to think about constexpr code. We&#39;ll also cover some tips and tricks with writing constexpr code. — If you ask his children, they will tell you that Scott has been writing software since dinosaurs roamed the earth. In 1996 Scott learned C&amp;#43;&amp;#43; by working through the exercises in Stroustrup&#39;s TC&amp;#43;&amp;#43;PL 2nd edition and he has never looked back. Scott is currently working at Ripple Labs developing open source crypto-financial software. When he&#39;s not writing code Scott plays the Chapman Stick, sings rock and roll, and spends time with his lovely wife. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3846</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V015</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Schurr.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015.mp3" expression="full" duration="3846" fileSize="61539018" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015.mp4" expression="full" duration="3846" fileSize="115136043" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f4b1/1d846f82-6d98-4640-bb8f-62b4c6e6f4b1/CPPConD01V015_mid.mp4" expression="full" duration="3846" fileSize="306164857" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Schurr.mp4" expression="full" duration="3846" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Live Lock-Free or Deadlock (Practical Lock-free Programming) Part I</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to lock-free programming. We will cover the fundamentals of lock-free vs lock-based programming, explore the reasons to write lock-free programs as well as the reasons not to. We will learn, or be reminded, of the basic tools of lock-free programming and consider few simple examples. To make sure you stay on for part II, we will try something beyond the simple examples, for example, a lock-free list, just to see how insanely complex the problems can get. Part II: having been burned on the complexities of generic lock-free algorithms in part I, we take a more practical approach: assuming we are not all writing STL, what limitations can we really live with? Turns out that there are some inherent limitations imposed by the nature of the concurrent problem: is here really such a thing as “concurrent queue” (yes, sort of) and we can take advantages of these limitations (what an idea, concurrency actually makes something easier!) Then there are practical limitations that most application programmers can accept: is there really such a thing as a “lock-free queue” (may be, and you don’t need it). We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying assumptions used in this talk do not apply to your problem, the main idea to take away is how to find such assumptions and take advantage of them, because, chances are, you can use lock-free techniques and write code that works for you and is much simpler than what you learned before. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics in 1998 when he made a switch from academic research in computational physics to software industry. His responsibilities as a Chief Scientist include planning long-term technical direction of Calibre products, directing and training the engineers who work on these products, design and architecture of the software, and research in new design and software technologies. Fedor has over 25 patents and over 90 papers and conference presentations on physics, EDA, software design, and C&#43;&#43; language. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:87d3d680c04447228a17a57201005fdd">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V014</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V014</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Part I: Introduction to lock-free programming. We will cover the fundamentals of lock-free vs lock-based programming, explore the reasons to write lock-free programs as well as the reasons not to. We will learn, or be reminded, of the basic tools of lock-free programming and consider few simple examples. To make sure you stay on for part II, we will try something beyond the simple examples, for example, a lock-free list, just to see how insanely complex the problems can get. Part II: having been burned on the complexities of generic lock-free algorithms in part I, we take a more practical approach: assuming we are not all writing STL, what limitations can we really live with? Turns out that there are some inherent limitations imposed by the nature of the concurrent problem: is here really such a thing as “concurrent queue” (yes, sort of) and we can take advantages of these limitations (what an idea, concurrency actually makes something easier!) Then there are practical limitations that most application programmers can accept: is there really such a thing as a “lock-free queue” (may be, and you don’t need it). We will explore practical examples of (mostly) lock-free data structures, with actual implementations and performance measurements. Even if the specific limitations and simplifying assumptions used in this talk do not apply to your problem, the main idea to take away is how to find such assumptions and take advantage of them, because, chances are, you can use lock-free techniques and write code that works for you and is much simpler than what you learned before. — Fedor G Pikus is a Chief Engineering Scientist in the Design to Silicon division of Mentor Graphics Corp. His earlier positions included a Senior Software Engineer at Google, and a Chief Software Architect for Calibre PERC, LVS, DFM at Mentor Graphics. He joined Mentor Graphics</itunes:summary>
    <itunes:duration>2325</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V014</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Pikus.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014.mp3" expression="full" duration="2325" fileSize="37211082" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014.mp4" expression="full" duration="2325" fileSize="84137214" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/15e9/d22e44be-e643-4608-b181-c7ae411015e9/CPPConD01V014_mid.mp4" expression="full" duration="2325" fileSize="252222547" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Pikus.mp4" expression="full" duration="2325" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Expression Templates: Past, Present, Future Part II</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&#43;&#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&#43;&#43;11 and C&#43;&#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&#43;&#43;1*, this idiom has a meaningful set of applications and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:958fa146b6e041088e2fa57201005fd4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V013</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V013</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&amp;#43;&amp;#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&amp;#43;&amp;#43;1*, this idiom has a meaningful set of applications and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of h</itunes:summary>
    <itunes:duration>3523</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V013</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Falcou.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013.mp3" expression="full" duration="3523" fileSize="56376906" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013.mp4" expression="full" duration="3523" fileSize="83167487" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/0754/b7c547ec-6f40-49d5-92ce-0267971c0754/CPPConD01V013_mid.mp4" expression="full" duration="3523" fileSize="262321345" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Falcou.mp4" expression="full" duration="3523" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>C++ in the Audio Industry</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Sound is an essential medium for human-computer interaction and vital for applications such as games and music production software. In the audio industry, C&#43;&#43; is the dominating programming language. This talk provides an insight into the patterns and tools that C&#43;&#43; developers in the audio industry rely on. There are interesting lessons to be learned from this domain that can be useful to every C&#43;&#43; developer. Handling audio in real time presents interesting technical challenges. Techniques also used in other C&#43;&#43; domains have to be combined: real-time multithreading, lock-free programming, efficient DSP, SIMD, and low-latency hardware communication. C&#43;&#43; is the language of choice to tie all these requirements together. Clever leveraging of advanced C&#43;&#43; techniques, template metaprogramming, and the new C&#43;&#43;11/14 standard makes these tasks more exciting than ever. — Timur Doumler is Senior Software Developer at London-based technology company ROLI. He is working with Julian Storer to further develop JUCE, the leading cross-platform framework for creating audio applications that is used by hundreds of companies in the audio industry. After five years of writing high-performance code in Fortran, C, and C&#43;&#43; for numerical simulations of the cosmic structure formation, Timur became committed to audio and music production software. Before joining ROLI, he worked on various projects at market-leading company Native Instruments, such as KONTAKT, the industry standard sampling platform used by the majority of music producers and composers for film score, games, and contemporary popular music. Timur holds a PhD in astrophysics and is passionate about well-written code, modern C&#43;&#43; techniques, science-fiction, learning languages, and progressive rock music. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:8c2141a3d7e5401fb19da57201005fc9">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V012</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V012</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Sound is an essential medium for human-computer interaction and vital for applications such as games and music production software. In the audio industry, C&amp;#43;&amp;#43; is the dominating programming language. This talk provides an insight into the patterns and tools that C&amp;#43;&amp;#43; developers in the audio industry rely on. There are interesting lessons to be learned from this domain that can be useful to every C&amp;#43;&amp;#43; developer. Handling audio in real time presents interesting technical challenges. Techniques also used in other C&amp;#43;&amp;#43; domains have to be combined: real-time multithreading, lock-free programming, efficient DSP, SIMD, and low-latency hardware communication. C&amp;#43;&amp;#43; is the language of choice to tie all these requirements together. Clever leveraging of advanced C&amp;#43;&amp;#43; techniques, template metaprogramming, and the new C&amp;#43;&amp;#43;11/14 standard makes these tasks more exciting than ever. — Timur Doumler is Senior Software Developer at London-based technology company ROLI. He is working with Julian Storer to further develop JUCE, the leading cross-platform framework for creating audio applications that is used by hundreds of companies in the audio industry. After five years of writing high-performance code in Fortran, C, and C&amp;#43;&amp;#43; for numerical simulations of the cosmic structure formation, Timur became committed to audio and music production software. Before joining ROLI, he worked on various projects at market-leading company Native Instruments, such as KONTAKT, the industry standard sampling platform used by the majority of music producers and composers for film score, games, and contemporary popular music. Timur holds a PhD in astrophysics and is passionate about well-written code, modern C&amp;#43;&amp;#43; techniques, science-fiction, learning languages, and progressive rock music. — Videos Filmed &amp;amp; Edited by </itunes:summary>
    <itunes:duration>3823</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V012</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Doumler.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012.mp3" expression="full" duration="3823" fileSize="61175754" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012.mp4" expression="full" duration="3823" fileSize="107622062" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/71a8/a9e8e5a4-688a-4fd3-b2b7-3dddf9c671a8/CPPConD01V012_mid.mp4" expression="full" duration="3823" fileSize="331953060" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1515_Doumler.mp4" expression="full" duration="3823" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Memory and C++ debugging at Electronic Arts</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Scott Wardle a senior software engineer Electronic Arts will talk about the current memory and C&#43;&#43; debugging setup and tools used in games. PS4 and Xbox One have virtual memory and 64 bit address spaces, GPU and CPU are getting closer in the ability to work virtual memory. So our tools are getting better and better and closer to PCs. Most of a games memory goes towards art and level data like bitmap textures and polygon meshes. So artist and designer need to understand how much their data takes up. Giving them call stacks of memory allocations does not help. They want to know how big is a group of building is. Why is this group of building bigger than this one? Maybe this one has some animation data or one of the textures is too big. But there are 10,000s of objects built by 100s of people all around the world. — Hey Everyone, I am Scott Wardle, I have been in games over 20 years. Much of that in EA Canada Vancouver (though I started my career in EA Japan.). I like to solve hard problems. I love good data visualization and metric systems and using them to fix hard bugs. Also, I like to find good interfaces that use both tech and people together to flip throw hard problems such that they become easy and solve them selves. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:5a55e88cde354914b676a57201005fc5">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V011</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V011</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Scott Wardle a senior software engineer Electronic Arts will talk about the current memory and C&amp;#43;&amp;#43; debugging setup and tools used in games. PS4 and Xbox One have virtual memory and 64 bit address spaces, GPU and CPU are getting closer in the ability to work virtual memory. So our tools are getting better and better and closer to PCs. Most of a games memory goes towards art and level data like bitmap textures and polygon meshes. So artist and designer need to understand how much their data takes up. Giving them call stacks of memory allocations does not help. They want to know how big is a group of building is. Why is this group of building bigger than this one? Maybe this one has some animation data or one of the textures is too big. But there are 10,000s of objects built by 100s of people all around the world. — Hey Everyone, I am Scott Wardle, I have been in games over 20 years. Much of that in EA Canada Vancouver (though I started my career in EA Japan.). I like to solve hard problems. I love good data visualization and metric systems and using them to fix hard bugs. Also, I like to find good interfaces that use both tech and people together to flip throw hard problems such that they become easy and solve them selves. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3469</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V011</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Wardle.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011.mp3" expression="full" duration="3469" fileSize="55516746" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011.mp4" expression="full" duration="3469" fileSize="118268726" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8df9/a5587b5a-5372-46d4-b75b-74e579228df9/CPPConD01V011_mid.mp4" expression="full" duration="3469" fileSize="420729558" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Wardle.mp4" expression="full" duration="3469" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>CLANG + C2 - Engineering/Futures/Measurements</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The talk will cover the CLANG &#43; c2.dll compiler for the Microsoft platform. It will contain parts of the talk given at //Build 2015 that can be found on line: &quot;Compiling Objective-C Using the Visual Studio 2015 C&#43;&#43; Code Generation that Builds Windows, SQL, .Net, and Office&quot;. The focus this time will be on C&#43;&#43;. The talk will disclose the architecture of how we tied the CLANG open source front end with the Microsoft optimizing backends (several configurations are needed) and how far we are from providing a CTP for public consumption targeting 4 different architectures. Included in this section will be a disclosure of data on compile time, memory consumption, conformance and correctness. In addition the talk will cover the nuts and bolts of several key innovative compiler and runtime technologies we will be delivering in the Visual Studio 2015 updates (Fall, Winter and Spring). New investments in the compiler and runtime space include: Improved optimization and auto-vectorization, more secure code generation, incremental whole program compilation, and new asynchronous C&#43;&#43; code generation. — James Radigan: Dev. Manager - Code Gen Technologies, Microsoft — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:aafc052e6d6348cf9123a57201005fbb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V010</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V010</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The talk will cover the CLANG &amp;#43; c2.dll compiler for the Microsoft platform. It will contain parts of the talk given at //Build 2015 that can be found on line: &amp;quot;Compiling Objective-C Using the Visual Studio 2015 C&amp;#43;&amp;#43; Code Generation that Builds Windows, SQL, .Net, and Office&amp;quot;. The focus this time will be on C&amp;#43;&amp;#43;. The talk will disclose the architecture of how we tied the CLANG open source front end with the Microsoft optimizing backends (several configurations are needed) and how far we are from providing a CTP for public consumption targeting 4 different architectures. Included in this section will be a disclosure of data on compile time, memory consumption, conformance and correctness. In addition the talk will cover the nuts and bolts of several key innovative compiler and runtime technologies we will be delivering in the Visual Studio 2015 updates (Fall, Winter and Spring). New investments in the compiler and runtime space include: Improved optimization and auto-vectorization, more secure code generation, incremental whole program compilation, and new asynchronous C&amp;#43;&amp;#43; code generation. — James Radigan: Dev. Manager - Code Gen Technologies, Microsoft — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3773</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V010</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Radigan_v2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010.mp3" expression="full" duration="3773" fileSize="60374730" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010.mp4" expression="full" duration="3773" fileSize="104084997" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/5c99/05a2994a-fe77-4951-8b2e-d806f22c5c99/CPPConD01V010_mid.mp4" expression="full" duration="3773" fileSize="495799972" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Radigan_v2.mp4" expression="full" duration="3773" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Lambdas from First Principles: A Whirlwind Tour of C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lambdas (even those mysterious generic lambdas) are just syntactic sugar atop constructs that are perfectly understandable when approached from the right direction. We'll start with the implementation of C-style functions, then move to overloading, function templates, non-static member functions, C&#43;&#43;11 lambdas, and then demystify C&#43;&#43;14 generic (&quot;auto&quot;) lambdas. Finally, we'll detour into the implementations of std::function and std::bind to show how they're different from lambdas. — Arthur O'Dwyer worked for many years at Green Hills Software, making the world's most optimizing C and C&#43;&#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&#43;&#43; meetup. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:2e7e05393d594d1db808a57201005fb7">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V009</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V009</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Lambdas (even those mysterious generic lambdas) are just syntactic sugar atop constructs that are perfectly understandable when approached from the right direction. We&#39;ll start with the implementation of C-style functions, then move to overloading, function templates, non-static member functions, C&amp;#43;&amp;#43;11 lambdas, and then demystify C&amp;#43;&amp;#43;14 generic (&amp;quot;auto&amp;quot;) lambdas. Finally, we&#39;ll detour into the implementations of std::function and std::bind to show how they&#39;re different from lambdas. — Arthur O&#39;Dwyer worked for many years at Green Hills Software, making the world&#39;s most optimizing C and C&amp;#43;&amp;#43; compilers. Now he works at Mixpanel in San Francisco, where he organizes a monthly C&amp;#43;&amp;#43; meetup. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3533</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V009</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_high.mp4" length="2160570578" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009.mp3" expression="full" duration="3533" fileSize="56532810" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009.mp4" expression="full" duration="3533" fileSize="95510372" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_high.mp4" expression="full" duration="3533" fileSize="2160570578" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/a14c/a5dd3b71-ccd3-43f9-ab59-1e42cd10a14c/CPPConD01V009_mid.mp4" expression="full" duration="3533" fileSize="489315964" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Advanced Unit Testing in C &amp; C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This session goes in-depth into advanced techniques to isolate and unit test C&#43;&#43; classes, especially those in legacy code that isn't easy to change. This builds on the Pragmatic Unit Testing in C&#43;&#43; talk from last year, with live code examples of safe refactorings, injecting mock objects, and potential pitfalls across different platforms and toolchains. — Matt's first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &quot;the making of the making of&quot;. Matt lives in San Francisco with his husband of 14 years. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:4dfe951d0cd54725b816a57201005fad">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V008</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V008</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — This session goes in-depth into advanced techniques to isolate and unit test C&amp;#43;&amp;#43; classes, especially those in legacy code that isn&#39;t easy to change. This builds on the Pragmatic Unit Testing in C&amp;#43;&amp;#43; talk from last year, with live code examples of safe refactorings, injecting mock objects, and potential pitfalls across different platforms and toolchains. — Matt&#39;s first programming was on a TI 99/4a with his mother, and his first reverse engineering was on an 8086 to make shareware games easier to finish. Matt co-authored Pragmatic Unit Testing in C#, and has spoken at conferences around the world on network security, reverse engineering, unit testing, and static analysis. His hobbies include world travel, playing video games, and writing/publishing indie pop songs under the moniker &amp;quot;the making of the making of&amp;quot;. Matt lives in San Francisco with his husband of 14 years. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3648</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V008</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Hargett.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008.mp3" expression="full" duration="3648" fileSize="58380618" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008.mp4" expression="full" duration="3648" fileSize="99527809" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/abe1/51e004a3-a0ef-48df-830a-e2f4f72eabe1/CPPConD01V008_mid.mp4" expression="full" duration="3648" fileSize="255751257" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Hargett.mp4" expression="full" duration="3648" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Expression Templates: Past, Present, Future Part I</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&#43;&#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&#43;&#43;11 and C&#43;&#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&#43;&#43;1*, this idiom has a meaningful set of applications and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of high-performance computing systems. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:d9480bed1eed45d28460a57201005fa4">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V007</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V007</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Expression Templates is one of this C&amp;#43;&amp;#43; idiom people learn to either love or hate. The main issues with ET is that everubody has its own conception about what they are, when they should be used, what benefits they give and what are their trade off. For a long time, Expression Tempaltes has been seen has a way to improve temporary heavy code. If the seminal implementation of ET by Todd Veldhuizen was actually about this, the landscape has changed since C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14. This workshop will go over : - what are exactly Expression Templates and what kind of use case they can solve elegantly and efficiently - what are the benefits that one may reap by using expression tempalte in its library - what are the real cost of expressont empaltes both at runtime and compile-time - which tools to use to not reinvent the tempalte wheel everytime including an introduction to Boost.PROTO an Boost.HANA. The main objective is to clarify why, even in C&amp;#43;&amp;#43;1*, this idiom has a meaningful set of applications and how to navigate around its pitfalls. — Joel Falcou is an assistant professor at the University Paris-Sud and researcher at the Laboratoire de Recherche d’Informatique in Orsay, France. His research focuses on studying generative programming idioms and techniques to design tools for parallel software development. The two main parts of those works are: exploration of Embedded Domain Specific Language design for parallel computing on various architectures and the definition of a formal framework for reasoning about meta-programs and prove their compile-time correctness. Applications range from real-time image processing on embedded architectures to High Performance Computing on multi-core clusters. He is a NumScale SAS scientific advisor. NumScale mission is to assist businesses in the exploration and subsequently the mastery of h</itunes:summary>
    <itunes:duration>3965</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V007</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Falcou.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007.mp3" expression="full" duration="3965" fileSize="63446346" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007.mp4" expression="full" duration="3965" fileSize="100060301" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/250d/f7d97144-b3ba-4a41-b50d-44de23ac250d/CPPConD01V007_mid.mp4" expression="full" duration="3965" fileSize="336864676" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1400_Falcou.mp4" expression="full" duration="3965" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Modern User Interfaces for C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The C&#43;&#43; language evolved significantly in the recent past, and so did many frameworks and libraries in the big ecosystem surrounding it. For twenty years now, Qt is being used on a multitude of platforms to create native looking, compelling graphical user interfaces. It offers C&#43;&#43; libraries and tools for building desktop, mobile and embedded applications. Qt gives engineers APIs for developing using two dimensional controls, integrating 3D using OpenGL, embedding web content, as well as a new declarative domain-specific language called QML, which is extensible using C&#43;&#43;. Qt is also much more than a UI toolkit and provides a multitude of helper libraries for various use-cases, such as localization, database access, XML and JSON parsing and much more. During this talk, I will give an introduction to Qt and present its capabilities in how it can be utilized to write modern UIs using C&#43;&#43;, both in 2D as well as 3D. Additionally, I will show how some of its features, like the integrated web engine or QML, can be leveraged to go beyond C&#43;&#43;. While at it, I hope to clear up some outdated misconceptions about Qt and its relationship to standard C&#43;&#43; and the STL as well as Boost and other libraries. Finally, I will present the KDE Frameworks, an open source collection of high quality, cross platform Qt libraries that are being used by the KDE Software Collection. KDE frameworks are to Qt as Boost is to the STL. Recent development makes it simpler than ever to use these libraries in external applications. — Milian Wolff works as a Software Engineer at KDAB, an expert Qt, C&#43;&#43; and OpenGL consultancy. He contributes to Qt and KDE for several years now. Besides that, improving tooling around C&#43;&#43; development is of huge interest to him: As the co-maintainer of the KDevelop IDE, he is currently integrating Clang there to replace the handwritten C&#43;&#43; parser and semantic analyzer. Performance of C&#43;&#43; code is very important to him, and he wrote tools such as Massif-Visualizer and heaptrack to guide developers in finding issues in their code bases. He holds a Master of Science in physics and is enthusiastic about Free Open Source Software in general and Linux and KDE in particular. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:6ec78cdbb8ab4ed98e59a57201005f9f">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V006</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V006</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — The C&amp;#43;&amp;#43; language evolved significantly in the recent past, and so did many frameworks and libraries in the big ecosystem surrounding it. For twenty years now, Qt is being used on a multitude of platforms to create native looking, compelling graphical user interfaces. It offers C&amp;#43;&amp;#43; libraries and tools for building desktop, mobile and embedded applications. Qt gives engineers APIs for developing using two dimensional controls, integrating 3D using OpenGL, embedding web content, as well as a new declarative domain-specific language called QML, which is extensible using C&amp;#43;&amp;#43;. Qt is also much more than a UI toolkit and provides a multitude of helper libraries for various use-cases, such as localization, database access, XML and JSON parsing and much more. During this talk, I will give an introduction to Qt and present its capabilities in how it can be utilized to write modern UIs using C&amp;#43;&amp;#43;, both in 2D as well as 3D. Additionally, I will show how some of its features, like the integrated web engine or QML, can be leveraged to go beyond C&amp;#43;&amp;#43;. While at it, I hope to clear up some outdated misconceptions about Qt and its relationship to standard C&amp;#43;&amp;#43; and the STL as well as Boost and other libraries. Finally, I will present the KDE Frameworks, an open source collection of high quality, cross platform Qt libraries that are being used by the KDE Software Collection. KDE frameworks are to Qt as Boost is to the STL. Recent development makes it simpler than ever to use these libraries in external applications. — Milian Wolff works as a Software Engineer at KDAB, an expert Qt, C&amp;#43;&amp;#43; and OpenGL consultancy. He contributes to Qt and KDE for several years now. Besides that, improving tooling around C&amp;#43;&amp;#43; development is of huge interest to him: As the co-maintainer of the KDevelop IDE, he is currently inte</itunes:summary>
    <itunes:duration>3537</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V006</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Wolff.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006.mp3" expression="full" duration="3537" fileSize="56608458" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006.mp4" expression="full" duration="3537" fileSize="113399235" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8cdf/c54d1efc-c598-492a-9967-5127164b8cdf/CPPConD01V006_mid.mp4" expression="full" duration="3537" fileSize="452111562" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Wolff.mp4" expression="full" duration="3537" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Executors for C++ - A Long Story ...</title>
    <description><![CDATA[Detlef Vollmann “Executors for C&#43;&#43; - A Long Story Stuggling for a Base Concurrency Building Block” -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Executors will be a base building block in C&#43;&#43; for asynchronous, concurrent and parallel work. The job of an executor is simple: run the tasks that are posted. So the first proposals for executors in C&#43;&#43; had a very simple interface. However, being a building block, the executor should provide an interface that's useful for all kind of higher level abstractions and needs to work together with different types of concurrency, like co-operative multi-tasking or GPU like hardware. This presentation will look at the evolution of the executor proposals for C&#43;&#43; and what they'll provide for normal application programmers. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:3987a0eba7434b6cbda5a57201005f96">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V005</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V005</link>
    <itunes:summary>Detlef Vollmann “Executors for C&amp;#43;&amp;#43; - A Long Story Stuggling for a Base Concurrency Building Block” -- Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Executors will be a base building block in C&amp;#43;&amp;#43; for asynchronous, concurrent and parallel work. The job of an executor is simple: run the tasks that are posted. So the first proposals for executors in C&amp;#43;&amp;#43; had a very simple interface. However, being a building block, the executor should provide an interface that&#39;s useful for all kind of higher level abstractions and needs to work together with different types of concurrency, like co-operative multi-tasking or GPU like hardware. This presentation will look at the evolution of the executor proposals for C&amp;#43;&amp;#43; and what they&#39;ll provide for normal application programmers. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3643</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V005</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Vollman.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005.mp3" expression="full" duration="3643" fileSize="58302666" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005.mp4" expression="full" duration="3643" fileSize="98832180" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/f748/8ee569f9-eb88-4eb0-a853-cc62ea2af748/CPPConD01V005_mid.mp4" expression="full" duration="3643" fileSize="291335019" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Vollman.mp4" expression="full" duration="3643" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Reactive Stream Processing in Industrial IoT using DDS and Rx</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — 50 billion devices will be connected to the Internet by 2020. Many of them will belong to national critical infrastructure (smart power grids, smart roads, smart hospitals, smart cities) – forming the Industrial Internet of Things (IIoT). These devices will generate data streams that will need to be correlated, merged, filtered, and analyzed in real-time. This talk will explore an elegant solution to this problem that is productive, composable, concurrency-friendly, and scales well. We utilize OMG’s Data Distribution Service for Real-Time Systems (DDS) standard for connectivity, and Reactive Extensions (Rx) for functional-style composable asynchronous data processing in modern C&#43;&#43;. Rx is a generalization of futures and can be thought of as the async equivalent of C&#43;&#43; ranges. It helps create asynchronous data processing pipelines by chaining reusable higher-order functions (map, filter, flatmap, zip etc.) that rely on a common abstraction called an Observable (a continuation monad). RxCpp makes wonderful use of functional programming features in modern C&#43;&#43; including generic lambdas, type inference, variadic templates, and more. Conceptually, Rx is a generalization of futures. It lets programmers create asynchronous data processing pipelines (dataflow) from a number of reusable higher-order functions (map, filter, flatmap etc.) that share a common abstraction called an Observable. In many ways, Rx is an “async equivalent of C&#43;&#43; ranges”. Rx is one of the best libraries that truly highlights the power of functional design principles applied in object-oriented programming languages. DDS and Rx work great together because they are both reactive, use the publish-subscribe paradigm, and facilitate loose coupling between components. This presentation will discuss Rx4DDS [link=http://bit.ly/cppcon-rx4dds], which is a research library that integrates Rx with RTI Connext DDS. Rx4DDS enables a clean, distributed, asynchronous dataflow architecture for stream processing and is available in C#, C&#43;&#43;, and JavaScript. References: [1] Rx4DDS [link=http://bit.ly/cppcon-rx4dds] [2] Reactive Programming with DDS and Rx [slides: see above] [video=https://vimeo.com/125712582] — Sumant Tambe is Principal Research Engineer at Real-Time Innovations (RTI)—the leading communications platform provider for the Industrial Internet of Things. At RTI, Sumant uses cutting-edge technologies to improve RTI’s software product-line through government-funded research projects. He develops and maintains a number of standards related to Data Distribution Service (DDS), which is a data-centric publish-subscribe middleware for Industrial Internet of Things. He has over 13 years of experience using C&#43;&#43; and has released closed- and open-source C&#43;&#43; software that solve complex problems ranging from distributed systems to meta-programming. He maintains the “More C&#43;&#43; Idioms” wikibook and the “C&#43;&#43; Truths” blog. He received consecutive Microsoft Most Valuable Professional (MVP) awards in Visual C&#43;&#43; area (2013-2015). Sumant has a Ph.D. in Computer Science from Vanderbilt University. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:1b40e6d8747b4508b056a57201005f91">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V004</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V004</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — 50 billion devices will be connected to the Internet by 2020. Many of them will belong to national critical infrastructure (smart power grids, smart roads, smart hospitals, smart cities) – forming the Industrial Internet of Things (IIoT). These devices will generate data streams that will need to be correlated, merged, filtered, and analyzed in real-time. This talk will explore an elegant solution to this problem that is productive, composable, concurrency-friendly, and scales well. We utilize OMG’s Data Distribution Service for Real-Time Systems (DDS) standard for connectivity, and Reactive Extensions (Rx) for functional-style composable asynchronous data processing in modern C&amp;#43;&amp;#43;. Rx is a generalization of futures and can be thought of as the async equivalent of C&amp;#43;&amp;#43; ranges. It helps create asynchronous data processing pipelines by chaining reusable higher-order functions (map, filter, flatmap, zip etc.) that rely on a common abstraction called an Observable (a continuation monad). RxCpp makes wonderful use of functional programming features in modern C&amp;#43;&amp;#43; including generic lambdas, type inference, variadic templates, and more. Conceptually, Rx is a generalization of futures. It lets programmers create asynchronous data processing pipelines (dataflow) from a number of reusable higher-order functions (map, filter, flatmap etc.) that share a common abstraction called an Observable. In many ways, Rx is an “async equivalent of C&amp;#43;&amp;#43; ranges”. Rx is one of the best libraries that truly highlights the power of functional design principles applied in object-oriented programming languages. DDS and Rx work great together because they are both reactive, use the publish-subscribe paradigm, and facilitate loose coupling between components. This presentation will discuss Rx4DDS [link=http://bit.ly/cppcon-rx4dds], which is a res</itunes:summary>
    <itunes:duration>4207</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V004</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Tambe_v2.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004.mp3" expression="full" duration="4207" fileSize="67324362" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004.mp4" expression="full" duration="4207" fileSize="131036365" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/fa27/5edbc3a3-f425-423b-8e1b-fee9ce5dfa27/CPPConD01V004_mid.mp4" expression="full" duration="4207" fileSize="503313348" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Tambe_v2.mp4" expression="full" duration="4207" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Variadic Templates in C++11 / C++14 - An Introduction</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Writing class templates and functions accepting a variable number of arguments has been a burden before C&#43;&#43;11. With variadic templates, both class templates with a variable number of arguments as well as functions can be formulated much easier and more type safe way. Nevertheless, the authoring of variadic templates can be challenging for the uninitiated. Even the interpretation of variadic template code can be a problem, as Olve Maudal's famous pub quiz shows. This session will build up understanding and the ability to use and author variadic template functions and variadic template classes from easy examples up to more complicated applications such as employing std::forward correctly, std::integer_sequence and other upcoming language features such as a template UDL operator that bridges the gap between string literals and std::integer_sequence. Understanding pack expansion, sizeof... and other hard to get on first sight issues are my goal. In the end you should have seen guidelines that help you avoid the template instantiation trap from the pub quiz and correct usage of std::forward in your variadic templates. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&#43;&#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&#43;&#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:f35bae2ed27145368852a57201005f8d">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V003</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V003</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — Writing class templates and functions accepting a variable number of arguments has been a burden before C&amp;#43;&amp;#43;11. With variadic templates, both class templates with a variable number of arguments as well as functions can be formulated much easier and more type safe way. Nevertheless, the authoring of variadic templates can be challenging for the uninitiated. Even the interpretation of variadic template code can be a problem, as Olve Maudal&#39;s famous pub quiz shows. This session will build up understanding and the ability to use and author variadic template functions and variadic template classes from easy examples up to more complicated applications such as employing std::forward correctly, std::integer_sequence and other upcoming language features such as a template UDL operator that bridges the gap between string literals and std::integer_sequence. Understanding pack expansion, sizeof... and other hard to get on first sight issues are my goal. In the end you should have seen guidelines that help you avoid the template instantiation trap from the pub quiz and correct usage of std::forward in your variadic templates. — Prof. Peter Sommerlad is director of IFS Institute for Software at FHO HSR Rapperswil where he inspired the C&amp;#43;&amp;#43; IDE Cevelop. Peter is co-author of the books POSA Vol.1 and Security Patterns. His goal is to make software simpler by Decremental Development: Refactoring software down to 10% its size with better architecture, testability and quality and functionality. Peter is a member of the C&amp;#43;&amp;#43; standardization committee, ACCU, ACM, IEEE Computer Society. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3843</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V003</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Sommerlad.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003.mp3" expression="full" duration="3843" fileSize="61493322" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003.mp4" expression="full" duration="3843" fileSize="125938412" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/e952/66340c79-d79e-4eae-a464-247ed40ee952/CPPConD01V003_mid.mp4" expression="full" duration="3843" fileSize="360502196" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Sommerlad.mp4" expression="full" duration="3843" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Beyond Sanitizers...</title>
    <description><![CDATA[CppCon 2015: Kostya Serebryany “Beyond Sanitizers: Fuzzing and Hardening your C&#43;&#43; apps for Security &amp; Reliability” Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — At CppCon’2014 we presented the Sanitizers, a family of dynamic testing tools for C&#43;&#43;. These tools allow you to find many stability and security bugs in C&#43;&#43; code, but they are only as good as your tests are. In this talk we will show how to improve your tests with guided fuzzing and how to protect your applications in production even if some bugs were not found. Fuzzing, or fuzz testing, is a surprisingly effective technique that allows you to discover new interesting test inputs. Coverage-guided fuzzing uses coverage-like code instrumentation to make fuzzing orders of magnitude more efficient. Taint-guided fuzzing goes even further by using taint tracking techniques. The next line of defense may be incorporated directly into production: the Control Flow Integrity instrumentation allows you to protect your program from corrupted function pointers (including pointers to virtual tables) and separating stack variables from the call stack protects from corrupted return addresses -- both with near-zero overhead. We will concentrate on particular tools implemented in the opensource LLVM toolchain (libFuzzer, DataFlowSanitizer, -fsanitize=cfi,safe_stack), but will also discuss several alternatives. — Konstantin (Kostya) Serebryany is a Software Engineer at Google. His team develops and deploys dynamic testing tools, such as AddressSanitizer and ThreadSanitizer. Prior to joining Google in 2007, Konstantin spent 4 years at Elbrus/MCST working for Sun compiler lab and then 3 years at Intel Compiler Lab. Konstantin holds a PhD from mesi.ru and a Master from msu.ru.Twitter handle: @kayseesee — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:531d560594ed4036b094a57201005f83">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V002</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V002</link>
    <itunes:summary>CppCon 2015: Kostya Serebryany “Beyond Sanitizers: Fuzzing and Hardening your C&amp;#43;&amp;#43; apps for Security &amp;amp; Reliability” Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — At CppCon’2014 we presented the Sanitizers, a family of dynamic testing tools for C&amp;#43;&amp;#43;. These tools allow you to find many stability and security bugs in C&amp;#43;&amp;#43; code, but they are only as good as your tests are. In this talk we will show how to improve your tests with guided fuzzing and how to protect your applications in production even if some bugs were not found. Fuzzing, or fuzz testing, is a surprisingly effective technique that allows you to discover new interesting test inputs. Coverage-guided fuzzing uses coverage-like code instrumentation to make fuzzing orders of magnitude more efficient. Taint-guided fuzzing goes even further by using taint tracking techniques. The next line of defense may be incorporated directly into production: the Control Flow Integrity instrumentation allows you to protect your program from corrupted function pointers (including pointers to virtual tables) and separating stack variables from the call stack protects from corrupted return addresses -- both with near-zero overhead. We will concentrate on particular tools implemented in the opensource LLVM toolchain (libFuzzer, DataFlowSanitizer, -fsanitize=cfi,safe_stack), but will also discuss several alternatives. — Konstantin (Kostya) Serebryany is a Software Engineer at Google. His team develops and deploys dynamic testing tools, such as AddressSanitizer and ThreadSanitizer. Prior to joining Google in 2007, Konstantin spent 4 years at Elbrus/MCST working for Sun compiler lab and then 3 years at Intel Compiler Lab. Konstantin holds a PhD from mesi.ru and a Master from msu.ru.Twitter handle: @kayseesee — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3554</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V002</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Serebryany.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002.mp3" expression="full" duration="3554" fileSize="56880330" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002.mp4" expression="full" duration="3554" fileSize="102126350" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/ca96/edf0a638-9df3-4372-b639-a7cc8b3dca96/CPPConD01V002_mid.mp4" expression="full" duration="3554" fileSize="325786606" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Serebryany.mp4" expression="full" duration="3554" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Implementation of a component-based entity system in modern C++</title>
    <description><![CDATA[Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — An alternative to deep inheritance trees for game and application architecture design is &quot;composition&quot;. Separating data (in independent components) from logic (in independent systems) allows the code to be more reusable and more efficient, alongside additional benefits. Using modern C&#43;&#43;11 and C&#43;&#43;14 features, it is possible to design an efficient and user-friendly component-based entity system library, with intuitive syntax and convenient cost-free abstractions. — Vittorio Romeo is an Italian 20 year old Computer Science student at &quot;Università degli Studi di Messina&quot;. He began programming at a very young age and soon became a C&#43;&#43; enthusiast. While following the evolution of the C&#43;&#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. — Videos Filmed &amp; Edited by Bash Films: http://www.BashFilms.com <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:598b2104212d48c1b177a57201005f70">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V001</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V001</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015 — An alternative to deep inheritance trees for game and application architecture design is &amp;quot;composition&amp;quot;. Separating data (in independent components) from logic (in independent systems) allows the code to be more reusable and more efficient, alongside additional benefits. Using modern C&amp;#43;&amp;#43;11 and C&amp;#43;&amp;#43;14 features, it is possible to design an efficient and user-friendly component-based entity system library, with intuitive syntax and convenient cost-free abstractions. — Vittorio Romeo is an Italian 20 year old Computer Science student at &amp;quot;Universit&#224; degli Studi di Messina&amp;quot;. He began programming at a very young age and soon became a C&amp;#43;&amp;#43; enthusiast. While following the evolution of the C&amp;#43;&amp;#43; standard and embracing the newest features, he worked on several open-source projects, including modern general-purpose libraries and free cross-platform indie games. — Videos Filmed &amp;amp; Edited by Bash Films: http://www.BashFilms.com</itunes:summary>
    <itunes:duration>3885</itunes:duration>
    <pubDate>Fri, 18 Dec 2015 23:36:47 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/CPPConD01V001</guid>
    <dc:creator></dc:creator>
    <category>c++</category>
    <enclosure url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Romeo.mp4" length="1" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001.mp3" expression="full" duration="3885" fileSize="62162634" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001.mp4" expression="full" duration="3885" fileSize="115081603" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/d0c9/4205b859-54f4-4848-b008-caecb1eed0c9/CPPConD01V001_mid.mp4" expression="full" duration="3885" fileSize="433674819" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/sessions/cpp/2015/C15_0921-1100_Romeo.mp4" expression="full" duration="3885" fileSize="1" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Ranges for the Standard Library</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at: <a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/cppcon/cppcon2015" href="https://github.com/cppcon/cppcon2015" target="_blank" rel="nofollow">https://github.com/cppcon/cppcon2015</a><br>—<br>Range-based interfaces are functional and composable, and lead to code that is correct by construction. With concepts and ranges coming to the STL, big changes are in store for the Standard Library and for the style of idiomatic C&#43;&#43;. The effort to redefine the Standard Library is picking up pace. Come hear about one potential future of the STL from one of the key people driving the change.<br>— <br>I've been doing C&#43;&#43; professionally for the past 20 years, first for Microsoft, then as an independent consultant. Right now, I'm working on bringing the power of &quot;concepts&quot; and &quot;ranges&quot; to the Standard Library with the generous help of the Standard C&#43;&#43; Foundation. Ask me about the future of the Standard Library, or about range-v3, my reference implementation for C&#43;&#43;11.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:33ad69d26a4e417283a1a523013dec76">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/Ranges-for-the-Standard-Library</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/Ranges-for-the-Standard-Library</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at: https://github.com/cppcon/cppcon2015—Range-based interfaces are functional and composable, and lead to code that is correct by construction. With concepts and ranges coming to the STL, big changes are in store for the Standard Library and for the style of idiomatic C&amp;#43;&amp;#43;. The effort to redefine the Standard Library is picking up pace. Come hear about one potential future of the STL from one of the key people driving the change.— I&#39;ve been doing C&amp;#43;&amp;#43; professionally for the past 20 years, first for Microsoft, then as an independent consultant. Right now, I&#39;m working on bringing the power of &amp;quot;concepts&amp;quot; and &amp;quot;ranges&amp;quot; to the Standard Library with the generous help of the Standard C&amp;#43;&amp;#43; Foundation. Ask me about the future of the Standard Library, or about range-v3, my reference implementation for C&amp;#43;&amp;#43;11. </itunes:summary>
    <itunes:duration>5646</itunes:duration>
    <pubDate>Wed, 30 Sep 2015 19:18:55 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/Ranges-for-the-Standard-Library</guid>
    <dc:creator>Eric Niebler</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_high.mp4" length="2969572569" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/33ad69d26a4e417283a1a523013dec76/CppCon2015Niebler.mp4" expression="full" duration="5646" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary.mp3" expression="full" duration="5646" fileSize="90348230" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary.mp4" expression="full" duration="5646" fileSize="222132586" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary.webm" expression="full" duration="5646" fileSize="647059145" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_high.mp4" expression="full" duration="5646" fileSize="2969572569" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/2273/eb1a0ecd-b80e-4a15-bc7a-31cf5e9c2273/RangesfortheStandardLibrary_mid.mp4" expression="full" duration="5646" fileSize="940587440" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Tuning C++: Benchmarks, and CPUs, and Compilers! Oh My!</title>
    <description><![CDATA[<p>A primary use case for C&#43;&#43; is low latency, low overhead, high performance code. But C&#43;&#43; does not give you these things for free, it gives you the tools to control these things and achieve them where needed. How do you realize this potential of the language? How do you tune your C&#43;&#43; code and achieve the necessary performance metrics?<br><br>This talk will walk through the process of tuning C&#43;&#43; code from benchmarking to performance analysis. It will focus on small scale performance problems ranging from loop kernels to data structures and algorithms. It will show you how to write benchmarks that effectively measure different aspects of performance even in the face of advanced compiler optimizations and bedeviling modern CPUs. It will also show how to analyze the performance of your benchmark, understand its behavior as well as the CPUs behavior, and use a wide array of tools available to isolate and pinpoint performance problems. The tools and some processor details will be Linux and x86 specific, but the techniques and concepts should be broadly applicable.<br>--<br>Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google's distributed build system. He makes guest appearances helping to maintain a few core C&#43;&#43; libraries across Google's codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master's thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:48f61e9505b043b7b720a5220181d981">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/Tuning-C-Benchmarks-and-CPUs-and-Compilers-Oh-My</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/Tuning-C-Benchmarks-and-CPUs-and-Compilers-Oh-My</link>
    <itunes:summary>A primary use case for C&amp;#43;&amp;#43; is low latency, low overhead, high performance code. But C&amp;#43;&amp;#43; does not give you these things for free, it gives you the tools to control these things and achieve them where needed. How do you realize this potential of the language? How do you tune your C&amp;#43;&amp;#43; code and achieve the necessary performance metrics?This talk will walk through the process of tuning C&amp;#43;&amp;#43; code from benchmarking to performance analysis. It will focus on small scale performance problems ranging from loop kernels to data structures and algorithms. It will show you how to write benchmarks that effectively measure different aspects of performance even in the face of advanced compiler optimizations and bedeviling modern CPUs. It will also show how to analyze the performance of your benchmark, understand its behavior as well as the CPUs behavior, and use a wide array of tools available to isolate and pinpoint performance problems. The tools and some processor details will be Linux and x86 specific, but the techniques and concepts should be broadly applicable.--Chandler Carruth leads the Clang team at Google, building better diagnostics, tools, and more. Previously, he worked on several pieces of Google&#39;s distributed build system. He makes guest appearances helping to maintain a few core C&amp;#43;&amp;#43; libraries across Google&#39;s codebase, and is active in the LLVM and Clang open source communities. He received his M.S. and B.S. in Computer Science from Wake Forest University, but disavows all knowledge of the contents of his Master&#39;s thesis. He is regularly found drinking Cherry Coke Zero in the daytime and pontificating over a single malt scotch in the evening. </itunes:summary>
    <itunes:duration>5393</itunes:duration>
    <pubDate>Tue, 29 Sep 2015 23:26:34 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/Tuning-C-Benchmarks-and-CPUs-and-Compilers-Oh-My</guid>
    <dc:creator>Chandler Carruth</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_high.mp4" length="2491075862" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/48f61e9505b043b7b720a5220181d981/CppCon2015Carruth.mp4" expression="full" duration="5393" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth.mp3" expression="full" duration="5393" fileSize="86293190" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth.mp4" expression="full" duration="5393" fileSize="197341520" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth.webm" expression="full" duration="5393" fileSize="587744851" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_high.mp4" expression="full" duration="5393" fileSize="2491075862" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/108e/7e347e98-03da-49a0-ad90-9789a946108e/CppCon2015Carruth_mid.mp4" expression="full" duration="5393" fileSize="729335348" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Better Code: Data Structures</title>
    <description><![CDATA[<p>The standard library containers are often both misused and underused. Instead of creating new containers, applications are often structured with incidental data structures composed of objects referencing other object. This talk looks at some of the ways the standard containers can be better utilized and how creating (or using non-standard library) containers can greatly simplify code. The goal is no incidental data structures. <br>--<br>Sean Parent is a principal scientist and software architect for Adobe's mobile digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe's Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple's successful transition to PowerPC.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:a6fa381d336c44438a83a522017f66cb">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/Better-Code-Data-Structures</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/Better-Code-Data-Structures</link>
    <itunes:summary>The standard library containers are often both misused and underused. Instead of creating new containers, applications are often structured with incidental data structures composed of objects referencing other object. This talk looks at some of the ways the standard containers can be better utilized and how creating (or using non-standard library) containers can greatly simplify code. The goal is no incidental data structures. --Sean Parent is a principal scientist and software architect for Adobe&#39;s mobile digital imaging group. Sean has been at Adobe since 1993 when he joined as a senior engineer working on Photoshop and later managed Adobe&#39;s Software Technology Lab. In 2009 Sean spent a year at Google working on Chrome OS before returning to Adobe. From 1988 through 1993 Sean worked at Apple, where he was part of the system software team that developed the technologies allowing Apple&#39;s successful transition to PowerPC. </itunes:summary>
    <itunes:duration>3839</itunes:duration>
    <pubDate>Tue, 29 Sep 2015 23:17:59 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/Better-Code-Data-Structures</guid>
    <dc:creator>Sean Parent</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_high.mp4" length="1652417086" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/a6fa381d336c44438a83a522017f66cb/CPPCon2015Parent.mp4" expression="full" duration="3839" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent.mp3" expression="full" duration="3839" fileSize="61440710" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent.mp4" expression="full" duration="3839" fileSize="142295392" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent.webm" expression="full" duration="3839" fileSize="445263882" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_high.mp4" expression="full" duration="3839" fileSize="1652417086" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/8415/3f3643b6-2efc-4b90-b05e-605e88258415/CPPCon2015Parent_mid.mp4" expression="full" duration="3839" fileSize="497701225" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Writing Good C++14... By Default</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Sutter%20-%20CppCon%202015%20day%202%20plenary%20.pdf" href="https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Sutter%20-%20CppCon%202015%20day%202%20plenary%20.pdf" target="_blank" rel="nofollow">https://github.com/isocpp/CppCoreGuid...</a><br><br>Modern C&#43;&#43; is clean, safe, and fast. It continues to deliver better and simpler features than were previously available. How can we help most C&#43;&#43; programmers get the improved features by default, so that our code is better by upgrading to take full advantage of modern C&#43;&#43;?<br><br>This talk continues from Bjarne Stroustrup's Monday keynote to describe how the open C&#43;&#43; core guidelines project is the cornerstone of a broader effort to promote modern C&#43;&#43;. Using the same cross-platform effort Stroustrup described, this talk shows how to enable programmers write production-quality C&#43;&#43; code that is, among other benefits, type-safe and memory-safe by default – free of most classes of type errors, bounds errors, and leak/dangling errors – and still exemplary, efficient, and fully modern C&#43;&#43;.<br><br>Background reading: Bjarne Stroustrup's 2005 &quot;SELL&quot; paper, &quot;A rationale for semantically enhanced library languages,&quot; is important background for this talk.</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:c93bd9d6edc54d5187e4a522017ed70b">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C14-By-Default</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C14-By-Default</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/isocpp/CppCoreGuid...Modern C&amp;#43;&amp;#43; is clean, safe, and fast. It continues to deliver better and simpler features than were previously available. How can we help most C&amp;#43;&amp;#43; programmers get the improved features by default, so that our code is better by upgrading to take full advantage of modern C&amp;#43;&amp;#43;?This talk continues from Bjarne Stroustrup&#39;s Monday keynote to describe how the open C&amp;#43;&amp;#43; core guidelines project is the cornerstone of a broader effort to promote modern C&amp;#43;&amp;#43;. Using the same cross-platform effort Stroustrup described, this talk shows how to enable programmers write production-quality C&amp;#43;&amp;#43; code that is, among other benefits, type-safe and memory-safe by default – free of most classes of type errors, bounds errors, and leak/dangling errors – and still exemplary, efficient, and fully modern C&amp;#43;&amp;#43;.Background reading: Bjarne Stroustrup&#39;s 2005 &amp;quot;SELL&amp;quot; paper, &amp;quot;A rationale for semantically enhanced library languages,&amp;quot; is important background for this talk. </itunes:summary>
    <itunes:duration>5345</itunes:duration>
    <pubDate>Tue, 29 Sep 2015 23:14:02 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C14-By-Default</guid>
    <dc:creator>Herb Sutter</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_high.mp4" length="2190735393" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_960.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/c93bd9d6edc54d5187e4a522017ed70b/CppCon2015Sutter.mp4" expression="full" duration="5345" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter.mp3" expression="full" duration="5345" fileSize="85528646" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter.mp4" expression="full" duration="5345" fileSize="234884137" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter.webm" expression="full" duration="5345" fileSize="748641458" type="video/webm" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_high.mp4" expression="full" duration="5345" fileSize="2190735393" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/7a50/842c57b3-c95a-417e-a4a8-24141e7c7a50/CppCon2015Sutter_mid.mp4" expression="full" duration="5345" fileSize="751427833" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>
  <item>
    <title>Writing Good C++14</title>
    <description><![CDATA[<p>Presentation Slides, PDFs, Source Code and other presenter materials are available at:<a class="yt-uix-redirect-link" dir="ltr" title="https://github.com/isocpp/CppCoreGuidelines/blob/master/talks/Stroustrup%20-%20CppCon%202015%20keynote.pdf" href="https://www.youtube.com/redirect?q=https%3A%2F%2Fgithub.com%2Fisocpp%2FCppCoreGuidelines%2Fblob%2Fmaster%2Ftalks%2FStroustrup%2520-%2520CppCon%25202015%2520keynote.pdf&amp;redir_token=cSBEwpeZhRLDoBK1l75GiqGR8hN8MTQ0MzY1MjM4OUAxNDQzNTY1OTg5" target="_blank" rel="nofollow">https://github.com/isocpp/CppCoreGuid...</a><br><br>How do we use C&#43;&#43;14 to make our code better, rather than just different?&nbsp;How do we do so on a grand scale, rather than just for exceptional programmers? We need guidelines to help us progress from older styles, such as &quot;C with Classes&quot;, C, &quot;pure OO&quot;, etc. We need articulated rules to save us from each having to discover them for ourselves. Ideally, they should be machine-checkable, yet adjustable to serve specific needs.<br><br>In this talk, I describe a style of guidelines that can be deployed to help most C&#43;&#43; programmers. There could not be a single complete set of rules for everybody, but we are developing a set of rules for most C&#43;&#43; use. This core can be augmented with rules for specific application domains such as embedded systems and systems with stringent security requirements. The rules are prescriptive rather than merely sets of prohibitions, and about much more than code layout. I describe what the rules currently cover (e.g., interfaces, functions, resource management, and pointers). I describe tools and a few simple classes that can be used to support the guidelines.<br><br>The core guidelines and a guideline support library reference implementation will be open source projects freely available on all major platforms (initially, GCC, Clang, and Microsoft).</p> <img src="http://m.webtrends.com/dcs1wotjh10000w0irc493s0e_6x1g/njs.gif?dcssip=channel9.msdn.com&dcsuri=https://s.ch9.ms/Events/CPP/CppCon-2015/RSS/mp4high&WT.dl=0&WT.entryid=Session:RSSView:759e323f13ba4718a350a522017c79aa">]]></description>
    <comments>https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C-14</comments>
    <link>https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C-14</link>
    <itunes:summary>Presentation Slides, PDFs, Source Code and other presenter materials are available at:https://github.com/isocpp/CppCoreGuid...How do we use C&amp;#43;&amp;#43;14 to make our code better, rather than just different? How do we do so on a grand scale, rather than just for exceptional programmers? We need guidelines to help us progress from older styles, such as &amp;quot;C with Classes&amp;quot;, C, &amp;quot;pure OO&amp;quot;, etc. We need articulated rules to save us from each having to discover them for ourselves. Ideally, they should be machine-checkable, yet adjustable to serve specific needs.In this talk, I describe a style of guidelines that can be deployed to help most C&amp;#43;&amp;#43; programmers. There could not be a single complete set of rules for everybody, but we are developing a set of rules for most C&amp;#43;&amp;#43; use. This core can be augmented with rules for specific application domains such as embedded systems and systems with stringent security requirements. The rules are prescriptive rather than merely sets of prohibitions, and about much more than code layout. I describe what the rules currently cover (e.g., interfaces, functions, resource management, and pointers). I describe tools and a few simple classes that can be used to support the guidelines.The core guidelines and a guideline support library reference implementation will be open source projects freely available on all major platforms (initially, GCC, Clang, and Microsoft). </itunes:summary>
    <itunes:duration>6045</itunes:duration>
    <pubDate>Tue, 29 Sep 2015 23:09:23 GMT</pubDate>
    <guid isPermaLink="false">https://s.ch9.ms/Events/CPP/CppCon-2015/Writing-Good-C-14</guid>
    <dc:creator>Bjarne Stroustrup</dc:creator>
    <enclosure url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14.mp4" length="297242678" type="video/mp4"></enclosure>
		<media:thumbnail url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14_220.jpg" height="165" width="220"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14_512.jpg" height="288" width="512"></media:thumbnail><media:thumbnail url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14_Custom.jpg" height="540" width="960"></media:thumbnail>
				<media:group>          
					<media:content url="http://ch9northcentralus.blob.core.windows.net/mfupload/759e323f13ba4718a350a522017c79aa/CppCon2015Stroustrup.mp4" expression="full" duration="6045" fileSize="1" type="video/mp4" medium="video"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14.mp3" expression="full" duration="6045" fileSize="96733382" type="audio/mp3" medium="audio"></media:content>
					<media:content url="http://video.ch9.ms/ch9/cd7d/c6fce0d9-cc34-49a6-9f4f-3cf0eaa8cd7d/WritingGoodCpp14.mp4" expression="full" duration="6045" fileSize="297242678" type="video/mp4" medium="video"></media:content>
				</media:group>
  </item>    
</channel>
</rss>